
/* args: {} */
static uint8_t op_nop[] = {

};

static void op_nop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_nop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_nop_set_args(op, 0,0,0,op_idx);
}


/* args: {"b"=>[[16, 0, 7..10], [16, 8, 14..17]], "a"=>[[16, 8, 21..24], [16, 0, 28..31]]} */
static uint8_t op_move[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x88, 0x00, 0x10, 0xbc, 0x00, /*4: mov    0xbc1000(%rax),%rcx */
  0x48, 0x8b, 0x90, 0x08, 0x10, 0xbc, 0x00, /*b: mov    0xbc1008(%rax),%rdx */
  0x48, 0x89, 0x90, 0x08, 0x10, 0xab, 0x00, /*12: mov    %rdx,0xab1008(%rax) */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*19: mov    %rcx,0xab1000(%rax) */

};

static void op_move_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = b * 16 + 0;
  *((int32_t *)(op + 14)) = b * 16 + 8;
  *((int32_t *)(op + 21)) = a * 16 + 8;
  *((int32_t *)(op + 28)) = a * 16 + 0;
}

static void op_move_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_move_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[16, 0, 11..14], [16, 8, 18..21]], "a"=>[[16, 8, 25..28], [16, 0, 32..35]]} */
static uint8_t op_loadl[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x4f, 0x20,                   /*4: mov    0x20(%rdi),%rcx */
  0x48, 0x8b, 0x91, 0x00, 0x10, 0xbc, 0x00, /*8: mov    0xbc1000(%rcx),%rdx */
  0x48, 0x8b, 0x89, 0x08, 0x10, 0xbc, 0x00, /*f: mov    0xbc1008(%rcx),%rcx */
  0x48, 0x89, 0x88, 0x08, 0x10, 0xab, 0x00, /*16: mov    %rcx,0xab1008(%rax) */
  0x48, 0x89, 0x90, 0x00, 0x10, 0xab, 0x00, /*1d: mov    %rdx,0xab1000(%rax) */

};

static void op_loadl_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 11)) = b * 16 + 0;
  *((int32_t *)(op + 18)) = b * 16 + 8;
  *((int32_t *)(op + 25)) = a * 16 + 8;
  *((int32_t *)(op + 32)) = a * 16 + 0;
}

static void op_loadl_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadl_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[16, 8, 6..9], [16, 0, 20..23]], "b"=>[[1, 0, 24..27]]} */
static uint8_t op_loadi[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*4: movl   $0x3,0xab1008(%rax) */
  0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x00, 0x00, 0xbc, 0x00,/*12: movl   $0xbc0000,0xab1000(%rax) */

};

static void op_loadi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 16 + 8;
  *((int32_t *)(op + 20)) = a * 16 + 0;
  *((int32_t *)(op + 24)) = b * 1 + 0;
}

static void op_loadi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadi_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[16, 8, 6..9], [16, 0, 30..33]], "b"=>[[4, 0, 24..27]]} */
static uint8_t op_loadsym[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*4: movl   $0x4,0xab1008(%rax) */
  0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x4f, 0x28,                   /*12: mov    0x28(%rdi),%rcx */
  0x8b, 0x89, 0x00, 0x04, 0xbc, 0x00,       /*16: mov    0xbc0400(%rcx),%ecx */
  0x89, 0x88, 0x00, 0x10, 0xab, 0x00,       /*1c: mov    %ecx,0xab1000(%rax) */

};

static void op_loadsym_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 16 + 8;
  *((int32_t *)(op + 30)) = a * 16 + 0;
  *((int32_t *)(op + 24)) = b * 4 + 0;
}

static void op_loadsym_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadsym_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[16, 8, 6..9], [16, 0, 20..23]]} */
static uint8_t op_loadnil[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4: movl   $0x0,0xab1008(%rax) */
  0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*12: movl   $0x0,0xab1000(%rax) */

};

static void op_loadnil_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 16 + 8;
  *((int32_t *)(op + 20)) = a * 16 + 0;
}

static void op_loadnil_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadnil_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[16, 8, 14..17], [16, 0, 21..24]]} */
static uint8_t op_loadself[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x08,                         /*4: mov    (%rax),%rcx */
  0x48, 0x8b, 0x50, 0x08,                   /*7: mov    0x8(%rax),%rdx */
  0x48, 0x89, 0x90, 0x08, 0x10, 0xab, 0x00, /*b: mov    %rdx,0xab1008(%rax) */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*12: mov    %rcx,0xab1000(%rax) */

};

static void op_loadself_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = a * 16 + 8;
  *((int32_t *)(op + 21)) = a * 16 + 0;
}

static void op_loadself_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadself_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[16, 8, 6..9], [16, 0, 20..23]]} */
static uint8_t op_loadt[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*4: movl   $0x2,0xab1008(%rax) */
  0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*12: movl   $0x1,0xab1000(%rax) */

};

static void op_loadt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 16 + 8;
  *((int32_t *)(op + 20)) = a * 16 + 0;
}

static void op_loadt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadt_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[16, 8, 6..9], [16, 0, 20..23]]} */
static uint8_t op_loadf[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4: movl   $0x0,0xab1008(%rax) */
  0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*12: movl   $0x1,0xab1000(%rax) */

};

static void op_loadf_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 16 + 8;
  *((int32_t *)(op + 20)) = a * 16 + 0;
}

static void op_loadf_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadf_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[4, 0, 20..23]], "a"=>[[16, 0, 33..36], [16, 8, 40..43]]} */
static uint8_t op_getglobal[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*6: mov    0x58(%rbx),%rdi */
  0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
  0x48, 0x8b, 0x43, 0x28,                   /*e: mov    0x28(%rbx),%rax */
  0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*12: mov    0xbc0400(%rax),%esi */
  0xff, 0x93, 0xb8, 0x01, 0x00, 0x00,       /*18: callq  *0x1b8(%rbx) */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*1e: mov    %rax,0xab1000(%r14) */
  0x41, 0x89, 0x96, 0x08, 0x10, 0xab, 0x00, /*25: mov    %edx,0xab1008(%r14) */
  0x48, 0x89, 0xdf,                         /*2c: mov    %rbx,%rdi */
  0x5b,                                     /*2f: pop    %rbx */
  0x41, 0x5e,                               /*30: pop    %r14 */

};

static void op_getglobal_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 20)) = b * 4 + 0;
  *((int32_t *)(op + 33)) = a * 16 + 0;
  *((int32_t *)(op + 40)) = a * 16 + 8;
}

static void op_getglobal_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getglobal_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[16, 0, 25..28], [16, 8, 31..34]]} */
static uint8_t op_setglobal[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*4: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*16: mov    0xab1000(%rax),%rdx */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*1d: mov    0xab1008(%rax),%ecx */
  0xff, 0x93, 0x98, 0x00, 0x00, 0x00,       /*23: callq  *0x98(%rbx) */
  0x48, 0x89, 0xdf,                         /*29: mov    %rbx,%rdi */
  0x5b,                                     /*2c: pop    %rbx */

};

static void op_setglobal_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 16 + 0;
  *((int32_t *)(op + 31)) = a * 16 + 8;
}

static void op_setglobal_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setglobal_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[1, 0, 15..18]], "a"=>[[16, 0, 28..31], [16, 8, 35..38]]} */
static uint8_t op_getspecial[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
  0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
  0x48, 0x8b, 0x7b, 0x58,                   /*a: mov    0x58(%rbx),%rdi */
  0xbe, 0x00, 0x00, 0xbc, 0x00,             /*e: mov    $0xbc0000,%esi */
  0xff, 0x93, 0x28, 0x02, 0x00, 0x00,       /*13: callq  *0x228(%rbx) */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*19: mov    %rax,0xab1000(%r14) */
  0x41, 0x89, 0x96, 0x08, 0x10, 0xab, 0x00, /*20: mov    %edx,0xab1008(%r14) */
  0x48, 0x89, 0xdf,                         /*27: mov    %rbx,%rdi */
  0x5b,                                     /*2a: pop    %rbx */
  0x41, 0x5e,                               /*2b: pop    %r14 */

};

static void op_getspecial_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = b * 1 + 0;
  *((int32_t *)(op + 28)) = a * 16 + 0;
  *((int32_t *)(op + 35)) = a * 16 + 8;
}

static void op_getspecial_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getspecial_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[16, 0, 15..18], [16, 8, 21..24]], "b"=>[[1, 0, 26..29]]} */
static uint8_t op_setspecial[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*8: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*c: mov    0xab1000(%rax),%rdx */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*13: mov    0xab1008(%rax),%ecx */
  0xbe, 0x00, 0x00, 0xbc, 0x00,             /*19: mov    $0xbc0000,%esi */
  0xff, 0x93, 0x38, 0x01, 0x00, 0x00,       /*1e: callq  *0x138(%rbx) */
  0x48, 0x89, 0xdf,                         /*24: mov    %rbx,%rdi */
  0x5b,                                     /*27: pop    %rbx */

};

static void op_setspecial_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 16 + 0;
  *((int32_t *)(op + 21)) = a * 16 + 8;
  *((int32_t *)(op + 26)) = b * 1 + 0;
}

static void op_setspecial_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setspecial_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 20..23]], "a"=>[[16, 0, 33..36], [16, 8, 40..43]]} */
static uint8_t op_getiv[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*6: mov    0x58(%rbx),%rdi */
  0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
  0x48, 0x8b, 0x43, 0x28,                   /*e: mov    0x28(%rbx),%rax */
  0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*12: mov    0xbc0400(%rax),%esi */
  0xff, 0x93, 0xc0, 0x00, 0x00, 0x00,       /*18: callq  *0xc0(%rbx) */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*1e: mov    %rax,0xab1000(%r14) */
  0x41, 0x89, 0x96, 0x08, 0x10, 0xab, 0x00, /*25: mov    %edx,0xab1008(%r14) */
  0x48, 0x89, 0xdf,                         /*2c: mov    %rbx,%rdi */
  0x5b,                                     /*2f: pop    %rbx */
  0x41, 0x5e,                               /*30: pop    %r14 */

};

static void op_getiv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 20)) = b * 4 + 0;
  *((int32_t *)(op + 33)) = a * 16 + 0;
  *((int32_t *)(op + 40)) = a * 16 + 8;
}

static void op_getiv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getiv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[16, 0, 25..28], [16, 8, 31..34]]} */
static uint8_t op_setiv[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*4: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*16: mov    0xab1000(%rax),%rdx */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*1d: mov    0xab1008(%rax),%ecx */
  0xff, 0x93, 0xe8, 0x01, 0x00, 0x00,       /*23: callq  *0x1e8(%rbx) */
  0x48, 0x89, 0xdf,                         /*29: mov    %rbx,%rdi */
  0x5b,                                     /*2c: pop    %rbx */

};

static void op_setiv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 16 + 0;
  *((int32_t *)(op + 31)) = a * 16 + 8;
}

static void op_setiv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setiv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 40..43]], "a"=>[[16, 0, 53..56], [16, 8, 60..63]]} */
static uint8_t op_getcv[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x10,                   /*6: mov    0x10(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x58,                   /*a: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*e: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*12: mov    0x20(%rcx),%rcx */
  0x48, 0x89, 0x41, 0x38,                   /*16: mov    %rax,0x38(%rcx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*1a: mov    0x58(%rbx),%rdi */
  0x4c, 0x8b, 0x73, 0x18,                   /*1e: mov    0x18(%rbx),%r14 */
  0x48, 0x8b, 0x43, 0x28,                   /*22: mov    0x28(%rbx),%rax */
  0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*26: mov    0xbc0400(%rax),%esi */
  0xff, 0x93, 0xe0, 0x00, 0x00, 0x00,       /*2c: callq  *0xe0(%rbx) */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*32: mov    %rax,0xab1000(%r14) */
  0x41, 0x89, 0x96, 0x08, 0x10, 0xab, 0x00, /*39: mov    %edx,0xab1008(%r14) */
  0x48, 0x8b, 0x43, 0x58,                   /*40: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*44: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*48: mov    0x20(%rax),%rax */
  0x48, 0xc7, 0x40, 0x38, 0x00, 0x00, 0x00, 0x00,/*4c: movq   $0x0,0x38(%rax) */
  0x48, 0x89, 0xdf,                         /*54: mov    %rbx,%rdi */
  0x5b,                                     /*57: pop    %rbx */
  0x41, 0x5e,                               /*58: pop    %r14 */

};

static void op_getcv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 40)) = b * 4 + 0;
  *((int32_t *)(op + 53)) = a * 16 + 0;
  *((int32_t *)(op + 60)) = a * 16 + 8;
}

static void op_getcv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getcv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[16, 0, 25..28], [16, 8, 31..34]]} */
static uint8_t op_setcv[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*4: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*16: mov    0xab1000(%rax),%rdx */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*1d: mov    0xab1008(%rax),%ecx */
  0xff, 0x93, 0x08, 0x02, 0x00, 0x00,       /*23: callq  *0x208(%rbx) */
  0x48, 0x89, 0xdf,                         /*29: mov    %rbx,%rdi */
  0x5b,                                     /*2c: pop    %rbx */

};

static void op_setcv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 16 + 0;
  *((int32_t *)(op + 31)) = a * 16 + 8;
}

static void op_setcv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setcv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 34..37]], "a"=>[[16, 0, 83..86], [16, 8, 89..92]]} */
static uint8_t op_getconst[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x10,                   /*4: mov    0x10(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x58,                   /*8: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*c: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*10: mov    0x20(%rcx),%rcx */
  0x48, 0x89, 0x41, 0x38,                   /*14: mov    %rax,0x38(%rcx) */
  0x48, 0x8b, 0x43, 0x28,                   /*18: mov    0x28(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*1c: mov    0x58(%rbx),%rdi */
  0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*20: mov    0xbc0400(%rax),%esi */
  0xff, 0x93, 0xa0, 0x00, 0x00, 0x00,       /*26: callq  *0xa0(%rbx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*2c: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*30: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*34: mov    0x20(%rcx),%rcx */
  0x48, 0xc7, 0x41, 0x38, 0x00, 0x00, 0x00, 0x00,/*38: movq   $0x0,0x38(%rcx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*40: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*44: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x08,                   /*48: mov    0x8(%rcx),%rcx */
  0x48, 0x89, 0x4b, 0x18,                   /*4c: mov    %rcx,0x18(%rbx) */
  0x48, 0x89, 0x81, 0x00, 0x10, 0xab, 0x00, /*50: mov    %rax,0xab1000(%rcx) */
  0x89, 0x91, 0x08, 0x10, 0xab, 0x00,       /*57: mov    %edx,0xab1008(%rcx) */
  0x48, 0x89, 0xdf,                         /*5d: mov    %rbx,%rdi */
  0x5b,                                     /*60: pop    %rbx */

};

static void op_getconst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 34)) = b * 4 + 0;
  *((int32_t *)(op + 83)) = a * 16 + 0;
  *((int32_t *)(op + 89)) = a * 16 + 8;
}

static void op_getconst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getconst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[16, 0, 25..28], [16, 8, 31..34]]} */
static uint8_t op_setconst[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*4: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*16: mov    0xab1000(%rax),%rdx */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*1d: mov    0xab1008(%rax),%ecx */
  0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*23: callq  *0x1b0(%rbx) */
  0x48, 0x89, 0xdf,                         /*29: mov    %rbx,%rdi */
  0x5b,                                     /*2c: pop    %rbx */

};

static void op_setconst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 16 + 0;
  *((int32_t *)(op + 31)) = a * 16 + 8;
}

static void op_setconst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setconst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 38..41]], "a"=>[[16, 0, 45..48], [16, 8, 51..54], [16, 0, 100..103], [16, 8, 106..109]]} */
static uint8_t op_getmcnst[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x10,                   /*4: mov    0x10(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x58,                   /*8: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*c: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*10: mov    0x20(%rcx),%rcx */
  0x48, 0x89, 0x41, 0x38,                   /*14: mov    %rax,0x38(%rcx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*18: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x43, 0x18,                   /*1c: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x28,                   /*20: mov    0x28(%rbx),%rcx */
  0x8b, 0x89, 0x00, 0x04, 0xbc, 0x00,       /*24: mov    0xbc0400(%rcx),%ecx */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xab, 0x00, /*2a: mov    0xab1000(%rax),%rsi */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*31: mov    0xab1008(%rax),%edx */
  0xff, 0x93, 0x10, 0x02, 0x00, 0x00,       /*37: callq  *0x210(%rbx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*3d: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*41: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*45: mov    0x20(%rcx),%rcx */
  0x48, 0xc7, 0x41, 0x38, 0x00, 0x00, 0x00, 0x00,/*49: movq   $0x0,0x38(%rcx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*51: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*55: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x08,                   /*59: mov    0x8(%rcx),%rcx */
  0x48, 0x89, 0x4b, 0x18,                   /*5d: mov    %rcx,0x18(%rbx) */
  0x48, 0x89, 0x81, 0x00, 0x10, 0xab, 0x00, /*61: mov    %rax,0xab1000(%rcx) */
  0x89, 0x91, 0x08, 0x10, 0xab, 0x00,       /*68: mov    %edx,0xab1008(%rcx) */
  0x48, 0x89, 0xdf,                         /*6e: mov    %rbx,%rdi */
  0x5b,                                     /*71: pop    %rbx */

};

static void op_getmcnst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 38)) = b * 4 + 0;
  *((int32_t *)(op + 45)) = a * 16 + 0;
  *((int32_t *)(op + 51)) = a * 16 + 8;
  *((int32_t *)(op + 100)) = a * 16 + 0;
  *((int32_t *)(op + 106)) = a * 16 + 8;
}

static void op_getmcnst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getmcnst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[16, 16, 25..28], [16, 24, 31..34], [16, 0, 38..41], [16, 8, 45..48]]} */
static uint8_t op_setmcnst[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*4: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
  0x8b, 0x89, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%ecx */
  0x48, 0x8b, 0xb0, 0x10, 0x10, 0xab, 0x00, /*16: mov    0xab1010(%rax),%rsi */
  0x8b, 0x90, 0x18, 0x10, 0xab, 0x00,       /*1d: mov    0xab1018(%rax),%edx */
  0x4c, 0x8b, 0x80, 0x00, 0x10, 0xab, 0x00, /*23: mov    0xab1000(%rax),%r8 */
  0x44, 0x8b, 0x88, 0x08, 0x10, 0xab, 0x00, /*2a: mov    0xab1008(%rax),%r9d */
  0xff, 0x93, 0x08, 0x01, 0x00, 0x00,       /*31: callq  *0x108(%rbx) */
  0x48, 0x89, 0xdf,                         /*37: mov    %rbx,%rdi */
  0x5b,                                     /*3a: pop    %rbx */

};

static void op_setmcnst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 16 + 16;
  *((int32_t *)(op + 31)) = a * 16 + 24;
  *((int32_t *)(op + 38)) = a * 16 + 0;
  *((int32_t *)(op + 45)) = a * 16 + 8;
}

static void op_setmcnst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setmcnst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[16, 0, 13..16]], "c"=>[[1, 0, 18..21]], "b"=>[[16, 0, 98..101], [16, 8, 105..108]]} */
static uint8_t op_getupvar[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
  0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
  0x48, 0x81, 0xc3, 0x00, 0x10, 0xab, 0x00, /*a: add    $0xab1000,%rbx */
  0xb8, 0x00, 0x00, 0xcd, 0x00,             /*11: mov    $0xcd0000,%eax */
  0x49, 0x8b, 0x4e, 0x58,                   /*16: mov    0x58(%r14),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*1a: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*1e: mov    0x20(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x08,                   /*22: mov    0x8(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x28,                   /*26: mov    0x28(%rcx),%rcx */
  0xeb, 0x0a,                               /*2a: jmp    36 <op_getupvar+0x36> */
  0x0f, 0x1f, 0x40, 0x00,                   /*2c: nopl   0x0(%rax) */
  0xff, 0xc8,                               /*30: dec    %eax */
  0x48, 0x8b, 0x49, 0x08,                   /*32: mov    0x8(%rcx),%rcx */
  0x48, 0x85, 0xc9,                         /*36: test   %rcx,%rcx */
  0x0f, 0x94, 0xc2,                         /*39: sete   %dl */
  0x85, 0xc0,                               /*3c: test   %eax,%eax */
  0x74, 0x07,                               /*3e: je     47 <op_getupvar+0x47> */
  0xf6, 0xc2, 0x01,                         /*40: test   $0x1,%dl */
  0x74, 0xeb,                               /*43: je     30 <op_getupvar+0x30> */
  0xeb, 0x04,                               /*45: jmp    4b <op_getupvar+0x4b> */
  0x84, 0xd2,                               /*47: test   %dl,%dl */
  0x74, 0x10,                               /*49: je     5b <op_getupvar+0x5b> */
  0x48, 0xc7, 0x03, 0x00, 0x00, 0x00, 0x00, /*4b: movq   $0x0,(%rbx) */
  0xc7, 0x43, 0x08, 0x00, 0x00, 0x00, 0x00, /*52: movl   $0x0,0x8(%rbx) */
  0xeb, 0x19,                               /*59: jmp    74 <op_getupvar+0x74> */
  0x48, 0x8b, 0x41, 0x18,                   /*5b: mov    0x18(%rcx),%rax */
  0x48, 0x8b, 0x88, 0x00, 0x10, 0xbc, 0x00, /*5f: mov    0xbc1000(%rax),%rcx */
  0x48, 0x8b, 0x80, 0x08, 0x10, 0xbc, 0x00, /*66: mov    0xbc1008(%rax),%rax */
  0x48, 0x89, 0x43, 0x08,                   /*6d: mov    %rax,0x8(%rbx) */
  0x48, 0x89, 0x0b,                         /*71: mov    %rcx,(%rbx) */
  0x4c, 0x89, 0xf7,                         /*74: mov    %r14,%rdi */
  0x5b,                                     /*77: pop    %rbx */
  0x41, 0x5e,                               /*78: pop    %r14 */

};

static void op_getupvar_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = a * 16 + 0;
  *((int32_t *)(op + 18)) = c * 1 + 0;
  *((int32_t *)(op + 98)) = b * 16 + 0;
  *((int32_t *)(op + 105)) = b * 16 + 8;
}

static void op_getupvar_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getupvar_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"c"=>[[1, 0, 5..8]], "a"=>[[16, 0, 70..73], [16, 8, 77..80]], "b"=>[[16, 8, 84..87], [16, 0, 91..94]]} */
static uint8_t op_setupvar[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0xb8, 0x00, 0x00, 0xcd, 0x00,             /*4: mov    $0xcd0000,%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*9: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*d: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*11: mov    0x20(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x08,                   /*15: mov    0x8(%rcx),%rcx */
  0x48, 0x8b, 0x71, 0x28,                   /*19: mov    0x28(%rcx),%rsi */
  0xeb, 0x07,                               /*1d: jmp    26 <op_setupvar+0x26> */
  0x90,                                     /*1f: nop */
  0xff, 0xc8,                               /*20: dec    %eax */
  0x48, 0x8b, 0x76, 0x08,                   /*22: mov    0x8(%rsi),%rsi */
  0x48, 0x85, 0xf6,                         /*26: test   %rsi,%rsi */
  0x0f, 0x94, 0xc1,                         /*29: sete   %cl */
  0x85, 0xc0,                               /*2c: test   %eax,%eax */
  0x74, 0x07,                               /*2e: je     37 <op_setupvar+0x37> */
  0xf6, 0xc1, 0x01,                         /*30: test   $0x1,%cl */
  0x74, 0xeb,                               /*33: je     20 <op_setupvar+0x20> */
  0xeb, 0x32,                               /*35: jmp    69 <op_setupvar+0x69> */
  0x84, 0xc9,                               /*37: test   %cl,%cl */
  0x75, 0x2e,                               /*39: jne    69 <op_setupvar+0x69> */
  0x48, 0x8b, 0x43, 0x18,                   /*3b: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4e, 0x18,                   /*3f: mov    0x18(%rsi),%rcx */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*43: mov    0xab1000(%rax),%rdx */
  0x48, 0x8b, 0x80, 0x08, 0x10, 0xab, 0x00, /*4a: mov    0xab1008(%rax),%rax */
  0x48, 0x89, 0x81, 0x08, 0x10, 0xbc, 0x00, /*51: mov    %rax,0xbc1008(%rcx) */
  0x48, 0x89, 0x91, 0x00, 0x10, 0xbc, 0x00, /*58: mov    %rdx,0xbc1000(%rcx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*5f: mov    0x58(%rbx),%rdi */
  0xff, 0x93, 0x00, 0x01, 0x00, 0x00,       /*63: callq  *0x100(%rbx) */
  0x48, 0x89, 0xdf,                         /*69: mov    %rbx,%rdi */
  0x5b,                                     /*6c: pop    %rbx */

};

static void op_setupvar_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = c * 1 + 0;
  *((int32_t *)(op + 70)) = a * 16 + 0;
  *((int32_t *)(op + 77)) = a * 16 + 8;
  *((int32_t *)(op + 84)) = b * 16 + 8;
  *((int32_t *)(op + 91)) = b * 16 + 0;
}

static void op_setupvar_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setupvar_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_jmp[] = {

};

static void op_jmp_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_jmp_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmp_set_args(op, 0,GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[16, 8, 6..9]]} */
static uint8_t op_jmpif[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0x83, 0xb8, 0x08, 0x10, 0xab, 0x00, 0x00, /*4: cmpl   $0x0,0xab1008(%rax) */

};

static void op_jmpif_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 16 + 8;
}

static void op_jmpif_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmpif_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[16, 8, 6..9]]} */
static uint8_t op_jmpnot[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0x83, 0xb8, 0x08, 0x10, 0xab, 0x00, 0x00, /*4: cmpl   $0x0,0xab1008(%rax) */

};

static void op_jmpnot_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 16 + 8;
}

static void op_jmpnot_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmpnot_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"op_idx"=>[[4, 0, 93..96]]} */
static uint8_t op_onerr[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x58,                   /*4: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x48, 0x18,                   /*8: mov    0x18(%rax),%rcx */
  0x8b, 0x51, 0x40,                         /*c: mov    0x40(%rcx),%edx */
  0x48, 0x8b, 0x71, 0x20,                   /*f: mov    0x20(%rcx),%rsi */
  0x3b, 0x56, 0x1c,                         /*13: cmp    0x1c(%rsi),%edx */
  0x7f, 0x3a,                               /*16: jg     52 <op_onerr+0x52> */
  0x8d, 0x04, 0x12,                         /*18: lea    (%rdx,%rdx,1),%eax */
  0x85, 0xd2,                               /*1b: test   %edx,%edx */
  0xba, 0x10, 0x00, 0x00, 0x00,             /*1d: mov    $0x10,%edx */
  0x0f, 0x45, 0xd0,                         /*22: cmovne %eax,%edx */
  0x89, 0x51, 0x40,                         /*25: mov    %edx,0x40(%rcx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*28: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*2c: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x70, 0x38,                   /*30: mov    0x38(%rax),%rsi */
  0x48, 0x63, 0x50, 0x40,                   /*34: movslq 0x40(%rax),%rdx */
  0x48, 0xc1, 0xe2, 0x03,                   /*38: shl    $0x3,%rdx */
  0xff, 0x93, 0x28, 0x01, 0x00, 0x00,       /*3c: callq  *0x128(%rbx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*42: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*46: mov    0x18(%rcx),%rcx */
  0x48, 0x89, 0x41, 0x38,                   /*4a: mov    %rax,0x38(%rcx) */
  0x48, 0x8b, 0x43, 0x58,                   /*4e: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x08,                   /*52: mov    0x8(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x08,                   /*56: mov    0x8(%rcx),%rcx */
  0x48, 0x8d, 0x91, 0x00, 0x04, 0xde, 0x00, /*5a: lea    0xde0400(%rcx),%rdx */
  0x48, 0x89, 0x53, 0x10,                   /*61: mov    %rdx,0x10(%rbx) */
  0x48, 0x81, 0xc1, 0x00, 0x00, 0x68, 0x06, /*65: add    $0x6680000,%rcx */
  0x48, 0x8b, 0x40, 0x18,                   /*6c: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*70: mov    0x20(%rax),%rax */
  0x48, 0x63, 0x50, 0x1c,                   /*74: movslq 0x1c(%rax),%rdx */
  0x8d, 0x72, 0x01,                         /*78: lea    0x1(%rdx),%esi */
  0x89, 0x70, 0x1c,                         /*7b: mov    %esi,0x1c(%rax) */
  0x48, 0x8b, 0x43, 0x58,                   /*7e: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*82: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x38,                   /*86: mov    0x38(%rax),%rax */
  0x48, 0x89, 0x0c, 0xd0,                   /*8a: mov    %rcx,(%rax,%rdx,8) */
  0x48, 0x89, 0xdf,                         /*8e: mov    %rbx,%rdi */
  0x5b,                                     /*91: pop    %rbx */

};

static void op_onerr_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 93)) = op_idx * 4 + 0;
}

static void op_onerr_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_onerr_set_args(op, 0,GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[16, 8, 17..20], [16, 0, 36..39]]} */
static uint8_t op_rescue[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x4f, 0x58,                   /*4: mov    0x58(%rdi),%rcx */
  0x48, 0x8b, 0x49, 0x28,                   /*8: mov    0x28(%rcx),%rcx */
  0x0f, 0xb6, 0x09,                         /*c: movzbl (%rcx),%ecx */
  0x89, 0x88, 0x08, 0x10, 0xab, 0x00,       /*f: mov    %ecx,0xab1008(%rax) */
  0x48, 0x8b, 0x47, 0x18,                   /*15: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x4f, 0x58,                   /*19: mov    0x58(%rdi),%rcx */
  0x48, 0x8b, 0x49, 0x28,                   /*1d: mov    0x28(%rcx),%rcx */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*21: mov    %rcx,0xab1000(%rax) */
  0x48, 0x8b, 0x47, 0x58,                   /*28: mov    0x58(%rdi),%rax */
  0x48, 0xc7, 0x40, 0x28, 0x00, 0x00, 0x00, 0x00,/*2c: movq   $0x0,0x28(%rax) */

};

static void op_rescue_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 16 + 8;
  *((int32_t *)(op + 36)) = a * 16 + 0;
}

static void op_rescue_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_rescue_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {} */
static uint8_t op_poperr[] = {
  0xb8, 0x00, 0x00, 0x55, 0xff,             /*0: mov    $0xff550000,%eax */
  0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*5: data16 nopw %cs:0x0(%rax,%rax,1) */
  0x48, 0x8b, 0x4f, 0x58,                   /*10: mov    0x58(%rdi),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*14: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*18: mov    0x20(%rcx),%rcx */
  0xff, 0x49, 0x1c,                         /*1c: decl   0x1c(%rcx) */
  0xff, 0xc0,                               /*1f: inc    %eax */
  0x75, 0xed,                               /*21: jne    10 <op_poperr+0x10> */

};

static void op_poperr_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_poperr_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_poperr_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[16, 0, 15..18]]} */
static uint8_t op_raise[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x58,                   /*8: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x80, 0x00, 0x10, 0xab, 0x00, /*c: mov    0xab1000(%rax),%rax */
  0x48, 0x89, 0x41, 0x28,                   /*13: mov    %rax,0x28(%rcx) */
  0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*17: callq  *0x1a8(%rbx) */
  0x48, 0x89, 0xdf,                         /*1d: mov    %rbx,%rdi */
  0x5b,                                     /*20: pop    %rbx */

};

static void op_raise_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 16 + 0;
}

static void op_raise_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_raise_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[8, 0, 21..24]]} */
static uint8_t op_epush[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x08,                   /*6: mov    0x8(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*a: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x40, 0x20,                   /*e: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*12: mov    0xbc0800(%rax),%rsi */
  0xff, 0x93, 0x80, 0x00, 0x00, 0x00,       /*19: callq  *0x80(%rbx) */
  0x49, 0x89, 0xc6,                         /*1f: mov    %rax,%r14 */
  0x48, 0x8b, 0x43, 0x58,                   /*22: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*26: mov    0x18(%rax),%rax */
  0x8b, 0x70, 0x50,                         /*2a: mov    0x50(%rax),%esi */
  0x48, 0x8b, 0x48, 0x20,                   /*2d: mov    0x20(%rax),%rcx */
  0x8b, 0x51, 0x20,                         /*31: mov    0x20(%rcx),%edx */
  0x39, 0xd6,                               /*34: cmp    %edx,%esi */
  0x7f, 0x45,                               /*36: jg     7d <op_epush+0x7d> */
  0x8d, 0x0c, 0x36,                         /*38: lea    (%rsi,%rsi,1),%ecx */
  0x85, 0xf6,                               /*3b: test   %esi,%esi */
  0xba, 0x10, 0x00, 0x00, 0x00,             /*3d: mov    $0x10,%edx */
  0x0f, 0x45, 0xd1,                         /*42: cmovne %ecx,%edx */
  0x89, 0x50, 0x50,                         /*45: mov    %edx,0x50(%rax) */
  0x48, 0x8b, 0x7b, 0x58,                   /*48: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*4c: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x70, 0x48,                   /*50: mov    0x48(%rax),%rsi */
  0x48, 0x63, 0x50, 0x50,                   /*54: movslq 0x50(%rax),%rdx */
  0x48, 0xc1, 0xe2, 0x03,                   /*58: shl    $0x3,%rdx */
  0xff, 0x93, 0x28, 0x01, 0x00, 0x00,       /*5c: callq  *0x128(%rbx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*62: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*66: mov    0x18(%rcx),%rcx */
  0x48, 0x89, 0x41, 0x48,                   /*6a: mov    %rax,0x48(%rcx) */
  0x48, 0x8b, 0x43, 0x58,                   /*6e: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*72: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x48, 0x20,                   /*76: mov    0x20(%rax),%rcx */
  0x8b, 0x51, 0x20,                         /*7a: mov    0x20(%rcx),%edx */
  0x8d, 0x42, 0x01,                         /*7d: lea    0x1(%rdx),%eax */
  0x89, 0x41, 0x20,                         /*80: mov    %eax,0x20(%rcx) */
  0x48, 0x63, 0xc2,                         /*83: movslq %edx,%rax */
  0x48, 0x8b, 0x4b, 0x58,                   /*86: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*8a: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x48,                   /*8e: mov    0x48(%rcx),%rcx */
  0x4c, 0x89, 0x34, 0xc1,                   /*92: mov    %r14,(%rcx,%rax,8) */
  0x8b, 0x43, 0x50,                         /*96: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*99: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*9d: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*a3: mov    %rbx,%rdi */
  0x5b,                                     /*a6: pop    %rbx */
  0x41, 0x5e,                               /*a7: pop    %r14 */

};

static void op_epush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 8 + 0;
}

static void op_epush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_epush_set_args(op, 0,GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[1, 0, 71..74]]} */
static uint8_t op_epop[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x53,                                     /*5: push   %rbx */
  0x49, 0x89, 0xff,                         /*6: mov    %rdi,%r15 */
  0x49, 0x8b, 0x47, 0x58,                   /*9: mov    0x58(%r15),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*d: mov    0x18(%rax),%rax */
  0x4c, 0x8b, 0x70, 0x20,                   /*11: mov    0x20(%rax),%r14 */
  0x41, 0x8b, 0x6e, 0x20,                   /*15: mov    0x20(%r14),%ebp */
  0x31, 0xdb,                               /*19: xor    %ebx,%ebx */
  0x0f, 0x1f, 0x44, 0x00, 0x00,             /*1b: nopl   0x0(%rax,%rax,1) */
  0x41, 0x3b, 0x6e, 0xc8,                   /*20: cmp    -0x38(%r14),%ebp */
  0x7e, 0x27,                               /*24: jle    4d <op_epop+0x4d> */
  0x49, 0x8b, 0x7f, 0x58,                   /*26: mov    0x58(%r15),%rdi */
  0xff, 0xcd,                               /*2a: dec    %ebp */
  0x89, 0xee,                               /*2c: mov    %ebp,%esi */
  0x41, 0xff, 0x97, 0xf8, 0x01, 0x00, 0x00, /*2e: callq  *0x1f8(%r15) */
  0x41, 0x8b, 0x47, 0x50,                   /*35: mov    0x50(%r15),%eax */
  0x49, 0x8b, 0x4f, 0x58,                   /*39: mov    0x58(%r15),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*3d: mov    %eax,0xdc(%rcx) */
  0xff, 0xc3,                               /*43: inc    %ebx */
  0x81, 0xfb, 0x00, 0x00, 0xab, 0x00,       /*45: cmp    $0xab0000,%ebx */
  0x7c, 0xd3,                               /*4b: jl     20 <op_epop+0x20> */
  0x4c, 0x89, 0xff,                         /*4d: mov    %r15,%rdi */
  0x5b,                                     /*50: pop    %rbx */
  0x41, 0x5e,                               /*51: pop    %r14 */
  0x41, 0x5f,                               /*53: pop    %r15 */
  0x5d,                                     /*55: pop    %rbp */

};

static void op_epop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 71)) = a * 1 + 0;
}

static void op_epop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_epop_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 15..18]], "op_idx"=>[[4, 0, 36..39]], "b"=>[[1, 0, 54..57]], "c"=>[[1, 0, 60..63]]} */
static uint8_t op_send[] = {
  0x55,                                     /*0: push   %rbp */
  0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
  0x41, 0x56,                               /*4: push   %r14 */
  0x53,                                     /*6: push   %rbx */
  0x48, 0x83, 0xe4, 0xf0,                   /*7: and    $0xfffffffffffffff0,%rsp */
  0x48, 0x89, 0xfb,                         /*b: mov    %rdi,%rbx */
  0xb8, 0x00, 0x00, 0xab, 0x00,             /*e: mov    $0xab0000,%eax */
  0x48, 0x8b, 0x4b, 0x08,                   /*13: mov    0x8(%rbx),%rcx */
  0x48, 0x8b, 0x53, 0x58,                   /*17: mov    0x58(%rbx),%rdx */
  0x48, 0x8b, 0x52, 0x18,                   /*1b: mov    0x18(%rdx),%rdx */
  0x4c, 0x8b, 0x72, 0x20,                   /*1f: mov    0x20(%rdx),%r14 */
  0xba, 0x00, 0x04, 0xde, 0x00,             /*23: mov    $0xde0400,%edx */
  0x48, 0x03, 0x51, 0x08,                   /*28: add    0x8(%rcx),%rdx */
  0x48, 0x89, 0x53, 0x10,                   /*2c: mov    %rdx,0x10(%rbx) */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*30: mov    $0x20,%esi */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*35: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*3a: mov    $0xcd0000,%r8d */
  0x48, 0x89, 0xdf,                         /*40: mov    %rbx,%rdi */
  0x89, 0xc2,                               /*43: mov    %eax,%edx */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*45: callq  *0x1d8(%rbx) */
  0x48, 0x8b, 0x43, 0x58,                   /*4b: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*4f: mov    0x18(%rax),%rax */
  0x4c, 0x39, 0x70, 0x20,                   /*53: cmp    %r14,0x20(%rax) */
  0x73, 0x0c,                               /*57: jae    65 <op_send+0x65> */
  0x48, 0x89, 0xdf,                         /*59: mov    %rbx,%rdi */
  0x48, 0x8d, 0x65, 0xf0,                   /*5c: lea    -0x10(%rbp),%rsp */
  0x5b,                                     /*60: pop    %rbx */
  0x41, 0x5e,                               /*61: pop    %r14 */
  0x5d,                                     /*63: pop    %rbp */
  0xc3,                                     /*64: retq */
  0x48, 0x89, 0xdf,                         /*65: mov    %rbx,%rdi */
  0x48, 0x8d, 0x65, 0xf0,                   /*68: lea    -0x10(%rbp),%rsp */
  0x5b,                                     /*6c: pop    %rbx */
  0x41, 0x5e,                               /*6d: pop    %r14 */
  0x5d,                                     /*6f: pop    %rbp */

};

static void op_send_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 1 + 0;
  *((int32_t *)(op + 36)) = op_idx * 4 + 0;
  *((int32_t *)(op + 54)) = b * 1 + 0;
  *((int32_t *)(op + 60)) = c * 1 + 0;
}

static void op_send_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_send_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[1, 0, 17..20]], "b"=>[[1, 0, 27..30]], "c"=>[[1, 0, 33..36]]} */
static uint8_t op_sendb[] = {
  0x55,                                     /*0: push   %rbp */
  0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
  0x53,                                     /*4: push   %rbx */
  0x48, 0x83, 0xe4, 0xf0,                   /*5: and    $0xfffffffffffffff0,%rsp */
  0x48, 0x83, 0xec, 0x10,                   /*9: sub    $0x10,%rsp */
  0x48, 0x89, 0xfb,                         /*d: mov    %rdi,%rbx */
  0xb8, 0x00, 0x00, 0xab, 0x00,             /*10: mov    $0xab0000,%eax */
  0xbe, 0x21, 0x00, 0x00, 0x00,             /*15: mov    $0x21,%esi */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*1a: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*1f: mov    $0xcd0000,%r8d */
  0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
  0x89, 0xc2,                               /*28: mov    %eax,%edx */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*2a: callq  *0x1d8(%rbx) */
  0x48, 0x89, 0xdf,                         /*30: mov    %rbx,%rdi */
  0x48, 0x8d, 0x65, 0xf8,                   /*33: lea    -0x8(%rbp),%rsp */
  0x5b,                                     /*37: pop    %rbx */
  0x5d,                                     /*38: pop    %rbp */

};

static void op_sendb_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
  *((int32_t *)(op + 27)) = b * 1 + 0;
  *((int32_t *)(op + 33)) = c * 1 + 0;
}

static void op_sendb_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sendb_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_fsend[] = {

};

static void op_fsend_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_fsend_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_fsend_set_args(op, 0,0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 349..352]]} */
static uint8_t op_call[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x56,                               /*1: push   %r14 */
  0x53,                                     /*3: push   %rbx */
  0x49, 0x89, 0xfe,                         /*4: mov    %rdi,%r14 */
  0x49, 0x8b, 0x46, 0x58,                   /*7: mov    0x58(%r14),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*b: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x48, 0x08,                   /*f: mov    0x8(%rax),%rcx */
  0x48, 0x8b, 0x40, 0x20,                   /*13: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0x19,                         /*17: mov    (%rcx),%rbx */
  0x8b, 0x51, 0x08,                         /*1a: mov    0x8(%rcx),%edx */
  0x48, 0x8b, 0x4b, 0x20,                   /*1d: mov    0x20(%rbx),%rcx */
  0x48, 0x89, 0x48, 0x48,                   /*21: mov    %rcx,0x48(%rax) */
  0x48, 0x89, 0x58, 0x08,                   /*25: mov    %rbx,0x8(%rax) */
  0x48, 0x8b, 0x4b, 0x28,                   /*29: mov    0x28(%rbx),%rcx */
  0x48, 0x85, 0xc9,                         /*2d: test   %rcx,%rcx */
  0x74, 0x24,                               /*30: je     56 <op_call+0x56> */
  0x8b, 0x71, 0x20,                         /*32: mov    0x20(%rcx),%esi */
  0x85, 0xf6,                               /*35: test   %esi,%esi */
  0x74, 0x06,                               /*37: je     3f <op_call+0x3f> */
  0x89, 0x30,                               /*39: mov    %esi,(%rax) */
  0x48, 0x8b, 0x4b, 0x28,                   /*3b: mov    0x28(%rbx),%rcx */
  0x48, 0x83, 0x79, 0x18, 0x00,             /*3f: cmpq   $0x0,0x18(%rcx) */
  0x75, 0x10,                               /*44: jne    56 <op_call+0x56> */
  0x49, 0x8b, 0x76, 0x58,                   /*46: mov    0x58(%r14),%rsi */
  0x48, 0x8b, 0x76, 0x18,                   /*4a: mov    0x18(%rsi),%rsi */
  0x48, 0x8b, 0x76, 0x08,                   /*4e: mov    0x8(%rsi),%rsi */
  0x48, 0x89, 0x71, 0x18,                   /*52: mov    %rsi,0x18(%rcx) */
  0xf6, 0x43, 0x02, 0x04,                   /*56: testb  $0x4,0x2(%rbx) */
  0x74, 0x38,                               /*5a: je     94 <op_call+0x94> */
  0x49, 0x8b, 0x7e, 0x58,                   /*5c: mov    0x58(%r14),%rdi */
  0x48, 0x89, 0xde,                         /*60: mov    %rbx,%rsi */
  0xff, 0x53, 0x18,                         /*63: callq  *0x18(%rbx) */
  0x48, 0x89, 0xc3,                         /*66: mov    %rax,%rbx */
  0x89, 0xd5,                               /*69: mov    %edx,%ebp */
  0x49, 0x8b, 0x7e, 0x58,                   /*6b: mov    0x58(%r14),%rdi */
  0x41, 0x8b, 0x76, 0x50,                   /*6f: mov    0x50(%r14),%esi */
  0x41, 0xff, 0x96, 0x10, 0x01, 0x00, 0x00, /*73: callq  *0x110(%r14) */
  0x49, 0x8b, 0x46, 0x58,                   /*7a: mov    0x58(%r14),%rax */
  0x48, 0x83, 0x78, 0x28, 0x00,             /*7e: cmpq   $0x0,0x28(%rax) */
  0x74, 0x59,                               /*83: je     de <op_call+0xde> */
  0x4c, 0x89, 0xf7,                         /*85: mov    %r14,%rdi */
  0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*88: callq  *0x1a8(%r14) */
  0xe9, 0x35, 0x01, 0x00, 0x00,             /*8f: jmpq   1c9 <op_call+0x1c9> */
  0x49, 0x89, 0x1e,                         /*94: mov    %rbx,(%r14) */
  0x48, 0x8b, 0x4b, 0x18,                   /*97: mov    0x18(%rbx),%rcx */
  0x49, 0x89, 0x4e, 0x08,                   /*9b: mov    %rcx,0x8(%r14) */
  0x48, 0x85, 0xc9,                         /*9f: test   %rcx,%rcx */
  0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00,       /*a2: je     142 <op_call+0x142> */
  0x48, 0x8b, 0x51, 0x10,                   /*a8: mov    0x10(%rcx),%rdx */
  0x49, 0x89, 0x56, 0x20,                   /*ac: mov    %rdx,0x20(%r14) */
  0x48, 0x8b, 0x51, 0x18,                   /*b0: mov    0x18(%rcx),%rdx */
  0x49, 0x89, 0x56, 0x28,                   /*b4: mov    %rdx,0x28(%r14) */
  0x0f, 0xb7, 0x49, 0x02,                   /*b8: movzwl 0x2(%rcx),%ecx */
  0x89, 0x48, 0x18,                         /*bc: mov    %ecx,0x18(%rax) */
  0x8b, 0x50, 0x40,                         /*bf: mov    0x40(%rax),%edx */
  0x49, 0x8b, 0x46, 0x08,                   /*c2: mov    0x8(%r14),%rax */
  0x49, 0x8b, 0x7e, 0x58,                   /*c6: mov    0x58(%r14),%rdi */
  0x0f, 0xb7, 0x70, 0x02,                   /*ca: movzwl 0x2(%rax),%esi */
  0x85, 0xd2,                               /*ce: test   %edx,%edx */
  0x0f, 0x88, 0x99, 0x00, 0x00, 0x00,       /*d0: js     16f <op_call+0x16f> */
  0x83, 0xc2, 0x02,                         /*d6: add    $0x2,%edx */
  0xe9, 0xa1, 0x00, 0x00, 0x00,             /*d9: jmpq   17f <op_call+0x17f> */
  0x48, 0x8b, 0x40, 0x18,                   /*de: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x48, 0x20,                   /*e2: mov    0x20(%rax),%rcx */
  0x48, 0x8b, 0x51, 0x10,                   /*e6: mov    0x10(%rcx),%rdx */
  0x48, 0x89, 0x50, 0x08,                   /*ea: mov    %rdx,0x8(%rax) */
  0x49, 0x89, 0x56, 0x18,                   /*ee: mov    %rdx,0x18(%r14) */
  0x48, 0x63, 0x41, 0x44,                   /*f2: movslq 0x44(%rcx),%rax */
  0x48, 0xc1, 0xe0, 0x04,                   /*f6: shl    $0x4,%rax */
  0x48, 0x89, 0x1c, 0x02,                   /*fa: mov    %rbx,(%rdx,%rax,1) */
  0x89, 0x6c, 0x02, 0x08,                   /*fe: mov    %ebp,0x8(%rdx,%rax,1) */
  0x48, 0x8b, 0x41, 0x30,                   /*102: mov    0x30(%rcx),%rax */
  0x49, 0x89, 0x46, 0x10,                   /*106: mov    %rax,0x10(%r14) */
  0x49, 0x8b, 0x7e, 0x58,                   /*10a: mov    0x58(%r14),%rdi */
  0x41, 0xff, 0x96, 0x60, 0x01, 0x00, 0x00, /*10e: callq  *0x160(%r14) */
  0x49, 0x8b, 0x46, 0x58,                   /*115: mov    0x58(%r14),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*119: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*11d: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*121: mov    0x8(%rax),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*125: mov    0x18(%rax),%rax */
  0x49, 0x89, 0x46, 0x08,                   /*129: mov    %rax,0x8(%r14) */
  0x48, 0x8b, 0x48, 0x10,                   /*12d: mov    0x10(%rax),%rcx */
  0x49, 0x89, 0x4e, 0x20,                   /*131: mov    %rcx,0x20(%r14) */
  0x48, 0x8b, 0x40, 0x18,                   /*135: mov    0x18(%rax),%rax */
  0x49, 0x89, 0x46, 0x28,                   /*139: mov    %rax,0x28(%r14) */
  0xe9, 0x87, 0x00, 0x00, 0x00,             /*13d: jmpq   1c9 <op_call+0x1c9> */
  0x49, 0x8b, 0x46, 0x58,                   /*142: mov    0x58(%r14),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*146: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*14a: mov    0x8(%rax),%rax */
  0x48, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, /*14e: movq   $0x0,(%rax) */
  0xc7, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00, /*155: movl   $0x0,0x8(%rax) */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*15c: mov    $0xab0000,%esi */
  0x31, 0xd2,                               /*161: xor    %edx,%edx */
  0x4c, 0x89, 0xf7,                         /*163: mov    %r14,%rdi */
  0x41, 0xff, 0x96, 0x90, 0x00, 0x00, 0x00, /*166: callq  *0x90(%r14) */
  0xeb, 0x5a,                               /*16d: jmp    1c9 <op_call+0x1c9> */
  0x83, 0xfe, 0x03,                         /*16f: cmp    $0x3,%esi */
  0xb8, 0x03, 0x00, 0x00, 0x00,             /*172: mov    $0x3,%eax */
  0x0f, 0x42, 0xf0,                         /*177: cmovb  %eax,%esi */
  0xba, 0x03, 0x00, 0x00, 0x00,             /*17a: mov    $0x3,%edx */
  0x41, 0xff, 0x96, 0x40, 0x01, 0x00, 0x00, /*17f: callq  *0x140(%r14) */
  0x49, 0x8b, 0x46, 0x58,                   /*186: mov    0x58(%r14),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*18a: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*18e: mov    0x8(%rax),%rax */
  0x49, 0x89, 0x46, 0x18,                   /*192: mov    %rax,0x18(%r14) */
  0x48, 0x8b, 0x4b, 0x28,                   /*196: mov    0x28(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*19a: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x11,                         /*19e: mov    (%rcx),%rdx */
  0x48, 0x8b, 0x49, 0x08,                   /*1a1: mov    0x8(%rcx),%rcx */
  0x48, 0x89, 0x48, 0x08,                   /*1a5: mov    %rcx,0x8(%rax) */
  0x48, 0x89, 0x10,                         /*1a9: mov    %rdx,(%rax) */
  0x49, 0x8b, 0x46, 0x08,                   /*1ac: mov    0x8(%r14),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*1b0: mov    0x8(%rax),%rax */
  0x49, 0x89, 0x46, 0x10,                   /*1b4: mov    %rax,0x10(%r14) */
  0x49, 0x8b, 0x36,                         /*1b8: mov    (%r14),%rsi */
  0x49, 0x8b, 0x7e, 0x58,                   /*1bb: mov    0x58(%r14),%rdi */
  0x4c, 0x89, 0xf2,                         /*1bf: mov    %r14,%rdx */
  0x41, 0xff, 0x96, 0x20, 0x01, 0x00, 0x00, /*1c2: callq  *0x120(%r14) */
  0x4c, 0x89, 0xf7,                         /*1c9: mov    %r14,%rdi */
  0x5b,                                     /*1cc: pop    %rbx */
  0x41, 0x5e,                               /*1cd: pop    %r14 */
  0x5d,                                     /*1cf: pop    %rbp */

};

static void op_call_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 349)) = a * 1 + 0;
}

static void op_call_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_call_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"c"=>[[1, 0, 240..243], [1, 1, 300..303], [1, 1, 370..373]], "a"=>[[1, 0, 308..311], [1, 0, 316..319], [1, 1, 324..327], [1, 1, 332..335], [16, 24, 348..351], [16, 16, 365..368], [16, 0, 443..446], [1, 0, 557..560]]} */
static uint8_t op_super[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x41, 0x55,                               /*5: push   %r13 */
  0x41, 0x54,                               /*7: push   %r12 */
  0x53,                                     /*9: push   %rbx */
  0x48, 0x83, 0xec, 0x18,                   /*a: sub    $0x18,%rsp */
  0x48, 0x89, 0xfb,                         /*e: mov    %rdi,%rbx */
  0x48, 0x8b, 0x6b, 0x58,                   /*11: mov    0x58(%rbx),%rbp */
  0x48, 0x8b, 0x45, 0x18,                   /*15: mov    0x18(%rbp),%rax */
  0x4c, 0x8b, 0x70, 0x20,                   /*19: mov    0x20(%rax),%r14 */
  0x45, 0x8b, 0x2e,                         /*1d: mov    (%r14),%r13d */
  0x45, 0x85, 0xed,                         /*20: test   %r13d,%r13d */
  0x74, 0x73,                               /*23: je     98 <op_super+0x98> */
  0x48, 0x8b, 0x43, 0x18,                   /*25: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x08,                         /*29: mov    (%rax),%rcx */
  0x48, 0x89, 0x4c, 0x24, 0x08,             /*2c: mov    %rcx,0x8(%rsp) */
  0x4c, 0x8b, 0x78, 0x08,                   /*31: mov    0x8(%rax),%r15 */
  0x4c, 0x89, 0x3c, 0x24,                   /*35: mov    %r15,(%rsp) */
  0x49, 0xc1, 0xef, 0x20,                   /*39: shr    $0x20,%r15 */
  0x49, 0x8b, 0x46, 0x48,                   /*3d: mov    0x48(%r14),%rax */
  0x48, 0x8b, 0x48, 0x28,                   /*41: mov    0x28(%rax),%rcx */
  0x48, 0x89, 0x4c, 0x24, 0x10,             /*45: mov    %rcx,0x10(%rsp) */
  0x48, 0x8b, 0x03,                         /*4a: mov    (%rbx),%rax */
  0x48, 0x39, 0x48, 0x38,                   /*4d: cmp    %rcx,0x38(%rax) */
  0x75, 0x08,                               /*51: jne    5b <op_super+0x5b> */
  0x31, 0xd2,                               /*53: xor    %edx,%edx */
  0x44, 0x39, 0x68, 0x30,                   /*55: cmp    %r13d,0x30(%rax) */
  0x74, 0x33,                               /*59: je     8e <op_super+0x8e> */
  0x48, 0x39, 0x48, 0x48,                   /*5b: cmp    %rcx,0x48(%rax) */
  0x75, 0x0b,                               /*5f: jne    6c <op_super+0x6c> */
  0xba, 0x01, 0x00, 0x00, 0x00,             /*61: mov    $0x1,%edx */
  0x44, 0x39, 0x68, 0x40,                   /*66: cmp    %r13d,0x40(%rax) */
  0x74, 0x22,                               /*6a: je     8e <op_super+0x8e> */
  0x48, 0x39, 0x48, 0x58,                   /*6c: cmp    %rcx,0x58(%rax) */
  0x75, 0x0b,                               /*70: jne    7d <op_super+0x7d> */
  0xba, 0x02, 0x00, 0x00, 0x00,             /*72: mov    $0x2,%edx */
  0x44, 0x39, 0x68, 0x50,                   /*77: cmp    %r13d,0x50(%rax) */
  0x74, 0x11,                               /*7b: je     8e <op_super+0x8e> */
  0x48, 0x39, 0x48, 0x68,                   /*7d: cmp    %rcx,0x68(%rax) */
  0x75, 0x58,                               /*81: jne    db <op_super+0xdb> */
  0xba, 0x03, 0x00, 0x00, 0x00,             /*83: mov    $0x3,%edx */
  0x44, 0x39, 0x68, 0x60,                   /*88: cmp    %r13d,0x60(%rax) */
  0x75, 0x4d,                               /*8c: jne    db <op_super+0xdb> */
  0x4c, 0x8b, 0xa4, 0xd0, 0x90, 0x00, 0x00, 0x00,/*8e: mov    0x90(%rax,%rdx,8),%r12 */
  0xeb, 0x57,                               /*96: jmp    ef <op_super+0xef> */
  0x48, 0x8b, 0x43, 0x78,                   /*98: mov    0x78(%rbx),%rax */
  0x48, 0x8b, 0x30,                         /*9c: mov    (%rax),%rsi */
  0x48, 0x89, 0xef,                         /*9f: mov    %rbp,%rdi */
  0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*a2: callq  *0x118(%rbx) */
  0x49, 0x89, 0xc6,                         /*a8: mov    %rax,%r14 */
  0x48, 0x8b, 0x7b, 0x58,                   /*ab: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0xb3, 0x68, 0x02, 0x00, 0x00, /*af: mov    0x268(%rbx),%rsi */
  0xba, 0x1e, 0x00, 0x00, 0x00,             /*b6: mov    $0x1e,%edx */
  0xff, 0x93, 0x88, 0x00, 0x00, 0x00,       /*bb: callq  *0x88(%rbx) */
  0x89, 0xd1,                               /*c1: mov    %edx,%ecx */
  0x48, 0x89, 0xef,                         /*c3: mov    %rbp,%rdi */
  0x4c, 0x89, 0xf6,                         /*c6: mov    %r14,%rsi */
  0x48, 0x89, 0xc2,                         /*c9: mov    %rax,%rdx */
  0xff, 0x93, 0xc0, 0x01, 0x00, 0x00,       /*cc: callq  *0x1c0(%rbx) */
  0x48, 0x89, 0x45, 0x28,                   /*d2: mov    %rax,0x28(%rbp) */
  0xe9, 0x41, 0x01, 0x00, 0x00,             /*d6: jmpq   21c <op_super+0x21c> */
  0x48, 0x8d, 0x74, 0x24, 0x10,             /*db: lea    0x10(%rsp),%rsi */
  0x48, 0x89, 0xef,                         /*e0: mov    %rbp,%rdi */
  0x44, 0x89, 0xea,                         /*e3: mov    %r13d,%edx */
  0xff, 0x93, 0xb0, 0x00, 0x00, 0x00,       /*e6: callq  *0xb0(%rbx) */
  0x49, 0x89, 0xc4,                         /*ec: mov    %rax,%r12 */
  0xbd, 0x00, 0x00, 0xcd, 0x00,             /*ef: mov    $0xcd0000,%ebp */
  0x4d, 0x85, 0xe4,                         /*f4: test   %r12,%r12 */
  0x75, 0x7d,                               /*f7: jne    176 <op_super+0x176> */
  0x48, 0x8b, 0x7b, 0x58,                   /*f9: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0xb3, 0x70, 0x02, 0x00, 0x00, /*fd: mov    0x270(%rbx),%rsi */
  0xba, 0x0e, 0x00, 0x00, 0x00,             /*104: mov    $0xe,%edx */
  0xff, 0x93, 0x60, 0x02, 0x00, 0x00,       /*109: callq  *0x260(%rbx) */
  0x41, 0x89, 0xc5,                         /*10f: mov    %eax,%r13d */
  0x48, 0x8b, 0x7b, 0x58,                   /*112: mov    0x58(%rbx),%rdi */
  0x48, 0x8d, 0x74, 0x24, 0x10,             /*116: lea    0x10(%rsp),%rsi */
  0x44, 0x89, 0xea,                         /*11b: mov    %r13d,%edx */
  0xff, 0x93, 0xd0, 0x00, 0x00, 0x00,       /*11e: callq  *0xd0(%rbx) */
  0x49, 0x89, 0xc4,                         /*124: mov    %rax,%r12 */
  0x48, 0x8b, 0x43, 0x18,                   /*127: mov    0x18(%rbx),%rax */
  0xb9, 0x10, 0x00, 0xd0, 0x0c,             /*12b: mov    $0xcd00010,%ecx */
  0x48, 0x8b, 0x94, 0x08, 0x00, 0x00, 0xb0, 0x0a,/*130: mov    0xab00000(%rax,%rcx,1),%rdx */
  0x48, 0x8b, 0xb4, 0x08, 0x08, 0x00, 0xb0, 0x0a,/*138: mov    0xab00008(%rax,%rcx,1),%rsi */
  0x48, 0x89, 0xb4, 0x08, 0x18, 0x00, 0xb0, 0x0a,/*140: mov    %rsi,0xab00018(%rax,%rcx,1) */
  0x48, 0x89, 0x94, 0x08, 0x10, 0x00, 0xb0, 0x0a,/*148: mov    %rdx,0xab00010(%rax,%rcx,1) */
  0x48, 0x83, 0xc1, 0xf0,                   /*150: add    $0xfffffffffffffff0,%rcx */
  0x75, 0xda,                               /*154: jne    130 <op_super+0x130> */
  0x48, 0x8b, 0x43, 0x18,                   /*156: mov    0x18(%rbx),%rax */
  0xc7, 0x80, 0x18, 0x10, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*15a: movl   $0x4,0xab1018(%rax) */
  0x41, 0x8b, 0x06,                         /*164: mov    (%r14),%eax */
  0x48, 0x8b, 0x4b, 0x18,                   /*167: mov    0x18(%rbx),%rcx */
  0x89, 0x81, 0x10, 0x10, 0xab, 0x00,       /*16b: mov    %eax,0xab1010(%rcx) */
  0xbd, 0x01, 0x00, 0xcd, 0x00,             /*171: mov    $0xcd0001,%ebp */
  0x48, 0x8b, 0x7b, 0x58,                   /*176: mov    0x58(%rbx),%rdi */
  0xff, 0x93, 0xe8, 0x00, 0x00, 0x00,       /*17a: callq  *0xe8(%rbx) */
  0x44, 0x89, 0x28,                         /*180: mov    %r13d,(%rax) */
  0x4c, 0x89, 0x60, 0x08,                   /*183: mov    %r12,0x8(%rax) */
  0x48, 0x8b, 0x4b, 0x58,                   /*187: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*18b: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x08,                   /*18f: mov    0x8(%rcx),%rcx */
  0x48, 0x89, 0x48, 0x10,                   /*193: mov    %rcx,0x10(%rax) */
  0x89, 0x68, 0x40,                         /*197: mov    %ebp,0x40(%rax) */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*19a: mov    0x10(%rsp),%rcx */
  0x48, 0x89, 0x48, 0x48,                   /*19f: mov    %rcx,0x48(%rax) */
  0x48, 0x8b, 0x4b, 0x10,                   /*1a3: mov    0x10(%rbx),%rcx */
  0x48, 0x83, 0xc1, 0x04,                   /*1a7: add    $0x4,%rcx */
  0x48, 0x89, 0x48, 0x30,                   /*1ab: mov    %rcx,0x30(%rax) */
  0x48, 0x8b, 0x4b, 0x58,                   /*1af: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*1b3: mov    0x18(%rcx),%rcx */
  0x48, 0x81, 0x41, 0x08, 0x00, 0x10, 0xab, 0x00,/*1b7: addq   $0xab1000,0x8(%rcx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*1bf: mov    0x58(%rbx),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*1c3: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x08,                   /*1c7: mov    0x8(%rcx),%rcx */
  0x48, 0x8b, 0x74, 0x24, 0x08,             /*1cb: mov    0x8(%rsp),%rsi */
  0x48, 0x89, 0x31,                         /*1d0: mov    %rsi,(%rcx) */
  0x48, 0x8b, 0x14, 0x24,                   /*1d3: mov    (%rsp),%rdx */
  0x89, 0x51, 0x08,                         /*1d7: mov    %edx,0x8(%rcx) */
  0x44, 0x89, 0x79, 0x0c,                   /*1da: mov    %r15d,0xc(%rcx) */
  0x41, 0xf6, 0x44, 0x24, 0x02, 0x04,       /*1de: testb  $0x4,0x2(%r12) */
  0x74, 0x44,                               /*1e4: je     22a <op_super+0x22a> */
  0x83, 0xcd, 0x02,                         /*1e6: or     $0x2,%ebp */
  0x89, 0x68, 0x18,                         /*1e9: mov    %ebp,0x18(%rax) */
  0x48, 0x8b, 0x7b, 0x58,                   /*1ec: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*1f0: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x68, 0x08,                   /*1f4: mov    0x8(%rax),%rbp */
  0x41, 0xff, 0x54, 0x24, 0x18,             /*1f8: callq  *0x18(%r12) */
  0x48, 0x89, 0x45, 0x00,                   /*1fd: mov    %rax,0x0(%rbp) */
  0x89, 0x55, 0x08,                         /*201: mov    %edx,0x8(%rbp) */
  0x48, 0x8b, 0x7b, 0x58,                   /*204: mov    0x58(%rbx),%rdi */
  0x8b, 0x73, 0x50,                         /*208: mov    0x50(%rbx),%esi */
  0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*20b: callq  *0x110(%rbx) */
  0x48, 0x8b, 0x43, 0x58,                   /*211: mov    0x58(%rbx),%rax */
  0x48, 0x83, 0x78, 0x28, 0x00,             /*215: cmpq   $0x0,0x28(%rax) */
  0x74, 0x7b,                               /*21a: je     297 <op_super+0x297> */
  0x48, 0x89, 0xdf,                         /*21c: mov    %rbx,%rdi */
  0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*21f: callq  *0x1a8(%rbx) */
  0xe9, 0x8b, 0x00, 0x00, 0x00,             /*225: jmpq   2b5 <op_super+0x2b5> */
  0xc7, 0x40, 0x44, 0x00, 0x00, 0xab, 0x00, /*22a: movl   $0xab0000,0x44(%rax) */
  0x4c, 0x89, 0x60, 0x08,                   /*231: mov    %r12,0x8(%rax) */
  0x49, 0x8b, 0x4c, 0x24, 0x18,             /*235: mov    0x18(%r12),%rcx */
  0x48, 0x89, 0x4b, 0x08,                   /*23a: mov    %rcx,0x8(%rbx) */
  0x48, 0x8b, 0x51, 0x10,                   /*23e: mov    0x10(%rcx),%rdx */
  0x48, 0x89, 0x53, 0x20,                   /*242: mov    %rdx,0x20(%rbx) */
  0x48, 0x8b, 0x51, 0x18,                   /*246: mov    0x18(%rcx),%rdx */
  0x48, 0x89, 0x53, 0x28,                   /*24a: mov    %rdx,0x28(%rbx) */
  0x0f, 0xb7, 0x49, 0x02,                   /*24e: movzwl 0x2(%rcx),%ecx */
  0x89, 0x48, 0x18,                         /*252: mov    %ecx,0x18(%rax) */
  0x48, 0x8b, 0x4b, 0x08,                   /*255: mov    0x8(%rbx),%rcx */
  0x48, 0x8b, 0x7b, 0x58,                   /*259: mov    0x58(%rbx),%rdi */
  0x0f, 0xb7, 0x71, 0x02,                   /*25d: movzwl 0x2(%rcx),%esi */
  0x8b, 0x50, 0x40,                         /*261: mov    0x40(%rax),%edx */
  0x83, 0xc2, 0x02,                         /*264: add    $0x2,%edx */
  0xff, 0x93, 0x40, 0x01, 0x00, 0x00,       /*267: callq  *0x140(%rbx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*26d: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*271: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*275: mov    0x8(%rax),%rax */
  0x48, 0x89, 0x43, 0x18,                   /*279: mov    %rax,0x18(%rbx) */
  0x48, 0x8b, 0x43, 0x08,                   /*27d: mov    0x8(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*281: mov    0x8(%rax),%rax */
  0x48, 0x89, 0x43, 0x10,                   /*285: mov    %rax,0x10(%rbx) */
  0x4c, 0x89, 0xe6,                         /*289: mov    %r12,%rsi */
  0x48, 0x89, 0xda,                         /*28c: mov    %rbx,%rdx */
  0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*28f: callq  *0x120(%rbx) */
  0xeb, 0x1e,                               /*295: jmp    2b5 <op_super+0x2b5> */
  0x48, 0x8b, 0x40, 0x18,                   /*297: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x48, 0x20,                   /*29b: mov    0x20(%rax),%rcx */
  0x48, 0x8b, 0x49, 0x10,                   /*29f: mov    0x10(%rcx),%rcx */
  0x48, 0x89, 0x48, 0x08,                   /*2a3: mov    %rcx,0x8(%rax) */
  0x48, 0x89, 0x4b, 0x18,                   /*2a7: mov    %rcx,0x18(%rbx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*2ab: mov    0x58(%rbx),%rdi */
  0xff, 0x93, 0x60, 0x01, 0x00, 0x00,       /*2af: callq  *0x160(%rbx) */
  0x48, 0x89, 0xdf,                         /*2b5: mov    %rbx,%rdi */
  0x48, 0x83, 0xc4, 0x18,                   /*2b8: add    $0x18,%rsp */
  0x5b,                                     /*2bc: pop    %rbx */
  0x41, 0x5c,                               /*2bd: pop    %r12 */
  0x41, 0x5d,                               /*2bf: pop    %r13 */
  0x41, 0x5e,                               /*2c1: pop    %r14 */
  0x41, 0x5f,                               /*2c3: pop    %r15 */
  0x5d,                                     /*2c5: pop    %rbp */

};

static void op_super_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 240)) = c * 1 + 0;
  *((int32_t *)(op + 300)) = c * 1 + 1;
  *((int32_t *)(op + 370)) = c * 1 + 1;
  *((int32_t *)(op + 308)) = a * 1 + 0;
  *((int32_t *)(op + 316)) = a * 1 + 0;
  *((int32_t *)(op + 324)) = a * 1 + 1;
  *((int32_t *)(op + 332)) = a * 1 + 1;
  *((int32_t *)(op + 348)) = a * 16 + 24;
  *((int32_t *)(op + 365)) = a * 16 + 16;
  *((int32_t *)(op + 443)) = a * 16 + 0;
  *((int32_t *)(op + 557)) = a * 1 + 0;
}

static void op_super_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_super_set_args(op, GETARG_A(c),0,GETARG_C(c),op_idx);
}


/* args: {"b"=>[[1, 0, 21..24]], "a"=>[[16, 0, 373..376], [16, 8, 379..382], [16, 0, 391..394], [16, 0, 656..659], [16, 8, 663..666], [16, 24, 699..702], [16, 16, 706..709]]} */
static uint8_t op_argary[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x41, 0x55,                               /*5: push   %r13 */
  0x41, 0x54,                               /*7: push   %r12 */
  0x53,                                     /*9: push   %rbx */
  0x48, 0x83, 0xec, 0x38,                   /*a: sub    $0x38,%rsp */
  0x49, 0x89, 0xfc,                         /*e: mov    %rdi,%r12 */
  0xc7, 0x44, 0x24, 0x34, 0x00, 0x00, 0xbc, 0x00,/*11: movl   $0xbc0000,0x34(%rsp) */
  0x44, 0x8b, 0x6c, 0x24, 0x34,             /*19: mov    0x34(%rsp),%r13d */
  0x44, 0x8b, 0x74, 0x24, 0x34,             /*1e: mov    0x34(%rsp),%r14d */
  0x8b, 0x5c, 0x24, 0x34,                   /*23: mov    0x34(%rsp),%ebx */
  0x8b, 0x74, 0x24, 0x34,                   /*27: mov    0x34(%rsp),%esi */
  0x83, 0xe6, 0x0f,                         /*2b: and    $0xf,%esi */
  0x0f, 0x84, 0x9a, 0x00, 0x00, 0x00,       /*2e: je     ce <op_argary+0xce> */
  0x49, 0x8b, 0x6c, 0x24, 0x58,             /*34: mov    0x58(%r12),%rbp */
  0x48, 0x8b, 0x45, 0x18,                   /*39: mov    0x18(%rbp),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*3d: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*41: mov    0x8(%rax),%rax */
  0x48, 0x8b, 0x40, 0x28,                   /*45: mov    0x28(%rax),%rax */
  0x48, 0x85, 0xc0,                         /*49: test   %rax,%rax */
  0x0f, 0x94, 0xc1,                         /*4c: sete   %cl */
  0x83, 0xfe, 0x01,                         /*4f: cmp    $0x1,%esi */
  0x74, 0x1f,                               /*52: je     73 <op_argary+0x73> */
  0xba, 0x01, 0x00, 0x00, 0x00,             /*54: mov    $0x1,%edx */
  0x29, 0xf2,                               /*59: sub    %esi,%edx */
  0x0f, 0x1f, 0x44, 0x00, 0x00,             /*5b: nopl   0x0(%rax,%rax,1) */
  0xf6, 0xc1, 0x01,                         /*60: test   $0x1,%cl */
  0x75, 0x12,                               /*63: jne    77 <op_argary+0x77> */
  0x48, 0x8b, 0x40, 0x08,                   /*65: mov    0x8(%rax),%rax */
  0x48, 0x85, 0xc0,                         /*69: test   %rax,%rax */
  0x0f, 0x94, 0xc1,                         /*6c: sete   %cl */
  0xff, 0xc2,                               /*6f: inc    %edx */
  0x75, 0xed,                               /*71: jne    60 <op_argary+0x60> */
  0x84, 0xc9,                               /*73: test   %cl,%cl */
  0x74, 0x5e,                               /*75: je     d5 <op_argary+0xd5> */
  0x49, 0x8b, 0x44, 0x24, 0x78,             /*77: mov    0x78(%r12),%rax */
  0x48, 0x8b, 0x30,                         /*7c: mov    (%rax),%rsi */
  0x48, 0x89, 0xef,                         /*7f: mov    %rbp,%rdi */
  0x41, 0xff, 0x94, 0x24, 0x18, 0x01, 0x00, 0x00,/*82: callq  *0x118(%r12) */
  0x49, 0x89, 0xc6,                         /*8a: mov    %rax,%r14 */
  0x49, 0x8b, 0x7c, 0x24, 0x58,             /*8d: mov    0x58(%r12),%rdi */
  0x49, 0x8b, 0xb4, 0x24, 0x68, 0x02, 0x00, 0x00,/*92: mov    0x268(%r12),%rsi */
  0xba, 0x1e, 0x00, 0x00, 0x00,             /*9a: mov    $0x1e,%edx */
  0x41, 0xff, 0x94, 0x24, 0x88, 0x00, 0x00, 0x00,/*9f: callq  *0x88(%r12) */
  0x89, 0xd1,                               /*a7: mov    %edx,%ecx */
  0x48, 0x89, 0xef,                         /*a9: mov    %rbp,%rdi */
  0x4c, 0x89, 0xf6,                         /*ac: mov    %r14,%rsi */
  0x48, 0x89, 0xc2,                         /*af: mov    %rax,%rdx */
  0x41, 0xff, 0x94, 0x24, 0xc0, 0x01, 0x00, 0x00,/*b2: callq  *0x1c0(%r12) */
  0x48, 0x89, 0x45, 0x28,                   /*ba: mov    %rax,0x28(%rbp) */
  0x4c, 0x89, 0xe7,                         /*be: mov    %r12,%rdi */
  0x41, 0xff, 0x94, 0x24, 0xa8, 0x01, 0x00, 0x00,/*c1: callq  *0x1a8(%r12) */
  0xe9, 0x08, 0x02, 0x00, 0x00,             /*c9: jmpq   2d6 <op_argary+0x2d6> */
  0x49, 0x8d, 0x44, 0x24, 0x18,             /*ce: lea    0x18(%r12),%rax */
  0xeb, 0x04,                               /*d3: jmp    d9 <op_argary+0xd9> */
  0x48, 0x83, 0xc0, 0x18,                   /*d5: add    $0x18,%rax */
  0x41, 0xc1, 0xed, 0x0a,                   /*d9: shr    $0xa,%r13d */
  0x45, 0x89, 0xe9,                         /*dd: mov    %r13d,%r9d */
  0x41, 0x83, 0xe1, 0x3f,                   /*e0: and    $0x3f,%r9d */
  0x41, 0xc1, 0xee, 0x09,                   /*e4: shr    $0x9,%r14d */
  0x41, 0x83, 0xe6, 0x01,                   /*e8: and    $0x1,%r14d */
  0xc1, 0xeb, 0x04,                         /*ec: shr    $0x4,%ebx */
  0x89, 0xd9,                               /*ef: mov    %ebx,%ecx */
  0x83, 0xe1, 0x1f,                         /*f1: and    $0x1f,%ecx */
  0x4c, 0x8b, 0x00,                         /*f4: mov    (%rax),%r8 */
  0x49, 0x8d, 0x68, 0x10,                   /*f7: lea    0x10(%r8),%rbp */
  0x45, 0x85, 0xf6,                         /*fb: test   %r14d,%r14d */
  0x0f, 0x84, 0x61, 0x01, 0x00, 0x00,       /*fe: je     265 <op_argary+0x265> */
  0x44, 0x89, 0x74, 0x24, 0x30,             /*104: mov    %r14d,0x30(%rsp) */
  0x44, 0x89, 0xc8,                         /*109: mov    %r9d,%eax */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*10c: mov    %rax,0x10(%rsp) */
  0x48, 0x8d, 0x40, 0x01,                   /*111: lea    0x1(%rax),%rax */
  0x48, 0xc1, 0xe0, 0x04,                   /*115: shl    $0x4,%rax */
  0x45, 0x31, 0xff,                         /*119: xor    %r15d,%r15d */
  0x41, 0x83, 0x7c, 0x00, 0x08, 0x0e,       /*11c: cmpl   $0xe,0x8(%r8,%rax,1) */
  0xba, 0x00, 0x00, 0x00, 0x00,             /*122: mov    $0x0,%edx */
  0x75, 0x0b,                               /*127: jne    134 <op_argary+0x134> */
  0x49, 0x8b, 0x04, 0x00,                   /*129: mov    (%r8,%rax,1),%rax */
  0x4c, 0x8b, 0x78, 0x28,                   /*12d: mov    0x28(%rax),%r15 */
  0x8b, 0x50, 0x18,                         /*131: mov    0x18(%rax),%edx */
  0x48, 0x89, 0x54, 0x24, 0x08,             /*134: mov    %rdx,0x8(%rsp) */
  0x49, 0x8b, 0x44, 0x24, 0x18,             /*139: mov    0x18(%r12),%rax */
  0x48, 0x89, 0x04, 0x24,                   /*13e: mov    %rax,(%rsp) */
  0x49, 0x8b, 0x7c, 0x24, 0x58,             /*142: mov    0x58(%r12),%rdi */
  0x42, 0x8d, 0x34, 0x09,                   /*147: lea    (%rcx,%r9,1),%esi */
  0x48, 0x89, 0x4c, 0x24, 0x20,             /*14b: mov    %rcx,0x20(%rsp) */
  0x01, 0xd6,                               /*150: add    %edx,%esi */
  0x89, 0x74, 0x24, 0x1c,                   /*152: mov    %esi,0x1c(%rsp) */
  0x4c, 0x89, 0x4c, 0x24, 0x28,             /*156: mov    %r9,0x28(%rsp) */
  0x4d, 0x89, 0xc6,                         /*15b: mov    %r8,%r14 */
  0x41, 0xff, 0x94, 0x24, 0xd8, 0x00, 0x00, 0x00,/*15e: callq  *0xd8(%r12) */
  0x4d, 0x89, 0xf1,                         /*166: mov    %r14,%r9 */
  0x4c, 0x8b, 0x44, 0x24, 0x28,             /*169: mov    0x28(%rsp),%r8 */
  0x48, 0x8b, 0x0c, 0x24,                   /*16e: mov    (%rsp),%rcx */
  0x48, 0x89, 0x81, 0x00, 0x10, 0xab, 0x00, /*172: mov    %rax,0xab1000(%rcx) */
  0x89, 0x91, 0x08, 0x10, 0xab, 0x00,       /*179: mov    %edx,0xab1008(%rcx) */
  0x49, 0x8b, 0x44, 0x24, 0x18,             /*17f: mov    0x18(%r12),%rax */
  0x4c, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*184: mov    0xab1000(%rax),%r10 */
  0x45, 0x85, 0xc0,                         /*18b: test   %r8d,%r8d */
  0x74, 0x34,                               /*18e: je     1c4 <op_argary+0x1c4> */
  0x49, 0x8b, 0x4a, 0x28,                   /*190: mov    0x28(%r10),%rcx */
  0x49, 0x83, 0xe5, 0x3f,                   /*194: and    $0x3f,%r13 */
  0x49, 0xf7, 0xdd,                         /*198: neg    %r13 */
  0x4c, 0x89, 0xca,                         /*19b: mov    %r9,%rdx */
  0x66, 0x90,                               /*19e: xchg   %ax,%ax */
  0x48, 0x89, 0xee,                         /*1a0: mov    %rbp,%rsi */
  0x48, 0x83, 0xc2, 0x20,                   /*1a3: add    $0x20,%rdx */
  0x48, 0x8b, 0x3e,                         /*1a7: mov    (%rsi),%rdi */
  0x48, 0x8b, 0x6e, 0x08,                   /*1aa: mov    0x8(%rsi),%rbp */
  0x48, 0x89, 0x69, 0x08,                   /*1ae: mov    %rbp,0x8(%rcx) */
  0x48, 0x89, 0x39,                         /*1b2: mov    %rdi,(%rcx) */
  0x48, 0x8d, 0x49, 0x10,                   /*1b5: lea    0x10(%rcx),%rcx */
  0x49, 0xff, 0xc5,                         /*1b9: inc    %r13 */
  0x48, 0x89, 0xd5,                         /*1bc: mov    %rdx,%rbp */
  0x48, 0x89, 0xf2,                         /*1bf: mov    %rsi,%rdx */
  0x75, 0xdc,                               /*1c2: jne    1a0 <op_argary+0x1a0> */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*1c4: mov    0x8(%rsp),%rax */
  0x85, 0xc0,                               /*1c9: test   %eax,%eax */
  0x44, 0x8b, 0x74, 0x24, 0x30,             /*1cb: mov    0x30(%rsp),%r14d */
  0x4c, 0x8b, 0x5c, 0x24, 0x10,             /*1d0: mov    0x10(%rsp),%r11 */
  0x7e, 0x34,                               /*1d5: jle    20b <op_argary+0x20b> */
  0x4c, 0x89, 0xd9,                         /*1d7: mov    %r11,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*1da: shl    $0x4,%rcx */
  0x49, 0x03, 0x4a, 0x28,                   /*1de: add    0x28(%r10),%rcx */
  0x48, 0x63, 0xd0,                         /*1e2: movslq %eax,%rdx */
  0x48, 0xf7, 0xda,                         /*1e5: neg    %rdx */
  0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*1e8: nopl   0x0(%rax,%rax,1) */
  0x49, 0x8b, 0x37,                         /*1f0: mov    (%r15),%rsi */
  0x49, 0x8b, 0x7f, 0x08,                   /*1f3: mov    0x8(%r15),%rdi */
  0x4d, 0x8d, 0x7f, 0x10,                   /*1f7: lea    0x10(%r15),%r15 */
  0x48, 0x89, 0x79, 0x08,                   /*1fb: mov    %rdi,0x8(%rcx) */
  0x48, 0x89, 0x31,                         /*1ff: mov    %rsi,(%rcx) */
  0x48, 0x8d, 0x49, 0x10,                   /*202: lea    0x10(%rcx),%rcx */
  0x48, 0xff, 0xc2,                         /*206: inc    %rdx */
  0x75, 0xe5,                               /*209: jne    1f0 <op_argary+0x1f0> */
  0x48, 0x8b, 0x6c, 0x24, 0x20,             /*20b: mov    0x20(%rsp),%rbp */
  0x85, 0xed,                               /*210: test   %ebp,%ebp */
  0x74, 0x47,                               /*212: je     25b <op_argary+0x25b> */
  0x4c, 0x89, 0xd9,                         /*214: mov    %r11,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*217: shl    $0x4,%rcx */
  0x4a, 0x8d, 0x4c, 0x09, 0x20,             /*21b: lea    0x20(%rcx,%r9,1),%rcx */
  0x48, 0x63, 0xd0,                         /*220: movslq %eax,%rdx */
  0x4c, 0x01, 0xda,                         /*223: add    %r11,%rdx */
  0x48, 0xc1, 0xe2, 0x04,                   /*226: shl    $0x4,%rdx */
  0x49, 0x03, 0x52, 0x28,                   /*22a: add    0x28(%r10),%rdx */
  0x48, 0x83, 0xe3, 0x1f,                   /*22e: and    $0x1f,%rbx */
  0x48, 0xf7, 0xdb,                         /*232: neg    %rbx */
  0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*235: data16 nopw %cs:0x0(%rax,%rax,1) */
  0x48, 0x8b, 0x31,                         /*240: mov    (%rcx),%rsi */
  0x48, 0x8b, 0x79, 0x08,                   /*243: mov    0x8(%rcx),%rdi */
  0x48, 0x8d, 0x49, 0x10,                   /*247: lea    0x10(%rcx),%rcx */
  0x48, 0x89, 0x7a, 0x08,                   /*24b: mov    %rdi,0x8(%rdx) */
  0x48, 0x89, 0x32,                         /*24f: mov    %rsi,(%rdx) */
  0x48, 0x8d, 0x52, 0x10,                   /*252: lea    0x10(%rdx),%rdx */
  0x48, 0xff, 0xc3,                         /*256: inc    %rbx */
  0x75, 0xe5,                               /*259: jne    240 <op_argary+0x240> */
  0x8b, 0x4c, 0x24, 0x1c,                   /*25b: mov    0x1c(%rsp),%ecx */
  0x41, 0x89, 0x4a, 0x18,                   /*25f: mov    %ecx,0x18(%r10) */
  0xeb, 0x36,                               /*263: jmp    29b <op_argary+0x29b> */
  0x4d, 0x8b, 0x7c, 0x24, 0x18,             /*265: mov    0x18(%r12),%r15 */
  0x49, 0x8b, 0x7c, 0x24, 0x58,             /*26a: mov    0x58(%r12),%rdi */
  0x42, 0x8d, 0x34, 0x09,                   /*26f: lea    (%rcx,%r9,1),%esi */
  0x48, 0x89, 0xea,                         /*273: mov    %rbp,%rdx */
  0x4d, 0x89, 0xcd,                         /*276: mov    %r9,%r13 */
  0x4c, 0x89, 0xc3,                         /*279: mov    %r8,%rbx */
  0x48, 0x89, 0xcd,                         /*27c: mov    %rcx,%rbp */
  0x41, 0xff, 0x94, 0x24, 0x20, 0x02, 0x00, 0x00,/*27f: callq  *0x220(%r12) */
  0x49, 0x89, 0xd9,                         /*287: mov    %rbx,%r9 */
  0x4d, 0x89, 0xe8,                         /*28a: mov    %r13,%r8 */
  0x49, 0x89, 0x87, 0x00, 0x10, 0xab, 0x00, /*28d: mov    %rax,0xab1000(%r15) */
  0x41, 0x89, 0x97, 0x08, 0x10, 0xab, 0x00, /*294: mov    %edx,0xab1008(%r15) */
  0x49, 0x8b, 0x44, 0x24, 0x18,             /*29b: mov    0x18(%r12),%rax */
  0x45, 0x01, 0xf0,                         /*2a0: add    %r14d,%r8d */
  0x42, 0x8d, 0x4c, 0x05, 0x01,             /*2a3: lea    0x1(%rbp,%r8,1),%ecx */
  0x48, 0x63, 0xc9,                         /*2a8: movslq %ecx,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*2ab: shl    $0x4,%rcx */
  0x49, 0x8b, 0x14, 0x09,                   /*2af: mov    (%r9,%rcx,1),%rdx */
  0x49, 0x8b, 0x4c, 0x09, 0x08,             /*2b3: mov    0x8(%r9,%rcx,1),%rcx */
  0x48, 0x89, 0x88, 0x18, 0x10, 0xab, 0x00, /*2b8: mov    %rcx,0xab1018(%rax) */
  0x48, 0x89, 0x90, 0x10, 0x10, 0xab, 0x00, /*2bf: mov    %rdx,0xab1010(%rax) */
  0x41, 0x8b, 0x44, 0x24, 0x50,             /*2c6: mov    0x50(%r12),%eax */
  0x49, 0x8b, 0x4c, 0x24, 0x58,             /*2cb: mov    0x58(%r12),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*2d0: mov    %eax,0xdc(%rcx) */
  0x4c, 0x89, 0xe7,                         /*2d6: mov    %r12,%rdi */
  0x48, 0x83, 0xc4, 0x38,                   /*2d9: add    $0x38,%rsp */
  0x5b,                                     /*2dd: pop    %rbx */
  0x41, 0x5c,                               /*2de: pop    %r12 */
  0x41, 0x5d,                               /*2e0: pop    %r13 */
  0x41, 0x5e,                               /*2e2: pop    %r14 */
  0x41, 0x5f,                               /*2e4: pop    %r15 */
  0x5d,                                     /*2e6: pop    %rbp */

};

static void op_argary_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 1 + 0;
  *((int32_t *)(op + 373)) = a * 16 + 0;
  *((int32_t *)(op + 379)) = a * 16 + 8;
  *((int32_t *)(op + 391)) = a * 16 + 0;
  *((int32_t *)(op + 656)) = a * 16 + 0;
  *((int32_t *)(op + 663)) = a * 16 + 8;
  *((int32_t *)(op + 699)) = a * 16 + 24;
  *((int32_t *)(op + 706)) = a * 16 + 16;
}

static void op_argary_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_argary_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[1, 0, 23..26]]} */
static uint8_t op_enter[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x41, 0x55,                               /*5: push   %r13 */
  0x41, 0x54,                               /*7: push   %r12 */
  0x53,                                     /*9: push   %rbx */
  0x48, 0x83, 0xec, 0x58,                   /*a: sub    $0x58,%rsp */
  0x48, 0x89, 0xfd,                         /*e: mov    %rdi,%rbp */
  0x48, 0x89, 0x6c, 0x24, 0x50,             /*11: mov    %rbp,0x50(%rsp) */
  0xb8, 0x00, 0x00, 0xab, 0x00,             /*16: mov    $0xab0000,%eax */
  0x41, 0x89, 0xc4,                         /*1b: mov    %eax,%r12d */
  0x44, 0x89, 0xe1,                         /*1e: mov    %r12d,%ecx */
  0xc1, 0xe9, 0x12,                         /*21: shr    $0x12,%ecx */
  0x83, 0xe1, 0x1f,                         /*24: and    $0x1f,%ecx */
  0x48, 0x89, 0x4c, 0x24, 0x40,             /*27: mov    %rcx,0x40(%rsp) */
  0x45, 0x89, 0xe7,                         /*2c: mov    %r12d,%r15d */
  0x41, 0xc1, 0xef, 0x0d,                   /*2f: shr    $0xd,%r15d */
  0x41, 0x83, 0xe7, 0x1f,                   /*33: and    $0x1f,%r15d */
  0x45, 0x89, 0xe5,                         /*37: mov    %r12d,%r13d */
  0x41, 0xc1, 0xed, 0x0c,                   /*3a: shr    $0xc,%r13d */
  0x41, 0x83, 0xe5, 0x01,                   /*3e: and    $0x1,%r13d */
  0x41, 0xc1, 0xec, 0x07,                   /*42: shr    $0x7,%r12d */
  0x48, 0x8b, 0x5d, 0x18,                   /*46: mov    0x18(%rbp),%rbx */
  0x48, 0x8b, 0x7d, 0x58,                   /*4a: mov    0x58(%rbp),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*4e: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*52: mov    0x20(%rax),%rax */
  0x4c, 0x63, 0x50, 0x40,                   /*56: movslq 0x40(%rax),%r10 */
  0x46, 0x8d, 0x0c, 0x39,                   /*5a: lea    (%rcx,%r15,1),%r9d */
  0x4d, 0x85, 0xd2,                         /*5e: test   %r10,%r10 */
  0x49, 0x8d, 0x4a, 0x01,                   /*61: lea    0x1(%r10),%rcx */
  0xb8, 0x02, 0x00, 0x00, 0x00,             /*65: mov    $0x2,%eax */
  0x48, 0x0f, 0x49, 0xc1,                   /*6a: cmovns %rcx,%rax */
  0x48, 0xc1, 0xe0, 0x04,                   /*6e: shl    $0x4,%rax */
  0x48, 0x8d, 0x0c, 0x03,                   /*72: lea    (%rbx,%rax,1),%rcx */
  0x48, 0x89, 0x4c, 0x24, 0x38,             /*76: mov    %rcx,0x38(%rsp) */
  0x8b, 0x54, 0x03, 0x08,                   /*7b: mov    0x8(%rbx,%rax,1),%edx */
  0x83, 0xfa, 0x0d,                         /*7f: cmp    $0xd,%edx */
  0x74, 0x6a,                               /*82: je     ee <op_enter+0xee> */
  0x85, 0xd2,                               /*84: test   %edx,%edx */
  0x75, 0x0a,                               /*86: jne    92 <op_enter+0x92> */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*88: mov    0x38(%rsp),%rcx */
  0x83, 0x39, 0x00,                         /*8d: cmpl   $0x0,(%rcx) */
  0x74, 0x5c,                               /*90: je     ee <op_enter+0xee> */
  0x48, 0x8b, 0x6c, 0x24, 0x50,             /*92: mov    0x50(%rsp),%rbp */
  0x4c, 0x89, 0x6c, 0x24, 0x20,             /*97: mov    %r13,0x20(%rsp) */
  0x48, 0x8d, 0x44, 0x03, 0x08,             /*9c: lea    0x8(%rbx,%rax,1),%rax */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*a1: mov    %rax,0x30(%rsp) */
  0x4c, 0x8b, 0x6c, 0x24, 0x38,             /*a6: mov    0x38(%rsp),%r13 */
  0x49, 0x8b, 0x75, 0x00,                   /*ab: mov    0x0(%r13),%rsi */
  0x4c, 0x8b, 0x85, 0x78, 0x02, 0x00, 0x00, /*af: mov    0x278(%rbp),%r8 */
  0x48, 0x89, 0x5c, 0x24, 0x48,             /*b6: mov    %rbx,0x48(%rsp) */
  0x4d, 0x89, 0xce,                         /*bb: mov    %r9,%r14 */
  0x4c, 0x8b, 0x8d, 0x80, 0x02, 0x00, 0x00, /*be: mov    0x280(%rbp),%r9 */
  0xb9, 0x0d, 0x00, 0x00, 0x00,             /*c5: mov    $0xd,%ecx */
  0x4c, 0x89, 0xd3,                         /*ca: mov    %r10,%rbx */
  0xff, 0x95, 0x30, 0x01, 0x00, 0x00,       /*cd: callq  *0x130(%rbp) */
  0x49, 0x89, 0xda,                         /*d3: mov    %rbx,%r10 */
  0x4d, 0x89, 0xf1,                         /*d6: mov    %r14,%r9 */
  0x48, 0x8b, 0x5c, 0x24, 0x48,             /*d9: mov    0x48(%rsp),%rbx */
  0x49, 0x89, 0x45, 0x00,                   /*de: mov    %rax,0x0(%r13) */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*e2: mov    0x30(%rsp),%rax */
  0x89, 0x10,                               /*e7: mov    %edx,(%rax) */
  0x4c, 0x8b, 0x6c, 0x24, 0x20,             /*e9: mov    0x20(%rsp),%r13 */
  0x45, 0x89, 0xe3,                         /*ee: mov    %r12d,%r11d */
  0x41, 0x83, 0xe3, 0x1f,                   /*f1: and    $0x1f,%r11d */
  0x43, 0x8d, 0x2c, 0x29,                   /*f5: lea    (%r9,%r13,1),%ebp */
  0x48, 0x83, 0xc3, 0x10,                   /*f9: add    $0x10,%rbx */
  0x48, 0x89, 0x5c, 0x24, 0x48,             /*fd: mov    %rbx,0x48(%rsp) */
  0x45, 0x85, 0xd2,                         /*102: test   %r10d,%r10d */
  0x49, 0x89, 0xde,                         /*105: mov    %rbx,%r14 */
  0x79, 0x4a,                               /*108: jns    154 <op_enter+0x154> */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*10a: mov    0x50(%rsp),%rcx */
  0x48, 0x8b, 0x41, 0x18,                   /*10f: mov    0x18(%rcx),%rax */
  0x48, 0x8b, 0x79, 0x58,                   /*113: mov    0x58(%rcx),%rdi */
  0x48, 0x8b, 0x70, 0x10,                   /*117: mov    0x10(%rax),%rsi */
  0x48, 0x8b, 0x56, 0x28,                   /*11b: mov    0x28(%rsi),%rdx */
  0x48, 0x89, 0x54, 0x24, 0x30,             /*11f: mov    %rdx,0x30(%rsp) */
  0x8b, 0x56, 0x18,                         /*124: mov    0x18(%rsi),%edx */
  0x48, 0x89, 0x54, 0x24, 0x28,             /*127: mov    %rdx,0x28(%rsp) */
  0x8b, 0x50, 0x18,                         /*12c: mov    0x18(%rax),%edx */
  0x48, 0x89, 0xc8,                         /*12f: mov    %rcx,%rax */
  0x4d, 0x89, 0xee,                         /*132: mov    %r13,%r14 */
  0x4d, 0x89, 0xcd,                         /*135: mov    %r9,%r13 */
  0x4c, 0x89, 0xdb,                         /*138: mov    %r11,%rbx */
  0xff, 0x90, 0xe0, 0x01, 0x00, 0x00,       /*13b: callq  *0x1e0(%rax) */
  0x49, 0x89, 0xdb,                         /*141: mov    %rbx,%r11 */
  0x4c, 0x8b, 0x54, 0x24, 0x28,             /*144: mov    0x28(%rsp),%r10 */
  0x4d, 0x89, 0xe9,                         /*149: mov    %r13,%r9 */
  0x4d, 0x89, 0xf5,                         /*14c: mov    %r14,%r13 */
  0x4c, 0x8b, 0x74, 0x24, 0x30,             /*14f: mov    0x30(%rsp),%r14 */
  0x42, 0x8d, 0x5c, 0x1d, 0x00,             /*154: lea    0x0(%rbp,%r11,1),%ebx */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*159: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x78, 0x58,                   /*15e: mov    0x58(%rax),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*162: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*166: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0x48, 0x08,                   /*16a: mov    0x8(%rax),%rcx */
  0x48, 0x85, 0xc9,                         /*16e: test   %rcx,%rcx */
  0x74, 0x44,                               /*171: je     1b7 <op_enter+0x1b7> */
  0xf6, 0x41, 0x02, 0x08,                   /*173: testb  $0x8,0x2(%rcx) */
  0x74, 0x3e,                               /*177: je     1b7 <op_enter+0x1b7> */
  0x45, 0x85, 0xd2,                         /*179: test   %r10d,%r10d */
  0x0f, 0x88, 0x9b, 0x00, 0x00, 0x00,       /*17c: js     21d <op_enter+0x21d> */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*182: mov    0x40(%rsp),%rcx */
  0x42, 0x8d, 0x34, 0x19,                   /*187: lea    (%rcx,%r11,1),%esi */
  0x41, 0x39, 0xf2,                         /*18b: cmp    %esi,%r10d */
  0x7c, 0x0e,                               /*18e: jl     19e <op_enter+0x19e> */
  0x45, 0x85, 0xed,                         /*190: test   %r13d,%r13d */
  0x0f, 0x85, 0x84, 0x00, 0x00, 0x00,       /*193: jne    21d <op_enter+0x21d> */
  0x41, 0x39, 0xda,                         /*199: cmp    %ebx,%r10d */
  0x7e, 0x7f,                               /*19c: jle    21d <op_enter+0x21d> */
  0x48, 0x8b, 0x5c, 0x24, 0x50,             /*19e: mov    0x50(%rsp),%rbx */
  0xff, 0x93, 0x58, 0x02, 0x00, 0x00,       /*1a3: callq  *0x258(%rbx) */
  0x48, 0x89, 0xdf,                         /*1a9: mov    %rbx,%rdi */
  0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*1ac: callq  *0x1a8(%rbx) */
  0xe9, 0xa2, 0x05, 0x00, 0x00,             /*1b2: jmpq   759 <op_enter+0x759> */
  0x83, 0xfb, 0x02,                         /*1b7: cmp    $0x2,%ebx */
  0x7c, 0x61,                               /*1ba: jl     21d <op_enter+0x21d> */
  0x41, 0x83, 0xfa, 0x01,                   /*1bc: cmp    $0x1,%r10d */
  0x75, 0x5b,                               /*1c0: jne    21d <op_enter+0x21d> */
  0x4c, 0x89, 0x4c, 0x24, 0x08,             /*1c2: mov    %r9,0x8(%rsp) */
  0x41, 0xba, 0x01, 0x00, 0x00, 0x00,       /*1c7: mov    $0x1,%r10d */
  0x41, 0x83, 0x7e, 0x08, 0x0e,             /*1cd: cmpl   $0xe,0x8(%r14) */
  0x75, 0x44,                               /*1d2: jne    218 <op_enter+0x218> */
  0x49, 0x8b, 0x36,                         /*1d4: mov    (%r14),%rsi */
  0xba, 0x0e, 0x00, 0x00, 0x00,             /*1d7: mov    $0xe,%edx */
  0x4c, 0x89, 0x74, 0x24, 0x30,             /*1dc: mov    %r14,0x30(%rsp) */
  0x4d, 0x89, 0xde,                         /*1e1: mov    %r11,%r14 */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*1e4: mov    %rbx,0x10(%rsp) */
  0x48, 0x8b, 0x5c, 0x24, 0x50,             /*1e9: mov    0x50(%rsp),%rbx */
  0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*1ee: callq  *0x1e0(%rbx) */
  0x4d, 0x89, 0xf3,                         /*1f4: mov    %r14,%r11 */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*1f7: mov    0x30(%rsp),%rax */
  0x48, 0x8b, 0x00,                         /*1fc: mov    (%rax),%rax */
  0x44, 0x8b, 0x50, 0x18,                   /*1ff: mov    0x18(%rax),%r10d */
  0x4c, 0x8b, 0x70, 0x28,                   /*203: mov    0x28(%rax),%r14 */
  0x48, 0x8b, 0x43, 0x58,                   /*207: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x5c, 0x24, 0x10,             /*20b: mov    0x10(%rsp),%rbx */
  0x48, 0x8b, 0x40, 0x18,                   /*210: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*214: mov    0x20(%rax),%rax */
  0x4c, 0x8b, 0x4c, 0x24, 0x08,             /*218: mov    0x8(%rsp),%r9 */
  0x89, 0x58, 0x40,                         /*21d: mov    %ebx,0x40(%rax) */
  0x41, 0x39, 0xda,                         /*220: cmp    %ebx,%r10d */
  0x0f, 0x8d, 0xf7, 0x00, 0x00, 0x00,       /*223: jge    320 <op_enter+0x320> */
  0x4c, 0x89, 0x7c, 0x24, 0x28,             /*229: mov    %r15,0x28(%rsp) */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*22e: mov    0x40(%rsp),%rax */
  0x46, 0x8d, 0x24, 0x18,                   /*233: lea    (%rax,%r11,1),%r12d */
  0x45, 0x39, 0xe2,                         /*237: cmp    %r12d,%r10d */
  0x45, 0x89, 0xd8,                         /*23a: mov    %r11d,%r8d */
  0x7d, 0x11,                               /*23d: jge    250 <op_enter+0x250> */
  0x31, 0xc9,                               /*23f: xor    %ecx,%ecx */
  0x45, 0x89, 0xd0,                         /*241: mov    %r10d,%r8d */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*244: mov    0x40(%rsp),%rax */
  0x41, 0x29, 0xc0,                         /*249: sub    %eax,%r8d */
  0x44, 0x0f, 0x4e, 0xc1,                   /*24c: cmovle %ecx,%r8d */
  0xff, 0xc3,                               /*250: inc    %ebx */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*252: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x48, 0x18,                   /*257: mov    0x18(%rax),%rcx */
  0x48, 0xc1, 0xe3, 0x04,                   /*25b: shl    $0x4,%rbx */
  0x48, 0x8b, 0x74, 0x24, 0x38,             /*25f: mov    0x38(%rsp),%rsi */
  0x48, 0x8b, 0x16,                         /*264: mov    (%rsi),%rdx */
  0x48, 0x8b, 0x76, 0x08,                   /*267: mov    0x8(%rsi),%rsi */
  0x48, 0x89, 0x74, 0x19, 0x08,             /*26b: mov    %rsi,0x8(%rcx,%rbx,1) */
  0x48, 0x89, 0x14, 0x19,                   /*270: mov    %rdx,(%rcx,%rbx,1) */
  0x41, 0x8d, 0x4a, 0x01,                   /*274: lea    0x1(%r10),%ecx */
  0x48, 0x63, 0xc9,                         /*278: movslq %ecx,%rcx */
  0x48, 0x8b, 0x50, 0x18,                   /*27b: mov    0x18(%rax),%rdx */
  0x48, 0xc1, 0xe1, 0x04,                   /*27f: shl    $0x4,%rcx */
  0xc7, 0x44, 0x0a, 0x08, 0x00, 0x00, 0x00, 0x00,/*283: movl   $0x0,0x8(%rdx,%rcx,1) */
  0x48, 0x8b, 0x50, 0x18,                   /*28b: mov    0x18(%rax),%rdx */
  0xc7, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, /*28f: movl   $0x0,(%rdx,%rcx,1) */
  0x4c, 0x39, 0x74, 0x24, 0x48,             /*296: cmp    %r14,0x48(%rsp) */
  0x0f, 0x84, 0x73, 0x01, 0x00, 0x00,       /*29b: je     414 <op_enter+0x414> */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*2a1: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x48, 0x18,                   /*2a6: mov    0x18(%rax),%rcx */
  0x48, 0x8d, 0x59, 0x10,                   /*2aa: lea    0x10(%rcx),%rbx */
  0x4c, 0x39, 0xf3,                         /*2ae: cmp    %r14,%rbx */
  0x0f, 0x86, 0x19, 0x01, 0x00, 0x00,       /*2b1: jbe    3d0 <op_enter+0x3d0> */
  0x44, 0x89, 0xd6,                         /*2b7: mov    %r10d,%esi */
  0x44, 0x29, 0xc6,                         /*2ba: sub    %r8d,%esi */
  0x48, 0x63, 0xf6,                         /*2bd: movslq %esi,%rsi */
  0x48, 0xc1, 0xe6, 0x04,                   /*2c0: shl    $0x4,%rsi */
  0x4c, 0x01, 0xf6,                         /*2c4: add    %r14,%rsi */
  0x48, 0x39, 0xf3,                         /*2c7: cmp    %rsi,%rbx */
  0x0f, 0x83, 0x00, 0x01, 0x00, 0x00,       /*2ca: jae    3d0 <op_enter+0x3d0> */
  0x44, 0x89, 0xd2,                         /*2d0: mov    %r10d,%edx */
  0x44, 0x29, 0xc2,                         /*2d3: sub    %r8d,%edx */
  0x0f, 0x84, 0x38, 0x01, 0x00, 0x00,       /*2d6: je     414 <op_enter+0x414> */
  0x48, 0x63, 0xd2,                         /*2dc: movslq %edx,%rdx */
  0x48, 0x89, 0xd6,                         /*2df: mov    %rdx,%rsi */
  0x48, 0xc1, 0xe6, 0x04,                   /*2e2: shl    $0x4,%rsi */
  0x48, 0x01, 0xf1,                         /*2e6: add    %rsi,%rcx */
  0x4a, 0x8d, 0x74, 0x36, 0xf0,             /*2e9: lea    -0x10(%rsi,%r14,1),%rsi */
  0x48, 0xf7, 0xda,                         /*2ee: neg    %rdx */
  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*2f1: data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
  0x48, 0x8b, 0x3e,                         /*300: mov    (%rsi),%rdi */
  0x48, 0x8b, 0x5e, 0x08,                   /*303: mov    0x8(%rsi),%rbx */
  0x48, 0x89, 0x59, 0x08,                   /*307: mov    %rbx,0x8(%rcx) */
  0x48, 0x89, 0x39,                         /*30b: mov    %rdi,(%rcx) */
  0x48, 0x83, 0xc1, 0xf0,                   /*30e: add    $0xfffffffffffffff0,%rcx */
  0x48, 0x83, 0xc6, 0xf0,                   /*312: add    $0xfffffffffffffff0,%rsi */
  0x48, 0xff, 0xc2,                         /*316: inc    %rdx */
  0x75, 0xe5,                               /*319: jne    300 <op_enter+0x300> */
  0xe9, 0xf4, 0x00, 0x00, 0x00,             /*31b: jmpq   414 <op_enter+0x414> */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*320: mov    %rbx,0x10(%rsp) */
  0x4c, 0x89, 0x7c, 0x24, 0x28,             /*325: mov    %r15,0x28(%rsp) */
  0x4c, 0x39, 0x74, 0x24, 0x48,             /*32a: cmp    %r14,0x48(%rsp) */
  0x0f, 0x84, 0xaf, 0x01, 0x00, 0x00,       /*32f: je     4e4 <op_enter+0x4e4> */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*335: mov    0x10(%rsp),%rax */
  0x8d, 0x40, 0x01,                         /*33a: lea    0x1(%rax),%eax */
  0x48, 0x8b, 0x7c, 0x24, 0x50,             /*33d: mov    0x50(%rsp),%rdi */
  0x48, 0x8b, 0x4f, 0x18,                   /*342: mov    0x18(%rdi),%rcx */
  0x48, 0xc1, 0xe0, 0x04,                   /*346: shl    $0x4,%rax */
  0x48, 0x8b, 0x74, 0x24, 0x38,             /*34a: mov    0x38(%rsp),%rsi */
  0x48, 0x8b, 0x16,                         /*34f: mov    (%rsi),%rdx */
  0x48, 0x8b, 0x76, 0x08,                   /*352: mov    0x8(%rsi),%rsi */
  0x48, 0x89, 0x74, 0x01, 0x08,             /*356: mov    %rsi,0x8(%rcx,%rax,1) */
  0x48, 0x89, 0x14, 0x01,                   /*35b: mov    %rdx,(%rcx,%rax,1) */
  0x48, 0x8b, 0x47, 0x18,                   /*35f: mov    0x18(%rdi),%rax */
  0x48, 0x8d, 0x48, 0x10,                   /*363: lea    0x10(%rax),%rcx */
  0x44, 0x89, 0xca,                         /*367: mov    %r9d,%edx */
  0x4c, 0x39, 0xf1,                         /*36a: cmp    %r14,%rcx */
  0x0f, 0x86, 0x2d, 0x01, 0x00, 0x00,       /*36d: jbe    4a0 <op_enter+0x4a0> */
  0x48, 0xc1, 0xe2, 0x04,                   /*373: shl    $0x4,%rdx */
  0x4c, 0x01, 0xf2,                         /*377: add    %r14,%rdx */
  0x48, 0x39, 0xd1,                         /*37a: cmp    %rdx,%rcx */
  0x0f, 0x83, 0x1d, 0x01, 0x00, 0x00,       /*37d: jae    4a0 <op_enter+0x4a0> */
  0x45, 0x85, 0xc9,                         /*383: test   %r9d,%r9d */
  0x0f, 0x84, 0x58, 0x01, 0x00, 0x00,       /*386: je     4e4 <op_enter+0x4e4> */
  0x4c, 0x89, 0xc9,                         /*38c: mov    %r9,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*38f: shl    $0x4,%rcx */
  0x48, 0x01, 0xc8,                         /*393: add    %rcx,%rax */
  0x4a, 0x8d, 0x4c, 0x31, 0xf0,             /*396: lea    -0x10(%rcx,%r14,1),%rcx */
  0x4c, 0x89, 0xca,                         /*39b: mov    %r9,%rdx */
  0x48, 0xf7, 0xda,                         /*39e: neg    %rdx */
  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*3a1: data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
  0x48, 0x8b, 0x31,                         /*3b0: mov    (%rcx),%rsi */
  0x48, 0x8b, 0x79, 0x08,                   /*3b3: mov    0x8(%rcx),%rdi */
  0x48, 0x89, 0x78, 0x08,                   /*3b7: mov    %rdi,0x8(%rax) */
  0x48, 0x89, 0x30,                         /*3bb: mov    %rsi,(%rax) */
  0x48, 0x83, 0xc0, 0xf0,                   /*3be: add    $0xfffffffffffffff0,%rax */
  0x48, 0x83, 0xc1, 0xf0,                   /*3c2: add    $0xfffffffffffffff0,%rcx */
  0x48, 0xff, 0xc2,                         /*3c6: inc    %rdx */
  0x75, 0xe5,                               /*3c9: jne    3b0 <op_enter+0x3b0> */
  0xe9, 0x14, 0x01, 0x00, 0x00,             /*3cb: jmpq   4e4 <op_enter+0x4e4> */
  0x4c, 0x39, 0xf3,                         /*3d0: cmp    %r14,%rbx */
  0x74, 0x3f,                               /*3d3: je     414 <op_enter+0x414> */
  0x44, 0x89, 0xd6,                         /*3d5: mov    %r10d,%esi */
  0x44, 0x29, 0xc6,                         /*3d8: sub    %r8d,%esi */
  0x74, 0x37,                               /*3db: je     414 <op_enter+0x414> */
  0x48, 0x63, 0xf6,                         /*3dd: movslq %esi,%rsi */
  0x48, 0xf7, 0xde,                         /*3e0: neg    %rsi */
  0x4c, 0x89, 0xf7,                         /*3e3: mov    %r14,%rdi */
  0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*3e6: nopw   %cs:0x0(%rax,%rax,1) */
  0x48, 0x89, 0xda,                         /*3f0: mov    %rbx,%rdx */
  0x48, 0x83, 0xc1, 0x20,                   /*3f3: add    $0x20,%rcx */
  0x48, 0x8b, 0x1f,                         /*3f7: mov    (%rdi),%rbx */
  0x48, 0x8b, 0x47, 0x08,                   /*3fa: mov    0x8(%rdi),%rax */
  0x48, 0x8d, 0x7f, 0x10,                   /*3fe: lea    0x10(%rdi),%rdi */
  0x48, 0x89, 0x42, 0x08,                   /*402: mov    %rax,0x8(%rdx) */
  0x48, 0x89, 0x1a,                         /*406: mov    %rbx,(%rdx) */
  0x48, 0xff, 0xc6,                         /*409: inc    %rsi */
  0x48, 0x89, 0xcb,                         /*40c: mov    %rcx,%rbx */
  0x48, 0x89, 0xd1,                         /*40f: mov    %rdx,%rcx */
  0x75, 0xdc,                               /*412: jne    3f0 <op_enter+0x3f0> */
  0x4c, 0x89, 0x5c, 0x24, 0x18,             /*414: mov    %r11,0x18(%rsp) */
  0x45, 0x85, 0xc0,                         /*419: test   %r8d,%r8d */
  0x0f, 0x84, 0x3a, 0x02, 0x00, 0x00,       /*41c: je     65c <op_enter+0x65c> */
  0xff, 0xc5,                               /*422: inc    %ebp */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*424: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x50, 0x18,                   /*429: mov    0x18(%rax),%rdx */
  0x48, 0xc1, 0xe5, 0x04,                   /*42d: shl    $0x4,%rbp */
  0x48, 0x01, 0xd5,                         /*431: add    %rdx,%rbp */
  0x44, 0x89, 0xd0,                         /*434: mov    %r10d,%eax */
  0x44, 0x29, 0xc0,                         /*437: sub    %r8d,%eax */
  0x48, 0x63, 0xf0,                         /*43a: movslq %eax,%rsi */
  0x48, 0x89, 0xf1,                         /*43d: mov    %rsi,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*440: shl    $0x4,%rcx */
  0x4c, 0x01, 0xf1,                         /*444: add    %r14,%rcx */
  0x49, 0x63, 0xc0,                         /*447: movslq %r8d,%rax */
  0x48, 0x39, 0xcd,                         /*44a: cmp    %rcx,%rbp */
  0x0f, 0x86, 0xdd, 0x01, 0x00, 0x00,       /*44d: jbe    630 <op_enter+0x630> */
  0x48, 0x01, 0xc6,                         /*453: add    %rax,%rsi */
  0x48, 0xc1, 0xe6, 0x04,                   /*456: shl    $0x4,%rsi */
  0x49, 0x8d, 0x3c, 0x36,                   /*45a: lea    (%r14,%rsi,1),%rdi */
  0x48, 0x39, 0xfd,                         /*45e: cmp    %rdi,%rbp */
  0x0f, 0x83, 0xc9, 0x01, 0x00, 0x00,       /*461: jae    630 <op_enter+0x630> */
  0x43, 0x8d, 0x4c, 0x0d, 0x01,             /*467: lea    0x1(%r13,%r9,1),%ecx */
  0x48, 0x01, 0xc1,                         /*46c: add    %rax,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*46f: shl    $0x4,%rcx */
  0x48, 0x8d, 0x4c, 0x11, 0xf0,             /*473: lea    -0x10(%rcx,%rdx,1),%rcx */
  0x4a, 0x8d, 0x54, 0x36, 0xf0,             /*478: lea    -0x10(%rsi,%r14,1),%rdx */
  0x48, 0xf7, 0xd8,                         /*47d: neg    %rax */
  0x48, 0x8b, 0x32,                         /*480: mov    (%rdx),%rsi */
  0x48, 0x8b, 0x7a, 0x08,                   /*483: mov    0x8(%rdx),%rdi */
  0x48, 0x89, 0x79, 0x08,                   /*487: mov    %rdi,0x8(%rcx) */
  0x48, 0x89, 0x31,                         /*48b: mov    %rsi,(%rcx) */
  0x48, 0x83, 0xc1, 0xf0,                   /*48e: add    $0xfffffffffffffff0,%rcx */
  0x48, 0x83, 0xc2, 0xf0,                   /*492: add    $0xfffffffffffffff0,%rdx */
  0x48, 0xff, 0xc0,                         /*496: inc    %rax */
  0x75, 0xe5,                               /*499: jne    480 <op_enter+0x480> */
  0xe9, 0xbc, 0x01, 0x00, 0x00,             /*49b: jmpq   65c <op_enter+0x65c> */
  0x4c, 0x39, 0xf1,                         /*4a0: cmp    %r14,%rcx */
  0x74, 0x3f,                               /*4a3: je     4e4 <op_enter+0x4e4> */
  0x45, 0x85, 0xc9,                         /*4a5: test   %r9d,%r9d */
  0x74, 0x3a,                               /*4a8: je     4e4 <op_enter+0x4e4> */
  0x4c, 0x89, 0xca,                         /*4aa: mov    %r9,%rdx */
  0x48, 0xf7, 0xda,                         /*4ad: neg    %rdx */
  0x4c, 0x89, 0xf6,                         /*4b0: mov    %r14,%rsi */
  0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*4b3: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
  0x48, 0x89, 0xcf,                         /*4c0: mov    %rcx,%rdi */
  0x48, 0x83, 0xc0, 0x20,                   /*4c3: add    $0x20,%rax */
  0x48, 0x8b, 0x0e,                         /*4c7: mov    (%rsi),%rcx */
  0x48, 0x8b, 0x5e, 0x08,                   /*4ca: mov    0x8(%rsi),%rbx */
  0x48, 0x8d, 0x76, 0x10,                   /*4ce: lea    0x10(%rsi),%rsi */
  0x48, 0x89, 0x5f, 0x08,                   /*4d2: mov    %rbx,0x8(%rdi) */
  0x48, 0x89, 0x0f,                         /*4d6: mov    %rcx,(%rdi) */
  0x48, 0xff, 0xc2,                         /*4d9: inc    %rdx */
  0x48, 0x89, 0xc1,                         /*4dc: mov    %rax,%rcx */
  0x48, 0x89, 0xf8,                         /*4df: mov    %rdi,%rax */
  0x75, 0xdc,                               /*4e2: jne    4c0 <op_enter+0x4c0> */
  0x4c, 0x89, 0x74, 0x24, 0x30,             /*4e4: mov    %r14,0x30(%rsp) */
  0x31, 0xdb,                               /*4e9: xor    %ebx,%ebx */
  0x45, 0x85, 0xed,                         /*4eb: test   %r13d,%r13d */
  0x4c, 0x89, 0x6c, 0x24, 0x20,             /*4ee: mov    %r13,0x20(%rsp) */
  0x74, 0x70,                               /*4f3: je     565 <op_enter+0x565> */
  0x43, 0x8d, 0x04, 0x19,                   /*4f5: lea    (%r9,%r11,1),%eax */
  0x45, 0x89, 0xd5,                         /*4f9: mov    %r10d,%r13d */
  0x41, 0x29, 0xc5,                         /*4fc: sub    %eax,%r13d */
  0x45, 0x8d, 0x71, 0x01,                   /*4ff: lea    0x1(%r9),%r14d */
  0x49, 0xc1, 0xe6, 0x04,                   /*503: shl    $0x4,%r14 */
  0x48, 0x8b, 0x5c, 0x24, 0x50,             /*507: mov    0x50(%rsp),%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*50c: mov    0x18(%rbx),%rax */
  0x48, 0x89, 0x04, 0x24,                   /*510: mov    %rax,(%rsp) */
  0x48, 0x8b, 0x7b, 0x58,                   /*514: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*518: mov    0x40(%rsp),%rax */
  0x89, 0xc0,                               /*51d: mov    %eax,%eax */
  0x48, 0x8b, 0x4c, 0x24, 0x28,             /*51f: mov    0x28(%rsp),%rcx */
  0x89, 0xca,                               /*524: mov    %ecx,%edx */
  0x48, 0x01, 0xc2,                         /*526: add    %rax,%rdx */
  0x48, 0xc1, 0xe2, 0x04,                   /*529: shl    $0x4,%rdx */
  0x48, 0x03, 0x54, 0x24, 0x30,             /*52d: add    0x30(%rsp),%rdx */
  0x44, 0x89, 0xee,                         /*532: mov    %r13d,%esi */
  0x4c, 0x89, 0x4c, 0x24, 0x08,             /*535: mov    %r9,0x8(%rsp) */
  0x4d, 0x89, 0xd7,                         /*53a: mov    %r10,%r15 */
  0x4c, 0x89, 0x5c, 0x24, 0x18,             /*53d: mov    %r11,0x18(%rsp) */
  0xff, 0x93, 0x20, 0x02, 0x00, 0x00,       /*542: callq  *0x220(%rbx) */
  0x4c, 0x8b, 0x5c, 0x24, 0x18,             /*548: mov    0x18(%rsp),%r11 */
  0x4d, 0x89, 0xfa,                         /*54d: mov    %r15,%r10 */
  0x4c, 0x8b, 0x4c, 0x24, 0x08,             /*550: mov    0x8(%rsp),%r9 */
  0x48, 0x8b, 0x0c, 0x24,                   /*555: mov    (%rsp),%rcx */
  0x4a, 0x89, 0x04, 0x31,                   /*559: mov    %rax,(%rcx,%r14,1) */
  0x42, 0x89, 0x54, 0x31, 0x08,             /*55d: mov    %edx,0x8(%rcx,%r14,1) */
  0x4c, 0x89, 0xeb,                         /*562: mov    %r13,%rbx */
  0x45, 0x85, 0xdb,                         /*565: test   %r11d,%r11d */
  0x48, 0x8b, 0x7c, 0x24, 0x28,             /*568: mov    0x28(%rsp),%rdi */
  0x4c, 0x8b, 0x74, 0x24, 0x30,             /*56d: mov    0x30(%rsp),%r14 */
  0x4c, 0x8b, 0x44, 0x24, 0x48,             /*572: mov    0x48(%rsp),%r8 */
  0x0f, 0x84, 0x7f, 0x01, 0x00, 0x00,       /*577: je     6fc <op_enter+0x6fc> */
  0x45, 0x29, 0xda,                         /*57d: sub    %r11d,%r10d */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*580: mov    0x40(%rsp),%rax */
  0x41, 0x39, 0xc2,                         /*585: cmp    %eax,%r10d */
  0x0f, 0x8e, 0x6e, 0x01, 0x00, 0x00,       /*588: jle    6fc <op_enter+0x6fc> */
  0xff, 0xc5,                               /*58e: inc    %ebp */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*590: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x48, 0x18,                   /*595: mov    0x18(%rax),%rcx */
  0x48, 0xc1, 0xe5, 0x04,                   /*599: shl    $0x4,%rbp */
  0x48, 0x01, 0xcd,                         /*59d: add    %rcx,%rbp */
  0x42, 0x8d, 0x04, 0x0b,                   /*5a0: lea    (%rbx,%r9,1),%eax */
  0x48, 0x63, 0xd0,                         /*5a4: movslq %eax,%rdx */
  0x48, 0x89, 0xd0,                         /*5a7: mov    %rdx,%rax */
  0x48, 0xc1, 0xe0, 0x04,                   /*5aa: shl    $0x4,%rax */
  0x4c, 0x01, 0xf0,                         /*5ae: add    %r14,%rax */
  0x44, 0x89, 0xde,                         /*5b1: mov    %r11d,%esi */
  0x48, 0x39, 0xc5,                         /*5b4: cmp    %rax,%rbp */
  0x0f, 0x86, 0x16, 0x01, 0x00, 0x00,       /*5b7: jbe    6d3 <op_enter+0x6d3> */
  0x48, 0x01, 0xf2,                         /*5bd: add    %rsi,%rdx */
  0x48, 0xc1, 0xe2, 0x04,                   /*5c0: shl    $0x4,%rdx */
  0x4c, 0x01, 0xf2,                         /*5c4: add    %r14,%rdx */
  0x48, 0x39, 0xd5,                         /*5c7: cmp    %rdx,%rbp */
  0x0f, 0x83, 0x03, 0x01, 0x00, 0x00,       /*5ca: jae    6d3 <op_enter+0x6d3> */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*5d0: mov    0x20(%rsp),%rax */
  0x42, 0x8d, 0x44, 0x08, 0x01,             /*5d5: lea    0x1(%rax,%r9,1),%eax */
  0x49, 0x83, 0xe4, 0x1f,                   /*5da: and    $0x1f,%r12 */
  0x4c, 0x01, 0xe0,                         /*5de: add    %r12,%rax */
  0x48, 0xc1, 0xe0, 0x04,                   /*5e1: shl    $0x4,%rax */
  0x48, 0x8d, 0x44, 0x08, 0xf0,             /*5e5: lea    -0x10(%rax,%rcx,1),%rax */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*5ea: mov    0x40(%rsp),%rcx */
  0x01, 0xcb,                               /*5ef: add    %ecx,%ebx */
  0x01, 0xfb,                               /*5f1: add    %edi,%ebx */
  0x48, 0x63, 0xcb,                         /*5f3: movslq %ebx,%rcx */
  0x4c, 0x01, 0xe1,                         /*5f6: add    %r12,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*5f9: shl    $0x4,%rcx */
  0x4a, 0x8d, 0x4c, 0x31, 0xf0,             /*5fd: lea    -0x10(%rcx,%r14,1),%rcx */
  0x49, 0xf7, 0xdc,                         /*602: neg    %r12 */
  0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*605: data16 nopw %cs:0x0(%rax,%rax,1) */
  0x48, 0x8b, 0x11,                         /*610: mov    (%rcx),%rdx */
  0x48, 0x8b, 0x71, 0x08,                   /*613: mov    0x8(%rcx),%rsi */
  0x48, 0x89, 0x70, 0x08,                   /*617: mov    %rsi,0x8(%rax) */
  0x48, 0x89, 0x10,                         /*61b: mov    %rdx,(%rax) */
  0x48, 0x83, 0xc0, 0xf0,                   /*61e: add    $0xfffffffffffffff0,%rax */
  0x48, 0x83, 0xc1, 0xf0,                   /*622: add    $0xfffffffffffffff0,%rcx */
  0x49, 0xff, 0xc4,                         /*626: inc    %r12 */
  0x75, 0xe5,                               /*629: jne    610 <op_enter+0x610> */
  0xe9, 0xcc, 0x00, 0x00, 0x00,             /*62b: jmpq   6fc <op_enter+0x6fc> */
  0x48, 0x39, 0xcd,                         /*630: cmp    %rcx,%rbp */
  0x74, 0x27,                               /*633: je     65c <op_enter+0x65c> */
  0x48, 0xf7, 0xd8,                         /*635: neg    %rax */
  0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*638: nopl   0x0(%rax,%rax,1) */
  0x48, 0x8b, 0x11,                         /*640: mov    (%rcx),%rdx */
  0x48, 0x8b, 0x71, 0x08,                   /*643: mov    0x8(%rcx),%rsi */
  0x48, 0x8d, 0x49, 0x10,                   /*647: lea    0x10(%rcx),%rcx */
  0x48, 0x89, 0x75, 0x08,                   /*64b: mov    %rsi,0x8(%rbp) */
  0x48, 0x89, 0x55, 0x00,                   /*64f: mov    %rdx,0x0(%rbp) */
  0x48, 0x8d, 0x6d, 0x10,                   /*653: lea    0x10(%rbp),%rbp */
  0x48, 0xff, 0xc0,                         /*657: inc    %rax */
  0x75, 0xe4,                               /*65a: jne    640 <op_enter+0x640> */
  0x45, 0x85, 0xed,                         /*65c: test   %r13d,%r13d */
  0x74, 0x2d,                               /*65f: je     68e <op_enter+0x68e> */
  0x41, 0xff, 0xc1,                         /*661: inc    %r9d */
  0x49, 0xc1, 0xe1, 0x04,                   /*664: shl    $0x4,%r9 */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*668: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x58, 0x18,                   /*66d: mov    0x18(%rax),%rbx */
  0x48, 0x8b, 0x78, 0x58,                   /*671: mov    0x58(%rax),%rdi */
  0x31, 0xf6,                               /*675: xor    %esi,%esi */
  0x4c, 0x89, 0xcd,                         /*677: mov    %r9,%rbp */
  0x4d, 0x89, 0xd7,                         /*67a: mov    %r10,%r15 */
  0xff, 0x90, 0xd8, 0x00, 0x00, 0x00,       /*67d: callq  *0xd8(%rax) */
  0x4d, 0x89, 0xfa,                         /*683: mov    %r15,%r10 */
  0x48, 0x89, 0x04, 0x2b,                   /*686: mov    %rax,(%rbx,%rbp,1) */
  0x89, 0x54, 0x2b, 0x08,                   /*68a: mov    %edx,0x8(%rbx,%rbp,1) */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*68e: mov    0x28(%rsp),%rax */
  0x85, 0xc0,                               /*693: test   %eax,%eax */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*695: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*69a: mov    0x8(%rax),%rax */
  0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*69e: mov    0x98(%rax),%rcx */
  0x0f, 0x84, 0x9b, 0x00, 0x00, 0x00,       /*6a5: je     746 <op_enter+0x746> */
  0x45, 0x39, 0xe2,                         /*6ab: cmp    %r12d,%r10d */
  0x0f, 0x8c, 0x92, 0x00, 0x00, 0x00,       /*6ae: jl     746 <op_enter+0x746> */
  0xba, 0x01, 0x00, 0x00, 0x00,             /*6b4: mov    $0x1,%edx */
  0x48, 0x8b, 0x74, 0x24, 0x40,             /*6b9: mov    0x40(%rsp),%rsi */
  0x29, 0xf2,                               /*6be: sub    %esi,%edx */
  0x48, 0x8b, 0x74, 0x24, 0x18,             /*6c0: mov    0x18(%rsp),%rsi */
  0x29, 0xf2,                               /*6c5: sub    %esi,%edx */
  0x44, 0x01, 0xd2,                         /*6c7: add    %r10d,%edx */
  0x48, 0x63, 0xd2,                         /*6ca: movslq %edx,%rdx */
  0x48, 0x8d, 0x0c, 0x91,                   /*6cd: lea    (%rcx,%rdx,4),%rcx */
  0xeb, 0x77,                               /*6d1: jmp    74a <op_enter+0x74a> */
  0x48, 0x39, 0xc5,                         /*6d3: cmp    %rax,%rbp */
  0x74, 0x24,                               /*6d6: je     6fc <op_enter+0x6fc> */
  0x49, 0x83, 0xe4, 0x1f,                   /*6d8: and    $0x1f,%r12 */
  0x49, 0xf7, 0xdc,                         /*6dc: neg    %r12 */
  0x90,                                     /*6df: nop */
  0x48, 0x8b, 0x08,                         /*6e0: mov    (%rax),%rcx */
  0x48, 0x8b, 0x50, 0x08,                   /*6e3: mov    0x8(%rax),%rdx */
  0x48, 0x8d, 0x40, 0x10,                   /*6e7: lea    0x10(%rax),%rax */
  0x48, 0x89, 0x55, 0x08,                   /*6eb: mov    %rdx,0x8(%rbp) */
  0x48, 0x89, 0x4d, 0x00,                   /*6ef: mov    %rcx,0x0(%rbp) */
  0x48, 0x8d, 0x6d, 0x10,                   /*6f3: lea    0x10(%rbp),%rbp */
  0x49, 0xff, 0xc4,                         /*6f7: inc    %r12 */
  0x75, 0xe4,                               /*6fa: jne    6e0 <op_enter+0x6e0> */
  0x4d, 0x39, 0xf0,                         /*6fc: cmp    %r14,%r8 */
  0x75, 0x29,                               /*6ff: jne    72a <op_enter+0x72a> */
  0x48, 0x8b, 0x74, 0x24, 0x10,             /*701: mov    0x10(%rsp),%rsi */
  0xff, 0xc6,                               /*706: inc    %esi */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*708: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*70d: mov    0x18(%rax),%rax */
  0x48, 0xc1, 0xe6, 0x04,                   /*711: shl    $0x4,%rsi */
  0x48, 0x8b, 0x54, 0x24, 0x38,             /*715: mov    0x38(%rsp),%rdx */
  0x48, 0x8b, 0x0a,                         /*71a: mov    (%rdx),%rcx */
  0x48, 0x8b, 0x52, 0x08,                   /*71d: mov    0x8(%rdx),%rdx */
  0x48, 0x89, 0x54, 0x30, 0x08,             /*721: mov    %rdx,0x8(%rax,%rsi,1) */
  0x48, 0x89, 0x0c, 0x30,                   /*726: mov    %rcx,(%rax,%rsi,1) */
  0x85, 0xff,                               /*72a: test   %edi,%edi */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*72c: mov    0x50(%rsp),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*731: mov    0x8(%rax),%rax */
  0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*735: mov    0x98(%rax),%rcx */
  0x74, 0x08,                               /*73c: je     746 <op_enter+0x746> */
  0xff, 0xc7,                               /*73e: inc    %edi */
  0x48, 0x8d, 0x0c, 0xb9,                   /*740: lea    (%rcx,%rdi,4),%rcx */
  0xeb, 0x04,                               /*744: jmp    74a <op_enter+0x74a> */
  0x48, 0x83, 0xc1, 0x04,                   /*746: add    $0x4,%rcx */
  0x0f, 0xb7, 0x31,                         /*74a: movzwl (%rcx),%esi */
  0x48, 0x03, 0xb0, 0xa0, 0x00, 0x00, 0x00, /*74d: add    0xa0(%rax),%rsi */
  0x48, 0x8b, 0x7c, 0x24, 0x50,             /*754: mov    0x50(%rsp),%rdi */
  0x48, 0x8b, 0x7c, 0x24, 0x50,             /*759: mov    0x50(%rsp),%rdi */
  0x48, 0x83, 0xc4, 0x58,                   /*75e: add    $0x58,%rsp */
  0x5b,                                     /*762: pop    %rbx */
  0x41, 0x5c,                               /*763: pop    %r12 */
  0x41, 0x5d,                               /*765: pop    %r13 */
  0x41, 0x5e,                               /*767: pop    %r14 */
  0x41, 0x5f,                               /*769: pop    %r15 */
  0x5d,                                     /*76b: pop    %rbp */
  0xff, 0xe6,                               /*76c: jmpq   *%rsi */

};

static void op_enter_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 23)) = a * 1 + 0;
}

static void op_enter_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_enter_set_args(op, GETARG_Ax(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 14..17]]} */
static uint8_t op_enter_method_m[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x41, 0x55,                               /*5: push   %r13 */
  0x41, 0x54,                               /*7: push   %r12 */
  0x53,                                     /*9: push   %rbx */
  0x49, 0x89, 0xfe,                         /*a: mov    %rdi,%r14 */
  0xb8, 0x00, 0x00, 0xab, 0x00,             /*d: mov    $0xab0000,%eax */
  0x41, 0x89, 0xc4,                         /*12: mov    %eax,%r12d */
  0x41, 0xc1, 0xec, 0x12,                   /*15: shr    $0x12,%r12d */
  0x4d, 0x8b, 0x6e, 0x18,                   /*19: mov    0x18(%r14),%r13 */
  0x49, 0x8b, 0x7e, 0x58,                   /*1d: mov    0x58(%r14),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*21: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*25: mov    0x20(%rax),%rax */
  0x48, 0x63, 0x58, 0x40,                   /*29: movslq 0x40(%rax),%rbx */
  0x48, 0x85, 0xdb,                         /*2d: test   %rbx,%rbx */
  0x48, 0x8d, 0x4b, 0x01,                   /*30: lea    0x1(%rbx),%rcx */
  0xb8, 0x02, 0x00, 0x00, 0x00,             /*34: mov    $0x2,%eax */
  0x48, 0x0f, 0x49, 0xc1,                   /*39: cmovns %rcx,%rax */
  0x48, 0xc1, 0xe0, 0x04,                   /*3d: shl    $0x4,%rax */
  0x49, 0x8d, 0x6c, 0x05, 0x00,             /*41: lea    0x0(%r13,%rax,1),%rbp */
  0x41, 0x8b, 0x54, 0x05, 0x08,             /*46: mov    0x8(%r13,%rax,1),%edx */
  0x83, 0xfa, 0x0d,                         /*4b: cmp    $0xd,%edx */
  0x74, 0x34,                               /*4e: je     84 <op_enter_method_m+0x84> */
  0x85, 0xd2,                               /*50: test   %edx,%edx */
  0x75, 0x06,                               /*52: jne    5a <op_enter_method_m+0x5a> */
  0x83, 0x7d, 0x00, 0x00,                   /*54: cmpl   $0x0,0x0(%rbp) */
  0x74, 0x2a,                               /*58: je     84 <op_enter_method_m+0x84> */
  0x4d, 0x8d, 0x7c, 0x05, 0x08,             /*5a: lea    0x8(%r13,%rax,1),%r15 */
  0x48, 0x8b, 0x75, 0x00,                   /*5f: mov    0x0(%rbp),%rsi */
  0x4d, 0x8b, 0x86, 0x78, 0x02, 0x00, 0x00, /*63: mov    0x278(%r14),%r8 */
  0x4d, 0x8b, 0x8e, 0x80, 0x02, 0x00, 0x00, /*6a: mov    0x280(%r14),%r9 */
  0xb9, 0x0d, 0x00, 0x00, 0x00,             /*71: mov    $0xd,%ecx */
  0x41, 0xff, 0x96, 0x30, 0x01, 0x00, 0x00, /*76: callq  *0x130(%r14) */
  0x48, 0x89, 0x45, 0x00,                   /*7d: mov    %rax,0x0(%rbp) */
  0x41, 0x89, 0x17,                         /*81: mov    %edx,(%r15) */
  0x45, 0x89, 0xe7,                         /*84: mov    %r12d,%r15d */
  0x41, 0x83, 0xe7, 0x1f,                   /*87: and    $0x1f,%r15d */
  0x49, 0x83, 0xc5, 0x10,                   /*8b: add    $0x10,%r13 */
  0x85, 0xdb,                               /*8f: test   %ebx,%ebx */
  0x78, 0x25,                               /*91: js     b8 <op_enter_method_m+0xb8> */
  0x44, 0x39, 0xfb,                         /*93: cmp    %r15d,%ebx */
  0x4c, 0x89, 0xeb,                         /*96: mov    %r13,%rbx */
  0x7d, 0x37,                               /*99: jge    d2 <op_enter_method_m+0xd2> */
  0x49, 0x8b, 0x7e, 0x58,                   /*9b: mov    0x58(%r14),%rdi */
  0x44, 0x89, 0xfe,                         /*9f: mov    %r15d,%esi */
  0x41, 0xff, 0x96, 0x58, 0x02, 0x00, 0x00, /*a2: callq  *0x258(%r14) */
  0x4c, 0x89, 0xf7,                         /*a9: mov    %r14,%rdi */
  0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*ac: callq  *0x1a8(%r14) */
  0xe9, 0xf5, 0x00, 0x00, 0x00,             /*b3: jmpq   1ad <op_enter_method_m+0x1ad> */
  0x49, 0x8b, 0x46, 0x18,                   /*b8: mov    0x18(%r14),%rax */
  0x49, 0x8b, 0x7e, 0x58,                   /*bc: mov    0x58(%r14),%rdi */
  0x48, 0x8b, 0x70, 0x10,                   /*c0: mov    0x10(%rax),%rsi */
  0x48, 0x8b, 0x5e, 0x28,                   /*c4: mov    0x28(%rsi),%rbx */
  0x8b, 0x50, 0x18,                         /*c8: mov    0x18(%rax),%edx */
  0x41, 0xff, 0x96, 0xe0, 0x01, 0x00, 0x00, /*cb: callq  *0x1e0(%r14) */
  0x49, 0x8b, 0x46, 0x58,                   /*d2: mov    0x58(%r14),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*d6: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*da: mov    0x20(%rax),%rax */
  0x44, 0x89, 0x78, 0x40,                   /*de: mov    %r15d,0x40(%rax) */
  0x41, 0x8d, 0x47, 0x01,                   /*e2: lea    0x1(%r15),%eax */
  0x49, 0x8b, 0x4e, 0x18,                   /*e6: mov    0x18(%r14),%rcx */
  0x48, 0xc1, 0xe0, 0x04,                   /*ea: shl    $0x4,%rax */
  0x48, 0x8b, 0x55, 0x00,                   /*ee: mov    0x0(%rbp),%rdx */
  0x48, 0x8b, 0x75, 0x08,                   /*f2: mov    0x8(%rbp),%rsi */
  0x48, 0x89, 0x74, 0x01, 0x08,             /*f6: mov    %rsi,0x8(%rcx,%rax,1) */
  0x48, 0x89, 0x14, 0x01,                   /*fb: mov    %rdx,(%rcx,%rax,1) */
  0x49, 0x39, 0xdd,                         /*ff: cmp    %rbx,%r13 */
  0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00,       /*102: je     194 <op_enter_method_m+0x194> */
  0x49, 0x8b, 0x46, 0x18,                   /*108: mov    0x18(%r14),%rax */
  0x48, 0x8d, 0x48, 0x10,                   /*10c: lea    0x10(%rax),%rcx */
  0x44, 0x89, 0xfa,                         /*110: mov    %r15d,%edx */
  0x48, 0x39, 0xd9,                         /*113: cmp    %rbx,%rcx */
  0x76, 0x45,                               /*116: jbe    15d <op_enter_method_m+0x15d> */
  0x48, 0xc1, 0xe2, 0x04,                   /*118: shl    $0x4,%rdx */
  0x48, 0x01, 0xda,                         /*11c: add    %rbx,%rdx */
  0x48, 0x39, 0xd1,                         /*11f: cmp    %rdx,%rcx */
  0x73, 0x39,                               /*122: jae    15d <op_enter_method_m+0x15d> */
  0x45, 0x85, 0xff,                         /*124: test   %r15d,%r15d */
  0x74, 0x6b,                               /*127: je     194 <op_enter_method_m+0x194> */
  0x49, 0x83, 0xe4, 0x1f,                   /*129: and    $0x1f,%r12 */
  0x4c, 0x89, 0xe1,                         /*12d: mov    %r12,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*130: shl    $0x4,%rcx */
  0x48, 0x01, 0xc8,                         /*134: add    %rcx,%rax */
  0x48, 0x8d, 0x4c, 0x19, 0xf0,             /*137: lea    -0x10(%rcx,%rbx,1),%rcx */
  0x49, 0xf7, 0xdc,                         /*13c: neg    %r12 */
  0x90,                                     /*13f: nop */
  0x48, 0x8b, 0x11,                         /*140: mov    (%rcx),%rdx */
  0x48, 0x8b, 0x71, 0x08,                   /*143: mov    0x8(%rcx),%rsi */
  0x48, 0x89, 0x70, 0x08,                   /*147: mov    %rsi,0x8(%rax) */
  0x48, 0x89, 0x10,                         /*14b: mov    %rdx,(%rax) */
  0x48, 0x83, 0xc0, 0xf0,                   /*14e: add    $0xfffffffffffffff0,%rax */
  0x48, 0x83, 0xc1, 0xf0,                   /*152: add    $0xfffffffffffffff0,%rcx */
  0x49, 0xff, 0xc4,                         /*156: inc    %r12 */
  0x75, 0xe5,                               /*159: jne    140 <op_enter_method_m+0x140> */
  0xeb, 0x37,                               /*15b: jmp    194 <op_enter_method_m+0x194> */
  0x48, 0x39, 0xd9,                         /*15d: cmp    %rbx,%rcx */
  0x74, 0x32,                               /*160: je     194 <op_enter_method_m+0x194> */
  0x45, 0x85, 0xff,                         /*162: test   %r15d,%r15d */
  0x74, 0x2d,                               /*165: je     194 <op_enter_method_m+0x194> */
  0x49, 0x83, 0xe4, 0x1f,                   /*167: and    $0x1f,%r12 */
  0x49, 0xf7, 0xdc,                         /*16b: neg    %r12 */
  0x66, 0x90,                               /*16e: xchg   %ax,%ax */
  0x48, 0x89, 0xca,                         /*170: mov    %rcx,%rdx */
  0x48, 0x83, 0xc0, 0x20,                   /*173: add    $0x20,%rax */
  0x48, 0x8b, 0x0b,                         /*177: mov    (%rbx),%rcx */
  0x48, 0x8b, 0x73, 0x08,                   /*17a: mov    0x8(%rbx),%rsi */
  0x48, 0x8d, 0x5b, 0x10,                   /*17e: lea    0x10(%rbx),%rbx */
  0x48, 0x89, 0x72, 0x08,                   /*182: mov    %rsi,0x8(%rdx) */
  0x48, 0x89, 0x0a,                         /*186: mov    %rcx,(%rdx) */
  0x49, 0xff, 0xc4,                         /*189: inc    %r12 */
  0x48, 0x89, 0xc1,                         /*18c: mov    %rax,%rcx */
  0x48, 0x89, 0xd0,                         /*18f: mov    %rdx,%rax */
  0x75, 0xdc,                               /*192: jne    170 <op_enter_method_m+0x170> */
  0x49, 0x8b, 0x46, 0x08,                   /*194: mov    0x8(%r14),%rax */
  0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*198: mov    0x98(%rax),%rcx */
  0x0f, 0xb7, 0x71, 0x04,                   /*19f: movzwl 0x4(%rcx),%esi */
  0x48, 0x03, 0xb0, 0xa0, 0x00, 0x00, 0x00, /*1a3: add    0xa0(%rax),%rsi */
  0x4c, 0x89, 0xf7,                         /*1aa: mov    %r14,%rdi */
  0x4c, 0x89, 0xf7,                         /*1ad: mov    %r14,%rdi */
  0x5b,                                     /*1b0: pop    %rbx */
  0x41, 0x5c,                               /*1b1: pop    %r12 */
  0x41, 0x5d,                               /*1b3: pop    %r13 */
  0x41, 0x5e,                               /*1b5: pop    %r14 */
  0x41, 0x5f,                               /*1b7: pop    %r15 */
  0x5d,                                     /*1b9: pop    %rbp */
  0xff, 0xe6,                               /*1ba: jmpq   *%rsi */

};

static void op_enter_method_m_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = a * 1 + 0;
}

static void op_enter_method_m_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_enter_method_m_set_args(op, GETARG_Ax(c),0,0,op_idx);
}


/* args: {} */
static uint8_t op_karg[] = {

};

static void op_karg_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_karg_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_karg_set_args(op, 0,0,0,op_idx);
}


/* args: {} */
static uint8_t op_kdict[] = {

};

static void op_kdict_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_kdict_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_kdict_set_args(op, 0,0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_return[] = {
  0x55,                                     /*0: push   %rbp */
  0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
  0x53,                                     /*4: push   %rbx */
  0x48, 0x83, 0xe4, 0xf0,                   /*5: and    $0xfffffffffffffff0,%rsp */
  0x48, 0x83, 0xec, 0x10,                   /*9: sub    $0x10,%rsp */
  0x48, 0x89, 0xfb,                         /*d: mov    %rdi,%rbx */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*10: mov    $0xab0000,%esi */
  0x31, 0xd2,                               /*15: xor    %edx,%edx */
  0xff, 0x93, 0x90, 0x00, 0x00, 0x00,       /*17: callq  *0x90(%rbx) */
  0x48, 0x89, 0xdf,                         /*1d: mov    %rbx,%rdi */
  0x48, 0x8d, 0x65, 0xf8,                   /*20: lea    -0x8(%rbp),%rsp */
  0x5b,                                     /*24: pop    %rbx */
  0x5d,                                     /*25: pop    %rbp */
  0xc3,                                     /*26: retq */

};

static void op_return_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_return_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_return_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 5..8]], "b"=>[[1, 0, 10..13]]} */
static uint8_t op_break[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*4: mov    $0xab0000,%esi */
  0xba, 0x00, 0x00, 0xbc, 0x00,             /*9: mov    $0xbc0000,%edx */
  0xff, 0x93, 0x90, 0x00, 0x00, 0x00,       /*e: callq  *0x90(%rbx) */
  0x48, 0x89, 0xdf,                         /*14: mov    %rbx,%rdi */
  0x5b,                                     /*17: pop    %rbx */
  0xc3,                                     /*18: retq */

};

static void op_break_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = a * 1 + 0;
  *((int32_t *)(op + 10)) = b * 1 + 0;
}

static void op_break_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_break_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 32..35]], "a"=>[[16, 0, 39..42], [16, 8, 46..49], [1, 0, 292..295], [1, 0, 300..303], [1, 1, 308..311], [1, 1, 316..319], [16, 16, 333..336], [16, 24, 339..342], [16, 0, 403..406], [1, 0, 425..428], [1, 0, 589..592]], "c"=>[[1, 0, 212..215], [1, 1, 284..287], [1, 1, 348..351]]} */
static uint8_t op_tailcall[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x41, 0x55,                               /*5: push   %r13 */
  0x41, 0x54,                               /*7: push   %r12 */
  0x53,                                     /*9: push   %rbx */
  0x48, 0x83, 0xec, 0x18,                   /*a: sub    $0x18,%rsp */
  0x48, 0x89, 0xfb,                         /*e: mov    %rdi,%rbx */
  0x4c, 0x8b, 0x73, 0x58,                   /*11: mov    0x58(%rbx),%r14 */
  0x48, 0x8b, 0x43, 0x18,                   /*15: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x28,                   /*19: mov    0x28(%rbx),%rcx */
  0x44, 0x8b, 0xa9, 0x00, 0x04, 0xbc, 0x00, /*1d: mov    0xbc0400(%rcx),%r13d */
  0x4c, 0x8b, 0xb8, 0x00, 0x10, 0xab, 0x00, /*24: mov    0xab1000(%rax),%r15 */
  0x44, 0x8b, 0x80, 0x08, 0x10, 0xab, 0x00, /*2b: mov    0xab1008(%rax),%r8d */
  0x31, 0xc0,                               /*32: xor    %eax,%eax */
  0x41, 0x83, 0xf8, 0x13,                   /*34: cmp    $0x13,%r8d */
  0x7f, 0x22,                               /*38: jg     5c <op_tailcall+0x5c> */
  0x44, 0x89, 0xc0,                         /*3a: mov    %r8d,%eax */
  0x41, 0x83, 0xf8, 0x07,                   /*3d: cmp    $0x7,%r8d */
  0x77, 0x1f,                               /*41: ja     62 <op_tailcall+0x62> */
  0xff, 0x24, 0xc5, 0x00, 0x00, 0x00, 0x00, /*43: jmpq   *0x0(,%rax,8) */
  0x45, 0x85, 0xff,                         /*4a: test   %r15d,%r15d */
  0x0f, 0x84, 0xc1, 0x02, 0x00, 0x00,       /*4d: je     314 <op_tailcall+0x314> */
  0x49, 0x8b, 0x86, 0x90, 0x00, 0x00, 0x00, /*53: mov    0x90(%r14),%rax */
  0xeb, 0x0a,                               /*5a: jmp    66 <op_tailcall+0x66> */
  0x41, 0x83, 0xf8, 0x14,                   /*5c: cmp    $0x14,%r8d */
  0x74, 0x04,                               /*60: je     66 <op_tailcall+0x66> */
  0x49, 0x8b, 0x47, 0x08,                   /*62: mov    0x8(%r15),%rax */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*66: mov    %rax,0x10(%rsp) */
  0x48, 0x8b, 0x0b,                         /*6b: mov    (%rbx),%rcx */
  0x48, 0x39, 0x41, 0x38,                   /*6e: cmp    %rax,0x38(%rcx) */
  0x75, 0x08,                               /*72: jne    7c <op_tailcall+0x7c> */
  0x31, 0xd2,                               /*74: xor    %edx,%edx */
  0x44, 0x39, 0x69, 0x30,                   /*76: cmp    %r13d,0x30(%rcx) */
  0x74, 0x33,                               /*7a: je     af <op_tailcall+0xaf> */
  0x48, 0x39, 0x41, 0x48,                   /*7c: cmp    %rax,0x48(%rcx) */
  0x75, 0x0b,                               /*80: jne    8d <op_tailcall+0x8d> */
  0xba, 0x01, 0x00, 0x00, 0x00,             /*82: mov    $0x1,%edx */
  0x44, 0x39, 0x69, 0x40,                   /*87: cmp    %r13d,0x40(%rcx) */
  0x74, 0x22,                               /*8b: je     af <op_tailcall+0xaf> */
  0x48, 0x39, 0x41, 0x58,                   /*8d: cmp    %rax,0x58(%rcx) */
  0x75, 0x0b,                               /*91: jne    9e <op_tailcall+0x9e> */
  0xba, 0x02, 0x00, 0x00, 0x00,             /*93: mov    $0x2,%edx */
  0x44, 0x39, 0x69, 0x50,                   /*98: cmp    %r13d,0x50(%rcx) */
  0x74, 0x11,                               /*9c: je     af <op_tailcall+0xaf> */
  0x48, 0x39, 0x41, 0x68,                   /*9e: cmp    %rax,0x68(%rcx) */
  0x75, 0x15,                               /*a2: jne    b9 <op_tailcall+0xb9> */
  0xba, 0x03, 0x00, 0x00, 0x00,             /*a4: mov    $0x3,%edx */
  0x44, 0x39, 0x69, 0x60,                   /*a9: cmp    %r13d,0x60(%rcx) */
  0x75, 0x0a,                               /*ad: jne    b9 <op_tailcall+0xb9> */
  0x4c, 0x8b, 0xa4, 0xd1, 0x90, 0x00, 0x00, 0x00,/*af: mov    0x90(%rcx,%rdx,8),%r12 */
  0xeb, 0x1a,                               /*b7: jmp    d3 <op_tailcall+0xd3> */
  0x48, 0x8d, 0x74, 0x24, 0x10,             /*b9: lea    0x10(%rsp),%rsi */
  0x4c, 0x89, 0xf7,                         /*be: mov    %r14,%rdi */
  0x44, 0x89, 0xea,                         /*c1: mov    %r13d,%edx */
  0x44, 0x89, 0xc5,                         /*c4: mov    %r8d,%ebp */
  0xff, 0x93, 0xb0, 0x00, 0x00, 0x00,       /*c7: callq  *0xb0(%rbx) */
  0x41, 0x89, 0xe8,                         /*cd: mov    %ebp,%r8d */
  0x49, 0x89, 0xc4,                         /*d0: mov    %rax,%r12 */
  0xbd, 0x00, 0x00, 0xcd, 0x00,             /*d3: mov    $0xcd0000,%ebp */
  0x4d, 0x85, 0xe4,                         /*d8: test   %r12,%r12 */
  0x0f, 0x85, 0x8c, 0x00, 0x00, 0x00,       /*db: jne    16d <op_tailcall+0x16d> */
  0x44, 0x89, 0x44, 0x24, 0x04,             /*e1: mov    %r8d,0x4(%rsp) */
  0x4c, 0x89, 0x7c, 0x24, 0x08,             /*e6: mov    %r15,0x8(%rsp) */
  0x48, 0x8b, 0xb3, 0x70, 0x02, 0x00, 0x00, /*eb: mov    0x270(%rbx),%rsi */
  0xba, 0x0e, 0x00, 0x00, 0x00,             /*f2: mov    $0xe,%edx */
  0x4c, 0x89, 0xf7,                         /*f7: mov    %r14,%rdi */
  0xff, 0x93, 0x60, 0x02, 0x00, 0x00,       /*fa: callq  *0x260(%rbx) */
  0x41, 0x89, 0xc7,                         /*100: mov    %eax,%r15d */
  0x48, 0x8d, 0x74, 0x24, 0x10,             /*103: lea    0x10(%rsp),%rsi */
  0x4c, 0x89, 0xf7,                         /*108: mov    %r14,%rdi */
  0x44, 0x89, 0xfa,                         /*10b: mov    %r15d,%edx */
  0xff, 0x93, 0xd0, 0x00, 0x00, 0x00,       /*10e: callq  *0xd0(%rbx) */
  0x49, 0x89, 0xc4,                         /*114: mov    %rax,%r12 */
  0x48, 0x8b, 0x43, 0x18,                   /*117: mov    0x18(%rbx),%rax */
  0xb9, 0x10, 0x00, 0xd0, 0x0c,             /*11b: mov    $0xcd00010,%ecx */
  0x48, 0x8b, 0x94, 0x08, 0x00, 0x00, 0xb0, 0x0a,/*120: mov    0xab00000(%rax,%rcx,1),%rdx */
  0x48, 0x8b, 0xb4, 0x08, 0x08, 0x00, 0xb0, 0x0a,/*128: mov    0xab00008(%rax,%rcx,1),%rsi */
  0x48, 0x89, 0xb4, 0x08, 0x18, 0x00, 0xb0, 0x0a,/*130: mov    %rsi,0xab00018(%rax,%rcx,1) */
  0x48, 0x89, 0x94, 0x08, 0x10, 0x00, 0xb0, 0x0a,/*138: mov    %rdx,0xab00010(%rax,%rcx,1) */
  0x48, 0x83, 0xc1, 0xf0,                   /*140: add    $0xfffffffffffffff0,%rcx */
  0x75, 0xda,                               /*144: jne    120 <op_tailcall+0x120> */
  0x48, 0x8b, 0x43, 0x18,                   /*146: mov    0x18(%rbx),%rax */
  0x4c, 0x89, 0xa8, 0x10, 0x10, 0xab, 0x00, /*14a: mov    %r13,0xab1010(%rax) */
  0xc7, 0x80, 0x18, 0x10, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*151: movl   $0x4,0xab1018(%rax) */
  0xbd, 0x01, 0x00, 0xcd, 0x00,             /*15b: mov    $0xcd0001,%ebp */
  0x45, 0x89, 0xfd,                         /*160: mov    %r15d,%r13d */
  0x4c, 0x8b, 0x7c, 0x24, 0x08,             /*163: mov    0x8(%rsp),%r15 */
  0x44, 0x8b, 0x44, 0x24, 0x04,             /*168: mov    0x4(%rsp),%r8d */
  0x49, 0x8b, 0x4e, 0x18,                   /*16d: mov    0x18(%r14),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*171: mov    0x20(%rcx),%rcx */
  0x44, 0x89, 0x29,                         /*175: mov    %r13d,(%rcx) */
  0x48, 0x8b, 0x54, 0x24, 0x10,             /*178: mov    0x10(%rsp),%rdx */
  0x48, 0x89, 0x51, 0x48,                   /*17d: mov    %rdx,0x48(%rcx) */
  0x89, 0x69, 0x40,                         /*181: mov    %ebp,0x40(%rcx) */
  0x49, 0x8b, 0x56, 0x18,                   /*184: mov    0x18(%r14),%rdx */
  0x48, 0x8b, 0x52, 0x08,                   /*188: mov    0x8(%rdx),%rdx */
  0x48, 0x8b, 0x7b, 0x18,                   /*18c: mov    0x18(%rbx),%rdi */
  0x48, 0x8d, 0xb7, 0x00, 0x10, 0xab, 0x00, /*190: lea    0xab1000(%rdi),%rsi */
  0xff, 0xc5,                               /*197: inc    %ebp */
  0x48, 0x39, 0xf2,                         /*199: cmp    %rsi,%rdx */
  0x76, 0x4f,                               /*19c: jbe    1ed <op_tailcall+0x1ed> */
  0x48, 0x89, 0xe8,                         /*19e: mov    %rbp,%rax */
  0x48, 0xc1, 0xe0, 0x04,                   /*1a1: shl    $0x4,%rax */
  0x48, 0x8d, 0x84, 0x38, 0x00, 0x00, 0xb0, 0x0a,/*1a5: lea    0xab00000(%rax,%rdi,1),%rax */
  0x48, 0x39, 0xc2,                         /*1ad: cmp    %rax,%rdx */
  0x73, 0x3b,                               /*1b0: jae    1ed <op_tailcall+0x1ed> */
  0x48, 0x89, 0xe8,                         /*1b2: mov    %rbp,%rax */
  0x48, 0xc1, 0xe0, 0x04,                   /*1b5: shl    $0x4,%rax */
  0x48, 0x8d, 0x54, 0x10, 0xf0,             /*1b9: lea    -0x10(%rax,%rdx,1),%rdx */
  0x48, 0x8d, 0xb4, 0x38, 0xf0, 0xff, 0xaf, 0x0a,/*1be: lea    0xaaffff0(%rax,%rdi,1),%rsi */
  0x48, 0xf7, 0xdd,                         /*1c6: neg    %rbp */
  0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, /*1c9: nopl   0x0(%rax) */
  0x48, 0x8b, 0x06,                         /*1d0: mov    (%rsi),%rax */
  0x48, 0x8b, 0x7e, 0x08,                   /*1d3: mov    0x8(%rsi),%rdi */
  0x48, 0x89, 0x7a, 0x08,                   /*1d7: mov    %rdi,0x8(%rdx) */
  0x48, 0x89, 0x02,                         /*1db: mov    %rax,(%rdx) */
  0x48, 0x83, 0xc2, 0xf0,                   /*1de: add    $0xfffffffffffffff0,%rdx */
  0x48, 0x83, 0xc6, 0xf0,                   /*1e2: add    $0xfffffffffffffff0,%rsi */
  0x48, 0xff, 0xc5,                         /*1e6: inc    %rbp */
  0x75, 0xe5,                               /*1e9: jne    1d0 <op_tailcall+0x1d0> */
  0xeb, 0x2e,                               /*1eb: jmp    21b <op_tailcall+0x21b> */
  0x48, 0x39, 0xf2,                         /*1ed: cmp    %rsi,%rdx */
  0x74, 0x29,                               /*1f0: je     21b <op_tailcall+0x21b> */
  0x48, 0xf7, 0xdd,                         /*1f2: neg    %rbp */
  0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*1f5: data16 nopw %cs:0x0(%rax,%rax,1) */
  0x48, 0x8b, 0x06,                         /*200: mov    (%rsi),%rax */
  0x48, 0x8b, 0x7e, 0x08,                   /*203: mov    0x8(%rsi),%rdi */
  0x48, 0x8d, 0x76, 0x10,                   /*207: lea    0x10(%rsi),%rsi */
  0x48, 0x89, 0x7a, 0x08,                   /*20b: mov    %rdi,0x8(%rdx) */
  0x48, 0x89, 0x02,                         /*20f: mov    %rax,(%rdx) */
  0x48, 0x8d, 0x52, 0x10,                   /*212: lea    0x10(%rdx),%rdx */
  0x48, 0xff, 0xc5,                         /*216: inc    %rbp */
  0x75, 0xe5,                               /*219: jne    200 <op_tailcall+0x200> */
  0x41, 0xf6, 0x44, 0x24, 0x02, 0x04,       /*21b: testb  $0x4,0x2(%r12) */
  0x74, 0x3b,                               /*221: je     25e <op_tailcall+0x25e> */
  0x49, 0x8b, 0x46, 0x18,                   /*223: mov    0x18(%r14),%rax */
  0x48, 0x8b, 0x68, 0x08,                   /*227: mov    0x8(%rax),%rbp */
  0x4c, 0x89, 0xf7,                         /*22b: mov    %r14,%rdi */
  0x4c, 0x89, 0xfe,                         /*22e: mov    %r15,%rsi */
  0x44, 0x89, 0xc2,                         /*231: mov    %r8d,%edx */
  0x41, 0xff, 0x54, 0x24, 0x18,             /*234: callq  *0x18(%r12) */
  0x48, 0x89, 0x45, 0x00,                   /*239: mov    %rax,0x0(%rbp) */
  0x89, 0x55, 0x08,                         /*23d: mov    %edx,0x8(%rbp) */
  0x8b, 0x73, 0x50,                         /*240: mov    0x50(%rbx),%esi */
  0x4c, 0x89, 0xf7,                         /*243: mov    %r14,%rdi */
  0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*246: callq  *0x110(%rbx) */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*24c: mov    $0xab0000,%esi */
  0x31, 0xd2,                               /*251: xor    %edx,%edx */
  0x48, 0x89, 0xdf,                         /*253: mov    %rbx,%rdi */
  0xff, 0x93, 0x90, 0x00, 0x00, 0x00,       /*256: callq  *0x90(%rbx) */
  0xeb, 0x6a,                               /*25c: jmp    2c8 <op_tailcall+0x2c8> */
  0x49, 0x8b, 0x44, 0x24, 0x18,             /*25e: mov    0x18(%r12),%rax */
  0x48, 0x89, 0x43, 0x08,                   /*263: mov    %rax,0x8(%rbx) */
  0x48, 0x8b, 0x50, 0x10,                   /*267: mov    0x10(%rax),%rdx */
  0x48, 0x89, 0x53, 0x20,                   /*26b: mov    %rdx,0x20(%rbx) */
  0x48, 0x8b, 0x50, 0x18,                   /*26f: mov    0x18(%rax),%rdx */
  0x48, 0x89, 0x53, 0x28,                   /*273: mov    %rdx,0x28(%rbx) */
  0x8b, 0x51, 0x40,                         /*277: mov    0x40(%rcx),%edx */
  0x0f, 0xb7, 0x70, 0x02,                   /*27a: movzwl 0x2(%rax),%esi */
  0x85, 0xd2,                               /*27e: test   %edx,%edx */
  0x78, 0x05,                               /*280: js     287 <op_tailcall+0x287> */
  0x83, 0xc2, 0x02,                         /*282: add    $0x2,%edx */
  0xeb, 0x10,                               /*285: jmp    297 <op_tailcall+0x297> */
  0x83, 0xfe, 0x03,                         /*287: cmp    $0x3,%esi */
  0xb8, 0x03, 0x00, 0x00, 0x00,             /*28a: mov    $0x3,%eax */
  0x0f, 0x42, 0xf0,                         /*28f: cmovb  %eax,%esi */
  0xba, 0x03, 0x00, 0x00, 0x00,             /*292: mov    $0x3,%edx */
  0x4c, 0x89, 0xf7,                         /*297: mov    %r14,%rdi */
  0xff, 0x93, 0x40, 0x01, 0x00, 0x00,       /*29a: callq  *0x140(%rbx) */
  0x49, 0x8b, 0x46, 0x18,                   /*2a0: mov    0x18(%r14),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*2a4: mov    0x8(%rax),%rax */
  0x48, 0x89, 0x43, 0x18,                   /*2a8: mov    %rax,0x18(%rbx) */
  0x48, 0x8b, 0x43, 0x08,                   /*2ac: mov    0x8(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*2b0: mov    0x8(%rax),%rax */
  0x48, 0x89, 0x43, 0x10,                   /*2b4: mov    %rax,0x10(%rbx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*2b8: mov    0x58(%rbx),%rdi */
  0x4c, 0x89, 0xe6,                         /*2bc: mov    %r12,%rsi */
  0x48, 0x89, 0xda,                         /*2bf: mov    %rbx,%rdx */
  0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*2c2: callq  *0x120(%rbx) */
  0x48, 0x89, 0xdf,                         /*2c8: mov    %rbx,%rdi */
  0x48, 0x83, 0xc4, 0x18,                   /*2cb: add    $0x18,%rsp */
  0x5b,                                     /*2cf: pop    %rbx */
  0x41, 0x5c,                               /*2d0: pop    %r12 */
  0x41, 0x5d,                               /*2d2: pop    %r13 */
  0x41, 0x5e,                               /*2d4: pop    %r14 */
  0x41, 0x5f,                               /*2d6: pop    %r15 */
  0x5d,                                     /*2d8: pop    %rbp */
  0xe9, 0x00, 0x00, 0x00, 0x00,             /*2d9: jmpq   2de <op_tailcall+0x2de> */
  0x49, 0x8b, 0x86, 0x88, 0x00, 0x00, 0x00, /*2de: mov    0x88(%r14),%rax */
  0xe9, 0x7c, 0xfd, 0xff, 0xff,             /*2e5: jmpq   66 <op_tailcall+0x66> */
  0x49, 0x8b, 0x86, 0x80, 0x00, 0x00, 0x00, /*2ea: mov    0x80(%r14),%rax */
  0xe9, 0x70, 0xfd, 0xff, 0xff,             /*2f1: jmpq   66 <op_tailcall+0x66> */
  0x49, 0x8b, 0x86, 0xa0, 0x00, 0x00, 0x00, /*2f6: mov    0xa0(%r14),%rax */
  0xe9, 0x64, 0xfd, 0xff, 0xff,             /*2fd: jmpq   66 <op_tailcall+0x66> */
  0x49, 0x8b, 0x46, 0x78,                   /*302: mov    0x78(%r14),%rax */
  0xe9, 0x5b, 0xfd, 0xff, 0xff,             /*306: jmpq   66 <op_tailcall+0x66> */
  0x49, 0x8b, 0x46, 0x40,                   /*30b: mov    0x40(%r14),%rax */
  0xe9, 0x52, 0xfd, 0xff, 0xff,             /*30f: jmpq   66 <op_tailcall+0x66> */
  0x49, 0x8b, 0x86, 0x98, 0x00, 0x00, 0x00, /*314: mov    0x98(%r14),%rax */
  0xe9, 0x46, 0xfd, 0xff, 0xff,             /*31b: jmpq   66 <op_tailcall+0x66> */

};

static void op_tailcall_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 32)) = b * 4 + 0;
  *((int32_t *)(op + 39)) = a * 16 + 0;
  *((int32_t *)(op + 46)) = a * 16 + 8;
  *((int32_t *)(op + 292)) = a * 1 + 0;
  *((int32_t *)(op + 300)) = a * 1 + 0;
  *((int32_t *)(op + 308)) = a * 1 + 1;
  *((int32_t *)(op + 316)) = a * 1 + 1;
  *((int32_t *)(op + 333)) = a * 16 + 16;
  *((int32_t *)(op + 339)) = a * 16 + 24;
  *((int32_t *)(op + 403)) = a * 16 + 0;
  *((int32_t *)(op + 425)) = a * 1 + 0;
  *((int32_t *)(op + 589)) = a * 1 + 0;
  *((int32_t *)(op + 212)) = c * 1 + 0;
  *((int32_t *)(op + 284)) = c * 1 + 1;
  *((int32_t *)(op + 348)) = c * 1 + 1;
}

static void op_tailcall_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_tailcall_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[1, 0, 14..17]], "a"=>[[16, 8, 198..201], [16, 0, 205..208]]} */
static uint8_t op_blkpush[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
  0x49, 0x8b, 0x7e, 0x58,                   /*6: mov    0x58(%r14),%rdi */
  0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0xbc, 0x00,/*a: movl   $0xbc0000,0x4(%rsp) */
  0x44, 0x8b, 0x4c, 0x24, 0x04,             /*12: mov    0x4(%rsp),%r9d */
  0x8b, 0x44, 0x24, 0x04,                   /*17: mov    0x4(%rsp),%eax */
  0x44, 0x8b, 0x44, 0x24, 0x04,             /*1b: mov    0x4(%rsp),%r8d */
  0x8b, 0x5c, 0x24, 0x04,                   /*20: mov    0x4(%rsp),%ebx */
  0x83, 0xe3, 0x0f,                         /*24: and    $0xf,%ebx */
  0x74, 0x56,                               /*27: je     7f <op_blkpush+0x7f> */
  0x49, 0x8b, 0x4e, 0x58,                   /*29: mov    0x58(%r14),%rcx */
  0x48, 0x8b, 0x49, 0x18,                   /*2d: mov    0x18(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x20,                   /*31: mov    0x20(%rcx),%rcx */
  0x48, 0x8b, 0x49, 0x08,                   /*35: mov    0x8(%rcx),%rcx */
  0x48, 0x8b, 0x71, 0x28,                   /*39: mov    0x28(%rcx),%rsi */
  0x48, 0x85, 0xf6,                         /*3d: test   %rsi,%rsi */
  0x0f, 0x94, 0xc1,                         /*40: sete   %cl */
  0x83, 0xfb, 0x01,                         /*43: cmp    $0x1,%ebx */
  0x74, 0x1b,                               /*46: je     63 <op_blkpush+0x63> */
  0xba, 0x01, 0x00, 0x00, 0x00,             /*48: mov    $0x1,%edx */
  0x29, 0xda,                               /*4d: sub    %ebx,%edx */
  0x90,                                     /*4f: nop */
  0xf6, 0xc1, 0x01,                         /*50: test   $0x1,%cl */
  0x75, 0x12,                               /*53: jne    67 <op_blkpush+0x67> */
  0x48, 0x8b, 0x76, 0x08,                   /*55: mov    0x8(%rsi),%rsi */
  0x48, 0x85, 0xf6,                         /*59: test   %rsi,%rsi */
  0x0f, 0x94, 0xc1,                         /*5c: sete   %cl */
  0xff, 0xc2,                               /*5f: inc    %edx */
  0x75, 0xed,                               /*61: jne    50 <op_blkpush+0x50> */
  0x84, 0xc9,                               /*63: test   %cl,%cl */
  0x74, 0x21,                               /*65: je     88 <op_blkpush+0x88> */
  0xbe, 0x02, 0x00, 0x00, 0x00,             /*67: mov    $0x2,%esi */
  0x41, 0xff, 0x96, 0xa0, 0x01, 0x00, 0x00, /*6c: callq  *0x1a0(%r14) */
  0x4c, 0x89, 0xf7,                         /*73: mov    %r14,%rdi */
  0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*76: callq  *0x1a8(%r14) */
  0xeb, 0x52,                               /*7d: jmp    d1 <op_blkpush+0xd1> */
  0x49, 0x8d, 0x4e, 0x18,                   /*7f: lea    0x18(%r14),%rcx */
  0x48, 0x89, 0xce,                         /*83: mov    %rcx,%rsi */
  0xeb, 0x08,                               /*86: jmp    90 <op_blkpush+0x90> */
  0x48, 0x83, 0xc6, 0x18,                   /*88: add    $0x18,%rsi */
  0x49, 0x8d, 0x4e, 0x18,                   /*8c: lea    0x18(%r14),%rcx */
  0x41, 0xc1, 0xe9, 0x0a,                   /*90: shr    $0xa,%r9d */
  0x41, 0x83, 0xe1, 0x3f,                   /*94: and    $0x3f,%r9d */
  0xc1, 0xe8, 0x09,                         /*98: shr    $0x9,%eax */
  0x83, 0xe0, 0x01,                         /*9b: and    $0x1,%eax */
  0x41, 0xc1, 0xe8, 0x04,                   /*9e: shr    $0x4,%r8d */
  0x41, 0x83, 0xe0, 0x1f,                   /*a2: and    $0x1f,%r8d */
  0x48, 0x8b, 0x16,                         /*a6: mov    (%rsi),%rdx */
  0x48, 0x8b, 0x09,                         /*a9: mov    (%rcx),%rcx */
  0x44, 0x01, 0xc8,                         /*ac: add    %r9d,%eax */
  0x41, 0x8d, 0x44, 0x00, 0x01,             /*af: lea    0x1(%r8,%rax,1),%eax */
  0x48, 0x98,                               /*b4: cltq */
  0x48, 0xc1, 0xe0, 0x04,                   /*b6: shl    $0x4,%rax */
  0x48, 0x8b, 0x34, 0x02,                   /*ba: mov    (%rdx,%rax,1),%rsi */
  0x48, 0x8b, 0x44, 0x02, 0x08,             /*be: mov    0x8(%rdx,%rax,1),%rax */
  0x48, 0x89, 0x81, 0x08, 0x10, 0xab, 0x00, /*c3: mov    %rax,0xab1008(%rcx) */
  0x48, 0x89, 0xb1, 0x00, 0x10, 0xab, 0x00, /*ca: mov    %rsi,0xab1000(%rcx) */
  0x4c, 0x89, 0xf7,                         /*d1: mov    %r14,%rdi */
  0x5b,                                     /*d4: pop    %rbx */
  0x41, 0x5e,                               /*d5: pop    %r14 */

};

static void op_blkpush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = b * 1 + 0;
  *((int32_t *)(op + 198)) = a * 16 + 8;
  *((int32_t *)(op + 205)) = a * 16 + 0;
}

static void op_blkpush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_blkpush_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[16, 8, 18..21], [16, 24, 25..28], [16, 0, 73..76], [16, 16, 79..82], [16, 8, 95..98], [16, 0, 119..122], [16, 0, 142..145], [16, 16, 149..152], [16, 0, 166..169], [16, 8, 172..175], [16, 16, 192..195], [16, 0, 200..203], [16, 0, 208..211], [16, 0, 225..228], [16, 16, 233..236], [16, 8, 239..242], [16, 0, 251..254], [16, 0, 268..271], [16, 16, 276..279], [16, 0, 284..287], [16, 8, 304..307], [16, 0, 314..317]]} */
static uint8_t op_add[] = {
  0x41, 0x57,                               /*0: push   %r15 */
  0x41, 0x56,                               /*2: push   %r14 */
  0x53,                                     /*4: push   %rbx */
  0x49, 0x89, 0xff,                         /*5: mov    %rdi,%r15 */
  0x49, 0x8b, 0x5f, 0x18,                   /*8: mov    0x18(%r15),%rbx */
  0x4d, 0x8b, 0x77, 0x58,                   /*c: mov    0x58(%r15),%r14 */
  0x8b, 0x93, 0x08, 0x10, 0xab, 0x00,       /*10: mov    0xab1008(%rbx),%edx */
  0x44, 0x8b, 0x83, 0x18, 0x10, 0xab, 0x00, /*16: mov    0xab1018(%rbx),%r8d */
  0x89, 0xd1,                               /*1d: mov    %edx,%ecx */
  0xc1, 0xe1, 0x08,                         /*1f: shl    $0x8,%ecx */
  0x81, 0xe1, 0x00, 0xff, 0xff, 0x00,       /*22: and    $0xffff00,%ecx */
  0x41, 0x0f, 0xb6, 0xc0,                   /*28: movzbl %r8b,%eax */
  0x09, 0xc8,                               /*2c: or     %ecx,%eax */
  0x3d, 0x0f, 0x10, 0x00, 0x00,             /*2e: cmp    $0x100f,%eax */
  0x7f, 0x4b,                               /*33: jg     80 <op_add+0x80> */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*35: cmp    $0x602,%eax */
  0x7f, 0x79,                               /*3a: jg     b5 <op_add+0xb5> */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*3c: cmp    $0x303,%eax */
  0x0f, 0x85, 0x8f, 0x00, 0x00, 0x00,       /*41: jne    d6 <op_add+0xd6> */
  0x8b, 0x83, 0x00, 0x10, 0xab, 0x00,       /*47: mov    0xab1000(%rbx),%eax */
  0x8b, 0x8b, 0x10, 0x10, 0xab, 0x00,       /*4d: mov    0xab1010(%rbx),%ecx */
  0x89, 0xc2,                               /*53: mov    %eax,%edx */
  0x01, 0xca,                               /*55: add    %ecx,%edx */
  0x0f, 0x81, 0xd1, 0x00, 0x00, 0x00,       /*57: jno    12e <op_add+0x12e> */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*5d: movl   $0x6,0xab1008(%rbx) */
  0xf2, 0x0f, 0x2a, 0xc0,                   /*67: cvtsi2sd %eax,%xmm0 */
  0xf2, 0x0f, 0x2a, 0xc9,                   /*6b: cvtsi2sd %ecx,%xmm1 */
  0xf2, 0x0f, 0x58, 0xc8,                   /*6f: addsd  %xmm0,%xmm1 */
  0xf2, 0x0f, 0x11, 0x8b, 0x00, 0x10, 0xab, 0x00,/*73: movsd  %xmm1,0xab1000(%rbx) */
  0xe9, 0xbe, 0x00, 0x00, 0x00,             /*7b: jmpq   13e <op_add+0x13e> */
  0x3d, 0x10, 0x10, 0x00, 0x00,             /*80: cmp    $0x1010,%eax */
  0x0f, 0x85, 0x97, 0x00, 0x00, 0x00,       /*85: jne    122 <op_add+0x122> */
  0x48, 0x8b, 0xb3, 0x00, 0x10, 0xab, 0x00, /*8b: mov    0xab1000(%rbx),%rsi */
  0x48, 0x8b, 0x8b, 0x10, 0x10, 0xab, 0x00, /*92: mov    0xab1010(%rbx),%rcx */
  0x4c, 0x89, 0xf7,                         /*99: mov    %r14,%rdi */
  0x41, 0xff, 0x97, 0x50, 0x01, 0x00, 0x00, /*9c: callq  *0x150(%r15) */
  0x48, 0x89, 0x83, 0x00, 0x10, 0xab, 0x00, /*a3: mov    %rax,0xab1000(%rbx) */
  0x89, 0x93, 0x08, 0x10, 0xab, 0x00,       /*aa: mov    %edx,0xab1008(%rbx) */
  0xe9, 0x89, 0x00, 0x00, 0x00,             /*b0: jmpq   13e <op_add+0x13e> */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*b5: cmp    $0x603,%eax */
  0x75, 0x45,                               /*ba: jne    101 <op_add+0x101> */
  0xf2, 0x0f, 0x2a, 0x83, 0x10, 0x10, 0xab, 0x00,/*bc: cvtsi2sdl 0xab1010(%rbx),%xmm0 */
  0xf2, 0x0f, 0x58, 0x83, 0x00, 0x10, 0xab, 0x00,/*c4: addsd  0xab1000(%rbx),%xmm0 */
  0xf2, 0x0f, 0x11, 0x83, 0x00, 0x10, 0xab, 0x00,/*cc: movsd  %xmm0,0xab1000(%rbx) */
  0xeb, 0x68,                               /*d4: jmp    13e <op_add+0x13e> */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*d6: cmp    $0x306,%eax */
  0x75, 0x45,                               /*db: jne    122 <op_add+0x122> */
  0xf2, 0x0f, 0x2a, 0x83, 0x00, 0x10, 0xab, 0x00,/*dd: cvtsi2sdl 0xab1000(%rbx),%xmm0 */
  0xf2, 0x0f, 0x58, 0x83, 0x10, 0x10, 0xab, 0x00,/*e5: addsd  0xab1010(%rbx),%xmm0 */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*ed: movl   $0x6,0xab1008(%rbx) */
  0xf2, 0x0f, 0x11, 0x83, 0x00, 0x10, 0xab, 0x00,/*f7: movsd  %xmm0,0xab1000(%rbx) */
  0xeb, 0x3d,                               /*ff: jmp    13e <op_add+0x13e> */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*101: cmp    $0x606,%eax */
  0x75, 0x1a,                               /*106: jne    122 <op_add+0x122> */
  0xf2, 0x0f, 0x10, 0x83, 0x00, 0x10, 0xab, 0x00,/*108: movsd  0xab1000(%rbx),%xmm0 */
  0xf2, 0x0f, 0x58, 0x83, 0x10, 0x10, 0xab, 0x00,/*110: addsd  0xab1010(%rbx),%xmm0 */
  0xf2, 0x0f, 0x11, 0x83, 0x00, 0x10, 0xab, 0x00,/*118: movsd  %xmm0,0xab1000(%rbx) */
  0xeb, 0x1c,                               /*120: jmp    13e <op_add+0x13e> */
  0x4c, 0x89, 0xff,                         /*122: mov    %r15,%rdi */
  0x41, 0xff, 0x97, 0x38, 0x02, 0x00, 0x00, /*125: callq  *0x238(%r15) */
  0xeb, 0x1b,                               /*12c: jmp    149 <op_add+0x149> */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*12e: movl   $0x3,0xab1008(%rbx) */
  0x89, 0x93, 0x00, 0x10, 0xab, 0x00,       /*138: mov    %edx,0xab1000(%rbx) */
  0x41, 0x8b, 0x47, 0x50,                   /*13e: mov    0x50(%r15),%eax */
  0x41, 0x89, 0x86, 0xdc, 0x00, 0x00, 0x00, /*142: mov    %eax,0xdc(%r14) */
  0x4c, 0x89, 0xff,                         /*149: mov    %r15,%rdi */
  0x5b,                                     /*14c: pop    %rbx */
  0x41, 0x5e,                               /*14d: pop    %r14 */
  0x41, 0x5f,                               /*14f: pop    %r15 */

};

static void op_add_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = a * 16 + 8;
  *((int32_t *)(op + 25)) = a * 16 + 24;
  *((int32_t *)(op + 73)) = a * 16 + 0;
  *((int32_t *)(op + 79)) = a * 16 + 16;
  *((int32_t *)(op + 95)) = a * 16 + 8;
  *((int32_t *)(op + 119)) = a * 16 + 0;
  *((int32_t *)(op + 142)) = a * 16 + 0;
  *((int32_t *)(op + 149)) = a * 16 + 16;
  *((int32_t *)(op + 166)) = a * 16 + 0;
  *((int32_t *)(op + 172)) = a * 16 + 8;
  *((int32_t *)(op + 192)) = a * 16 + 16;
  *((int32_t *)(op + 200)) = a * 16 + 0;
  *((int32_t *)(op + 208)) = a * 16 + 0;
  *((int32_t *)(op + 225)) = a * 16 + 0;
  *((int32_t *)(op + 233)) = a * 16 + 16;
  *((int32_t *)(op + 239)) = a * 16 + 8;
  *((int32_t *)(op + 251)) = a * 16 + 0;
  *((int32_t *)(op + 268)) = a * 16 + 0;
  *((int32_t *)(op + 276)) = a * 16 + 16;
  *((int32_t *)(op + 284)) = a * 16 + 0;
  *((int32_t *)(op + 304)) = a * 16 + 8;
  *((int32_t *)(op + 314)) = a * 16 + 0;
}

static void op_add_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_add_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 0, 23..26], [16, 0, 36..39], [16, 8, 52..55], [16, 0, 76..79], [16, 24, 84..87], [16, 16, 94..97], [1, 0, 108..111], [16, 8, 136..139], [16, 0, 146..149]], "c"=>[[1, 0, 44..47], [1, 0, 98..101]], "b"=>[[1, 0, 113..116]]} */
static uint8_t op_addi[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*8: mov    0xab1008(%rax),%ecx */
  0x83, 0xf9, 0x06,                         /*e: cmp    $0x6,%ecx */
  0x75, 0x0a,                               /*11: jne    1d <op_addi+0x1d> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*13: movsd  0xab1000(%rax),%xmm0 */
  0xeb, 0x23,                               /*1b: jmp    40 <op_addi+0x40> */
  0x83, 0xf9, 0x03,                         /*1d: cmp    $0x3,%ecx */
  0x75, 0x30,                               /*20: jne    52 <op_addi+0x52> */
  0x8b, 0x88, 0x00, 0x10, 0xab, 0x00,       /*22: mov    0xab1000(%rax),%ecx */
  0x89, 0xca,                               /*28: mov    %ecx,%edx */
  0x81, 0xc2, 0x00, 0x00, 0xcd, 0x00,       /*2a: add    $0xcd0000,%edx */
  0x71, 0x54,                               /*30: jno    86 <op_addi+0x86> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*32: movl   $0x6,0xab1008(%rax) */
  0xf2, 0x0f, 0x2a, 0xc1,                   /*3c: cvtsi2sd %ecx,%xmm0 */
  0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*40: addsd  0x0(%rip),%xmm0        # 48 <op_addi+0x48> */
  0xf2, 0x0f, 0x11, 0x80, 0x00, 0x10, 0xab, 0x00,/*48: movsd  %xmm0,0xab1000(%rax) */
  0xeb, 0x44,                               /*50: jmp    96 <op_addi+0x96> */
  0xc7, 0x80, 0x18, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*52: movl   $0x3,0xab1018(%rax) */
  0xc7, 0x80, 0x10, 0x10, 0xab, 0x00, 0x00, 0x00, 0xcd, 0x00,/*5c: movl   $0xcd0000,0xab1010(%rax) */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*66: mov    $0x20,%esi */
  0xba, 0x00, 0x00, 0xab, 0x00,             /*6b: mov    $0xab0000,%edx */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*70: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x01, 0x00, 0x00, 0x00,       /*75: mov    $0x1,%r8d */
  0x48, 0x89, 0xdf,                         /*7b: mov    %rbx,%rdi */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*7e: callq  *0x1d8(%rbx) */
  0xeb, 0x10,                               /*84: jmp    96 <op_addi+0x96> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*86: movl   $0x3,0xab1008(%rax) */
  0x89, 0x90, 0x00, 0x10, 0xab, 0x00,       /*90: mov    %edx,0xab1000(%rax) */
  0x48, 0x89, 0xdf,                         /*96: mov    %rbx,%rdi */
  0x5b,                                     /*99: pop    %rbx */

};

static void op_addi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 23)) = a * 16 + 0;
  *((int32_t *)(op + 36)) = a * 16 + 0;
  *((int32_t *)(op + 52)) = a * 16 + 8;
  *((int32_t *)(op + 76)) = a * 16 + 0;
  *((int32_t *)(op + 84)) = a * 16 + 24;
  *((int32_t *)(op + 94)) = a * 16 + 16;
  *((int32_t *)(op + 108)) = a * 1 + 0;
  *((int32_t *)(op + 136)) = a * 16 + 8;
  *((int32_t *)(op + 146)) = a * 16 + 0;
  *((int32_t *)(op + 44)) = c * 1 + 0;
  *((int32_t *)(op + 98)) = c * 1 + 0;
  *((int32_t *)(op + 113)) = b * 1 + 0;
}

static void op_addi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_addi_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 24, 26..29], [16, 0, 50..53], [16, 16, 56..59], [16, 8, 72..75], [16, 0, 102..105], [16, 16, 110..113], [16, 0, 122..125], [16, 0, 140..143], [16, 16, 148..151], [16, 8, 154..157], [16, 0, 166..169], [16, 0, 184..187], [16, 16, 192..195], [16, 0, 200..203], [16, 8, 219..222], [16, 0, 229..232]]} */
static uint8_t op_sub[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*8: mov    0xab1008(%rax),%edx */
  0xc1, 0xe2, 0x08,                         /*e: shl    $0x8,%edx */
  0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*11: and    $0xffff00,%edx */
  0x0f, 0xb6, 0x88, 0x18, 0x10, 0xab, 0x00, /*17: movzbl 0xab1018(%rax),%ecx */
  0x09, 0xd1,                               /*1e: or     %edx,%ecx */
  0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*20: cmp    $0x602,%ecx */
  0x7f, 0x32,                               /*26: jg     5a <op_sub+0x5a> */
  0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*28: cmp    $0x303,%ecx */
  0x75, 0x50,                               /*2e: jne    80 <op_sub+0x80> */
  0x8b, 0x88, 0x00, 0x10, 0xab, 0x00,       /*30: mov    0xab1000(%rax),%ecx */
  0x8b, 0x90, 0x10, 0x10, 0xab, 0x00,       /*36: mov    0xab1010(%rax),%edx */
  0x89, 0xce,                               /*3c: mov    %ecx,%esi */
  0x29, 0xd6,                               /*3e: sub    %edx,%esi */
  0x0f, 0x81, 0x93, 0x00, 0x00, 0x00,       /*40: jno    d9 <op_sub+0xd9> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*46: movl   $0x6,0xab1008(%rax) */
  0xf2, 0x0f, 0x2a, 0xc1,                   /*50: cvtsi2sd %ecx,%xmm0 */
  0xf2, 0x0f, 0x2a, 0xca,                   /*54: cvtsi2sd %edx,%xmm1 */
  0xeb, 0x18,                               /*58: jmp    72 <op_sub+0x72> */
  0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*5a: cmp    $0x603,%ecx */
  0x75, 0x4a,                               /*60: jne    ac <op_sub+0xac> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*62: movsd  0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x2a, 0x88, 0x10, 0x10, 0xab, 0x00,/*6a: cvtsi2sdl 0xab1010(%rax),%xmm1 */
  0xf2, 0x0f, 0x5c, 0xc1,                   /*72: subsd  %xmm1,%xmm0 */
  0xf2, 0x0f, 0x11, 0x80, 0x00, 0x10, 0xab, 0x00,/*76: movsd  %xmm0,0xab1000(%rax) */
  0xeb, 0x69,                               /*7e: jmp    e9 <op_sub+0xe9> */
  0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*80: cmp    $0x306,%ecx */
  0x75, 0x46,                               /*86: jne    ce <op_sub+0xce> */
  0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x10, 0xab, 0x00,/*88: cvtsi2sdl 0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x5c, 0x80, 0x10, 0x10, 0xab, 0x00,/*90: subsd  0xab1010(%rax),%xmm0 */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*98: movl   $0x6,0xab1008(%rax) */
  0xf2, 0x0f, 0x11, 0x80, 0x00, 0x10, 0xab, 0x00,/*a2: movsd  %xmm0,0xab1000(%rax) */
  0xeb, 0x3d,                               /*aa: jmp    e9 <op_sub+0xe9> */
  0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*ac: cmp    $0x606,%ecx */
  0x75, 0x1a,                               /*b2: jne    ce <op_sub+0xce> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*b4: movsd  0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x5c, 0x80, 0x10, 0x10, 0xab, 0x00,/*bc: subsd  0xab1010(%rax),%xmm0 */
  0xf2, 0x0f, 0x11, 0x80, 0x00, 0x10, 0xab, 0x00,/*c4: movsd  %xmm0,0xab1000(%rax) */
  0xeb, 0x1b,                               /*cc: jmp    e9 <op_sub+0xe9> */
  0x48, 0x89, 0xdf,                         /*ce: mov    %rbx,%rdi */
  0xff, 0x93, 0x38, 0x02, 0x00, 0x00,       /*d1: callq  *0x238(%rbx) */
  0xeb, 0x10,                               /*d7: jmp    e9 <op_sub+0xe9> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*d9: movl   $0x3,0xab1008(%rax) */
  0x89, 0xb0, 0x00, 0x10, 0xab, 0x00,       /*e3: mov    %esi,0xab1000(%rax) */
  0x48, 0x89, 0xdf,                         /*e9: mov    %rbx,%rdi */
  0x5b,                                     /*ec: pop    %rbx */

};

static void op_sub_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 26)) = a * 16 + 24;
  *((int32_t *)(op + 50)) = a * 16 + 0;
  *((int32_t *)(op + 56)) = a * 16 + 16;
  *((int32_t *)(op + 72)) = a * 16 + 8;
  *((int32_t *)(op + 102)) = a * 16 + 0;
  *((int32_t *)(op + 110)) = a * 16 + 16;
  *((int32_t *)(op + 122)) = a * 16 + 0;
  *((int32_t *)(op + 140)) = a * 16 + 0;
  *((int32_t *)(op + 148)) = a * 16 + 16;
  *((int32_t *)(op + 154)) = a * 16 + 8;
  *((int32_t *)(op + 166)) = a * 16 + 0;
  *((int32_t *)(op + 184)) = a * 16 + 0;
  *((int32_t *)(op + 192)) = a * 16 + 16;
  *((int32_t *)(op + 200)) = a * 16 + 0;
  *((int32_t *)(op + 219)) = a * 16 + 8;
  *((int32_t *)(op + 229)) = a * 16 + 0;
}

static void op_sub_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sub_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 0, 23..26], [16, 0, 36..39], [16, 8, 52..55], [16, 0, 76..79], [16, 24, 84..87], [16, 16, 94..97], [1, 0, 108..111], [16, 8, 136..139], [16, 0, 146..149]], "c"=>[[1, 0, 44..47], [1, 0, 98..101]], "b"=>[[1, 0, 113..116]]} */
static uint8_t op_subi[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*8: mov    0xab1008(%rax),%ecx */
  0x83, 0xf9, 0x06,                         /*e: cmp    $0x6,%ecx */
  0x75, 0x0a,                               /*11: jne    1d <op_subi+0x1d> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*13: movsd  0xab1000(%rax),%xmm0 */
  0xeb, 0x23,                               /*1b: jmp    40 <op_subi+0x40> */
  0x83, 0xf9, 0x03,                         /*1d: cmp    $0x3,%ecx */
  0x75, 0x30,                               /*20: jne    52 <op_subi+0x52> */
  0x8b, 0x88, 0x00, 0x10, 0xab, 0x00,       /*22: mov    0xab1000(%rax),%ecx */
  0x89, 0xca,                               /*28: mov    %ecx,%edx */
  0x81, 0xea, 0x00, 0x00, 0xcd, 0x00,       /*2a: sub    $0xcd0000,%edx */
  0x71, 0x54,                               /*30: jno    86 <op_subi+0x86> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*32: movl   $0x6,0xab1008(%rax) */
  0xf2, 0x0f, 0x2a, 0xc1,                   /*3c: cvtsi2sd %ecx,%xmm0 */
  0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*40: addsd  0x0(%rip),%xmm0        # 48 <op_subi+0x48> */
  0xf2, 0x0f, 0x11, 0x80, 0x00, 0x10, 0xab, 0x00,/*48: movsd  %xmm0,0xab1000(%rax) */
  0xeb, 0x44,                               /*50: jmp    96 <op_subi+0x96> */
  0xc7, 0x80, 0x18, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*52: movl   $0x3,0xab1018(%rax) */
  0xc7, 0x80, 0x10, 0x10, 0xab, 0x00, 0x00, 0x00, 0xcd, 0x00,/*5c: movl   $0xcd0000,0xab1010(%rax) */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*66: mov    $0x20,%esi */
  0xba, 0x00, 0x00, 0xab, 0x00,             /*6b: mov    $0xab0000,%edx */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*70: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x01, 0x00, 0x00, 0x00,       /*75: mov    $0x1,%r8d */
  0x48, 0x89, 0xdf,                         /*7b: mov    %rbx,%rdi */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*7e: callq  *0x1d8(%rbx) */
  0xeb, 0x10,                               /*84: jmp    96 <op_subi+0x96> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*86: movl   $0x3,0xab1008(%rax) */
  0x89, 0x90, 0x00, 0x10, 0xab, 0x00,       /*90: mov    %edx,0xab1000(%rax) */
  0x48, 0x89, 0xdf,                         /*96: mov    %rbx,%rdi */
  0x5b,                                     /*99: pop    %rbx */

};

static void op_subi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 23)) = a * 16 + 0;
  *((int32_t *)(op + 36)) = a * 16 + 0;
  *((int32_t *)(op + 52)) = a * 16 + 8;
  *((int32_t *)(op + 76)) = a * 16 + 0;
  *((int32_t *)(op + 84)) = a * 16 + 24;
  *((int32_t *)(op + 94)) = a * 16 + 16;
  *((int32_t *)(op + 108)) = a * 1 + 0;
  *((int32_t *)(op + 136)) = a * 16 + 8;
  *((int32_t *)(op + 146)) = a * 16 + 0;
  *((int32_t *)(op + 44)) = c * 1 + 0;
  *((int32_t *)(op + 98)) = c * 1 + 0;
  *((int32_t *)(op + 113)) = b * 1 + 0;
}

static void op_subi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_subi_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[16, 8, 12..15], [16, 24, 19..22], [16, 0, 61..64], [16, 16, 68..71], [16, 8, 90..93], [16, 0, 101..104], [16, 16, 121..124], [16, 0, 129..132], [16, 0, 137..140], [16, 0, 154..157], [16, 16, 162..165], [16, 8, 168..171], [16, 0, 180..183], [16, 0, 197..200], [16, 16, 205..208], [16, 0, 213..216], [16, 8, 238..241], [16, 0, 248..251]]} */
static uint8_t op_mul[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
  0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
  0x8b, 0x93, 0x08, 0x10, 0xab, 0x00,       /*a: mov    0xab1008(%rbx),%edx */
  0x44, 0x8b, 0x83, 0x18, 0x10, 0xab, 0x00, /*10: mov    0xab1018(%rbx),%r8d */
  0x89, 0xd1,                               /*17: mov    %edx,%ecx */
  0xc1, 0xe1, 0x08,                         /*19: shl    $0x8,%ecx */
  0x81, 0xe1, 0x00, 0xff, 0xff, 0x00,       /*1c: and    $0xffff00,%ecx */
  0x41, 0x0f, 0xb6, 0xc0,                   /*22: movzbl %r8b,%eax */
  0x09, 0xc8,                               /*26: or     %ecx,%eax */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*28: cmp    $0x602,%eax */
  0x7f, 0x3f,                               /*2d: jg     6e <op_mul+0x6e> */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*2f: cmp    $0x303,%eax */
  0x75, 0x59,                               /*34: jne    8f <op_mul+0x8f> */
  0x49, 0x8b, 0x7e, 0x58,                   /*36: mov    0x58(%r14),%rdi */
  0x48, 0x8b, 0xb3, 0x00, 0x10, 0xab, 0x00, /*3a: mov    0xab1000(%rbx),%rsi */
  0x48, 0x8b, 0x8b, 0x10, 0x10, 0xab, 0x00, /*41: mov    0xab1010(%rbx),%rcx */
  0x41, 0xff, 0x96, 0x48, 0x02, 0x00, 0x00, /*48: callq  *0x248(%r14) */
  0x83, 0xfa, 0x06,                         /*4f: cmp    $0x6,%edx */
  0x0f, 0x85, 0x8f, 0x00, 0x00, 0x00,       /*52: jne    e7 <op_mul+0xe7> */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*58: movl   $0x6,0xab1008(%rbx) */
  0x48, 0x89, 0x83, 0x00, 0x10, 0xab, 0x00, /*62: mov    %rax,0xab1000(%rbx) */
  0xe9, 0x8e, 0x00, 0x00, 0x00,             /*69: jmpq   fc <op_mul+0xfc> */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*6e: cmp    $0x603,%eax */
  0x75, 0x45,                               /*73: jne    ba <op_mul+0xba> */
  0xf2, 0x0f, 0x2a, 0x83, 0x10, 0x10, 0xab, 0x00,/*75: cvtsi2sdl 0xab1010(%rbx),%xmm0 */
  0xf2, 0x0f, 0x59, 0x83, 0x00, 0x10, 0xab, 0x00,/*7d: mulsd  0xab1000(%rbx),%xmm0 */
  0xf2, 0x0f, 0x11, 0x83, 0x00, 0x10, 0xab, 0x00,/*85: movsd  %xmm0,0xab1000(%rbx) */
  0xeb, 0x6d,                               /*8d: jmp    fc <op_mul+0xfc> */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*8f: cmp    $0x306,%eax */
  0x75, 0x45,                               /*94: jne    db <op_mul+0xdb> */
  0xf2, 0x0f, 0x2a, 0x83, 0x00, 0x10, 0xab, 0x00,/*96: cvtsi2sdl 0xab1000(%rbx),%xmm0 */
  0xf2, 0x0f, 0x59, 0x83, 0x10, 0x10, 0xab, 0x00,/*9e: mulsd  0xab1010(%rbx),%xmm0 */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*a6: movl   $0x6,0xab1008(%rbx) */
  0xf2, 0x0f, 0x11, 0x83, 0x00, 0x10, 0xab, 0x00,/*b0: movsd  %xmm0,0xab1000(%rbx) */
  0xeb, 0x42,                               /*b8: jmp    fc <op_mul+0xfc> */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*ba: cmp    $0x606,%eax */
  0x75, 0x1a,                               /*bf: jne    db <op_mul+0xdb> */
  0xf2, 0x0f, 0x10, 0x83, 0x00, 0x10, 0xab, 0x00,/*c1: movsd  0xab1000(%rbx),%xmm0 */
  0xf2, 0x0f, 0x59, 0x83, 0x10, 0x10, 0xab, 0x00,/*c9: mulsd  0xab1010(%rbx),%xmm0 */
  0xf2, 0x0f, 0x11, 0x83, 0x00, 0x10, 0xab, 0x00,/*d1: movsd  %xmm0,0xab1000(%rbx) */
  0xeb, 0x21,                               /*d9: jmp    fc <op_mul+0xfc> */
  0x4c, 0x89, 0xf7,                         /*db: mov    %r14,%rdi */
  0x41, 0xff, 0x96, 0x38, 0x02, 0x00, 0x00, /*de: callq  *0x238(%r14) */
  0xeb, 0x15,                               /*e5: jmp    fc <op_mul+0xfc> */
  0x83, 0xfa, 0x03,                         /*e7: cmp    $0x3,%edx */
  0x75, 0x10,                               /*ea: jne    fc <op_mul+0xfc> */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*ec: movl   $0x3,0xab1008(%rbx) */
  0x89, 0x83, 0x00, 0x10, 0xab, 0x00,       /*f6: mov    %eax,0xab1000(%rbx) */
  0x4c, 0x89, 0xf7,                         /*fc: mov    %r14,%rdi */
  0x5b,                                     /*ff: pop    %rbx */
  0x41, 0x5e,                               /*100: pop    %r14 */

};

static void op_mul_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 12)) = a * 16 + 8;
  *((int32_t *)(op + 19)) = a * 16 + 24;
  *((int32_t *)(op + 61)) = a * 16 + 0;
  *((int32_t *)(op + 68)) = a * 16 + 16;
  *((int32_t *)(op + 90)) = a * 16 + 8;
  *((int32_t *)(op + 101)) = a * 16 + 0;
  *((int32_t *)(op + 121)) = a * 16 + 16;
  *((int32_t *)(op + 129)) = a * 16 + 0;
  *((int32_t *)(op + 137)) = a * 16 + 0;
  *((int32_t *)(op + 154)) = a * 16 + 0;
  *((int32_t *)(op + 162)) = a * 16 + 16;
  *((int32_t *)(op + 168)) = a * 16 + 8;
  *((int32_t *)(op + 180)) = a * 16 + 0;
  *((int32_t *)(op + 197)) = a * 16 + 0;
  *((int32_t *)(op + 205)) = a * 16 + 16;
  *((int32_t *)(op + 213)) = a * 16 + 0;
  *((int32_t *)(op + 238)) = a * 16 + 8;
  *((int32_t *)(op + 248)) = a * 16 + 0;
}

static void op_mul_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_mul_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 24, 26..29], [16, 0, 52..55], [16, 16, 60..63], [16, 8, 66..69], [16, 0, 88..91], [16, 16, 96..99], [16, 0, 108..111], [16, 0, 126..129], [16, 16, 134..137], [16, 8, 140..143], [16, 0, 152..155], [16, 0, 170..173], [16, 16, 178..181], [16, 0, 186..189]]} */
static uint8_t op_div[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*8: mov    0xab1008(%rax),%edx */
  0xc1, 0xe2, 0x08,                         /*e: shl    $0x8,%edx */
  0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*11: and    $0xffff00,%edx */
  0x0f, 0xb6, 0x88, 0x18, 0x10, 0xab, 0x00, /*17: movzbl 0xab1018(%rax),%ecx */
  0x09, 0xd1,                               /*1e: or     %edx,%ecx */
  0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*20: cmp    $0x602,%ecx */
  0x7f, 0x24,                               /*26: jg     4c <op_div+0x4c> */
  0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*28: cmp    $0x303,%ecx */
  0x75, 0x42,                               /*2e: jne    72 <op_div+0x72> */
  0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x10, 0xab, 0x00,/*30: cvtsi2sdl 0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x2a, 0x88, 0x10, 0x10, 0xab, 0x00,/*38: cvtsi2sdl 0xab1010(%rax),%xmm1 */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*40: movl   $0x6,0xab1008(%rax) */
  0xeb, 0x18,                               /*4a: jmp    64 <op_div+0x64> */
  0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*4c: cmp    $0x603,%ecx */
  0x75, 0x4a,                               /*52: jne    9e <op_div+0x9e> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*54: movsd  0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x2a, 0x88, 0x10, 0x10, 0xab, 0x00,/*5c: cvtsi2sdl 0xab1010(%rax),%xmm1 */
  0xf2, 0x0f, 0x5e, 0xc1,                   /*64: divsd  %xmm1,%xmm0 */
  0xf2, 0x0f, 0x11, 0x80, 0x00, 0x10, 0xab, 0x00,/*68: movsd  %xmm0,0xab1000(%rax) */
  0xeb, 0x57,                               /*70: jmp    c9 <op_div+0xc9> */
  0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*72: cmp    $0x306,%ecx */
  0x75, 0x46,                               /*78: jne    c0 <op_div+0xc0> */
  0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x10, 0xab, 0x00,/*7a: cvtsi2sdl 0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x5e, 0x80, 0x10, 0x10, 0xab, 0x00,/*82: divsd  0xab1010(%rax),%xmm0 */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*8a: movl   $0x6,0xab1008(%rax) */
  0xf2, 0x0f, 0x11, 0x80, 0x00, 0x10, 0xab, 0x00,/*94: movsd  %xmm0,0xab1000(%rax) */
  0xeb, 0x2b,                               /*9c: jmp    c9 <op_div+0xc9> */
  0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*9e: cmp    $0x606,%ecx */
  0x75, 0x1a,                               /*a4: jne    c0 <op_div+0xc0> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*a6: movsd  0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x5e, 0x80, 0x10, 0x10, 0xab, 0x00,/*ae: divsd  0xab1010(%rax),%xmm0 */
  0xf2, 0x0f, 0x11, 0x80, 0x00, 0x10, 0xab, 0x00,/*b6: movsd  %xmm0,0xab1000(%rax) */
  0xeb, 0x09,                               /*be: jmp    c9 <op_div+0xc9> */
  0x48, 0x89, 0xdf,                         /*c0: mov    %rbx,%rdi */
  0xff, 0x93, 0x38, 0x02, 0x00, 0x00,       /*c3: callq  *0x238(%rbx) */
  0x48, 0x89, 0xdf,                         /*c9: mov    %rbx,%rdi */
  0x5b,                                     /*cc: pop    %rbx */

};

static void op_div_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 26)) = a * 16 + 24;
  *((int32_t *)(op + 52)) = a * 16 + 0;
  *((int32_t *)(op + 60)) = a * 16 + 16;
  *((int32_t *)(op + 66)) = a * 16 + 8;
  *((int32_t *)(op + 88)) = a * 16 + 0;
  *((int32_t *)(op + 96)) = a * 16 + 16;
  *((int32_t *)(op + 108)) = a * 16 + 0;
  *((int32_t *)(op + 126)) = a * 16 + 0;
  *((int32_t *)(op + 134)) = a * 16 + 16;
  *((int32_t *)(op + 140)) = a * 16 + 8;
  *((int32_t *)(op + 152)) = a * 16 + 0;
  *((int32_t *)(op + 170)) = a * 16 + 0;
  *((int32_t *)(op + 178)) = a * 16 + 16;
  *((int32_t *)(op + 186)) = a * 16 + 0;
}

static void op_div_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_div_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[16, 0, 17..20], [16, 8, 23..26], [16, 16, 30..33], [16, 24, 37..40], [16, 8, 58..61], [16, 24, 74..77], [16, 0, 96..99], [16, 16, 102..105], [16, 16, 125..128], [16, 0, 133..136], [16, 0, 151..154], [16, 0, 168..171], [16, 16, 176..179], [16, 8, 195..198], [16, 0, 205..208], [16, 8, 223..226], [1, 0, 239..242]], "b"=>[[1, 0, 244..247]], "c"=>[[1, 0, 250..253]]} */
static uint8_t op_eq[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
  0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
  0x49, 0x8b, 0x7e, 0x58,                   /*a: mov    0x58(%r14),%rdi */
  0x48, 0x8b, 0xb3, 0x00, 0x10, 0xab, 0x00, /*e: mov    0xab1000(%rbx),%rsi */
  0x8b, 0x93, 0x08, 0x10, 0xab, 0x00,       /*15: mov    0xab1008(%rbx),%edx */
  0x48, 0x8b, 0x8b, 0x10, 0x10, 0xab, 0x00, /*1b: mov    0xab1010(%rbx),%rcx */
  0x44, 0x8b, 0x83, 0x18, 0x10, 0xab, 0x00, /*22: mov    0xab1018(%rbx),%r8d */
  0x41, 0xff, 0x96, 0xa8, 0x00, 0x00, 0x00, /*29: callq  *0xa8(%r14) */
  0x84, 0xc0,                               /*30: test   %al,%al */
  0x0f, 0x85, 0x89, 0x00, 0x00, 0x00,       /*32: jne    c1 <op_eq+0xc1> */
  0x8b, 0x8b, 0x08, 0x10, 0xab, 0x00,       /*38: mov    0xab1008(%rbx),%ecx */
  0xc1, 0xe1, 0x08,                         /*3e: shl    $0x8,%ecx */
  0x81, 0xe1, 0x00, 0xff, 0xff, 0x00,       /*41: and    $0xffff00,%ecx */
  0x0f, 0xb6, 0x83, 0x18, 0x10, 0xab, 0x00, /*47: movzbl 0xab1018(%rbx),%eax */
  0x09, 0xc8,                               /*4e: or     %ecx,%eax */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*50: cmp    $0x602,%eax */
  0x7f, 0x1b,                               /*55: jg     72 <op_eq+0x72> */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*57: cmp    $0x303,%eax */
  0x75, 0x2e,                               /*5c: jne    8c <op_eq+0x8c> */
  0x8b, 0x83, 0x00, 0x10, 0xab, 0x00,       /*5e: mov    0xab1000(%rbx),%eax */
  0x3b, 0x83, 0x10, 0x10, 0xab, 0x00,       /*64: cmp    0xab1010(%rbx),%eax */
  0x0f, 0x94, 0xc0,                         /*6a: sete   %al */
  0x0f, 0xb6, 0xc0,                         /*6d: movzbl %al,%eax */
  0xeb, 0x4b,                               /*70: jmp    bd <op_eq+0xbd> */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*72: cmp    $0x603,%eax */
  0x75, 0x24,                               /*77: jne    9d <op_eq+0x9d> */
  0xf2, 0x0f, 0x2a, 0x83, 0x10, 0x10, 0xab, 0x00,/*79: cvtsi2sdl 0xab1010(%rbx),%xmm0 */
  0xf2, 0x0f, 0xc2, 0x83, 0x00, 0x10, 0xab, 0x00, 0x00,/*81: cmpeqsd 0xab1000(%rbx),%xmm0 */
  0xeb, 0x29,                               /*8a: jmp    b5 <op_eq+0xb5> */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*8c: cmp    $0x306,%eax */
  0x75, 0x56,                               /*91: jne    e9 <op_eq+0xe9> */
  0xf2, 0x0f, 0x2a, 0x83, 0x00, 0x10, 0xab, 0x00,/*93: cvtsi2sdl 0xab1000(%rbx),%xmm0 */
  0xeb, 0x0f,                               /*9b: jmp    ac <op_eq+0xac> */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*9d: cmp    $0x606,%eax */
  0x75, 0x45,                               /*a2: jne    e9 <op_eq+0xe9> */
  0xf2, 0x0f, 0x10, 0x83, 0x00, 0x10, 0xab, 0x00,/*a4: movsd  0xab1000(%rbx),%xmm0 */
  0xf2, 0x0f, 0xc2, 0x83, 0x10, 0x10, 0xab, 0x00, 0x00,/*ac: cmpeqsd 0xab1010(%rbx),%xmm0 */
  0x66, 0x48, 0x0f, 0x7e, 0xc0,             /*b5: movq   %xmm0,%rax */
  0x83, 0xe0, 0x01,                         /*ba: and    $0x1,%eax */
  0x85, 0xc0,                               /*bd: test   %eax,%eax */
  0x74, 0x1c,                               /*bf: je     dd <op_eq+0xdd> */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*c1: movl   $0x2,0xab1008(%rbx) */
  0xc7, 0x83, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*cb: movl   $0x1,0xab1000(%rbx) */
  0x4c, 0x89, 0xf7,                         /*d5: mov    %r14,%rdi */
  0x5b,                                     /*d8: pop    %rbx */
  0x41, 0x5e,                               /*d9: pop    %r14 */
  0xeb, 0x2d,                               /*db: jmp    10a <op_eq+0x10a> */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*dd: movl   $0x0,0xab1008(%rbx) */
  0xeb, 0xe2,                               /*e7: jmp    cb <op_eq+0xcb> */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*e9: mov    $0x20,%esi */
  0xba, 0x00, 0x00, 0xab, 0x00,             /*ee: mov    $0xab0000,%edx */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*f3: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*f8: mov    $0xcd0000,%r8d */
  0x4c, 0x89, 0xf7,                         /*fe: mov    %r14,%rdi */
  0x41, 0xff, 0x96, 0xd8, 0x01, 0x00, 0x00, /*101: callq  *0x1d8(%r14) */
  0xeb, 0xcb,                               /*108: jmp    d5 <op_eq+0xd5> */

};

static void op_eq_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 16 + 0;
  *((int32_t *)(op + 23)) = a * 16 + 8;
  *((int32_t *)(op + 30)) = a * 16 + 16;
  *((int32_t *)(op + 37)) = a * 16 + 24;
  *((int32_t *)(op + 58)) = a * 16 + 8;
  *((int32_t *)(op + 74)) = a * 16 + 24;
  *((int32_t *)(op + 96)) = a * 16 + 0;
  *((int32_t *)(op + 102)) = a * 16 + 16;
  *((int32_t *)(op + 125)) = a * 16 + 16;
  *((int32_t *)(op + 133)) = a * 16 + 0;
  *((int32_t *)(op + 151)) = a * 16 + 0;
  *((int32_t *)(op + 168)) = a * 16 + 0;
  *((int32_t *)(op + 176)) = a * 16 + 16;
  *((int32_t *)(op + 195)) = a * 16 + 8;
  *((int32_t *)(op + 205)) = a * 16 + 0;
  *((int32_t *)(op + 223)) = a * 16 + 8;
  *((int32_t *)(op + 239)) = a * 1 + 0;
  *((int32_t *)(op + 244)) = b * 1 + 0;
  *((int32_t *)(op + 250)) = c * 1 + 0;
}

static void op_eq_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_eq_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 24, 26..29], [16, 0, 50..53], [16, 16, 56..59], [16, 16, 77..80], [16, 0, 95..98], [16, 16, 103..106], [16, 16, 128..131], [16, 0, 136..139], [16, 8, 152..155], [16, 8, 164..167], [16, 0, 174..177], [1, 0, 190..193]], "b"=>[[1, 0, 195..198]], "c"=>[[1, 0, 201..204]]} */
static uint8_t op_lt[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*8: mov    0xab1008(%rax),%edx */
  0xc1, 0xe2, 0x08,                         /*e: shl    $0x8,%edx */
  0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*11: and    $0xffff00,%edx */
  0x0f, 0xb6, 0x88, 0x18, 0x10, 0xab, 0x00, /*17: movzbl 0xab1018(%rax),%ecx */
  0x09, 0xd1,                               /*1e: or     %edx,%ecx */
  0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*20: cmp    $0x602,%ecx */
  0x7f, 0x19,                               /*26: jg     41 <op_lt+0x41> */
  0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*28: cmp    $0x303,%ecx */
  0x75, 0x23,                               /*2e: jne    53 <op_lt+0x53> */
  0x8b, 0x88, 0x00, 0x10, 0xab, 0x00,       /*30: mov    0xab1000(%rax),%ecx */
  0x3b, 0x88, 0x10, 0x10, 0xab, 0x00,       /*36: cmp    0xab1010(%rax),%ecx */
  0x0f, 0x9c, 0xc1,                         /*3c: setl   %cl */
  0xeb, 0x4e,                               /*3f: jmp    8f <op_lt+0x8f> */
  0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*41: cmp    $0x603,%ecx */
  0x75, 0x2b,                               /*47: jne    74 <op_lt+0x74> */
  0xf2, 0x0f, 0x2a, 0x80, 0x10, 0x10, 0xab, 0x00,/*49: cvtsi2sdl 0xab1010(%rax),%xmm0 */
  0xeb, 0x31,                               /*51: jmp    84 <op_lt+0x84> */
  0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*53: cmp    $0x306,%ecx */
  0x75, 0x5d,                               /*59: jne    b8 <op_lt+0xb8> */
  0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x10, 0xab, 0x00,/*5b: cvtsi2sdl 0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x10, 0x88, 0x10, 0x10, 0xab, 0x00,/*63: movsd  0xab1010(%rax),%xmm1 */
  0x66, 0x0f, 0x2e, 0xc8,                   /*6b: ucomisd %xmm0,%xmm1 */
  0x0f, 0x97, 0xc1,                         /*6f: seta   %cl */
  0xeb, 0x1b,                               /*72: jmp    8f <op_lt+0x8f> */
  0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*74: cmp    $0x606,%ecx */
  0x75, 0x3c,                               /*7a: jne    b8 <op_lt+0xb8> */
  0xf2, 0x0f, 0x10, 0x80, 0x10, 0x10, 0xab, 0x00,/*7c: movsd  0xab1010(%rax),%xmm0 */
  0x66, 0x0f, 0x2e, 0x80, 0x00, 0x10, 0xab, 0x00,/*84: ucomisd 0xab1000(%rax),%xmm0 */
  0x0f, 0x97, 0xc1,                         /*8c: seta   %cl */
  0x0f, 0xb6, 0xc9,                         /*8f: movzbl %cl,%ecx */
  0x85, 0xc9,                               /*92: test   %ecx,%ecx */
  0x74, 0x0c,                               /*94: je     a2 <op_lt+0xa2> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*96: movl   $0x2,0xab1008(%rax) */
  0xeb, 0x0a,                               /*a0: jmp    ac <op_lt+0xac> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*a2: movl   $0x0,0xab1008(%rax) */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*ac: movl   $0x1,0xab1000(%rax) */
  0xeb, 0x1e,                               /*b6: jmp    d6 <op_lt+0xd6> */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*b8: mov    $0x20,%esi */
  0xba, 0x00, 0x00, 0xab, 0x00,             /*bd: mov    $0xab0000,%edx */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*c2: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*c7: mov    $0xcd0000,%r8d */
  0x48, 0x89, 0xdf,                         /*cd: mov    %rbx,%rdi */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*d0: callq  *0x1d8(%rbx) */
  0x48, 0x89, 0xdf,                         /*d6: mov    %rbx,%rdi */
  0x5b,                                     /*d9: pop    %rbx */

};

static void op_lt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 26)) = a * 16 + 24;
  *((int32_t *)(op + 50)) = a * 16 + 0;
  *((int32_t *)(op + 56)) = a * 16 + 16;
  *((int32_t *)(op + 77)) = a * 16 + 16;
  *((int32_t *)(op + 95)) = a * 16 + 0;
  *((int32_t *)(op + 103)) = a * 16 + 16;
  *((int32_t *)(op + 128)) = a * 16 + 16;
  *((int32_t *)(op + 136)) = a * 16 + 0;
  *((int32_t *)(op + 152)) = a * 16 + 8;
  *((int32_t *)(op + 164)) = a * 16 + 8;
  *((int32_t *)(op + 174)) = a * 16 + 0;
  *((int32_t *)(op + 190)) = a * 1 + 0;
  *((int32_t *)(op + 195)) = b * 1 + 0;
  *((int32_t *)(op + 201)) = c * 1 + 0;
}

static void op_lt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_lt_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 24, 26..29], [16, 0, 50..53], [16, 16, 56..59], [16, 16, 77..80], [16, 0, 95..98], [16, 16, 103..106], [16, 16, 128..131], [16, 0, 136..139], [16, 8, 152..155], [16, 8, 164..167], [16, 0, 174..177], [1, 0, 190..193]], "b"=>[[1, 0, 195..198]], "c"=>[[1, 0, 201..204]]} */
static uint8_t op_le[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*8: mov    0xab1008(%rax),%edx */
  0xc1, 0xe2, 0x08,                         /*e: shl    $0x8,%edx */
  0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*11: and    $0xffff00,%edx */
  0x0f, 0xb6, 0x88, 0x18, 0x10, 0xab, 0x00, /*17: movzbl 0xab1018(%rax),%ecx */
  0x09, 0xd1,                               /*1e: or     %edx,%ecx */
  0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*20: cmp    $0x602,%ecx */
  0x7f, 0x19,                               /*26: jg     41 <op_le+0x41> */
  0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*28: cmp    $0x303,%ecx */
  0x75, 0x23,                               /*2e: jne    53 <op_le+0x53> */
  0x8b, 0x88, 0x00, 0x10, 0xab, 0x00,       /*30: mov    0xab1000(%rax),%ecx */
  0x3b, 0x88, 0x10, 0x10, 0xab, 0x00,       /*36: cmp    0xab1010(%rax),%ecx */
  0x0f, 0x9e, 0xc1,                         /*3c: setle  %cl */
  0xeb, 0x4e,                               /*3f: jmp    8f <op_le+0x8f> */
  0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*41: cmp    $0x603,%ecx */
  0x75, 0x2b,                               /*47: jne    74 <op_le+0x74> */
  0xf2, 0x0f, 0x2a, 0x80, 0x10, 0x10, 0xab, 0x00,/*49: cvtsi2sdl 0xab1010(%rax),%xmm0 */
  0xeb, 0x31,                               /*51: jmp    84 <op_le+0x84> */
  0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*53: cmp    $0x306,%ecx */
  0x75, 0x5d,                               /*59: jne    b8 <op_le+0xb8> */
  0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x10, 0xab, 0x00,/*5b: cvtsi2sdl 0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x10, 0x88, 0x10, 0x10, 0xab, 0x00,/*63: movsd  0xab1010(%rax),%xmm1 */
  0x66, 0x0f, 0x2e, 0xc8,                   /*6b: ucomisd %xmm0,%xmm1 */
  0x0f, 0x93, 0xc1,                         /*6f: setae  %cl */
  0xeb, 0x1b,                               /*72: jmp    8f <op_le+0x8f> */
  0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*74: cmp    $0x606,%ecx */
  0x75, 0x3c,                               /*7a: jne    b8 <op_le+0xb8> */
  0xf2, 0x0f, 0x10, 0x80, 0x10, 0x10, 0xab, 0x00,/*7c: movsd  0xab1010(%rax),%xmm0 */
  0x66, 0x0f, 0x2e, 0x80, 0x00, 0x10, 0xab, 0x00,/*84: ucomisd 0xab1000(%rax),%xmm0 */
  0x0f, 0x93, 0xc1,                         /*8c: setae  %cl */
  0x0f, 0xb6, 0xc9,                         /*8f: movzbl %cl,%ecx */
  0x85, 0xc9,                               /*92: test   %ecx,%ecx */
  0x74, 0x0c,                               /*94: je     a2 <op_le+0xa2> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*96: movl   $0x2,0xab1008(%rax) */
  0xeb, 0x0a,                               /*a0: jmp    ac <op_le+0xac> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*a2: movl   $0x0,0xab1008(%rax) */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*ac: movl   $0x1,0xab1000(%rax) */
  0xeb, 0x1e,                               /*b6: jmp    d6 <op_le+0xd6> */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*b8: mov    $0x20,%esi */
  0xba, 0x00, 0x00, 0xab, 0x00,             /*bd: mov    $0xab0000,%edx */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*c2: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*c7: mov    $0xcd0000,%r8d */
  0x48, 0x89, 0xdf,                         /*cd: mov    %rbx,%rdi */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*d0: callq  *0x1d8(%rbx) */
  0x48, 0x89, 0xdf,                         /*d6: mov    %rbx,%rdi */
  0x5b,                                     /*d9: pop    %rbx */

};

static void op_le_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 26)) = a * 16 + 24;
  *((int32_t *)(op + 50)) = a * 16 + 0;
  *((int32_t *)(op + 56)) = a * 16 + 16;
  *((int32_t *)(op + 77)) = a * 16 + 16;
  *((int32_t *)(op + 95)) = a * 16 + 0;
  *((int32_t *)(op + 103)) = a * 16 + 16;
  *((int32_t *)(op + 128)) = a * 16 + 16;
  *((int32_t *)(op + 136)) = a * 16 + 0;
  *((int32_t *)(op + 152)) = a * 16 + 8;
  *((int32_t *)(op + 164)) = a * 16 + 8;
  *((int32_t *)(op + 174)) = a * 16 + 0;
  *((int32_t *)(op + 190)) = a * 1 + 0;
  *((int32_t *)(op + 195)) = b * 1 + 0;
  *((int32_t *)(op + 201)) = c * 1 + 0;
}

static void op_le_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_le_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 24, 26..29], [16, 0, 50..53], [16, 16, 56..59], [16, 0, 77..80], [16, 16, 85..88], [16, 0, 110..113], [16, 0, 128..131], [16, 16, 136..139], [16, 8, 152..155], [16, 8, 164..167], [16, 0, 174..177], [1, 0, 190..193]], "b"=>[[1, 0, 195..198]], "c"=>[[1, 0, 201..204]]} */
static uint8_t op_gt[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*8: mov    0xab1008(%rax),%edx */
  0xc1, 0xe2, 0x08,                         /*e: shl    $0x8,%edx */
  0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*11: and    $0xffff00,%edx */
  0x0f, 0xb6, 0x88, 0x18, 0x10, 0xab, 0x00, /*17: movzbl 0xab1018(%rax),%ecx */
  0x09, 0xd1,                               /*1e: or     %edx,%ecx */
  0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*20: cmp    $0x602,%ecx */
  0x7f, 0x19,                               /*26: jg     41 <op_gt+0x41> */
  0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*28: cmp    $0x303,%ecx */
  0x75, 0x32,                               /*2e: jne    62 <op_gt+0x62> */
  0x8b, 0x88, 0x00, 0x10, 0xab, 0x00,       /*30: mov    0xab1000(%rax),%ecx */
  0x3b, 0x88, 0x10, 0x10, 0xab, 0x00,       /*36: cmp    0xab1010(%rax),%ecx */
  0x0f, 0x9f, 0xc1,                         /*3c: setg   %cl */
  0xeb, 0x4e,                               /*3f: jmp    8f <op_gt+0x8f> */
  0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*41: cmp    $0x603,%ecx */
  0x75, 0x2b,                               /*47: jne    74 <op_gt+0x74> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*49: movsd  0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x2a, 0x88, 0x10, 0x10, 0xab, 0x00,/*51: cvtsi2sdl 0xab1010(%rax),%xmm1 */
  0x66, 0x0f, 0x2e, 0xc1,                   /*59: ucomisd %xmm1,%xmm0 */
  0x0f, 0x97, 0xc1,                         /*5d: seta   %cl */
  0xeb, 0x2d,                               /*60: jmp    8f <op_gt+0x8f> */
  0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*62: cmp    $0x306,%ecx */
  0x75, 0x4e,                               /*68: jne    b8 <op_gt+0xb8> */
  0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x10, 0xab, 0x00,/*6a: cvtsi2sdl 0xab1000(%rax),%xmm0 */
  0xeb, 0x10,                               /*72: jmp    84 <op_gt+0x84> */
  0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*74: cmp    $0x606,%ecx */
  0x75, 0x3c,                               /*7a: jne    b8 <op_gt+0xb8> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*7c: movsd  0xab1000(%rax),%xmm0 */
  0x66, 0x0f, 0x2e, 0x80, 0x10, 0x10, 0xab, 0x00,/*84: ucomisd 0xab1010(%rax),%xmm0 */
  0x0f, 0x97, 0xc1,                         /*8c: seta   %cl */
  0x0f, 0xb6, 0xc9,                         /*8f: movzbl %cl,%ecx */
  0x85, 0xc9,                               /*92: test   %ecx,%ecx */
  0x74, 0x0c,                               /*94: je     a2 <op_gt+0xa2> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*96: movl   $0x2,0xab1008(%rax) */
  0xeb, 0x0a,                               /*a0: jmp    ac <op_gt+0xac> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*a2: movl   $0x0,0xab1008(%rax) */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*ac: movl   $0x1,0xab1000(%rax) */
  0xeb, 0x1e,                               /*b6: jmp    d6 <op_gt+0xd6> */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*b8: mov    $0x20,%esi */
  0xba, 0x00, 0x00, 0xab, 0x00,             /*bd: mov    $0xab0000,%edx */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*c2: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*c7: mov    $0xcd0000,%r8d */
  0x48, 0x89, 0xdf,                         /*cd: mov    %rbx,%rdi */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*d0: callq  *0x1d8(%rbx) */
  0x48, 0x89, 0xdf,                         /*d6: mov    %rbx,%rdi */
  0x5b,                                     /*d9: pop    %rbx */

};

static void op_gt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 26)) = a * 16 + 24;
  *((int32_t *)(op + 50)) = a * 16 + 0;
  *((int32_t *)(op + 56)) = a * 16 + 16;
  *((int32_t *)(op + 77)) = a * 16 + 0;
  *((int32_t *)(op + 85)) = a * 16 + 16;
  *((int32_t *)(op + 110)) = a * 16 + 0;
  *((int32_t *)(op + 128)) = a * 16 + 0;
  *((int32_t *)(op + 136)) = a * 16 + 16;
  *((int32_t *)(op + 152)) = a * 16 + 8;
  *((int32_t *)(op + 164)) = a * 16 + 8;
  *((int32_t *)(op + 174)) = a * 16 + 0;
  *((int32_t *)(op + 190)) = a * 1 + 0;
  *((int32_t *)(op + 195)) = b * 1 + 0;
  *((int32_t *)(op + 201)) = c * 1 + 0;
}

static void op_gt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_gt_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 24, 26..29], [16, 0, 50..53], [16, 16, 56..59], [16, 0, 77..80], [16, 16, 85..88], [16, 0, 110..113], [16, 0, 128..131], [16, 16, 136..139], [16, 8, 152..155], [16, 8, 164..167], [16, 0, 174..177], [1, 0, 190..193]], "b"=>[[1, 0, 195..198]], "c"=>[[1, 0, 201..204]]} */
static uint8_t op_ge[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*8: mov    0xab1008(%rax),%edx */
  0xc1, 0xe2, 0x08,                         /*e: shl    $0x8,%edx */
  0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*11: and    $0xffff00,%edx */
  0x0f, 0xb6, 0x88, 0x18, 0x10, 0xab, 0x00, /*17: movzbl 0xab1018(%rax),%ecx */
  0x09, 0xd1,                               /*1e: or     %edx,%ecx */
  0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*20: cmp    $0x602,%ecx */
  0x7f, 0x19,                               /*26: jg     41 <op_ge+0x41> */
  0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*28: cmp    $0x303,%ecx */
  0x75, 0x32,                               /*2e: jne    62 <op_ge+0x62> */
  0x8b, 0x88, 0x00, 0x10, 0xab, 0x00,       /*30: mov    0xab1000(%rax),%ecx */
  0x3b, 0x88, 0x10, 0x10, 0xab, 0x00,       /*36: cmp    0xab1010(%rax),%ecx */
  0x0f, 0x9d, 0xc1,                         /*3c: setge  %cl */
  0xeb, 0x4e,                               /*3f: jmp    8f <op_ge+0x8f> */
  0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*41: cmp    $0x603,%ecx */
  0x75, 0x2b,                               /*47: jne    74 <op_ge+0x74> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*49: movsd  0xab1000(%rax),%xmm0 */
  0xf2, 0x0f, 0x2a, 0x88, 0x10, 0x10, 0xab, 0x00,/*51: cvtsi2sdl 0xab1010(%rax),%xmm1 */
  0x66, 0x0f, 0x2e, 0xc1,                   /*59: ucomisd %xmm1,%xmm0 */
  0x0f, 0x93, 0xc1,                         /*5d: setae  %cl */
  0xeb, 0x2d,                               /*60: jmp    8f <op_ge+0x8f> */
  0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*62: cmp    $0x306,%ecx */
  0x75, 0x4e,                               /*68: jne    b8 <op_ge+0xb8> */
  0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x10, 0xab, 0x00,/*6a: cvtsi2sdl 0xab1000(%rax),%xmm0 */
  0xeb, 0x10,                               /*72: jmp    84 <op_ge+0x84> */
  0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*74: cmp    $0x606,%ecx */
  0x75, 0x3c,                               /*7a: jne    b8 <op_ge+0xb8> */
  0xf2, 0x0f, 0x10, 0x80, 0x00, 0x10, 0xab, 0x00,/*7c: movsd  0xab1000(%rax),%xmm0 */
  0x66, 0x0f, 0x2e, 0x80, 0x10, 0x10, 0xab, 0x00,/*84: ucomisd 0xab1010(%rax),%xmm0 */
  0x0f, 0x93, 0xc1,                         /*8c: setae  %cl */
  0x0f, 0xb6, 0xc9,                         /*8f: movzbl %cl,%ecx */
  0x85, 0xc9,                               /*92: test   %ecx,%ecx */
  0x74, 0x0c,                               /*94: je     a2 <op_ge+0xa2> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*96: movl   $0x2,0xab1008(%rax) */
  0xeb, 0x0a,                               /*a0: jmp    ac <op_ge+0xac> */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*a2: movl   $0x0,0xab1008(%rax) */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*ac: movl   $0x1,0xab1000(%rax) */
  0xeb, 0x1e,                               /*b6: jmp    d6 <op_ge+0xd6> */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*b8: mov    $0x20,%esi */
  0xba, 0x00, 0x00, 0xab, 0x00,             /*bd: mov    $0xab0000,%edx */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*c2: mov    $0xbc0000,%ecx */
  0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*c7: mov    $0xcd0000,%r8d */
  0x48, 0x89, 0xdf,                         /*cd: mov    %rbx,%rdi */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*d0: callq  *0x1d8(%rbx) */
  0x48, 0x89, 0xdf,                         /*d6: mov    %rbx,%rdi */
  0x5b,                                     /*d9: pop    %rbx */

};

static void op_ge_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 26)) = a * 16 + 24;
  *((int32_t *)(op + 50)) = a * 16 + 0;
  *((int32_t *)(op + 56)) = a * 16 + 16;
  *((int32_t *)(op + 77)) = a * 16 + 0;
  *((int32_t *)(op + 85)) = a * 16 + 16;
  *((int32_t *)(op + 110)) = a * 16 + 0;
  *((int32_t *)(op + 128)) = a * 16 + 0;
  *((int32_t *)(op + 136)) = a * 16 + 16;
  *((int32_t *)(op + 152)) = a * 16 + 8;
  *((int32_t *)(op + 164)) = a * 16 + 8;
  *((int32_t *)(op + 174)) = a * 16 + 0;
  *((int32_t *)(op + 190)) = a * 1 + 0;
  *((int32_t *)(op + 195)) = b * 1 + 0;
  *((int32_t *)(op + 201)) = c * 1 + 0;
}

static void op_ge_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_ge_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[16, 0, 17..20]], "c"=>[[1, 0, 22..25]], "a"=>[[16, 0, 35..38], [16, 8, 42..45]]} */
static uint8_t op_array[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
  0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
  0x48, 0x8b, 0x7b, 0x58,                   /*a: mov    0x58(%rbx),%rdi */
  0x49, 0x8d, 0x96, 0x00, 0x10, 0xbc, 0x00, /*e: lea    0xbc1000(%r14),%rdx */
  0xbe, 0x00, 0x00, 0xcd, 0x00,             /*15: mov    $0xcd0000,%esi */
  0xff, 0x93, 0x20, 0x02, 0x00, 0x00,       /*1a: callq  *0x220(%rbx) */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*20: mov    %rax,0xab1000(%r14) */
  0x41, 0x89, 0x96, 0x08, 0x10, 0xab, 0x00, /*27: mov    %edx,0xab1008(%r14) */
  0x8b, 0x43, 0x50,                         /*2e: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*31: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*35: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*3b: mov    %rbx,%rdi */
  0x5b,                                     /*3e: pop    %rbx */
  0x41, 0x5e,                               /*3f: pop    %r14 */

};

static void op_array_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 16 + 0;
  *((int32_t *)(op + 22)) = c * 1 + 0;
  *((int32_t *)(op + 35)) = a * 16 + 0;
  *((int32_t *)(op + 42)) = a * 16 + 8;
}

static void op_array_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_array_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[16, 0, 19..22], [16, 8, 26..29]], "a"=>[[16, 0, 45..48], [16, 8, 52..55]]} */
static uint8_t op_arycat[] = {
  0x41, 0x57,                               /*0: push   %r15 */
  0x41, 0x56,                               /*2: push   %r14 */
  0x53,                                     /*4: push   %rbx */
  0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
  0x4c, 0x8b, 0x7b, 0x18,                   /*8: mov    0x18(%rbx),%r15 */
  0x4c, 0x8b, 0x73, 0x58,                   /*c: mov    0x58(%rbx),%r14 */
  0x49, 0x8b, 0xb7, 0x00, 0x10, 0xbc, 0x00, /*10: mov    0xbc1000(%r15),%rsi */
  0x41, 0x8b, 0x97, 0x08, 0x10, 0xbc, 0x00, /*17: mov    0xbc1008(%r15),%edx */
  0x4c, 0x89, 0xf7,                         /*1e: mov    %r14,%rdi */
  0xff, 0x93, 0xf8, 0x00, 0x00, 0x00,       /*21: callq  *0xf8(%rbx) */
  0x41, 0x89, 0xd0,                         /*27: mov    %edx,%r8d */
  0x49, 0x8b, 0xb7, 0x00, 0x10, 0xab, 0x00, /*2a: mov    0xab1000(%r15),%rsi */
  0x41, 0x8b, 0x97, 0x08, 0x10, 0xab, 0x00, /*31: mov    0xab1008(%r15),%edx */
  0x4c, 0x89, 0xf7,                         /*38: mov    %r14,%rdi */
  0x48, 0x89, 0xc1,                         /*3b: mov    %rax,%rcx */
  0xff, 0x93, 0x88, 0x01, 0x00, 0x00,       /*3e: callq  *0x188(%rbx) */
  0x8b, 0x43, 0x50,                         /*44: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*47: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*4b: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*51: mov    %rbx,%rdi */
  0x5b,                                     /*54: pop    %rbx */
  0x41, 0x5e,                               /*55: pop    %r14 */
  0x41, 0x5f,                               /*57: pop    %r15 */

};

static void op_arycat_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = b * 16 + 0;
  *((int32_t *)(op + 26)) = b * 16 + 8;
  *((int32_t *)(op + 45)) = a * 16 + 0;
  *((int32_t *)(op + 52)) = a * 16 + 8;
}

static void op_arycat_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_arycat_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[16, 0, 15..18], [16, 8, 21..24]], "b"=>[[16, 0, 28..31], [16, 8, 35..38]]} */
static uint8_t op_arypush[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*8: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xab, 0x00, /*c: mov    0xab1000(%rax),%rsi */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*13: mov    0xab1008(%rax),%edx */
  0x48, 0x8b, 0x88, 0x00, 0x10, 0xbc, 0x00, /*19: mov    0xbc1000(%rax),%rcx */
  0x44, 0x8b, 0x80, 0x08, 0x10, 0xbc, 0x00, /*20: mov    0xbc1008(%rax),%r8d */
  0xff, 0x93, 0x40, 0x02, 0x00, 0x00,       /*27: callq  *0x240(%rbx) */
  0x48, 0x89, 0xdf,                         /*2d: mov    %rbx,%rdi */
  0x5b,                                     /*30: pop    %rbx */

};

static void op_arypush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 16 + 0;
  *((int32_t *)(op + 21)) = a * 16 + 8;
  *((int32_t *)(op + 28)) = b * 16 + 0;
  *((int32_t *)(op + 35)) = b * 16 + 8;
}

static void op_arypush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_arypush_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[16, 8, 12..15], [16, 0, 22..25]], "c"=>[[1, 0, 36..39]], "a"=>[[16, 0, 50..53], [16, 8, 56..59], [16, 8, 64..67], [16, 0, 78..81]]} */
static uint8_t op_aref[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
  0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
  0x83, 0xbb, 0x08, 0x10, 0xbc, 0x00, 0x0e, /*a: cmpl   $0xe,0xbc1008(%rbx) */
  0x75, 0x2b,                               /*11: jne    3e <op_aref+0x3e> */
  0x48, 0x8b, 0xb3, 0x00, 0x10, 0xbc, 0x00, /*13: mov    0xbc1000(%rbx),%rsi */
  0x49, 0x8b, 0x7e, 0x58,                   /*1a: mov    0x58(%r14),%rdi */
  0xba, 0x0e, 0x00, 0x00, 0x00,             /*1e: mov    $0xe,%edx */
  0xb9, 0x00, 0x00, 0xcd, 0x00,             /*23: mov    $0xcd0000,%ecx */
  0x41, 0xff, 0x96, 0x00, 0x02, 0x00, 0x00, /*28: callq  *0x200(%r14) */
  0x48, 0x89, 0x83, 0x00, 0x10, 0xab, 0x00, /*2f: mov    %rax,0xab1000(%rbx) */
  0x89, 0x93, 0x08, 0x10, 0xab, 0x00,       /*36: mov    %edx,0xab1008(%rbx) */
  0xeb, 0x18,                               /*3c: jmp    56 <op_aref+0x56> */
  0xc7, 0x83, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*3e: movl   $0x0,0xab1008(%rbx) */
  0x49, 0x8b, 0x46, 0x18,                   /*48: mov    0x18(%r14),%rax */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4c: movl   $0x0,0xab1000(%rax) */
  0x4c, 0x89, 0xf7,                         /*56: mov    %r14,%rdi */
  0x5b,                                     /*59: pop    %rbx */
  0x41, 0x5e,                               /*5a: pop    %r14 */

};

static void op_aref_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 12)) = b * 16 + 8;
  *((int32_t *)(op + 22)) = b * 16 + 0;
  *((int32_t *)(op + 36)) = c * 1 + 0;
  *((int32_t *)(op + 50)) = a * 16 + 0;
  *((int32_t *)(op + 56)) = a * 16 + 8;
  *((int32_t *)(op + 64)) = a * 16 + 8;
  *((int32_t *)(op + 78)) = a * 16 + 0;
}

static void op_aref_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_aref_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[16, 0, 15..18], [16, 8, 21..24]], "a"=>[[16, 0, 28..31], [16, 8, 35..38]], "c"=>[[1, 0, 40..43]]} */
static uint8_t op_aset[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*8: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xbc, 0x00, /*c: mov    0xbc1000(%rax),%rsi */
  0x8b, 0x90, 0x08, 0x10, 0xbc, 0x00,       /*13: mov    0xbc1008(%rax),%edx */
  0x4c, 0x8b, 0x80, 0x00, 0x10, 0xab, 0x00, /*19: mov    0xab1000(%rax),%r8 */
  0x44, 0x8b, 0x88, 0x08, 0x10, 0xab, 0x00, /*20: mov    0xab1008(%rax),%r9d */
  0xb9, 0x00, 0x00, 0xcd, 0x00,             /*27: mov    $0xcd0000,%ecx */
  0xff, 0x93, 0x30, 0x02, 0x00, 0x00,       /*2c: callq  *0x230(%rbx) */
  0x48, 0x89, 0xdf,                         /*32: mov    %rbx,%rdi */
  0x5b,                                     /*35: pop    %rbx */

};

static void op_aset_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = b * 16 + 0;
  *((int32_t *)(op + 21)) = b * 16 + 8;
  *((int32_t *)(op + 28)) = a * 16 + 0;
  *((int32_t *)(op + 35)) = a * 16 + 8;
  *((int32_t *)(op + 40)) = c * 1 + 0;
}

static void op_aset_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_aset_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[16, 8, 19..22], [16, 0, 34..37], [16, 0, 86..89], [16, 8, 94..97], [1, 1, 105..108], [16, 0, 186..189], [16, 8, 194..197], [1, 1, 215..218], [1, 1, 230..233], [16, 0, 270..273], [16, 8, 278..281], [1, 1, 297..300], [1, 1, 391..394], [1, 1, 406..409]], "b"=>[[16, 0, 71..74], [1, 1, 284..287], [1, 0, 292..295]], "c"=>[[1, 0, 244..247], [1, 0, 362..365]]} */
static uint8_t op_apost[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x41, 0x54,                               /*5: push   %r12 */
  0x53,                                     /*7: push   %rbx */
  0x49, 0x89, 0xfe,                         /*8: mov    %rdi,%r14 */
  0x4d, 0x8b, 0x66, 0x18,                   /*b: mov    0x18(%r14),%r12 */
  0x41, 0x83, 0xbc, 0x24, 0x08, 0x10, 0xab, 0x00, 0x0e,/*f: cmpl   $0xe,0xab1008(%r12) */
  0x0f, 0x85, 0x89, 0x00, 0x00, 0x00,       /*18: jne    a7 <op_apost+0xa7> */
  0x4d, 0x8b, 0xbc, 0x24, 0x00, 0x10, 0xab, 0x00,/*1e: mov    0xab1000(%r12),%r15 */
  0x41, 0x8b, 0x5f, 0x18,                   /*26: mov    0x18(%r15),%ebx */
  0x49, 0x8b, 0x7e, 0x58,                   /*2a: mov    0x58(%r14),%rdi */
  0x81, 0xfb, 0x01, 0x00, 0x89, 0x01,       /*2e: cmp    $0x1890001,%ebx */
  0x0f, 0x8c, 0xc5, 0x00, 0x00, 0x00,       /*34: jl     ff <op_apost+0xff> */
  0x8d, 0xb3, 0x00, 0x00, 0x77, 0xfe,       /*3a: lea    -0x1890000(%rbx),%esi */
  0x49, 0x8b, 0x57, 0x28,                   /*40: mov    0x28(%r15),%rdx */
  0x48, 0x81, 0xc2, 0x00, 0x10, 0xbc, 0x00, /*44: add    $0xbc1000,%rdx */
  0x41, 0xff, 0x96, 0x20, 0x02, 0x00, 0x00, /*4b: callq  *0x220(%r14) */
  0x49, 0x89, 0x84, 0x24, 0x00, 0x10, 0xab, 0x00,/*52: mov    %rax,0xab1000(%r12) */
  0x41, 0x89, 0x94, 0x24, 0x08, 0x10, 0xab, 0x00,/*5a: mov    %edx,0xab1008(%r12) */
  0x81, 0xc3, 0x00, 0x00, 0x33, 0xff,       /*62: add    $0xff330000,%ebx */
  0xb8, 0x10, 0x00, 0xb0, 0x0a,             /*68: mov    $0xab00010,%eax */
  0x0f, 0x1f, 0x00,                         /*6d: nopl   (%rax) */
  0x49, 0x8b, 0x4e, 0x18,                   /*70: mov    0x18(%r14),%rcx */
  0x48, 0x63, 0xdb,                         /*74: movslq %ebx,%rbx */
  0x49, 0x8b, 0x57, 0x28,                   /*77: mov    0x28(%r15),%rdx */
  0x48, 0x89, 0xde,                         /*7b: mov    %rbx,%rsi */
  0x48, 0xc1, 0xe6, 0x04,                   /*7e: shl    $0x4,%rsi */
  0x48, 0x8b, 0x3c, 0x32,                   /*82: mov    (%rdx,%rsi,1),%rdi */
  0x48, 0x8b, 0x54, 0x32, 0x08,             /*86: mov    0x8(%rdx,%rsi,1),%rdx */
  0x48, 0x89, 0x54, 0x01, 0x08,             /*8b: mov    %rdx,0x8(%rcx,%rax,1) */
  0x48, 0x89, 0x3c, 0x01,                   /*90: mov    %rdi,(%rcx,%rax,1) */
  0x48, 0x83, 0xc0, 0x10,                   /*94: add    $0x10,%rax */
  0xff, 0xc3,                               /*98: inc    %ebx */
  0x48, 0x3d, 0x10, 0x00, 0x80, 0x17,       /*9a: cmp    $0x17800010,%rax */
  0x75, 0xce,                               /*a0: jne    70 <op_apost+0x70> */
  0xe9, 0xff, 0x00, 0x00, 0x00,             /*a2: jmpq   1a6 <op_apost+0x1a6> */
  0x49, 0x8b, 0x7e, 0x58,                   /*a7: mov    0x58(%r14),%rdi */
  0x31, 0xdb,                               /*ab: xor    %ebx,%ebx */
  0x31, 0xf6,                               /*ad: xor    %esi,%esi */
  0x41, 0xff, 0x96, 0xd8, 0x00, 0x00, 0x00, /*af: callq  *0xd8(%r14) */
  0x49, 0x89, 0x84, 0x24, 0x00, 0x10, 0xab, 0x00,/*b6: mov    %rax,0xab1000(%r12) */
  0x41, 0x89, 0x94, 0x24, 0x08, 0x10, 0xab, 0x00,/*be: mov    %edx,0xab1008(%r12) */
  0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*c6: nopw   %cs:0x0(%rax,%rax,1) */
  0x49, 0x8b, 0x46, 0x18,                   /*d0: mov    0x18(%r14),%rax */
  0xc7, 0x84, 0x18, 0x18, 0x00, 0xb0, 0x0a, 0x00, 0x00, 0x00, 0x00,/*d4: movl   $0x0,0xab00018(%rax,%rbx,1) */
  0x49, 0x8b, 0x46, 0x18,                   /*df: mov    0x18(%r14),%rax */
  0xc7, 0x84, 0x18, 0x10, 0x00, 0xb0, 0x0a, 0x00, 0x00, 0x00, 0x00,/*e3: movl   $0x0,0xab00010(%rax,%rbx,1) */
  0x48, 0x83, 0xc3, 0x10,                   /*ee: add    $0x10,%rbx */
  0x81, 0xfb, 0x00, 0x00, 0xd0, 0x0c,       /*f2: cmp    $0xcd00000,%ebx */
  0x75, 0xd6,                               /*f8: jne    d0 <op_apost+0xd0> */
  0xe9, 0xa7, 0x00, 0x00, 0x00,             /*fa: jmpq   1a6 <op_apost+0x1a6> */
  0x31, 0xed,                               /*ff: xor    %ebp,%ebp */
  0x31, 0xf6,                               /*101: xor    %esi,%esi */
  0x41, 0xff, 0x96, 0xd8, 0x00, 0x00, 0x00, /*103: callq  *0xd8(%r14) */
  0x49, 0x89, 0x84, 0x24, 0x00, 0x10, 0xab, 0x00,/*10a: mov    %rax,0xab1000(%r12) */
  0x41, 0x89, 0x94, 0x24, 0x08, 0x10, 0xab, 0x00,/*112: mov    %edx,0xab1008(%r12) */
  0x81, 0xfb, 0x01, 0x00, 0xbc, 0x00,       /*11a: cmp    $0xbc0001,%ebx */
  0x7c, 0x47,                               /*120: jl     169 <op_apost+0x169> */
  0x8d, 0x83, 0x00, 0x00, 0x44, 0xff,       /*122: lea    -0xbc0000(%rbx),%eax */
  0xb9, 0x10, 0x00, 0xb0, 0x0a,             /*128: mov    $0xab00010,%ecx */
  0x0f, 0x1f, 0x00,                         /*12d: nopl   (%rax) */
  0x49, 0x8b, 0x56, 0x18,                   /*130: mov    0x18(%r14),%rdx */
  0x49, 0x8b, 0x77, 0x28,                   /*134: mov    0x28(%r15),%rsi */
  0x48, 0x8b, 0xbc, 0x0e, 0xf0, 0xff, 0x0f, 0x01,/*138: mov    0x10ffff0(%rsi,%rcx,1),%rdi */
  0x48, 0x8b, 0xb4, 0x0e, 0xf8, 0xff, 0x0f, 0x01,/*140: mov    0x10ffff8(%rsi,%rcx,1),%rsi */
  0x48, 0x89, 0x74, 0x0a, 0x08,             /*148: mov    %rsi,0x8(%rdx,%rcx,1) */
  0x48, 0x89, 0x3c, 0x0a,                   /*14d: mov    %rdi,(%rdx,%rcx,1) */
  0x48, 0x83, 0xc1, 0x10,                   /*151: add    $0x10,%rcx */
  0xff, 0xc8,                               /*155: dec    %eax */
  0x75, 0xd7,                               /*157: jne    130 <op_apost+0x130> */
  0x81, 0xc3, 0x00, 0x00, 0x44, 0xff,       /*159: add    $0xff440000,%ebx */
  0x81, 0xfb, 0xff, 0xff, 0xcc, 0x00,       /*15f: cmp    $0xccffff,%ebx */
  0x89, 0xdd,                               /*165: mov    %ebx,%ebp */
  0x7f, 0x3d,                               /*167: jg     1a6 <op_apost+0x1a6> */
  0xb8, 0x00, 0x00, 0xcd, 0x00,             /*169: mov    $0xcd0000,%eax */
  0x29, 0xe8,                               /*16e: sub    %ebp,%eax */
  0x48, 0x63, 0xcd,                         /*170: movslq %ebp,%rcx */
  0x48, 0xc1, 0xe1, 0x04,                   /*173: shl    $0x4,%rcx */
  0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*177: nopw   0x0(%rax,%rax,1) */
  0x49, 0x8b, 0x56, 0x18,                   /*180: mov    0x18(%r14),%rdx */
  0xc7, 0x84, 0x0a, 0x18, 0x00, 0xb0, 0x0a, 0x00, 0x00, 0x00, 0x00,/*184: movl   $0x0,0xab00018(%rdx,%rcx,1) */
  0x49, 0x8b, 0x56, 0x18,                   /*18f: mov    0x18(%r14),%rdx */
  0xc7, 0x84, 0x0a, 0x10, 0x00, 0xb0, 0x0a, 0x00, 0x00, 0x00, 0x00,/*193: movl   $0x0,0xab00010(%rdx,%rcx,1) */
  0x48, 0x83, 0xc1, 0x10,                   /*19e: add    $0x10,%rcx */
  0xff, 0xc8,                               /*1a2: dec    %eax */
  0x75, 0xda,                               /*1a4: jne    180 <op_apost+0x180> */
  0x41, 0x8b, 0x46, 0x50,                   /*1a6: mov    0x50(%r14),%eax */
  0x49, 0x8b, 0x4e, 0x58,                   /*1aa: mov    0x58(%r14),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*1ae: mov    %eax,0xdc(%rcx) */
  0x4c, 0x89, 0xf7,                         /*1b4: mov    %r14,%rdi */
  0x5b,                                     /*1b7: pop    %rbx */
  0x41, 0x5c,                               /*1b8: pop    %r12 */
  0x41, 0x5e,                               /*1ba: pop    %r14 */
  0x41, 0x5f,                               /*1bc: pop    %r15 */
  0x5d,                                     /*1be: pop    %rbp */

};

static void op_apost_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = a * 16 + 8;
  *((int32_t *)(op + 34)) = a * 16 + 0;
  *((int32_t *)(op + 86)) = a * 16 + 0;
  *((int32_t *)(op + 94)) = a * 16 + 8;
  *((int32_t *)(op + 105)) = a * 1 + 1;
  *((int32_t *)(op + 186)) = a * 16 + 0;
  *((int32_t *)(op + 194)) = a * 16 + 8;
  *((int32_t *)(op + 215)) = a * 1 + 1;
  *((int32_t *)(op + 230)) = a * 1 + 1;
  *((int32_t *)(op + 270)) = a * 16 + 0;
  *((int32_t *)(op + 278)) = a * 16 + 8;
  *((int32_t *)(op + 297)) = a * 1 + 1;
  *((int32_t *)(op + 391)) = a * 1 + 1;
  *((int32_t *)(op + 406)) = a * 1 + 1;
  *((int32_t *)(op + 71)) = b * 16 + 0;
  *((int32_t *)(op + 284)) = b * 1 + 1;
  *((int32_t *)(op + 292)) = b * 1 + 0;
  *((int32_t *)(op + 244)) = c * 1 + 0;
  *((int32_t *)(op + 362)) = c * 1 + 0;
}

static void op_apost_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_apost_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[16, 0, 21..24], [16, 8, 27..30]], "a"=>[[16, 0, 40..43], [16, 8, 47..50]]} */
static uint8_t op_string[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*6: mov    0x58(%rbx),%rdi */
  0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
  0x48, 0x8b, 0x43, 0x20,                   /*e: mov    0x20(%rbx),%rax */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xbc, 0x00, /*12: mov    0xbc1000(%rax),%rsi */
  0x8b, 0x90, 0x08, 0x10, 0xbc, 0x00,       /*19: mov    0xbc1008(%rax),%edx */
  0xff, 0x93, 0xd0, 0x01, 0x00, 0x00,       /*1f: callq  *0x1d0(%rbx) */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*25: mov    %rax,0xab1000(%r14) */
  0x41, 0x89, 0x96, 0x08, 0x10, 0xab, 0x00, /*2c: mov    %edx,0xab1008(%r14) */
  0x8b, 0x43, 0x50,                         /*33: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*36: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*3a: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*40: mov    %rbx,%rdi */
  0x5b,                                     /*43: pop    %rbx */
  0x41, 0x5e,                               /*44: pop    %r14 */

};

static void op_string_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 16 + 0;
  *((int32_t *)(op + 27)) = b * 16 + 8;
  *((int32_t *)(op + 40)) = a * 16 + 0;
  *((int32_t *)(op + 47)) = a * 16 + 8;
}

static void op_string_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_string_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[16, 0, 15..18], [16, 8, 21..24]], "b"=>[[16, 0, 28..31], [16, 8, 35..38]]} */
static uint8_t op_strcat[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*8: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xab, 0x00, /*c: mov    0xab1000(%rax),%rsi */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*13: mov    0xab1008(%rax),%edx */
  0x48, 0x8b, 0x88, 0x00, 0x10, 0xbc, 0x00, /*19: mov    0xbc1000(%rax),%rcx */
  0x44, 0x8b, 0x80, 0x08, 0x10, 0xbc, 0x00, /*20: mov    0xbc1008(%rax),%r8d */
  0xff, 0x93, 0xf0, 0x01, 0x00, 0x00,       /*27: callq  *0x1f0(%rbx) */
  0x48, 0x89, 0xdf,                         /*2d: mov    %rbx,%rdi */
  0x5b,                                     /*30: pop    %rbx */

};

static void op_strcat_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 16 + 0;
  *((int32_t *)(op + 21)) = a * 16 + 8;
  *((int32_t *)(op + 28)) = b * 16 + 0;
  *((int32_t *)(op + 35)) = b * 16 + 8;
}

static void op_strcat_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_strcat_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[1, 0, 19..22]], "c"=>[[1, 0, 27..30]], "a"=>[[16, 0, 171..174], [16, 8, 178..181]]} */
static uint8_t op_hash[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x41, 0x54,                               /*5: push   %r12 */
  0x53,                                     /*7: push   %rbx */
  0x48, 0x83, 0xec, 0x20,                   /*8: sub    $0x20,%rsp */
  0x48, 0x89, 0xfb,                         /*c: mov    %rdi,%rbx */
  0xc7, 0x44, 0x24, 0x1c, 0x00, 0x00, 0xbc, 0x00,/*f: movl   $0xbc0000,0x1c(%rsp) */
  0xc7, 0x44, 0x24, 0x18, 0x00, 0x00, 0xcd, 0x00,/*17: movl   $0xcd0000,0x18(%rsp) */
  0x8b, 0x44, 0x24, 0x1c,                   /*1f: mov    0x1c(%rsp),%eax */
  0x8b, 0x4c, 0x24, 0x18,                   /*23: mov    0x18(%rsp),%ecx */
  0x44, 0x8d, 0x3c, 0x48,                   /*27: lea    (%rax,%rcx,2),%r15d */
  0x48, 0x8b, 0x7b, 0x58,                   /*2b: mov    0x58(%rbx),%rdi */
  0x8b, 0x74, 0x24, 0x18,                   /*2f: mov    0x18(%rsp),%esi */
  0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*33: callq  *0x168(%rbx) */
  0x49, 0x89, 0xc6,                         /*39: mov    %rax,%r14 */
  0x41, 0x89, 0xd4,                         /*3c: mov    %edx,%r12d */
  0xeb, 0x5a,                               /*3f: jmp    9b <op_hash+0x9b> */
  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*41: data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
  0x48, 0x8b, 0x7b, 0x58,                   /*50: mov    0x58(%rbx),%rdi */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*54: movslq 0x1c(%rsp),%rax */
  0x48, 0x8b, 0x53, 0x18,                   /*59: mov    0x18(%rbx),%rdx */
  0x48, 0xc1, 0xe0, 0x04,                   /*5d: shl    $0x4,%rax */
  0x48, 0x63, 0x74, 0x24, 0x1c,             /*61: movslq 0x1c(%rsp),%rsi */
  0x48, 0xc1, 0xe6, 0x04,                   /*66: shl    $0x4,%rsi */
  0x48, 0x8b, 0x6b, 0x18,                   /*6a: mov    0x18(%rbx),%rbp */
  0x48, 0x8b, 0x0c, 0x02,                   /*6e: mov    (%rdx,%rax,1),%rcx */
  0x44, 0x8b, 0x44, 0x02, 0x08,             /*72: mov    0x8(%rdx,%rax,1),%r8d */
  0x48, 0x8b, 0x44, 0x2e, 0x10,             /*77: mov    0x10(%rsi,%rbp,1),%rax */
  0x48, 0x8b, 0x54, 0x2e, 0x18,             /*7c: mov    0x18(%rsi,%rbp,1),%rdx */
  0x48, 0x89, 0x54, 0x24, 0x08,             /*81: mov    %rdx,0x8(%rsp) */
  0x48, 0x89, 0x04, 0x24,                   /*86: mov    %rax,(%rsp) */
  0x4c, 0x89, 0xf6,                         /*8a: mov    %r14,%rsi */
  0x44, 0x89, 0xe2,                         /*8d: mov    %r12d,%edx */
  0xff, 0x93, 0x98, 0x01, 0x00, 0x00,       /*90: callq  *0x198(%rbx) */
  0x83, 0x44, 0x24, 0x1c, 0x02,             /*96: addl   $0x2,0x1c(%rsp) */
  0x8b, 0x44, 0x24, 0x1c,                   /*9b: mov    0x1c(%rsp),%eax */
  0x44, 0x39, 0xf8,                         /*9f: cmp    %r15d,%eax */
  0x7c, 0xac,                               /*a2: jl     50 <op_hash+0x50> */
  0x48, 0x8b, 0x43, 0x18,                   /*a4: mov    0x18(%rbx),%rax */
  0x4c, 0x89, 0xb0, 0x00, 0x10, 0xab, 0x00, /*a8: mov    %r14,0xab1000(%rax) */
  0x44, 0x89, 0xa0, 0x08, 0x10, 0xab, 0x00, /*af: mov    %r12d,0xab1008(%rax) */
  0x8b, 0x43, 0x50,                         /*b6: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*b9: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*bd: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*c3: mov    %rbx,%rdi */
  0x48, 0x83, 0xc4, 0x20,                   /*c6: add    $0x20,%rsp */
  0x5b,                                     /*ca: pop    %rbx */
  0x41, 0x5c,                               /*cb: pop    %r12 */
  0x41, 0x5e,                               /*cd: pop    %r14 */
  0x41, 0x5f,                               /*cf: pop    %r15 */
  0x5d,                                     /*d1: pop    %rbp */

};

static void op_hash_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = b * 1 + 0;
  *((int32_t *)(op + 27)) = c * 1 + 0;
  *((int32_t *)(op + 171)) = a * 16 + 0;
  *((int32_t *)(op + 178)) = a * 16 + 8;
}

static void op_hash_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_hash_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"c"=>[[1, 0, 5..8]], "b"=>[[8, 0, 26..29]], "a"=>[[16, 0, 56..59], [16, 8, 62..65]]} */
static uint8_t op_lambda[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0xb8, 0x00, 0x00, 0xcd, 0x00,             /*4: mov    $0xcd0000,%eax */
  0xa8, 0x02,                               /*9: test   $0x2,%al */
  0x48, 0x8b, 0x43, 0x08,                   /*b: mov    0x8(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*f: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x40, 0x20,                   /*13: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*17: mov    0xbc0800(%rax),%rsi */
  0x74, 0x08,                               /*1e: je     28 <op_lambda+0x28> */
  0xff, 0x93, 0x80, 0x00, 0x00, 0x00,       /*20: callq  *0x80(%rbx) */
  0xeb, 0x06,                               /*26: jmp    2e <op_lambda+0x2e> */
  0xff, 0x93, 0x48, 0x01, 0x00, 0x00,       /*28: callq  *0x148(%rbx) */
  0x48, 0x8b, 0x4b, 0x18,                   /*2e: mov    0x18(%rbx),%rcx */
  0x0f, 0xb6, 0x10,                         /*32: movzbl (%rax),%edx */
  0x48, 0x89, 0x81, 0x00, 0x10, 0xab, 0x00, /*35: mov    %rax,0xab1000(%rcx) */
  0x89, 0x91, 0x08, 0x10, 0xab, 0x00,       /*3c: mov    %edx,0xab1008(%rcx) */
  0x8b, 0x43, 0x50,                         /*42: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*45: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*49: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*4f: mov    %rbx,%rdi */
  0x5b,                                     /*52: pop    %rbx */

};

static void op_lambda_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = c * 1 + 0;
  *((int32_t *)(op + 26)) = b * 8 + 0;
  *((int32_t *)(op + 56)) = a * 16 + 0;
  *((int32_t *)(op + 62)) = a * 16 + 8;
}

static void op_lambda_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_lambda_set_args(op, GETARG_A(c),GETARG_b(c),GETARG_c(c),op_idx);
}


/* args: {"b"=>[[16, 0, 17..20], [16, 8, 23..26], [16, 16, 30..33], [16, 24, 37..40]], "c"=>[[1, 0, 43..46]], "a"=>[[16, 0, 57..60], [16, 8, 63..66]]} */
static uint8_t op_range[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
  0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
  0x49, 0x8b, 0x7e, 0x58,                   /*a: mov    0x58(%r14),%rdi */
  0x48, 0x8b, 0xb3, 0x00, 0x10, 0xbc, 0x00, /*e: mov    0xbc1000(%rbx),%rsi */
  0x8b, 0x93, 0x08, 0x10, 0xbc, 0x00,       /*15: mov    0xbc1008(%rbx),%edx */
  0x48, 0x8b, 0x8b, 0x10, 0x10, 0xbc, 0x00, /*1b: mov    0xbc1010(%rbx),%rcx */
  0x44, 0x8b, 0x83, 0x18, 0x10, 0xbc, 0x00, /*22: mov    0xbc1018(%rbx),%r8d */
  0x41, 0xb9, 0x00, 0x00, 0xcd, 0x00,       /*29: mov    $0xcd0000,%r9d */
  0x41, 0xff, 0x96, 0x78, 0x01, 0x00, 0x00, /*2f: callq  *0x178(%r14) */
  0x48, 0x89, 0x83, 0x00, 0x10, 0xab, 0x00, /*36: mov    %rax,0xab1000(%rbx) */
  0x89, 0x93, 0x08, 0x10, 0xab, 0x00,       /*3d: mov    %edx,0xab1008(%rbx) */
  0x41, 0x8b, 0x46, 0x50,                   /*43: mov    0x50(%r14),%eax */
  0x49, 0x8b, 0x4e, 0x58,                   /*47: mov    0x58(%r14),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*4b: mov    %eax,0xdc(%rcx) */
  0x4c, 0x89, 0xf7,                         /*51: mov    %r14,%rdi */
  0x5b,                                     /*54: pop    %rbx */
  0x41, 0x5e,                               /*55: pop    %r14 */

};

static void op_range_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 16 + 0;
  *((int32_t *)(op + 23)) = b * 16 + 8;
  *((int32_t *)(op + 30)) = b * 16 + 16;
  *((int32_t *)(op + 37)) = b * 16 + 24;
  *((int32_t *)(op + 43)) = c * 1 + 0;
  *((int32_t *)(op + 57)) = a * 16 + 0;
  *((int32_t *)(op + 63)) = a * 16 + 8;
}

static void op_range_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_range_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[16, 0, 18..21], [16, 8, 24..27]]} */
static uint8_t op_oclass[] = {
  0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x4f, 0x58,                   /*4: mov    0x58(%rdi),%rcx */
  0x48, 0x8b, 0x49, 0x40,                   /*8: mov    0x40(%rcx),%rcx */
  0x0f, 0xb6, 0x11,                         /*c: movzbl (%rcx),%edx */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*f: mov    %rcx,0xab1000(%rax) */
  0x89, 0x90, 0x08, 0x10, 0xab, 0x00,       /*16: mov    %edx,0xab1008(%rax) */

};

static void op_oclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = a * 16 + 0;
  *((int32_t *)(op + 24)) = a * 16 + 8;
}

static void op_oclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_oclass_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[4, 0, 15..18]], "a"=>[[16, 0, 22..25], [16, 8, 35..38], [16, 16, 42..45], [16, 24, 49..52], [16, 0, 118..121], [16, 8, 124..127]]} */
static uint8_t op_class[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x18,                   /*4: mov    0x18(%rbx),%rdi */
  0x48, 0x8b, 0x43, 0x28,                   /*8: mov    0x28(%rbx),%rax */
  0x44, 0x8b, 0x88, 0x00, 0x04, 0xbc, 0x00, /*c: mov    0xbc0400(%rax),%r9d */
  0x48, 0x8b, 0xb7, 0x00, 0x10, 0xab, 0x00, /*13: mov    0xab1000(%rdi),%rsi */
  0x48, 0x89, 0xf0,                         /*1a: mov    %rsi,%rax */
  0x48, 0xc1, 0xe8, 0x20,                   /*1d: shr    $0x20,%rax */
  0x8b, 0x97, 0x08, 0x10, 0xab, 0x00,       /*21: mov    0xab1008(%rdi),%edx */
  0x48, 0x8b, 0x8f, 0x10, 0x10, 0xab, 0x00, /*27: mov    0xab1010(%rdi),%rcx */
  0x44, 0x8b, 0x87, 0x18, 0x10, 0xab, 0x00, /*2e: mov    0xab1018(%rdi),%r8d */
  0x85, 0xd2,                               /*35: test   %edx,%edx */
  0x75, 0x20,                               /*37: jne    59 <op_class+0x59> */
  0x31, 0xd2,                               /*39: xor    %edx,%edx */
  0x85, 0xf6,                               /*3b: test   %esi,%esi */
  0x75, 0x1a,                               /*3d: jne    59 <op_class+0x59> */
  0x48, 0x8b, 0x43, 0x58,                   /*3f: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*43: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*47: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0x70, 0x48,                   /*4b: mov    0x48(%rax),%rsi */
  0x0f, 0xb6, 0x16,                         /*4f: movzbl (%rsi),%edx */
  0x48, 0x89, 0xf0,                         /*52: mov    %rsi,%rax */
  0x48, 0xc1, 0xe8, 0x20,                   /*55: shr    $0x20,%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*59: mov    0x58(%rbx),%rdi */
  0x48, 0xc1, 0xe0, 0x20,                   /*5d: shl    $0x20,%rax */
  0x89, 0xf6,                               /*61: mov    %esi,%esi */
  0x48, 0x09, 0xc6,                         /*63: or     %rax,%rsi */
  0xff, 0x93, 0x80, 0x01, 0x00, 0x00,       /*66: callq  *0x180(%rbx) */
  0x48, 0x8b, 0x4b, 0x18,                   /*6c: mov    0x18(%rbx),%rcx */
  0x0f, 0xb6, 0x10,                         /*70: movzbl (%rax),%edx */
  0x48, 0x89, 0x81, 0x00, 0x10, 0xab, 0x00, /*73: mov    %rax,0xab1000(%rcx) */
  0x89, 0x91, 0x08, 0x10, 0xab, 0x00,       /*7a: mov    %edx,0xab1008(%rcx) */
  0x8b, 0x43, 0x50,                         /*80: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*83: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*87: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*8d: mov    %rbx,%rdi */
  0x5b,                                     /*90: pop    %rbx */

};

static void op_class_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = b * 4 + 0;
  *((int32_t *)(op + 22)) = a * 16 + 0;
  *((int32_t *)(op + 35)) = a * 16 + 8;
  *((int32_t *)(op + 42)) = a * 16 + 16;
  *((int32_t *)(op + 49)) = a * 16 + 24;
  *((int32_t *)(op + 118)) = a * 16 + 0;
  *((int32_t *)(op + 124)) = a * 16 + 8;
}

static void op_class_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_class_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 14..17]], "a"=>[[16, 0, 21..24], [16, 8, 34..37], [16, 0, 103..106], [16, 8, 109..112]]} */
static uint8_t op_module[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x53, 0x18,                   /*4: mov    0x18(%rbx),%rdx */
  0x48, 0x8b, 0x43, 0x28,                   /*8: mov    0x28(%rbx),%rax */
  0x8b, 0x88, 0x00, 0x04, 0xbc, 0x00,       /*c: mov    0xbc0400(%rax),%ecx */
  0x48, 0x8b, 0xb2, 0x00, 0x10, 0xab, 0x00, /*12: mov    0xab1000(%rdx),%rsi */
  0x48, 0x89, 0xf0,                         /*19: mov    %rsi,%rax */
  0x48, 0xc1, 0xe8, 0x20,                   /*1c: shr    $0x20,%rax */
  0x8b, 0x92, 0x08, 0x10, 0xab, 0x00,       /*20: mov    0xab1008(%rdx),%edx */
  0x85, 0xd2,                               /*26: test   %edx,%edx */
  0x75, 0x20,                               /*28: jne    4a <op_module+0x4a> */
  0x31, 0xd2,                               /*2a: xor    %edx,%edx */
  0x85, 0xf6,                               /*2c: test   %esi,%esi */
  0x75, 0x1a,                               /*2e: jne    4a <op_module+0x4a> */
  0x48, 0x8b, 0x43, 0x58,                   /*30: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*34: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*38: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0x70, 0x48,                   /*3c: mov    0x48(%rax),%rsi */
  0x0f, 0xb6, 0x16,                         /*40: movzbl (%rsi),%edx */
  0x48, 0x89, 0xf0,                         /*43: mov    %rsi,%rax */
  0x48, 0xc1, 0xe8, 0x20,                   /*46: shr    $0x20,%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*4a: mov    0x58(%rbx),%rdi */
  0x48, 0xc1, 0xe0, 0x20,                   /*4e: shl    $0x20,%rax */
  0x89, 0xf6,                               /*52: mov    %esi,%esi */
  0x48, 0x09, 0xc6,                         /*54: or     %rax,%rsi */
  0xff, 0x93, 0xb8, 0x00, 0x00, 0x00,       /*57: callq  *0xb8(%rbx) */
  0x48, 0x8b, 0x4b, 0x18,                   /*5d: mov    0x18(%rbx),%rcx */
  0x0f, 0xb6, 0x10,                         /*61: movzbl (%rax),%edx */
  0x48, 0x89, 0x81, 0x00, 0x10, 0xab, 0x00, /*64: mov    %rax,0xab1000(%rcx) */
  0x89, 0x91, 0x08, 0x10, 0xab, 0x00,       /*6b: mov    %edx,0xab1008(%rcx) */
  0x8b, 0x43, 0x50,                         /*71: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*74: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*78: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*7e: mov    %rbx,%rdi */
  0x5b,                                     /*81: pop    %rbx */

};

static void op_module_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = b * 4 + 0;
  *((int32_t *)(op + 21)) = a * 16 + 0;
  *((int32_t *)(op + 34)) = a * 16 + 8;
  *((int32_t *)(op + 103)) = a * 16 + 0;
  *((int32_t *)(op + 109)) = a * 16 + 8;
}

static void op_module_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_module_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[16, 0, 22..25], [16, 8, 29..32], [1, 0, 58..61], [16, 0, 109..112]], "b"=>[[8, 0, 128..131]]} */
static uint8_t op_exec[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x41, 0x54,                               /*5: push   %r12 */
  0x53,                                     /*7: push   %rbx */
  0x48, 0x89, 0xfb,                         /*8: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x18,                   /*b: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*f: mov    0x58(%rbx),%rdi */
  0x4c, 0x8b, 0xb8, 0x00, 0x10, 0xab, 0x00, /*13: mov    0xab1000(%rax),%r15 */
  0x44, 0x8b, 0xa0, 0x08, 0x10, 0xab, 0x00, /*1a: mov    0xab1008(%rax),%r12d */
  0xff, 0x93, 0xe8, 0x00, 0x00, 0x00,       /*21: callq  *0xe8(%rbx) */
  0x49, 0x89, 0xc6,                         /*27: mov    %rax,%r14 */
  0x48, 0x8b, 0x43, 0x10,                   /*2a: mov    0x10(%rbx),%rax */
  0x48, 0x83, 0xc0, 0x04,                   /*2e: add    $0x4,%rax */
  0x49, 0x89, 0x46, 0x30,                   /*32: mov    %rax,0x30(%r14) */
  0x41, 0xc7, 0x46, 0x44, 0x00, 0x00, 0xab, 0x00,/*36: movl   $0xab0000,0x44(%r14) */
  0x41, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, /*3e: movl   $0x0,(%r14) */
  0x48, 0x8b, 0x43, 0x58,                   /*45: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*49: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*4d: mov    0x8(%rax),%rax */
  0x49, 0x89, 0x46, 0x10,                   /*51: mov    %rax,0x10(%r14) */
  0x41, 0xc7, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00,/*55: movl   $0x0,0x40(%r14) */
  0x4d, 0x89, 0x7e, 0x48,                   /*5d: mov    %r15,0x48(%r14) */
  0x48, 0x8b, 0x43, 0x58,                   /*61: mov    0x58(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x18,                   /*65: mov    0x18(%rax),%rax */
  0x48, 0x81, 0x40, 0x08, 0x00, 0x10, 0xab, 0x00,/*69: addq   $0xab1000,0x8(%rax) */
  0x48, 0x8b, 0x43, 0x08,                   /*71: mov    0x8(%rbx),%rax */
  0x48, 0x8b, 0x7b, 0x58,                   /*75: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x40, 0x20,                   /*79: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*7d: mov    0xbc0800(%rax),%rsi */
  0xff, 0x93, 0x48, 0x01, 0x00, 0x00,       /*84: callq  *0x148(%rbx) */
  0x48, 0x89, 0xc5,                         /*8a: mov    %rax,%rbp */
  0x49, 0x8b, 0x46, 0x48,                   /*8d: mov    0x48(%r14),%rax */
  0x48, 0x89, 0x45, 0x20,                   /*91: mov    %rax,0x20(%rbp) */
  0x49, 0x89, 0x6e, 0x08,                   /*95: mov    %rbp,0x8(%r14) */
  0xf6, 0x45, 0x02, 0x04,                   /*99: testb  $0x4,0x2(%rbp) */
  0x74, 0x47,                               /*9d: je     e6 <op_exec+0xe6> */
  0x41, 0xc7, 0x46, 0x18, 0x00, 0x00, 0x00, 0x00,/*9f: movl   $0x0,0x18(%r14) */
  0x48, 0x8b, 0x7b, 0x58,                   /*a7: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*ab: mov    0x18(%rdi),%rax */
  0x4c, 0x8b, 0x70, 0x08,                   /*af: mov    0x8(%rax),%r14 */
  0x4c, 0x89, 0xfe,                         /*b3: mov    %r15,%rsi */
  0x44, 0x89, 0xe2,                         /*b6: mov    %r12d,%edx */
  0xff, 0x55, 0x18,                         /*b9: callq  *0x18(%rbp) */
  0x49, 0x89, 0x06,                         /*bc: mov    %rax,(%r14) */
  0x41, 0x89, 0x56, 0x08,                   /*bf: mov    %edx,0x8(%r14) */
  0x48, 0x8b, 0x7b, 0x58,                   /*c3: mov    0x58(%rbx),%rdi */
  0x8b, 0x73, 0x50,                         /*c7: mov    0x50(%rbx),%esi */
  0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*ca: callq  *0x110(%rbx) */
  0x48, 0x8b, 0x43, 0x58,                   /*d0: mov    0x58(%rbx),%rax */
  0x48, 0x83, 0x78, 0x28, 0x00,             /*d4: cmpq   $0x0,0x28(%rax) */
  0x74, 0x6c,                               /*d9: je     147 <op_exec+0x147> */
  0x48, 0x89, 0xdf,                         /*db: mov    %rbx,%rdi */
  0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*de: callq  *0x1a8(%rbx) */
  0xeb, 0x7f,                               /*e4: jmp    165 <op_exec+0x165> */
  0x48, 0x8b, 0x45, 0x18,                   /*e6: mov    0x18(%rbp),%rax */
  0x48, 0x89, 0x43, 0x08,                   /*ea: mov    %rax,0x8(%rbx) */
  0x48, 0x8b, 0x48, 0x10,                   /*ee: mov    0x10(%rax),%rcx */
  0x48, 0x89, 0x4b, 0x20,                   /*f2: mov    %rcx,0x20(%rbx) */
  0x48, 0x8b, 0x48, 0x18,                   /*f6: mov    0x18(%rax),%rcx */
  0x48, 0x89, 0x4b, 0x28,                   /*fa: mov    %rcx,0x28(%rbx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*fe: mov    0x58(%rbx),%rdi */
  0x0f, 0xb7, 0x70, 0x02,                   /*102: movzwl 0x2(%rax),%esi */
  0xba, 0x01, 0x00, 0x00, 0x00,             /*106: mov    $0x1,%edx */
  0xff, 0x93, 0x40, 0x01, 0x00, 0x00,       /*10b: callq  *0x140(%rbx) */
  0x48, 0x8b, 0x43, 0x08,                   /*111: mov    0x8(%rbx),%rax */
  0x0f, 0xb7, 0x40, 0x02,                   /*115: movzwl 0x2(%rax),%eax */
  0x41, 0x89, 0x46, 0x18,                   /*119: mov    %eax,0x18(%r14) */
  0x48, 0x8b, 0x7b, 0x58,                   /*11d: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x47, 0x18,                   /*121: mov    0x18(%rdi),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*125: mov    0x8(%rax),%rax */
  0x48, 0x89, 0x43, 0x18,                   /*129: mov    %rax,0x18(%rbx) */
  0x48, 0x8b, 0x43, 0x08,                   /*12d: mov    0x8(%rbx),%rax */
  0x48, 0x8b, 0x40, 0x08,                   /*131: mov    0x8(%rax),%rax */
  0x48, 0x89, 0x43, 0x10,                   /*135: mov    %rax,0x10(%rbx) */
  0x48, 0x89, 0xee,                         /*139: mov    %rbp,%rsi */
  0x48, 0x89, 0xda,                         /*13c: mov    %rbx,%rdx */
  0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*13f: callq  *0x120(%rbx) */
  0xeb, 0x1e,                               /*145: jmp    165 <op_exec+0x165> */
  0x48, 0x8b, 0x40, 0x18,                   /*147: mov    0x18(%rax),%rax */
  0x48, 0x8b, 0x48, 0x20,                   /*14b: mov    0x20(%rax),%rcx */
  0x48, 0x8b, 0x49, 0x10,                   /*14f: mov    0x10(%rcx),%rcx */
  0x48, 0x89, 0x48, 0x08,                   /*153: mov    %rcx,0x8(%rax) */
  0x48, 0x89, 0x4b, 0x18,                   /*157: mov    %rcx,0x18(%rbx) */
  0x48, 0x8b, 0x7b, 0x58,                   /*15b: mov    0x58(%rbx),%rdi */
  0xff, 0x93, 0x60, 0x01, 0x00, 0x00,       /*15f: callq  *0x160(%rbx) */
  0x48, 0x89, 0xdf,                         /*165: mov    %rbx,%rdi */
  0x5b,                                     /*168: pop    %rbx */
  0x41, 0x5c,                               /*169: pop    %r12 */
  0x41, 0x5e,                               /*16b: pop    %r14 */
  0x41, 0x5f,                               /*16d: pop    %r15 */
  0x5d,                                     /*16f: pop    %rbp */

};

static void op_exec_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 22)) = a * 16 + 0;
  *((int32_t *)(op + 29)) = a * 16 + 8;
  *((int32_t *)(op + 58)) = a * 1 + 0;
  *((int32_t *)(op + 109)) = a * 16 + 0;
  *((int32_t *)(op + 128)) = b * 8 + 0;
}

static void op_exec_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_exec_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[16, 0, 25..28], [16, 16, 32..35], [16, 24, 39..42]]} */
static uint8_t op_method[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0x7b, 0x58,                   /*4: mov    0x58(%rbx),%rdi */
  0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
  0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
  0x8b, 0x91, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%edx */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xab, 0x00, /*16: mov    0xab1000(%rax),%rsi */
  0x48, 0x8b, 0x88, 0x10, 0x10, 0xab, 0x00, /*1d: mov    0xab1010(%rax),%rcx */
  0x44, 0x8b, 0x80, 0x18, 0x10, 0xab, 0x00, /*24: mov    0xab1018(%rax),%r8d */
  0xff, 0x93, 0xf0, 0x00, 0x00, 0x00,       /*2b: callq  *0xf0(%rbx) */
  0x8b, 0x43, 0x50,                         /*31: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*34: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*38: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*3e: mov    %rbx,%rdi */
  0x5b,                                     /*41: pop    %rbx */

};

static void op_method_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 16 + 0;
  *((int32_t *)(op + 32)) = a * 16 + 16;
  *((int32_t *)(op + 39)) = a * 16 + 24;
}

static void op_method_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_method_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[16, 0, 17..20], [16, 8, 24..27]], "a"=>[[16, 0, 37..40], [16, 8, 44..47]]} */
static uint8_t op_sclass[] = {
  0x41, 0x56,                               /*0: push   %r14 */
  0x53,                                     /*2: push   %rbx */
  0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
  0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
  0x48, 0x8b, 0x7b, 0x58,                   /*a: mov    0x58(%rbx),%rdi */
  0x49, 0x8b, 0xb6, 0x00, 0x10, 0xbc, 0x00, /*e: mov    0xbc1000(%r14),%rsi */
  0x41, 0x8b, 0x96, 0x08, 0x10, 0xbc, 0x00, /*15: mov    0xbc1008(%r14),%edx */
  0xff, 0x93, 0xc8, 0x00, 0x00, 0x00,       /*1c: callq  *0xc8(%rbx) */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*22: mov    %rax,0xab1000(%r14) */
  0x41, 0x89, 0x96, 0x08, 0x10, 0xab, 0x00, /*29: mov    %edx,0xab1008(%r14) */
  0x8b, 0x43, 0x50,                         /*30: mov    0x50(%rbx),%eax */
  0x48, 0x8b, 0x4b, 0x58,                   /*33: mov    0x58(%rbx),%rcx */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*37: mov    %eax,0xdc(%rcx) */
  0x48, 0x89, 0xdf,                         /*3d: mov    %rbx,%rdi */
  0x5b,                                     /*40: pop    %rbx */
  0x41, 0x5e,                               /*41: pop    %r14 */

};

static void op_sclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 16 + 0;
  *((int32_t *)(op + 24)) = b * 16 + 8;
  *((int32_t *)(op + 37)) = a * 16 + 0;
  *((int32_t *)(op + 44)) = a * 16 + 8;
}

static void op_sclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sclass_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[16, 0, 39..42], [16, 8, 45..48]]} */
static uint8_t op_tclass[] = {
  0x41, 0x57,                               /*0: push   %r15 */
  0x41, 0x56,                               /*2: push   %r14 */
  0x53,                                     /*4: push   %rbx */
  0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
  0x4c, 0x8b, 0x73, 0x58,                   /*8: mov    0x58(%rbx),%r14 */
  0x49, 0x8b, 0x46, 0x18,                   /*c: mov    0x18(%r14),%rax */
  0x48, 0x8b, 0x40, 0x20,                   /*10: mov    0x20(%rax),%rax */
  0x48, 0x8b, 0x40, 0x48,                   /*14: mov    0x48(%rax),%rax */
  0x48, 0x85, 0xc0,                         /*18: test   %rax,%rax */
  0x74, 0x16,                               /*1b: je     33 <op_tclass+0x33> */
  0x48, 0x8b, 0x4b, 0x18,                   /*1d: mov    0x18(%rbx),%rcx */
  0x0f, 0xb6, 0x10,                         /*21: movzbl (%rax),%edx */
  0x48, 0x89, 0x81, 0x00, 0x10, 0xab, 0x00, /*24: mov    %rax,0xab1000(%rcx) */
  0x89, 0x91, 0x08, 0x10, 0xab, 0x00,       /*2b: mov    %edx,0xab1008(%rcx) */
  0xeb, 0x4d,                               /*31: jmp    80 <op_tclass+0x80> */
  0x48, 0x8b, 0x83, 0x90, 0x01, 0x00, 0x00, /*33: mov    0x190(%rbx),%rax */
  0x48, 0x8b, 0x30,                         /*3a: mov    (%rax),%rsi */
  0x4c, 0x89, 0xf7,                         /*3d: mov    %r14,%rdi */
  0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*40: callq  *0x118(%rbx) */
  0x49, 0x89, 0xc7,                         /*46: mov    %rax,%r15 */
  0x48, 0x8b, 0xb3, 0x90, 0x02, 0x00, 0x00, /*49: mov    0x290(%rbx),%rsi */
  0xba, 0x19, 0x00, 0x00, 0x00,             /*50: mov    $0x19,%edx */
  0x4c, 0x89, 0xf7,                         /*55: mov    %r14,%rdi */
  0xff, 0x93, 0x88, 0x00, 0x00, 0x00,       /*58: callq  *0x88(%rbx) */
  0x89, 0xd1,                               /*5e: mov    %edx,%ecx */
  0x4c, 0x89, 0xf7,                         /*60: mov    %r14,%rdi */
  0x4c, 0x89, 0xfe,                         /*63: mov    %r15,%rsi */
  0x48, 0x89, 0xc2,                         /*66: mov    %rax,%rdx */
  0xff, 0x93, 0xc0, 0x01, 0x00, 0x00,       /*69: callq  *0x1c0(%rbx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*6f: mov    0x58(%rbx),%rcx */
  0x48, 0x89, 0x41, 0x28,                   /*73: mov    %rax,0x28(%rcx) */
  0x48, 0x89, 0xdf,                         /*77: mov    %rbx,%rdi */
  0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*7a: callq  *0x1a8(%rbx) */
  0x48, 0x89, 0xdf,                         /*80: mov    %rbx,%rdi */
  0x5b,                                     /*83: pop    %rbx */
  0x41, 0x5e,                               /*84: pop    %r14 */
  0x41, 0x5f,                               /*86: pop    %r15 */

};

static void op_tclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 39)) = a * 16 + 0;
  *((int32_t *)(op + 45)) = a * 16 + 8;
}

static void op_tclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_tclass_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 12..15]], "b"=>[[1, 0, 17..20]], "c"=>[[1, 0, 22..25]]} */
static uint8_t op_debug[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0x48, 0x8b, 0xbb, 0x98, 0x02, 0x00, 0x00, /*4: mov    0x298(%rbx),%rdi */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*b: mov    $0xab0000,%esi */
  0xba, 0x00, 0x00, 0xbc, 0x00,             /*10: mov    $0xbc0000,%edx */
  0xb9, 0x00, 0x00, 0xcd, 0x00,             /*15: mov    $0xcd0000,%ecx */
  0x31, 0xc0,                               /*1a: xor    %eax,%eax */
  0xff, 0x93, 0x70, 0x01, 0x00, 0x00,       /*1c: callq  *0x170(%rbx) */
  0x48, 0x89, 0xdf,                         /*22: mov    %rbx,%rdi */
  0x5b,                                     /*25: pop    %rbx */

};

static void op_debug_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 12)) = a * 1 + 0;
  *((int32_t *)(op + 17)) = b * 1 + 0;
  *((int32_t *)(op + 22)) = c * 1 + 0;
}

static void op_debug_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_debug_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_stop[] = {
  0x53,                                     /*0: push   %rbx */
  0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
  0xff, 0x93, 0xc8, 0x01, 0x00, 0x00,       /*4: callq  *0x1c8(%rbx) */
  0x48, 0x89, 0xdf,                         /*a: mov    %rbx,%rdi */
  0x5b,                                     /*d: pop    %rbx */

};

static void op_stop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_stop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_stop_set_args(op, 0,0,0,op_idx);
}


/* args: {"b"=>[[16, 0, 20..23], [16, 8, 26..29]]} */
static uint8_t op_err[] = {
  0x55,                                     /*0: push   %rbp */
  0x41, 0x57,                               /*1: push   %r15 */
  0x41, 0x56,                               /*3: push   %r14 */
  0x53,                                     /*5: push   %rbx */
  0x48, 0x89, 0xfb,                         /*6: mov    %rdi,%rbx */
  0x48, 0x8b, 0x43, 0x20,                   /*9: mov    0x20(%rbx),%rax */
  0x4c, 0x8b, 0x73, 0x58,                   /*d: mov    0x58(%rbx),%r14 */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xbc, 0x00, /*11: mov    0xbc1000(%rax),%rsi */
  0x8b, 0x90, 0x08, 0x10, 0xbc, 0x00,       /*18: mov    0xbc1008(%rax),%edx */
  0x4c, 0x89, 0xf7,                         /*1e: mov    %r14,%rdi */
  0xff, 0x93, 0xd0, 0x01, 0x00, 0x00,       /*21: callq  *0x1d0(%rbx) */
  0x49, 0x89, 0xc7,                         /*27: mov    %rax,%r15 */
  0x89, 0xd5,                               /*2a: mov    %edx,%ebp */
  0x48, 0x8b, 0x83, 0x50, 0x02, 0x00, 0x00, /*2c: mov    0x250(%rbx),%rax */
  0x48, 0x8b, 0x30,                         /*33: mov    (%rax),%rsi */
  0x4c, 0x89, 0xf7,                         /*36: mov    %r14,%rdi */
  0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*39: callq  *0x118(%rbx) */
  0x4c, 0x89, 0xf7,                         /*3f: mov    %r14,%rdi */
  0x48, 0x89, 0xc6,                         /*42: mov    %rax,%rsi */
  0x4c, 0x89, 0xfa,                         /*45: mov    %r15,%rdx */
  0x89, 0xe9,                               /*48: mov    %ebp,%ecx */
  0xff, 0x93, 0xc0, 0x01, 0x00, 0x00,       /*4a: callq  *0x1c0(%rbx) */
  0x48, 0x8b, 0x4b, 0x58,                   /*50: mov    0x58(%rbx),%rcx */
  0x48, 0x89, 0x41, 0x28,                   /*54: mov    %rax,0x28(%rcx) */
  0x48, 0x89, 0xdf,                         /*58: mov    %rbx,%rdi */
  0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*5b: callq  *0x1a8(%rbx) */
  0x48, 0x89, 0xdf,                         /*61: mov    %rbx,%rdi */
  0x5b,                                     /*64: pop    %rbx */
  0x41, 0x5e,                               /*65: pop    %r14 */
  0x41, 0x5f,                               /*67: pop    %r15 */
  0x5d,                                     /*69: pop    %rbp */

};

static void op_err_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 20)) = b * 16 + 0;
  *((int32_t *)(op + 26)) = b * 16 + 8;
}

static void op_err_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_err_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}

typedef void (*jit_args_func_t)(uint8_t *op, mrb_code c, uint32_t op_idx);
static jit_args_func_t arg_funcs[78];
uint8_t* ops[78];
static char *op_names[78];
static size_t op_sizes[] = {
  sizeof(op_nop), /* 0 */
  sizeof(op_move), /* 32 */
  sizeof(op_loadl), /* 36 */
  sizeof(op_loadi), /* 28 */
  sizeof(op_loadsym), /* 34 */
  sizeof(op_loadnil), /* 28 */
  sizeof(op_loadself), /* 25 */
  sizeof(op_loadt), /* 28 */
  sizeof(op_loadf), /* 28 */
  sizeof(op_getglobal), /* 50 */
  sizeof(op_setglobal), /* 45 */
  sizeof(op_getspecial), /* 45 */
  sizeof(op_setspecial), /* 40 */
  sizeof(op_getiv), /* 50 */
  sizeof(op_setiv), /* 45 */
  sizeof(op_getcv), /* 90 */
  sizeof(op_setcv), /* 45 */
  sizeof(op_getconst), /* 97 */
  sizeof(op_setconst), /* 45 */
  sizeof(op_getmcnst), /* 114 */
  sizeof(op_setmcnst), /* 59 */
  sizeof(op_getupvar), /* 122 */
  sizeof(op_setupvar), /* 109 */
  sizeof(op_jmp), /* 0 */
  sizeof(op_jmpif), /* 11 */
  sizeof(op_jmpnot), /* 11 */
  sizeof(op_onerr), /* 146 */
  sizeof(op_rescue), /* 52 */
  sizeof(op_poperr), /* 35 */
  sizeof(op_raise), /* 33 */
  sizeof(op_epush), /* 169 */
  sizeof(op_epop), /* 86 */
  sizeof(op_send), /* 112 */
  sizeof(op_sendb), /* 57 */
  sizeof(op_fsend), /* 0 */
  sizeof(op_call), /* 464 */
  sizeof(op_super), /* 710 */
  sizeof(op_argary), /* 743 */
  sizeof(op_enter), /* 1902 */
  sizeof(op_enter_method_m), /* 444 */
  sizeof(op_karg), /* 0 */
  sizeof(op_kdict), /* 0 */
  sizeof(op_return), /* 39 */
  sizeof(op_break), /* 25 */
  sizeof(op_tailcall), /* 800 */
  sizeof(op_blkpush), /* 215 */
  sizeof(op_add), /* 337 */
  sizeof(op_addi), /* 154 */
  sizeof(op_sub), /* 237 */
  sizeof(op_subi), /* 154 */
  sizeof(op_mul), /* 258 */
  sizeof(op_div), /* 205 */
  sizeof(op_eq), /* 266 */
  sizeof(op_lt), /* 218 */
  sizeof(op_le), /* 218 */
  sizeof(op_gt), /* 218 */
  sizeof(op_ge), /* 218 */
  sizeof(op_array), /* 65 */
  sizeof(op_arycat), /* 89 */
  sizeof(op_arypush), /* 49 */
  sizeof(op_aref), /* 92 */
  sizeof(op_aset), /* 54 */
  sizeof(op_apost), /* 447 */
  sizeof(op_string), /* 70 */
  sizeof(op_strcat), /* 49 */
  sizeof(op_hash), /* 210 */
  sizeof(op_lambda), /* 83 */
  sizeof(op_range), /* 87 */
  sizeof(op_oclass), /* 28 */
  sizeof(op_class), /* 145 */
  sizeof(op_module), /* 130 */
  sizeof(op_exec), /* 368 */
  sizeof(op_method), /* 66 */
  sizeof(op_sclass), /* 67 */
  sizeof(op_tclass), /* 136 */
  sizeof(op_debug), /* 38 */
  sizeof(op_stop), /* 14 */
  sizeof(op_err), /* 106 */

};

extern void init_symtbl();
void init_ops() {
  static int init = 0;
  if(init == 0) {
    init = 1;
    init_symtbl();
    ops[0] = op_nop;
    op_names[0] = "op_nop";
    arg_funcs[0] = op_nop_set_args_from_code;
    ops[1] = op_move;
    op_names[1] = "op_move";
    arg_funcs[1] = op_move_set_args_from_code;
    ops[2] = op_loadl;
    op_names[2] = "op_loadl";
    arg_funcs[2] = op_loadl_set_args_from_code;
    ops[3] = op_loadi;
    op_names[3] = "op_loadi";
    arg_funcs[3] = op_loadi_set_args_from_code;
    ops[4] = op_loadsym;
    op_names[4] = "op_loadsym";
    arg_funcs[4] = op_loadsym_set_args_from_code;
    ops[5] = op_loadnil;
    op_names[5] = "op_loadnil";
    arg_funcs[5] = op_loadnil_set_args_from_code;
    ops[6] = op_loadself;
    op_names[6] = "op_loadself";
    arg_funcs[6] = op_loadself_set_args_from_code;
    ops[7] = op_loadt;
    op_names[7] = "op_loadt";
    arg_funcs[7] = op_loadt_set_args_from_code;
    ops[8] = op_loadf;
    op_names[8] = "op_loadf";
    arg_funcs[8] = op_loadf_set_args_from_code;
    ops[9] = op_getglobal;
    op_names[9] = "op_getglobal";
    arg_funcs[9] = op_getglobal_set_args_from_code;
    ops[10] = op_setglobal;
    op_names[10] = "op_setglobal";
    arg_funcs[10] = op_setglobal_set_args_from_code;
    ops[11] = op_getspecial;
    op_names[11] = "op_getspecial";
    arg_funcs[11] = op_getspecial_set_args_from_code;
    ops[12] = op_setspecial;
    op_names[12] = "op_setspecial";
    arg_funcs[12] = op_setspecial_set_args_from_code;
    ops[13] = op_getiv;
    op_names[13] = "op_getiv";
    arg_funcs[13] = op_getiv_set_args_from_code;
    ops[14] = op_setiv;
    op_names[14] = "op_setiv";
    arg_funcs[14] = op_setiv_set_args_from_code;
    ops[15] = op_getcv;
    op_names[15] = "op_getcv";
    arg_funcs[15] = op_getcv_set_args_from_code;
    ops[16] = op_setcv;
    op_names[16] = "op_setcv";
    arg_funcs[16] = op_setcv_set_args_from_code;
    ops[17] = op_getconst;
    op_names[17] = "op_getconst";
    arg_funcs[17] = op_getconst_set_args_from_code;
    ops[18] = op_setconst;
    op_names[18] = "op_setconst";
    arg_funcs[18] = op_setconst_set_args_from_code;
    ops[19] = op_getmcnst;
    op_names[19] = "op_getmcnst";
    arg_funcs[19] = op_getmcnst_set_args_from_code;
    ops[20] = op_setmcnst;
    op_names[20] = "op_setmcnst";
    arg_funcs[20] = op_setmcnst_set_args_from_code;
    ops[21] = op_getupvar;
    op_names[21] = "op_getupvar";
    arg_funcs[21] = op_getupvar_set_args_from_code;
    ops[22] = op_setupvar;
    op_names[22] = "op_setupvar";
    arg_funcs[22] = op_setupvar_set_args_from_code;
    ops[23] = op_jmp;
    op_names[23] = "op_jmp";
    arg_funcs[23] = op_jmp_set_args_from_code;
    ops[24] = op_jmpif;
    op_names[24] = "op_jmpif";
    arg_funcs[24] = op_jmpif_set_args_from_code;
    ops[25] = op_jmpnot;
    op_names[25] = "op_jmpnot";
    arg_funcs[25] = op_jmpnot_set_args_from_code;
    ops[26] = op_onerr;
    op_names[26] = "op_onerr";
    arg_funcs[26] = op_onerr_set_args_from_code;
    ops[27] = op_rescue;
    op_names[27] = "op_rescue";
    arg_funcs[27] = op_rescue_set_args_from_code;
    ops[28] = op_poperr;
    op_names[28] = "op_poperr";
    arg_funcs[28] = op_poperr_set_args_from_code;
    ops[29] = op_raise;
    op_names[29] = "op_raise";
    arg_funcs[29] = op_raise_set_args_from_code;
    ops[30] = op_epush;
    op_names[30] = "op_epush";
    arg_funcs[30] = op_epush_set_args_from_code;
    ops[31] = op_epop;
    op_names[31] = "op_epop";
    arg_funcs[31] = op_epop_set_args_from_code;
    ops[32] = op_send;
    op_names[32] = "op_send";
    arg_funcs[32] = op_send_set_args_from_code;
    ops[33] = op_sendb;
    op_names[33] = "op_sendb";
    arg_funcs[33] = op_sendb_set_args_from_code;
    ops[34] = op_fsend;
    op_names[34] = "op_fsend";
    arg_funcs[34] = op_fsend_set_args_from_code;
    ops[35] = op_call;
    op_names[35] = "op_call";
    arg_funcs[35] = op_call_set_args_from_code;
    ops[36] = op_super;
    op_names[36] = "op_super";
    arg_funcs[36] = op_super_set_args_from_code;
    ops[37] = op_argary;
    op_names[37] = "op_argary";
    arg_funcs[37] = op_argary_set_args_from_code;
    ops[38] = op_enter;
    op_names[38] = "op_enter";
    arg_funcs[38] = op_enter_set_args_from_code;
    ops[39] = op_enter_method_m;
    op_names[39] = "op_enter_method_m";
    arg_funcs[39] = op_enter_method_m_set_args_from_code;
    ops[40] = op_karg;
    op_names[40] = "op_karg";
    arg_funcs[40] = op_karg_set_args_from_code;
    ops[41] = op_kdict;
    op_names[41] = "op_kdict";
    arg_funcs[41] = op_kdict_set_args_from_code;
    ops[42] = op_return;
    op_names[42] = "op_return";
    arg_funcs[42] = op_return_set_args_from_code;
    ops[43] = op_break;
    op_names[43] = "op_break";
    arg_funcs[43] = op_break_set_args_from_code;
    ops[44] = op_tailcall;
    op_names[44] = "op_tailcall";
    arg_funcs[44] = op_tailcall_set_args_from_code;
    ops[45] = op_blkpush;
    op_names[45] = "op_blkpush";
    arg_funcs[45] = op_blkpush_set_args_from_code;
    ops[46] = op_add;
    op_names[46] = "op_add";
    arg_funcs[46] = op_add_set_args_from_code;
    ops[47] = op_addi;
    op_names[47] = "op_addi";
    arg_funcs[47] = op_addi_set_args_from_code;
    ops[48] = op_sub;
    op_names[48] = "op_sub";
    arg_funcs[48] = op_sub_set_args_from_code;
    ops[49] = op_subi;
    op_names[49] = "op_subi";
    arg_funcs[49] = op_subi_set_args_from_code;
    ops[50] = op_mul;
    op_names[50] = "op_mul";
    arg_funcs[50] = op_mul_set_args_from_code;
    ops[51] = op_div;
    op_names[51] = "op_div";
    arg_funcs[51] = op_div_set_args_from_code;
    ops[52] = op_eq;
    op_names[52] = "op_eq";
    arg_funcs[52] = op_eq_set_args_from_code;
    ops[53] = op_lt;
    op_names[53] = "op_lt";
    arg_funcs[53] = op_lt_set_args_from_code;
    ops[54] = op_le;
    op_names[54] = "op_le";
    arg_funcs[54] = op_le_set_args_from_code;
    ops[55] = op_gt;
    op_names[55] = "op_gt";
    arg_funcs[55] = op_gt_set_args_from_code;
    ops[56] = op_ge;
    op_names[56] = "op_ge";
    arg_funcs[56] = op_ge_set_args_from_code;
    ops[57] = op_array;
    op_names[57] = "op_array";
    arg_funcs[57] = op_array_set_args_from_code;
    ops[58] = op_arycat;
    op_names[58] = "op_arycat";
    arg_funcs[58] = op_arycat_set_args_from_code;
    ops[59] = op_arypush;
    op_names[59] = "op_arypush";
    arg_funcs[59] = op_arypush_set_args_from_code;
    ops[60] = op_aref;
    op_names[60] = "op_aref";
    arg_funcs[60] = op_aref_set_args_from_code;
    ops[61] = op_aset;
    op_names[61] = "op_aset";
    arg_funcs[61] = op_aset_set_args_from_code;
    ops[62] = op_apost;
    op_names[62] = "op_apost";
    arg_funcs[62] = op_apost_set_args_from_code;
    ops[63] = op_string;
    op_names[63] = "op_string";
    arg_funcs[63] = op_string_set_args_from_code;
    ops[64] = op_strcat;
    op_names[64] = "op_strcat";
    arg_funcs[64] = op_strcat_set_args_from_code;
    ops[65] = op_hash;
    op_names[65] = "op_hash";
    arg_funcs[65] = op_hash_set_args_from_code;
    ops[66] = op_lambda;
    op_names[66] = "op_lambda";
    arg_funcs[66] = op_lambda_set_args_from_code;
    ops[67] = op_range;
    op_names[67] = "op_range";
    arg_funcs[67] = op_range_set_args_from_code;
    ops[68] = op_oclass;
    op_names[68] = "op_oclass";
    arg_funcs[68] = op_oclass_set_args_from_code;
    ops[69] = op_class;
    op_names[69] = "op_class";
    arg_funcs[69] = op_class_set_args_from_code;
    ops[70] = op_module;
    op_names[70] = "op_module";
    arg_funcs[70] = op_module_set_args_from_code;
    ops[71] = op_exec;
    op_names[71] = "op_exec";
    arg_funcs[71] = op_exec_set_args_from_code;
    ops[72] = op_method;
    op_names[72] = "op_method";
    arg_funcs[72] = op_method_set_args_from_code;
    ops[73] = op_sclass;
    op_names[73] = "op_sclass";
    arg_funcs[73] = op_sclass_set_args_from_code;
    ops[74] = op_tclass;
    op_names[74] = "op_tclass";
    arg_funcs[74] = op_tclass_set_args_from_code;
    ops[75] = op_debug;
    op_names[75] = "op_debug";
    arg_funcs[75] = op_debug_set_args_from_code;
    ops[76] = op_stop;
    op_names[76] = "op_stop";
    arg_funcs[76] = op_stop_set_args_from_code;
    ops[77] = op_err;
    op_names[77] = "op_err";
    arg_funcs[77] = op_err_set_args_from_code;
  }
}
uint8_t *jit_return(uint8_t *b) {
  *b++ = 0xc3;
  return b;
}
uint8_t *jit_jump(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 235;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *b++ = 233;
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
uint8_t *jit_jump_if(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 116;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *((uint16_t *)(b)) = (uint16_t) -31729;
    b += sizeof(uint16_t);
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
uint8_t *jit_jump_not(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 117;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *((uint16_t *)(b)) = (uint16_t) -31473;
    b += sizeof(uint16_t);
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
