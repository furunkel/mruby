
/* args: {} */
static uint8_t op_nop[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */

};

static void op_nop_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
}

static void op_nop_set_args_from_code(uint8_t *op, mrb_code c) {
  op_nop_set_args(op, 0,0,0);
}


/* args: {"b"=>[[16, 0, 11..14], [16, 8, 18..21]], "a"=>[[16, 8, 25..28], [16, 0, 32..35]]} */
static uint8_t op_move[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x88, 0x00, 0x10, 0xbc, 0x00, /*08: mov     +0xbc1000(%rax), %rcx    */
  0x48, 0x8b, 0x90, 0x08, 0x10, 0xbc, 0x00, /*0f: mov     +0xbc1008(%rax), %rdx    */
  0x48, 0x89, 0x90, 0x08, 0x10, 0xab, 0x00, /*16: mov     %rdx, +0xab1008(%rax)    */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*1d: mov     %rcx, +0xab1000(%rax)    */

};

static void op_move_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 11)) = b * 16 + 0;
  *((int32_t *)(op + 18)) = b * 16 + 8;
  *((int32_t *)(op + 25)) = a * 16 + 8;
  *((int32_t *)(op + 32)) = a * 16 + 0;
}

static void op_move_set_args_from_code(uint8_t *op, mrb_code c) {
  op_move_set_args(op, GETARG_A(c),GETARG_B(c),0);
}


/* args: {"b"=>[[16, 0, 15..18], [16, 8, 22..25]], "a"=>[[16, 8, 29..32], [16, 0, 36..39]]} */
static uint8_t op_loadl[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x4f, 0x20,                   /*08: mov     +0x20(%rdi), %rcx        */
  0x48, 0x8b, 0x91, 0x00, 0x10, 0xbc, 0x00, /*0c: mov     +0xbc1000(%rcx), %rdx    */
  0x48, 0x8b, 0x89, 0x08, 0x10, 0xbc, 0x00, /*13: mov     +0xbc1008(%rcx), %rcx    */
  0x48, 0x89, 0x88, 0x08, 0x10, 0xab, 0x00, /*1a: mov     %rcx, +0xab1008(%rax)    */
  0x48, 0x89, 0x90, 0x00, 0x10, 0xab, 0x00, /*21: mov     %rdx, +0xab1000(%rax)    */

};

static void op_loadl_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 15)) = b * 16 + 0;
  *((int32_t *)(op + 22)) = b * 16 + 8;
  *((int32_t *)(op + 29)) = a * 16 + 8;
  *((int32_t *)(op + 36)) = a * 16 + 0;
}

static void op_loadl_set_args_from_code(uint8_t *op, mrb_code c) {
  op_loadl_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 0, 28..31]], "b"=>[[1, 0, 32..35]]} */
static uint8_t op_loadi[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x03, 0x00, 0x00, 0x00,/*08: movl    $0x3, +0xab1008(%rax)    */
  0x48, 0x8b, 0x04, 0x24,                   /*12: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x40, 0x18,                   /*16: mov     +0x18(%rax), %rax        */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x00, 0x00, 0xbc, 0x00,/*1a: movl    $0xbc0000, +0xab1000(%rax) */

};

static void op_loadi_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 28)) = a * 16 + 0;
  *((int32_t *)(op + 32)) = b * 1 + 0;
}

static void op_loadi_set_args_from_code(uint8_t *op, mrb_code c) {
  op_loadi_set_args(op, GETARG_A(c),GETARG_sBx(c),0);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 0, 38..41]], "b"=>[[4, 0, 32..35]]} */
static uint8_t op_loadsym[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*08: movl    $0x4, +0xab1008(%rax)    */
  0x48, 0x8b, 0x04, 0x24,                   /*12: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x48, 0x18,                   /*16: mov     +0x18(%rax), %rcx        */
  0x48, 0x8b, 0x40, 0x28,                   /*1a: mov     +0x28(%rax), %rax        */
  0x8b, 0x80, 0x00, 0x04, 0xbc, 0x00,       /*1e: mov     +0xbc0400(%rax), %eax    */
  0x89, 0x81, 0x00, 0x10, 0xab, 0x00,       /*24: mov     %eax, +0xab1000(%rcx)    */

};

static void op_loadsym_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 38)) = a * 16 + 0;
  *((int32_t *)(op + 32)) = b * 4 + 0;
}

static void op_loadsym_set_args_from_code(uint8_t *op, mrb_code c) {
  op_loadsym_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[1, 0, 13..16]]} */
static uint8_t op_loadnil[] = {
  0x48, 0x83, 0xec, 0x18,                   /*00: sub     $0x18, %rsp              */
  0x48, 0x89, 0x7c, 0x24, 0x10,             /*04: mov     %rdi, +0x10(%rsp)        */
  0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0xab, 0x00,/*09: movl    $0xab0000, +0xc(%rsp)    */
  0x48, 0x63, 0x44, 0x24, 0x0c,             /*11: movslq  +0xc(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*16: mov     +0x10(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*1b: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*1f: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00,/*23: movl    $0, +0x8(%rcx,%rax,1)    */
  0x48, 0x63, 0x44, 0x24, 0x0c,             /*2b: movslq  +0xc(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*30: mov     +0x10(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*35: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*39: shl     $0x4, %rax               */
  0xc7, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, /*3d: movl    $0, (%rcx,%rax,1)        */
  0x48, 0x83, 0xc4, 0x18,                   /*44: add     $0x18, %rsp              */

};

static void op_loadnil_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 13)) = a * 1 + 0;
}

static void op_loadnil_set_args_from_code(uint8_t *op, mrb_code c) {
  op_loadnil_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[16, 8, 18..21], [16, 0, 25..28]]} */
static uint8_t op_loadself[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x08,                         /*08: mov     (%rax), %rcx             */
  0x48, 0x8b, 0x50, 0x08,                   /*0b: mov     +0x8(%rax), %rdx         */
  0x48, 0x89, 0x90, 0x08, 0x10, 0xab, 0x00, /*0f: mov     %rdx, +0xab1008(%rax)    */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*16: mov     %rcx, +0xab1000(%rax)    */

};

static void op_loadself_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 18)) = a * 16 + 8;
  *((int32_t *)(op + 25)) = a * 16 + 0;
}

static void op_loadself_set_args_from_code(uint8_t *op, mrb_code c) {
  op_loadself_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 0, 28..31]]} */
static uint8_t op_loadt[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*08: movl    $0x2, +0xab1008(%rax)    */
  0x48, 0x8b, 0x04, 0x24,                   /*12: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x40, 0x18,                   /*16: mov     +0x18(%rax), %rax        */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*1a: movl    $0x1, +0xab1000(%rax)    */

};

static void op_loadt_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 28)) = a * 16 + 0;
}

static void op_loadt_set_args_from_code(uint8_t *op, mrb_code c) {
  op_loadt_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[16, 8, 10..13], [16, 0, 28..31]]} */
static uint8_t op_loadf[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0xc7, 0x80, 0x08, 0x10, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*08: movl    $0, +0xab1008(%rax)      */
  0x48, 0x8b, 0x04, 0x24,                   /*12: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x40, 0x18,                   /*16: mov     +0x18(%rax), %rax        */
  0xc7, 0x80, 0x00, 0x10, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*1a: movl    $0x1, +0xab1000(%rax)    */

};

static void op_loadf_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
  *((int32_t *)(op + 28)) = a * 16 + 0;
}

static void op_loadf_set_args_from_code(uint8_t *op, mrb_code c) {
  op_loadf_set_args(op, GETARG_A(c),0,0);
}


/* args: {"b"=>[[4, 0, 29..32]], "a"=>[[16, 8, 59..62], [16, 0, 66..69]]} */
static uint8_t op_getglobal[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*0a: mov     %rbx, +0x10(%rsp)        */
  0x48, 0x8b, 0x7b, 0x58,                   /*0f: mov     +0x58(%rbx), %rdi        */
  0x4c, 0x8b, 0x73, 0x18,                   /*13: mov     +0x18(%rbx), %r14        */
  0x48, 0x8b, 0x43, 0x28,                   /*17: mov     +0x28(%rbx), %rax        */
  0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*1b: mov     +0xbc0400(%rax), %esi    */
  0xff, 0x93, 0x90, 0x01, 0x00, 0x00,       /*21: callq   +0x190(%rbx)             */
  0x48, 0x89, 0x04, 0x24,                   /*27: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*2b: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*2f: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*33: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*38: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*3f: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x89, 0xdf,                         /*46: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*49: add     $0x18, %rsp              */
  0x5b,                                     /*4d: pop     %rbx                     */
  0x41, 0x5e,                               /*4e: pop     %r14                     */

};

static void op_getglobal_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 29)) = b * 4 + 0;
  *((int32_t *)(op + 59)) = a * 16 + 8;
  *((int32_t *)(op + 66)) = a * 16 + 0;
}

static void op_getglobal_set_args_from_code(uint8_t *op, mrb_code c) {
  op_getglobal_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"b"=>[[4, 0, 27..30]], "a"=>[[16, 0, 34..37], [16, 8, 40..43]]} */
static uint8_t op_setglobal[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x7b, 0x58,                   /*0d: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0x43, 0x18,                   /*11: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x4b, 0x28,                   /*15: mov     +0x28(%rbx), %rcx        */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*19: mov     +0xbc0400(%rcx), %esi    */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*1f: mov     +0xab1000(%rax), %rdx    */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*26: mov     +0xab1008(%rax), %ecx    */
  0xff, 0x93, 0x90, 0x00, 0x00, 0x00,       /*2c: callq   +0x90(%rbx)              */
  0x48, 0x89, 0xdf,                         /*32: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*35: add     $0x10, %rsp              */
  0x5b,                                     /*39: pop     %rbx                     */

};

static void op_setglobal_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 27)) = b * 4 + 0;
  *((int32_t *)(op + 34)) = a * 16 + 0;
  *((int32_t *)(op + 40)) = a * 16 + 8;
}

static void op_setglobal_set_args_from_code(uint8_t *op, mrb_code c) {
  op_setglobal_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"b"=>[[1, 0, 24..27]], "a"=>[[16, 8, 54..57], [16, 0, 61..64]]} */
static uint8_t op_getspecial[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*0a: mov     %rbx, +0x10(%rsp)        */
  0x4c, 0x8b, 0x73, 0x18,                   /*0f: mov     +0x18(%rbx), %r14        */
  0x48, 0x8b, 0x7b, 0x58,                   /*13: mov     +0x58(%rbx), %rdi        */
  0xbe, 0x00, 0x00, 0xbc, 0x00,             /*17: mov     $0xbc0000, %esi          */
  0xff, 0x93, 0x38, 0x02, 0x00, 0x00,       /*1c: callq   +0x238(%rbx)             */
  0x48, 0x89, 0x04, 0x24,                   /*22: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*26: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*2a: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*2e: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*33: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*3a: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x89, 0xdf,                         /*41: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*44: add     $0x18, %rsp              */
  0x5b,                                     /*48: pop     %rbx                     */
  0x41, 0x5e,                               /*49: pop     %r14                     */

};

static void op_getspecial_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 24)) = b * 1 + 0;
  *((int32_t *)(op + 54)) = a * 16 + 8;
  *((int32_t *)(op + 61)) = a * 16 + 0;
}

static void op_getspecial_set_args_from_code(uint8_t *op, mrb_code c) {
  op_getspecial_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[16, 0, 24..27], [16, 8, 30..33]], "b"=>[[1, 0, 35..38]]} */
static uint8_t op_setspecial[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x43, 0x18,                   /*0d: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x7b, 0x58,                   /*11: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*15: mov     +0xab1000(%rax), %rdx    */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*1c: mov     +0xab1008(%rax), %ecx    */
  0xbe, 0x00, 0x00, 0xbc, 0x00,             /*22: mov     $0xbc0000, %esi          */
  0xff, 0x93, 0x28, 0x01, 0x00, 0x00,       /*27: callq   +0x128(%rbx)             */
  0x48, 0x89, 0xdf,                         /*2d: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*30: add     $0x10, %rsp              */
  0x5b,                                     /*34: pop     %rbx                     */

};

static void op_setspecial_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 24)) = a * 16 + 0;
  *((int32_t *)(op + 30)) = a * 16 + 8;
  *((int32_t *)(op + 35)) = b * 1 + 0;
}

static void op_setspecial_set_args_from_code(uint8_t *op, mrb_code c) {
  op_setspecial_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"b"=>[[4, 0, 29..32]], "a"=>[[16, 8, 59..62], [16, 0, 66..69]]} */
static uint8_t op_getiv[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*0a: mov     %rbx, +0x10(%rsp)        */
  0x48, 0x8b, 0x7b, 0x58,                   /*0f: mov     +0x58(%rbx), %rdi        */
  0x4c, 0x8b, 0x73, 0x18,                   /*13: mov     +0x18(%rbx), %r14        */
  0x48, 0x8b, 0x43, 0x28,                   /*17: mov     +0x28(%rbx), %rax        */
  0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*1b: mov     +0xbc0400(%rax), %esi    */
  0xff, 0x93, 0xb0, 0x00, 0x00, 0x00,       /*21: callq   +0xb0(%rbx)              */
  0x48, 0x89, 0x04, 0x24,                   /*27: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*2b: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*2f: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*33: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*38: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*3f: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x89, 0xdf,                         /*46: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*49: add     $0x18, %rsp              */
  0x5b,                                     /*4d: pop     %rbx                     */
  0x41, 0x5e,                               /*4e: pop     %r14                     */

};

static void op_getiv_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 29)) = b * 4 + 0;
  *((int32_t *)(op + 59)) = a * 16 + 8;
  *((int32_t *)(op + 66)) = a * 16 + 0;
}

static void op_getiv_set_args_from_code(uint8_t *op, mrb_code c) {
  op_getiv_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"b"=>[[4, 0, 27..30]], "a"=>[[16, 0, 34..37], [16, 8, 40..43]]} */
static uint8_t op_setiv[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x7b, 0x58,                   /*0d: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0x43, 0x18,                   /*11: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x4b, 0x28,                   /*15: mov     +0x28(%rbx), %rcx        */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*19: mov     +0xbc0400(%rcx), %esi    */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*1f: mov     +0xab1000(%rax), %rdx    */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*26: mov     +0xab1008(%rax), %ecx    */
  0xff, 0x93, 0xf0, 0x01, 0x00, 0x00,       /*2c: callq   +0x1f0(%rbx)             */
  0x48, 0x89, 0xdf,                         /*32: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*35: add     $0x10, %rsp              */
  0x5b,                                     /*39: pop     %rbx                     */

};

static void op_setiv_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 27)) = b * 4 + 0;
  *((int32_t *)(op + 34)) = a * 16 + 0;
  *((int32_t *)(op + 40)) = a * 16 + 8;
}

static void op_setiv_set_args_from_code(uint8_t *op, mrb_code c) {
  op_setiv_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"b"=>[[4, 0, 54..57]], "a"=>[[16, 8, 84..87], [16, 0, 91..94]]} */
static uint8_t op_getcv[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*0a: mov     %rbx, +0x10(%rsp)        */
  0x48, 0x8b, 0x43, 0x10,                   /*0f: mov     +0x10(%rbx), %rax        */
  0x48, 0x8b, 0x4b, 0x58,                   /*13: mov     +0x58(%rbx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*17: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x20,                   /*1b: mov     +0x20(%rcx), %rcx        */
  0x48, 0x89, 0x41, 0x38,                   /*1f: mov     %rax, +0x38(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*23: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*28: mov     +0x58(%rax), %rdi        */
  0x4c, 0x8b, 0x70, 0x18,                   /*2c: mov     +0x18(%rax), %r14        */
  0x48, 0x8b, 0x40, 0x28,                   /*30: mov     +0x28(%rax), %rax        */
  0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*34: mov     +0xbc0400(%rax), %esi    */
  0xff, 0x93, 0xd8, 0x00, 0x00, 0x00,       /*3a: callq   +0xd8(%rbx)              */
  0x48, 0x89, 0x04, 0x24,                   /*40: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*44: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*48: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*4c: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*51: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*58: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*5f: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*64: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*68: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*6c: mov     +0x20(%rax), %rax        */
  0x48, 0xc7, 0x40, 0x38, 0x00, 0x00, 0x00, 0x00,/*70: movq    $0, +0x38(%rax)          */
  0x48, 0x89, 0xdf,                         /*78: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*7b: add     $0x18, %rsp              */
  0x5b,                                     /*7f: pop     %rbx                     */
  0x41, 0x5e,                               /*80: pop     %r14                     */

};

static void op_getcv_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 54)) = b * 4 + 0;
  *((int32_t *)(op + 84)) = a * 16 + 8;
  *((int32_t *)(op + 91)) = a * 16 + 0;
}

static void op_getcv_set_args_from_code(uint8_t *op, mrb_code c) {
  op_getcv_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"b"=>[[4, 0, 27..30]], "a"=>[[16, 0, 34..37], [16, 8, 40..43]]} */
static uint8_t op_setcv[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x7b, 0x58,                   /*0d: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0x43, 0x18,                   /*11: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x4b, 0x28,                   /*15: mov     +0x28(%rbx), %rcx        */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*19: mov     +0xbc0400(%rcx), %esi    */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*1f: mov     +0xab1000(%rax), %rdx    */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*26: mov     +0xab1008(%rax), %ecx    */
  0xff, 0x93, 0x18, 0x02, 0x00, 0x00,       /*2c: callq   +0x218(%rbx)             */
  0x48, 0x89, 0xdf,                         /*32: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*35: add     $0x10, %rsp              */
  0x5b,                                     /*39: pop     %rbx                     */

};

static void op_setcv_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 27)) = b * 4 + 0;
  *((int32_t *)(op + 34)) = a * 16 + 0;
  *((int32_t *)(op + 40)) = a * 16 + 8;
}

static void op_setcv_set_args_from_code(uint8_t *op, mrb_code c) {
  op_setcv_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"b"=>[[4, 0, 48..51]], "a"=>[[16, 8, 155..158], [16, 0, 162..165]]} */
static uint8_t op_getconst[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x30,                   /*01: sub     $0x30, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x28,             /*08: mov     %rbx, +0x28(%rsp)        */
  0x48, 0x8b, 0x43, 0x10,                   /*0d: mov     +0x10(%rbx), %rax        */
  0x48, 0x8b, 0x4b, 0x58,                   /*11: mov     +0x58(%rbx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*15: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x20,                   /*19: mov     +0x20(%rcx), %rcx        */
  0x48, 0x89, 0x41, 0x38,                   /*1d: mov     %rax, +0x38(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*21: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x28,                   /*26: mov     +0x28(%rax), %rcx        */
  0x48, 0x8b, 0x78, 0x58,                   /*2a: mov     +0x58(%rax), %rdi        */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*2e: mov     +0xbc0400(%rcx), %esi    */
  0xff, 0x93, 0x88, 0x00, 0x00, 0x00,       /*34: callq   +0x88(%rbx)              */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*3a: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*3f: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*43: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*48: mov     +0x10(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x20,             /*4d: mov     %rcx, +0x20(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*52: mov     %rax, +0x18(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*57: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*5c: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*60: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*64: mov     +0x20(%rax), %rax        */
  0x48, 0xc7, 0x40, 0x38, 0x00, 0x00, 0x00, 0x00,/*68: movq    $0, +0x38(%rax)          */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*70: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x58,                   /*75: mov     +0x58(%rax), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*79: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x08,                   /*7d: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x18,                   /*81: mov     %rcx, +0x18(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*85: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*8a: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*8e: mov     +0x18(%rsp), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x20,             /*93: mov     +0x20(%rsp), %rdx        */
  0x48, 0x89, 0x90, 0x08, 0x10, 0xab, 0x00, /*98: mov     %rdx, +0xab1008(%rax)    */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*9f: mov     %rcx, +0xab1000(%rax)    */
  0x48, 0x89, 0xdf,                         /*a6: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x30,                   /*a9: add     $0x30, %rsp              */
  0x5b,                                     /*ad: pop     %rbx                     */

};

static void op_getconst_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 48)) = b * 4 + 0;
  *((int32_t *)(op + 155)) = a * 16 + 8;
  *((int32_t *)(op + 162)) = a * 16 + 0;
}

static void op_getconst_set_args_from_code(uint8_t *op, mrb_code c) {
  op_getconst_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"b"=>[[4, 0, 27..30]], "a"=>[[16, 0, 34..37], [16, 8, 40..43]]} */
static uint8_t op_setconst[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x7b, 0x58,                   /*0d: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0x43, 0x18,                   /*11: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x4b, 0x28,                   /*15: mov     +0x28(%rbx), %rcx        */
  0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*19: mov     +0xbc0400(%rcx), %esi    */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*1f: mov     +0xab1000(%rax), %rdx    */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*26: mov     +0xab1008(%rax), %ecx    */
  0xff, 0x93, 0xc0, 0x01, 0x00, 0x00,       /*2c: callq   +0x1c0(%rbx)             */
  0x48, 0x89, 0xdf,                         /*32: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*35: add     $0x10, %rsp              */
  0x5b,                                     /*39: pop     %rbx                     */

};

static void op_setconst_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 27)) = b * 4 + 0;
  *((int32_t *)(op + 34)) = a * 16 + 0;
  *((int32_t *)(op + 40)) = a * 16 + 8;
}

static void op_setconst_set_args_from_code(uint8_t *op, mrb_code c) {
  op_setconst_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[1, 0, 19..22]], "b"=>[[4, 0, 76..79]]} */
static uint8_t op_getmcnst[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x38,                   /*03: sub     $0x38, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x30,             /*0a: mov     %r14, +0x30(%rsp)        */
  0xc7, 0x44, 0x24, 0x1c, 0x00, 0x00, 0xab, 0x00,/*0f: movl    $0xab0000, +0x1c(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*17: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x10,                   /*1c: mov     +0x10(%rax), %rcx        */
  0x48, 0x8b, 0x40, 0x58,                   /*20: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*24: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*28: mov     +0x20(%rax), %rax        */
  0x48, 0x89, 0x48, 0x38,                   /*2c: mov     %rcx, +0x38(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*30: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*35: mov     +0x58(%rax), %rdi        */
  0x48, 0x63, 0x54, 0x24, 0x1c,             /*39: movslq  +0x1c(%rsp), %rdx        */
  0x48, 0xc1, 0xe2, 0x04,                   /*3e: shl     $0x4, %rdx               */
  0x48, 0x8b, 0x58, 0x18,                   /*42: mov     +0x18(%rax), %rbx        */
  0x48, 0x8b, 0x40, 0x28,                   /*46: mov     +0x28(%rax), %rax        */
  0x8b, 0x88, 0x00, 0x04, 0xbc, 0x00,       /*4a: mov     +0xbc0400(%rax), %ecx    */
  0x48, 0x8b, 0x34, 0x13,                   /*50: mov     (%rbx,%rdx,1), %rsi      */
  0x8b, 0x54, 0x13, 0x08,                   /*54: mov     +0x8(%rbx,%rdx,1), %edx  */
  0x41, 0xff, 0x96, 0x10, 0x02, 0x00, 0x00, /*58: callq   +0x210(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*5f: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*64: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*68: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*6d: mov     +0x10(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x28,             /*72: mov     %rcx, +0x28(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*77: mov     %rax, +0x20(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*7c: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*81: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*85: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*89: mov     +0x20(%rax), %rax        */
  0x48, 0xc7, 0x40, 0x38, 0x00, 0x00, 0x00, 0x00,/*8d: movq    $0, +0x38(%rax)          */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*95: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x58,                   /*9a: mov     +0x58(%rax), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*9e: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x08,                   /*a2: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x18,                   /*a6: mov     %rcx, +0x18(%rax)        */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*aa: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*af: mov     +0x30(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*b4: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*b8: shl     $0x4, %rax               */
  0x48, 0x8b, 0x54, 0x24, 0x20,             /*bc: mov     +0x20(%rsp), %rdx        */
  0x48, 0x8b, 0x74, 0x24, 0x28,             /*c1: mov     +0x28(%rsp), %rsi        */
  0x48, 0x89, 0x74, 0x01, 0x08,             /*c6: mov     %rsi, +0x8(%rcx,%rax,1)  */
  0x48, 0x89, 0x14, 0x01,                   /*cb: mov     %rdx, (%rcx,%rax,1)      */
  0x4c, 0x89, 0xf7,                         /*cf: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x38,                   /*d2: add     $0x38, %rsp              */
  0x5b,                                     /*d6: pop     %rbx                     */
  0x41, 0x5e,                               /*d7: pop     %r14                     */

};

static void op_getmcnst_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = a * 1 + 0;
  *((int32_t *)(op + 76)) = b * 4 + 0;
}

static void op_getmcnst_set_args_from_code(uint8_t *op, mrb_code c) {
  op_getmcnst_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[1, 0, 19..22]], "b"=>[[4, 0, 47..50]]} */
static uint8_t op_setmcnst[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x10,             /*0a: mov     %r14, +0x10(%rsp)        */
  0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0xab, 0x00,/*0f: movl    $0xab0000, +0xc(%rsp)    */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*17: mov     +0x10(%rsp), %rcx        */
  0x48, 0x8b, 0x79, 0x58,                   /*1c: mov     +0x58(%rcx), %rdi        */
  0x48, 0x63, 0x5c, 0x24, 0x0c,             /*20: movslq  +0xc(%rsp), %rbx         */
  0x48, 0x8b, 0x41, 0x18,                   /*25: mov     +0x18(%rcx), %rax        */
  0x48, 0x8b, 0x49, 0x28,                   /*29: mov     +0x28(%rcx), %rcx        */
  0x8b, 0x89, 0x00, 0x04, 0xbc, 0x00,       /*2d: mov     +0xbc0400(%rcx), %ecx    */
  0x48, 0xc1, 0xe3, 0x04,                   /*33: shl     $0x4, %rbx               */
  0x48, 0x8b, 0x74, 0x18, 0x10,             /*37: mov     +0x10(%rax,%rbx,1), %rsi */
  0x8b, 0x54, 0x18, 0x18,                   /*3c: mov     +0x18(%rax,%rbx,1), %edx */
  0x4c, 0x8b, 0x04, 0x18,                   /*40: mov     (%rax,%rbx,1), %r8       */
  0x44, 0x8b, 0x4c, 0x18, 0x08,             /*44: mov     +0x8(%rax,%rbx,1), %r9d  */
  0x41, 0xff, 0x96, 0x00, 0x01, 0x00, 0x00, /*49: callq   +0x100(%r14)             */
  0x4c, 0x89, 0xf7,                         /*50: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*53: add     $0x18, %rsp              */
  0x5b,                                     /*57: pop     %rbx                     */
  0x41, 0x5e,                               /*58: pop     %r14                     */

};

static void op_setmcnst_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = a * 1 + 0;
  *((int32_t *)(op + 47)) = b * 4 + 0;
}

static void op_setmcnst_set_args_from_code(uint8_t *op, mrb_code c) {
  op_setmcnst_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[16, 0, 16..19]], "c"=>[[1, 0, 33..36], [1, 0, 47..50]], "b"=>[[1, 0, 71..74]]} */
static uint8_t op_getupvar[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x38,                   /*03: sub     $0x38, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x30,             /*0a: mov     %rbx, +0x30(%rsp)        */
  0xb8, 0x00, 0x10, 0xab, 0x00,             /*0f: mov     $0xab1000, %eax          */
  0x48, 0x03, 0x43, 0x18,                   /*14: add     +0x18(%rbx), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x28,             /*18: mov     %rax, +0x28(%rsp)        */
  0xc7, 0x44, 0x24, 0x24, 0x00, 0x00, 0xcd, 0x00,/*1d: movl    $0xcd0000, +0x24(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*25: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*2a: mov     +0x58(%rax), %rdi        */
  0xbe, 0x00, 0x00, 0xcd, 0x00,             /*2e: mov     $0xcd0000, %esi          */
  0xff, 0x93, 0x70, 0x02, 0x00, 0x00,       /*33: callq   +0x270(%rbx)             */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*39: mov     %rax, +0x18(%rsp)        */
  0x48, 0x85, 0xc0,                         /*3e: test    %rax, %rax               */
  0x74, 0x31,                               /*41: je                               */
  0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0xbc, 0x00,/*43: movl    $0xbc0000, +0x4(%rsp)    */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*4b: mov     +0x28(%rsp), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x04,             /*50: movslq  +0x4(%rsp), %rcx         */
  0x48, 0x8b, 0x54, 0x24, 0x18,             /*55: mov     +0x18(%rsp), %rdx        */
  0x48, 0x8b, 0x52, 0x18,                   /*5a: mov     +0x18(%rdx), %rdx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*5e: shl     $0x4, %rcx               */
  0x48, 0x8b, 0x34, 0x0a,                   /*62: mov     (%rdx,%rcx,1), %rsi      */
  0x48, 0x8b, 0x4c, 0x0a, 0x08,             /*66: mov     +0x8(%rdx,%rcx,1), %rcx  */
  0x48, 0x89, 0x48, 0x08,                   /*6b: mov     %rcx, +0x8(%rax)         */
  0x48, 0x89, 0x30,                         /*6f: mov     %rsi, (%rax)             */
  0xeb, 0x25,                               /*72: jmp                              */
  0x4c, 0x8b, 0x74, 0x24, 0x28,             /*74: mov     +0x28(%rsp), %r14        */
  0xff, 0x93, 0xb8, 0x00, 0x00, 0x00,       /*79: callq   +0xb8(%rbx)              */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*7f: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*84: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*88: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*8d: mov     +0x10(%rsp), %rcx        */
  0x49, 0x89, 0x4e, 0x08,                   /*92: mov     %rcx, +0x8(%r14)         */
  0x49, 0x89, 0x06,                         /*96: mov     %rax, (%r14)             */
  0x48, 0x89, 0xdf,                         /*99: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x38,                   /*9c: add     $0x38, %rsp              */
  0x5b,                                     /*a0: pop     %rbx                     */
  0x41, 0x5e,                               /*a1: pop     %r14                     */

};

static void op_getupvar_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 16)) = a * 16 + 0;
  *((int32_t *)(op + 33)) = c * 1 + 0;
  *((int32_t *)(op + 47)) = c * 1 + 0;
  *((int32_t *)(op + 71)) = b * 1 + 0;
}

static void op_getupvar_set_args_from_code(uint8_t *op, mrb_code c) {
  op_getupvar_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"c"=>[[1, 0, 17..20], [1, 0, 31..34]], "a"=>[[16, 0, 57..60]], "b"=>[[1, 0, 74..77]]} */
static uint8_t op_setupvar[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x30,                   /*01: sub     $0x30, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x28,             /*08: mov     %rbx, +0x28(%rsp)        */
  0xc7, 0x44, 0x24, 0x24, 0x00, 0x00, 0xcd, 0x00,/*0d: movl    $0xcd0000, +0x24(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*15: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*1a: mov     +0x58(%rax), %rdi        */
  0xbe, 0x00, 0x00, 0xcd, 0x00,             /*1e: mov     $0xcd0000, %esi          */
  0xff, 0x93, 0x70, 0x02, 0x00, 0x00,       /*23: callq   +0x270(%rbx)             */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*29: mov     %rax, +0x18(%rsp)        */
  0x48, 0x85, 0xc0,                         /*2e: test    %rax, %rax               */
  0x74, 0x56,                               /*31: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*33: mov     +0x28(%rsp), %rax        */
  0xb9, 0x00, 0x10, 0xab, 0x00,             /*38: mov     $0xab1000, %ecx          */
  0x48, 0x03, 0x48, 0x18,                   /*3d: add     +0x18(%rax), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x10,             /*41: mov     %rcx, +0x10(%rsp)        */
  0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0xbc, 0x00,/*46: movl    $0xbc0000, +0xc(%rsp)    */
  0x48, 0x63, 0x44, 0x24, 0x0c,             /*4e: movslq  +0xc(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*53: mov     +0x18(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*58: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*5c: shl     $0x4, %rax               */
  0x48, 0x8b, 0x54, 0x24, 0x10,             /*60: mov     +0x10(%rsp), %rdx        */
  0x48, 0x8b, 0x32,                         /*65: mov     (%rdx), %rsi             */
  0x48, 0x8b, 0x52, 0x08,                   /*68: mov     +0x8(%rdx), %rdx         */
  0x48, 0x89, 0x54, 0x01, 0x08,             /*6c: mov     %rdx, +0x8(%rcx,%rax,1)  */
  0x48, 0x89, 0x34, 0x01,                   /*71: mov     %rsi, (%rcx,%rax,1)      */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*75: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*7a: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x74, 0x24, 0x18,             /*7e: mov     +0x18(%rsp), %rsi        */
  0xff, 0x93, 0xf8, 0x00, 0x00, 0x00,       /*83: callq   +0xf8(%rbx)              */
  0x48, 0x89, 0xdf,                         /*89: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x30,                   /*8c: add     $0x30, %rsp              */
  0x5b,                                     /*90: pop     %rbx                     */

};

static void op_setupvar_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = c * 1 + 0;
  *((int32_t *)(op + 31)) = c * 1 + 0;
  *((int32_t *)(op + 57)) = a * 16 + 0;
  *((int32_t *)(op + 74)) = b * 1 + 0;
}

static void op_setupvar_set_args_from_code(uint8_t *op, mrb_code c) {
  op_setupvar_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {} */
static uint8_t op_jmp[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */

};

static void op_jmp_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
}

static void op_jmp_set_args_from_code(uint8_t *op, mrb_code c) {
  op_jmp_set_args(op, 0,GETARG_sBx(c),0);
}


/* args: {"a"=>[[16, 8, 10..13]]} */
static uint8_t op_jmpif[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0x83, 0xb8, 0x08, 0x10, 0xab, 0x00, 0x00, /*08: cmpl    $0, +0xab1008(%rax)      */

};

static void op_jmpif_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
}

static void op_jmpif_set_args_from_code(uint8_t *op, mrb_code c) {
  op_jmpif_set_args(op, GETARG_A(c),GETARG_sBx(c),0);
}


/* args: {"a"=>[[16, 8, 10..13]]} */
static uint8_t op_jmpnot[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0x83, 0xb8, 0x08, 0x10, 0xab, 0x00, 0x00, /*08: cmpl    $0, +0xab1008(%rax)      */

};

static void op_jmpnot_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 10)) = a * 16 + 8;
}

static void op_jmpnot_set_args_from_code(uint8_t *op, mrb_code c) {
  op_jmpnot_set_args(op, GETARG_A(c),GETARG_sBx(c),0);
}


/* args: {"b"=>[[4, 0, 144..147]]} */
static uint8_t op_onerr[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x43, 0x58,                   /*0d: mov     +0x58(%rbx), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*11: mov     +0x18(%rax), %rax        */
  0x8b, 0x48, 0x40,                         /*15: mov     +0x40(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x20,                   /*18: mov     +0x20(%rax), %rax        */
  0x3b, 0x48, 0x1c,                         /*1c: cmp     +0x1c(%rax), %ecx        */
  0x7f, 0x69,                               /*1f: jg                               */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*21: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x40, 0x58,                   /*26: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*2a: mov     +0x18(%rax), %rax        */
  0x83, 0x78, 0x40, 0x00,                   /*2e: cmpl    $0, +0x40(%rax)          */
  0x74, 0x12,                               /*32: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*34: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x40, 0x58,                   /*39: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*3d: mov     +0x18(%rax), %rax        */
  0xd1, 0x60, 0x40,                         /*41: shll    +0x40(%rax)              */
  0xeb, 0x14,                               /*44: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*46: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x40, 0x58,                   /*4b: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*4f: mov     +0x18(%rax), %rax        */
  0xc7, 0x40, 0x40, 0x10, 0x00, 0x00, 0x00, /*53: movl    $0x10, +0x40(%rax)       */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*5a: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x78, 0x58,                   /*5f: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x47, 0x18,                   /*63: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x70, 0x38,                   /*67: mov     +0x38(%rax), %rsi        */
  0x48, 0x63, 0x50, 0x40,                   /*6b: movslq  +0x40(%rax), %rdx        */
  0x48, 0xc1, 0xe2, 0x03,                   /*6f: shl     $0x3, %rdx               */
  0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*73: callq   +0x120(%rbx)             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*79: mov     +0x8(%rsp), %rcx         */
  0x48, 0x8b, 0x49, 0x58,                   /*7e: mov     +0x58(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*82: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x41, 0x38,                   /*86: mov     %rax, +0x38(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*8a: mov     +0x8(%rsp), %rax         */
  0xb9, 0x00, 0x04, 0xbc, 0x00,             /*8f: mov     $0xbc0400, %ecx          */
  0x48, 0x03, 0x48, 0x10,                   /*94: add     +0x10(%rax), %rcx        */
  0x48, 0x8b, 0x40, 0x58,                   /*98: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*9c: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*a0: mov     +0x20(%rax), %rax        */
  0x48, 0x63, 0x50, 0x1c,                   /*a4: movslq  +0x1c(%rax), %rdx        */
  0x8d, 0x72, 0x01,                         /*a8: lea     +0x1(%rdx), %esi         */
  0x89, 0x70, 0x1c,                         /*ab: mov     %esi, +0x1c(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*ae: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x40, 0x58,                   /*b3: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*b7: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x38,                   /*bb: mov     +0x38(%rax), %rax        */
  0x48, 0x89, 0x0c, 0xd0,                   /*bf: mov     %rcx, (%rax,%rdx,8)      */
  0x48, 0x89, 0xdf,                         /*c3: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*c6: add     $0x10, %rsp              */
  0x5b,                                     /*ca: pop     %rbx                     */

};

static void op_onerr_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 144)) = b * 4 + 0;
}

static void op_onerr_set_args_from_code(uint8_t *op, mrb_code c) {
  op_onerr_set_args(op, 0,GETARG_sBx(c),0);
}


/* args: {"a"=>[[16, 8, 21..24], [16, 0, 44..47]]} */
static uint8_t op_rescue[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */
  0x48, 0x8b, 0x47, 0x18,                   /*04: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x4f, 0x58,                   /*08: mov     +0x58(%rdi), %rcx        */
  0x48, 0x8b, 0x49, 0x28,                   /*0c: mov     +0x28(%rcx), %rcx        */
  0x0f, 0xb6, 0x09,                         /*10: movzbl  (%rcx), %ecx             */
  0x89, 0x88, 0x08, 0x10, 0xab, 0x00,       /*13: mov     %ecx, +0xab1008(%rax)    */
  0x48, 0x8b, 0x04, 0x24,                   /*19: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x48, 0x18,                   /*1d: mov     +0x18(%rax), %rcx        */
  0x48, 0x8b, 0x40, 0x58,                   /*21: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x28,                   /*25: mov     +0x28(%rax), %rax        */
  0x48, 0x89, 0x81, 0x00, 0x10, 0xab, 0x00, /*29: mov     %rax, +0xab1000(%rcx)    */
  0x48, 0x8b, 0x04, 0x24,                   /*30: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x40, 0x58,                   /*34: mov     +0x58(%rax), %rax        */
  0x48, 0xc7, 0x40, 0x28, 0x00, 0x00, 0x00, 0x00,/*38: movq    $0, +0x28(%rax)          */

};

static void op_rescue_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 21)) = a * 16 + 8;
  *((int32_t *)(op + 44)) = a * 16 + 0;
}

static void op_rescue_set_args_from_code(uint8_t *op, mrb_code c) {
  op_rescue_set_args(op, 0,0,0);
}


/* args: {"a"=>[[1, 0, 13..16]]} */
static uint8_t op_poperr[] = {
  0x48, 0x83, 0xec, 0x18,                   /*00: sub     $0x18, %rsp              */
  0x48, 0x89, 0x7c, 0x24, 0x10,             /*04: mov     %rdi, +0x10(%rsp)        */
  0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0xab, 0x00,/*09: movl    $0xab0000, +0xc(%rsp)    */
  0xeb, 0x21,                               /*11: jmp                              */
  0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*13: data16  "data16 data16 nopw %cs:0x0(%rax,%rax,1)" */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*20: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*25: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*29: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*2d: mov     +0x20(%rax), %rax        */
  0xff, 0x48, 0x1c,                         /*31: decl    +0x1c(%rax)              */
  0x8b, 0x44, 0x24, 0x0c,                   /*34: mov     +0xc(%rsp), %eax         */
  0x8d, 0x48, 0xff,                         /*38: lea     -0x1(%rax), %ecx         */
  0x89, 0x4c, 0x24, 0x0c,                   /*3b: mov     %ecx, +0xc(%rsp)         */
  0x85, 0xc0,                               /*3f: test    %eax, %eax               */
  0x75, 0xdd,                               /*41: jne                              */
  0x48, 0x83, 0xc4, 0x18,                   /*43: add     $0x18, %rsp              */

};

static void op_poperr_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 13)) = a * 1 + 0;
}

static void op_poperr_set_args_from_code(uint8_t *op, mrb_code c) {
  op_poperr_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[16, 0, 24..27]]} */
static uint8_t op_raise[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x43, 0x18,                   /*0d: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x4b, 0x58,                   /*11: mov     +0x58(%rbx), %rcx        */
  0x48, 0x8b, 0x80, 0x00, 0x10, 0xab, 0x00, /*15: mov     +0xab1000(%rax), %rax    */
  0x48, 0x89, 0x41, 0x28,                   /*1c: mov     %rax, +0x28(%rcx)        */
  0x48, 0x8b, 0x7c, 0x24, 0x08,             /*20: mov     +0x8(%rsp), %rdi         */
  0xff, 0x93, 0xb8, 0x01, 0x00, 0x00,       /*25: callq   +0x1b8(%rbx)             */
  0x48, 0x89, 0xdf,                         /*2b: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*2e: add     $0x10, %rsp              */
  0x5b,                                     /*32: pop     %rbx                     */

};

static void op_raise_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 24)) = a * 16 + 0;
}

static void op_raise_set_args_from_code(uint8_t *op, mrb_code c) {
  op_raise_set_args(op, GETARG_A(c),0,0);
}


/* args: {"b"=>[[8, 0, 28..31]]} */
static uint8_t op_epush[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x43, 0x08,                   /*0d: mov     +0x8(%rbx), %rax         */
  0x48, 0x8b, 0x7b, 0x58,                   /*11: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0x40, 0x20,                   /*15: mov     +0x20(%rax), %rax        */
  0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*19: mov     +0xbc0800(%rax), %rsi    */
  0xff, 0x53, 0x70,                         /*20: callq   +0x70(%rbx)              */
  0x48, 0x89, 0x04, 0x24,                   /*23: mov     %rax, (%rsp)             */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*27: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x40, 0x58,                   /*2c: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*30: mov     +0x18(%rax), %rax        */
  0x8b, 0x48, 0x50,                         /*34: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x20,                   /*37: mov     +0x20(%rax), %rax        */
  0x3b, 0x48, 0x20,                         /*3b: cmp     +0x20(%rax), %ecx        */
  0x7f, 0x69,                               /*3e: jg                               */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*40: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x40, 0x58,                   /*45: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*49: mov     +0x18(%rax), %rax        */
  0x83, 0x78, 0x50, 0x00,                   /*4d: cmpl    $0, +0x50(%rax)          */
  0x74, 0x12,                               /*51: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*53: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x40, 0x58,                   /*58: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*5c: mov     +0x18(%rax), %rax        */
  0xd1, 0x60, 0x50,                         /*60: shll    +0x50(%rax)              */
  0xeb, 0x14,                               /*63: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*65: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x40, 0x58,                   /*6a: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*6e: mov     +0x18(%rax), %rax        */
  0xc7, 0x40, 0x50, 0x10, 0x00, 0x00, 0x00, /*72: movl    $0x10, +0x50(%rax)       */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*79: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x78, 0x58,                   /*7e: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x47, 0x18,                   /*82: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x70, 0x48,                   /*86: mov     +0x48(%rax), %rsi        */
  0x48, 0x63, 0x50, 0x50,                   /*8a: movslq  +0x50(%rax), %rdx        */
  0x48, 0xc1, 0xe2, 0x03,                   /*8e: shl     $0x3, %rdx               */
  0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*92: callq   +0x120(%rbx)             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*98: mov     +0x8(%rsp), %rcx         */
  0x48, 0x8b, 0x49, 0x58,                   /*9d: mov     +0x58(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*a1: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x41, 0x48,                   /*a5: mov     %rax, +0x48(%rcx)        */
  0x48, 0x8b, 0x04, 0x24,                   /*a9: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*ad: mov     +0x8(%rsp), %rcx         */
  0x48, 0x8b, 0x49, 0x58,                   /*b2: mov     +0x58(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*b6: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x20,                   /*ba: mov     +0x20(%rcx), %rcx        */
  0x48, 0x63, 0x51, 0x20,                   /*be: movslq  +0x20(%rcx), %rdx        */
  0x8d, 0x72, 0x01,                         /*c2: lea     +0x1(%rdx), %esi         */
  0x89, 0x71, 0x20,                         /*c5: mov     %esi, +0x20(%rcx)        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*c8: mov     +0x8(%rsp), %rcx         */
  0x48, 0x8b, 0x49, 0x58,                   /*cd: mov     +0x58(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*d1: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x48,                   /*d5: mov     +0x48(%rcx), %rcx        */
  0x48, 0x89, 0x04, 0xd1,                   /*d9: mov     %rax, (%rcx,%rdx,8)      */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*dd: mov     +0x8(%rsp), %rax         */
  0x8b, 0x48, 0x50,                         /*e2: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*e5: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*e9: mov     %ecx, +0xdc(%rax)        */
  0x48, 0x89, 0xdf,                         /*ef: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*f2: add     $0x10, %rsp              */
  0x5b,                                     /*f6: pop     %rbx                     */

};

static void op_epush_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 28)) = b * 8 + 0;
}

static void op_epush_set_args_from_code(uint8_t *op, mrb_code c) {
  op_epush_set_args(op, 0,GETARG_Bx(c),0);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_epop[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x20,                   /*01: sub     $0x20, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x18,             /*08: mov     %rbx, +0x18(%rsp)        */
  0xc7, 0x44, 0x24, 0x14, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x14(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*15: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*1a: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1e: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*22: mov     +0x20(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*26: mov     %rax, +0x8(%rsp)         */
  0x8b, 0x40, 0x20,                         /*2b: mov     +0x20(%rax), %eax        */
  0x89, 0x04, 0x24,                         /*2e: mov     %eax, (%rsp)             */
  0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00,/*31: movl    $0, +0x4(%rsp)           */
  0xeb, 0x32,                               /*39: jmp                              */
  0x0f, 0x1f, 0x44, 0x00, 0x00,             /*3b: nopl    +0(%rax,%rax,1)          */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*40: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*45: mov     +0x58(%rax), %rdi        */
  0x8b, 0x34, 0x24,                         /*49: mov     (%rsp), %esi             */
  0xff, 0xce,                               /*4c: dec     %esi                     */
  0x89, 0x34, 0x24,                         /*4e: mov     %esi, (%rsp)             */
  0xff, 0x93, 0x00, 0x02, 0x00, 0x00,       /*51: callq   +0x200(%rbx)             */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*57: mov     +0x18(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*5c: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*5f: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*63: mov     %ecx, +0xdc(%rax)        */
  0xff, 0x44, 0x24, 0x04,                   /*69: incl    +0x4(%rsp)               */
  0x8b, 0x44, 0x24, 0x04,                   /*6d: mov     +0x4(%rsp), %eax         */
  0x3b, 0x44, 0x24, 0x14,                   /*71: cmp     +0x14(%rsp), %eax        */
  0x7d, 0x19,                               /*75: jge                              */
  0x8b, 0x04, 0x24,                         /*77: mov     (%rsp), %eax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*7a: mov     +0x8(%rsp), %rcx         */
  0x3b, 0x41, 0xd0,                         /*7f: cmp     -0x30(%rcx), %eax        */
  0x0f, 0x9f, 0xc0,                         /*82: setg    %al                      */
  0xeb, 0x0b,                               /*85: jmp                              */
  0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*87: nopw    +0(%rax,%rax,1)          */
  0x31, 0xc0,                               /*90: xor     %eax, %eax               */
  0x84, 0xc0,                               /*92: test    %al, %al                 */
  0x75, 0xaa,                               /*94: jne                              */
  0x48, 0x89, 0xdf,                         /*96: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x20,                   /*99: add     $0x20, %rsp              */
  0x5b,                                     /*9d: pop     %rbx                     */

};

static void op_epop_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_epop_set_args_from_code(uint8_t *op, mrb_code c) {
  op_epop_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 30..33]], "b"=>[[1, 0, 38..41]], "c"=>[[1, 0, 46..49], [1, 0, 69..72]]} */
static uint8_t op_send[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x20,                   /*01: sub     $0x20, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x18,             /*08: mov     %rbx, +0x18(%rsp)        */
  0x48, 0x8b, 0x43, 0x10,                   /*0d: mov     +0x10(%rbx), %rax        */
  0x8b, 0x00,                               /*11: mov     (%rax), %eax             */
  0x83, 0xe0, 0x7f,                         /*13: and     $0x7f, %eax              */
  0x89, 0x44, 0x24, 0x14,                   /*16: mov     %eax, +0x14(%rsp)        */
  0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0xab, 0x00,/*1a: movl    $0xab0000, +0x10(%rsp)   */
  0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0xbc, 0x00,/*22: movl    $0xbc0000, +0xc(%rsp)    */
  0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0xcd, 0x00,/*2a: movl    $0xcd0000, +0x8(%rsp)    */
  0x48, 0x8b, 0x7c, 0x24, 0x18,             /*32: mov     +0x18(%rsp), %rdi        */
  0x8b, 0x74, 0x24, 0x14,                   /*37: mov     +0x14(%rsp), %esi        */
  0x8b, 0x54, 0x24, 0x10,                   /*3b: mov     +0x10(%rsp), %edx        */
  0x8b, 0x4c, 0x24, 0x0c,                   /*3f: mov     +0xc(%rsp), %ecx         */
  0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*43: mov     $0xcd0000, %r8d          */
  0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*49: callq   +0x1e0(%rbx)             */
  0x48, 0x89, 0xdf,                         /*4f: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x20,                   /*52: add     $0x20, %rsp              */
  0x5b,                                     /*56: pop     %rbx                     */

};

static void op_send_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 30)) = a * 1 + 0;
  *((int32_t *)(op + 38)) = b * 1 + 0;
  *((int32_t *)(op + 46)) = c * 1 + 0;
  *((int32_t *)(op + 69)) = c * 1 + 0;
}

static void op_send_set_args_from_code(uint8_t *op, mrb_code c) {
  op_send_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {} */
static uint8_t op_sendb[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*0d: callq   +0x248(%rbx)             */
  0x48, 0x89, 0xdf,                         /*13: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*16: add     $0x10, %rsp              */
  0x5b,                                     /*1a: pop     %rbx                     */

};

static void op_sendb_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
}

static void op_sendb_set_args_from_code(uint8_t *op, mrb_code c) {
  op_sendb_set_args(op, 0,0,0);
}


/* args: {} */
static uint8_t op_fsend[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */

};

static void op_fsend_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
}

static void op_fsend_set_args_from_code(uint8_t *op, mrb_code c) {
  op_fsend_set_args(op, 0,0,0);
}


/* args: {} */
static uint8_t op_call[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x48,                   /*03: sub     $0x48, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x40,             /*0a: mov     %rbx, +0x40(%rsp)        */
  0x48, 0x8b, 0x43, 0x58,                   /*0f: mov     +0x58(%rbx), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*13: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*17: mov     +0x8(%rax), %rax         */
  0x48, 0x8b, 0x08,                         /*1b: mov     (%rax), %rcx             */
  0x48, 0x8b, 0x40, 0x08,                   /*1e: mov     +0x8(%rax), %rax         */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*22: mov     %rax, +0x30(%rsp)        */
  0x48, 0x89, 0x4c, 0x24, 0x28,             /*27: mov     %rcx, +0x28(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*2c: mov     +0x28(%rsp), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*31: mov     %rax, +0x20(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*36: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*3b: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*3f: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*43: mov     +0x20(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x38,             /*47: mov     %rax, +0x38(%rsp)        */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*4c: mov     +0x20(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x20,                   /*51: mov     +0x20(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x48,                   /*55: mov     %rcx, +0x48(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*59: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*5e: mov     +0x38(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*63: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*67: mov     +0x20(%rsp), %rax        */
  0x48, 0x83, 0x78, 0x28, 0x00,             /*6c: cmpq    $0, +0x28(%rax)          */
  0x74, 0x50,                               /*71: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*73: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x28,                   /*78: mov     +0x28(%rax), %rax        */
  0x83, 0x78, 0x20, 0x00,                   /*7c: cmpl    $0, +0x20(%rax)          */
  0x74, 0x13,                               /*80: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*82: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x28,                   /*87: mov     +0x28(%rax), %rax        */
  0x8b, 0x40, 0x20,                         /*8b: mov     +0x20(%rax), %eax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*8e: mov     +0x38(%rsp), %rcx        */
  0x89, 0x01,                               /*93: mov     %eax, (%rcx)             */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*95: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x28,                   /*9a: mov     +0x28(%rax), %rax        */
  0x48, 0x83, 0x78, 0x18, 0x00,             /*9e: cmpq    $0, +0x18(%rax)          */
  0x75, 0x1e,                               /*a3: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*a5: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*aa: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*ae: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*b2: mov     +0x8(%rax), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*b6: mov     +0x20(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x28,                   /*bb: mov     +0x28(%rcx), %rcx        */
  0x48, 0x89, 0x41, 0x18,                   /*bf: mov     %rax, +0x18(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*c3: mov     +0x20(%rsp), %rax        */
  0x8b, 0x00,                               /*c8: mov     (%rax), %eax             */
  0xc1, 0xe8, 0x0b,                         /*ca: shr     $0xb, %eax               */
  0xa8, 0x80,                               /*cd: test    $0x80, %al               */
  0x74, 0x6d,                               /*cf: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*d1: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*d6: mov     +0x40(%rsp), %rcx        */
  0x48, 0x8b, 0x79, 0x58,                   /*db: mov     +0x58(%rcx), %rdi        */
  0x48, 0x8b, 0x74, 0x24, 0x28,             /*df: mov     +0x28(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x30,                   /*e4: mov     +0x30(%rsp), %edx        */
  0xff, 0x50, 0x18,                         /*e8: callq   +0x18(%rax)              */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*eb: mov     %rax, +0x10(%rsp)        */
  0x89, 0x54, 0x24, 0x18,                   /*f0: mov     %edx, +0x18(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*f4: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*f9: mov     +0x18(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x30,             /*fe: mov     %rcx, +0x30(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x28,             /*103: mov     %rax, +0x28(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*108: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*10d: mov     +0x58(%rax), %rdi        */
  0x8b, 0x70, 0x50,                         /*111: mov     +0x50(%rax), %esi        */
  0xff, 0x93, 0x08, 0x01, 0x00, 0x00,       /*114: callq   +0x108(%rbx)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*11a: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*11f: mov     +0x58(%rax), %rax        */
  0x48, 0x83, 0x78, 0x28, 0x00,             /*123: cmpq    $0, +0x28(%rax)          */
  0x0f, 0x84, 0xa6, 0x00, 0x00, 0x00,       /*128: je                               */
  0x48, 0x8b, 0x7c, 0x24, 0x40,             /*12e: mov     +0x40(%rsp), %rdi        */
  0xff, 0x93, 0xb8, 0x01, 0x00, 0x00,       /*133: callq   +0x1b8(%rbx)             */
  0xe9, 0x13, 0x02, 0x00, 0x00,             /*139: jmpq                             */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*13e: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*143: mov     +0x40(%rsp), %rcx        */
  0x48, 0x89, 0x01,                         /*148: mov     %rax, (%rcx)             */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*14b: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*150: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*154: mov     +0x40(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*159: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*15d: mov     +0x40(%rsp), %rax        */
  0x48, 0x83, 0x78, 0x08, 0x00,             /*162: cmpq    $0, +0x8(%rax)           */
  0x0f, 0x84, 0x29, 0x01, 0x00, 0x00,       /*167: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*16d: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*172: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x10,                   /*176: mov     +0x10(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x20,                   /*17a: mov     %rcx, +0x20(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*17e: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*183: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x18,                   /*187: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x28,                   /*18b: mov     %rcx, +0x28(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*18f: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*194: mov     +0x8(%rax), %rax         */
  0x0f, 0xb7, 0x40, 0x02,                   /*198: movzwl  +0x2(%rax), %eax         */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*19c: mov     +0x38(%rsp), %rcx        */
  0x89, 0x41, 0x18,                         /*1a1: mov     %eax, +0x18(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*1a4: mov     +0x38(%rsp), %rax        */
  0x83, 0x78, 0x40, 0x00,                   /*1a9: cmpl    $0, +0x40(%rax)          */
  0x0f, 0x88, 0x21, 0x01, 0x00, 0x00,       /*1ad: js                               */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*1b3: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*1b8: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x78, 0x58,                   /*1bc: mov     +0x58(%rax), %rdi        */
  0x0f, 0xb7, 0x71, 0x02,                   /*1c0: movzwl  +0x2(%rcx), %esi         */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*1c4: mov     +0x38(%rsp), %rax        */
  0x8b, 0x50, 0x40,                         /*1c9: mov     +0x40(%rax), %edx        */
  0x83, 0xc2, 0x02,                         /*1cc: add     $0x2, %edx               */
  0xe9, 0x2d, 0x01, 0x00, 0x00,             /*1cf: jmpq                             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*1d4: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*1d9: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1dd: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*1e1: mov     +0x20(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x38,             /*1e5: mov     %rax, +0x38(%rsp)        */
  0x48, 0x8b, 0x40, 0x10,                   /*1ea: mov     +0x10(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*1ee: mov     +0x40(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x58,                   /*1f3: mov     +0x58(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*1f7: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*1fb: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*1ff: mov     +0x40(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x18,                   /*204: mov     %rax, +0x18(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*208: mov     +0x38(%rsp), %rax        */
  0x48, 0x63, 0x40, 0x44,                   /*20d: movslq  +0x44(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*211: mov     +0x40(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*216: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*21a: shl     $0x4, %rax               */
  0x48, 0x8b, 0x54, 0x24, 0x28,             /*21e: mov     +0x28(%rsp), %rdx        */
  0x48, 0x8b, 0x74, 0x24, 0x30,             /*223: mov     +0x30(%rsp), %rsi        */
  0x48, 0x89, 0x74, 0x01, 0x08,             /*228: mov     %rsi, +0x8(%rcx,%rax,1)  */
  0x48, 0x89, 0x14, 0x01,                   /*22d: mov     %rdx, (%rcx,%rax,1)      */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*231: mov     +0x38(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x30,                   /*236: mov     +0x30(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*23a: mov     +0x40(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x10,                   /*23f: mov     %rax, +0x10(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*243: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*248: mov     +0x58(%rax), %rdi        */
  0xff, 0x93, 0x58, 0x01, 0x00, 0x00,       /*24c: callq   +0x158(%rbx)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*252: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x58,                   /*257: mov     +0x58(%rax), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*25b: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x20,                   /*25f: mov     +0x20(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x08,                   /*263: mov     +0x8(%rcx), %rcx         */
  0x48, 0x8b, 0x49, 0x18,                   /*267: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x08,                   /*26b: mov     %rcx, +0x8(%rax)         */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*26f: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*274: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x10,                   /*278: mov     +0x10(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x20,                   /*27c: mov     %rcx, +0x20(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*280: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*285: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x18,                   /*289: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x28,                   /*28d: mov     %rcx, +0x28(%rax)        */
  0xe9, 0xbb, 0x00, 0x00, 0x00,             /*291: jmpq                             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*296: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*29b: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*29f: mov     +0x18(%rax), %rax        */
  0x4c, 0x8b, 0x70, 0x08,                   /*2a3: mov     +0x8(%rax), %r14         */
  0xff, 0x93, 0xb8, 0x00, 0x00, 0x00,       /*2a7: callq   +0xb8(%rbx)              */
  0x48, 0x89, 0x04, 0x24,                   /*2ad: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*2b1: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*2b5: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*2b9: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x4e, 0x08,                   /*2be: mov     %rcx, +0x8(%r14)         */
  0x49, 0x89, 0x06,                         /*2c2: mov     %rax, (%r14)             */
  0x48, 0x8b, 0x7c, 0x24, 0x40,             /*2c5: mov     +0x40(%rsp), %rdi        */
  0x31, 0xf6,                               /*2ca: xor     %esi, %esi               */
  0xff, 0x93, 0x80, 0x00, 0x00, 0x00,       /*2cc: callq   +0x80(%rbx)              */
  0xeb, 0x7d,                               /*2d2: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*2d4: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*2d9: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x78, 0x58,                   /*2dd: mov     +0x58(%rax), %rdi        */
  0x0f, 0xb7, 0x41, 0x02,                   /*2e1: movzwl  +0x2(%rcx), %eax         */
  0xbe, 0x03, 0x00, 0x00, 0x00,             /*2e5: mov     $0x3, %esi               */
  0x83, 0xf8, 0x03,                         /*2ea: cmp     $0x3, %eax               */
  0x7c, 0x0d,                               /*2ed: jl                               */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*2ef: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*2f4: mov     +0x8(%rax), %rax         */
  0x0f, 0xb7, 0x70, 0x02,                   /*2f8: movzwl  +0x2(%rax), %esi         */
  0xba, 0x03, 0x00, 0x00, 0x00,             /*2fc: mov     $0x3, %edx               */
  0xff, 0x93, 0x30, 0x01, 0x00, 0x00,       /*301: callq   +0x130(%rbx)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*307: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x58,                   /*30c: mov     +0x58(%rax), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*310: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x08,                   /*314: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x18,                   /*318: mov     %rcx, +0x18(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*31c: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*321: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*325: mov     +0x20(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x28,                   /*32a: mov     +0x28(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*32e: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x11,                         /*332: mov     (%rcx), %rdx             */
  0x48, 0x8b, 0x49, 0x08,                   /*335: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x08,                   /*339: mov     %rcx, +0x8(%rax)         */
  0x48, 0x89, 0x10,                         /*33d: mov     %rdx, (%rax)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*340: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*345: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x08,                   /*349: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x10,                   /*34d: mov     %rcx, +0x10(%rax)        */
  0x48, 0x89, 0xdf,                         /*351: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x48,                   /*354: add     $0x48, %rsp              */
  0x5b,                                     /*358: pop     %rbx                     */
  0x41, 0x5e,                               /*359: pop     %r14                     */

};

static void op_call_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
}

static void op_call_set_args_from_code(uint8_t *op, mrb_code c) {
  op_call_set_args(op, 0,0,0);
}


/* args: {"a"=>[[1, 0, 48..51]], "c"=>[[1, 0, 56..59]]} */
static uint8_t op_super[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x41, 0x55,                               /*04: push    %r13                     */
  0x41, 0x54,                               /*06: push    %r12                     */
  0x53,                                     /*08: push    %rbx                     */
  0x48, 0x83, 0xec, 0x70,                   /*09: sub     $0x70, %rsp              */
  0x49, 0x89, 0xfd,                         /*0d: mov     %rdi, %r13               */
  0x4c, 0x89, 0x6c, 0x24, 0x68,             /*10: mov     %r13, +0x68(%rsp)        */
  0x49, 0x8b, 0x45, 0x58,                   /*15: mov     +0x58(%r13), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*19: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*1d: mov     +0x20(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x50,             /*21: mov     %rax, +0x50(%rsp)        */
  0x8b, 0x00,                               /*26: mov     (%rax), %eax             */
  0x89, 0x44, 0x24, 0x3c,                   /*28: mov     %eax, +0x3c(%rsp)        */
  0xc7, 0x44, 0x24, 0x38, 0x00, 0x00, 0xab, 0x00,/*2c: movl    $0xab0000, +0x38(%rsp)   */
  0xc7, 0x44, 0x24, 0x34, 0x00, 0x00, 0xcd, 0x00,/*34: movl    $0xcd0000, +0x34(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*3c: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*41: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x08,                         /*45: mov     (%rax), %rcx             */
  0x48, 0x8b, 0x40, 0x08,                   /*48: mov     +0x8(%rax), %rax         */
  0x48, 0x89, 0x44, 0x24, 0x60,             /*4c: mov     %rax, +0x60(%rsp)        */
  0x48, 0x89, 0x4c, 0x24, 0x58,             /*51: mov     %rcx, +0x58(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*56: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*5b: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*5f: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*63: mov     +0x20(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x48,                   /*67: mov     +0x48(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x28,                   /*6b: mov     +0x28(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x40,             /*6f: mov     %rax, +0x40(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*74: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*79: mov     +0x58(%rax), %rdi        */
  0x8b, 0x54, 0x24, 0x3c,                   /*7d: mov     +0x3c(%rsp), %edx        */
  0x48, 0x8d, 0x74, 0x24, 0x40,             /*81: lea     +0x40(%rsp), %rsi        */
  0x41, 0xff, 0x95, 0xc8, 0x00, 0x00, 0x00, /*86: callq   +0xc8(%r13)              */
  0x48, 0x89, 0x44, 0x24, 0x48,             /*8d: mov     %rax, +0x48(%rsp)        */
  0x48, 0x85, 0xc0,                         /*92: test    %rax, %rax               */
  0x0f, 0x85, 0xfe, 0x00, 0x00, 0x00,       /*95: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*9b: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*a0: mov     +0x58(%rax), %rdi        */
  0x49, 0x8b, 0xb5, 0x90, 0x02, 0x00, 0x00, /*a4: mov     +0x290(%r13), %rsi       */
  0xba, 0x0e, 0x00, 0x00, 0x00,             /*ab: mov     $0xe, %edx               */
  0x41, 0xff, 0x95, 0x80, 0x02, 0x00, 0x00, /*b0: callq   +0x280(%r13)             */
  0x89, 0x44, 0x24, 0x3c,                   /*b7: mov     %eax, +0x3c(%rsp)        */
  0x48, 0x8b, 0x4c, 0x24, 0x68,             /*bb: mov     +0x68(%rsp), %rcx        */
  0x48, 0x8b, 0x79, 0x58,                   /*c0: mov     +0x58(%rcx), %rdi        */
  0x48, 0x8d, 0x74, 0x24, 0x40,             /*c4: lea     +0x40(%rsp), %rsi        */
  0x89, 0xc2,                               /*c9: mov     %eax, %edx               */
  0x41, 0xff, 0x95, 0xc8, 0x00, 0x00, 0x00, /*cb: callq   +0xc8(%r13)              */
  0x48, 0x89, 0x44, 0x24, 0x48,             /*d2: mov     %rax, +0x48(%rsp)        */
  0x83, 0x7c, 0x24, 0x34, 0x7f,             /*d7: cmpl    $0x7f, +0x34(%rsp)       */
  0x75, 0x55,                               /*dc: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*de: mov     +0x68(%rsp), %rax        */
  0x4c, 0x8b, 0x78, 0x18,                   /*e3: mov     +0x18(%rax), %r15        */
  0x4c, 0x8b, 0x70, 0x58,                   /*e7: mov     +0x58(%rax), %r14        */
  0x4c, 0x63, 0x64, 0x24, 0x38,             /*eb: movslq  +0x38(%rsp), %r12        */
  0x49, 0xc1, 0xe4, 0x04,                   /*f0: shl     $0x4, %r12               */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*f4: mov     +0x50(%rsp), %rax        */
  0x8b, 0x38,                               /*f9: mov     (%rax), %edi             */
  0x41, 0xff, 0x95, 0x48, 0x01, 0x00, 0x00, /*fb: callq   +0x148(%r13)             */
  0x41, 0x89, 0xd0,                         /*102: mov     %edx, %r8d               */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*105: mov     %rax, +0x20(%rsp)        */
  0x44, 0x89, 0x44, 0x24, 0x28,             /*10a: mov     %r8d, +0x28(%rsp)        */
  0x4b, 0x8b, 0x74, 0x3c, 0x10,             /*10f: mov     +0x10(%r12,%r15,1), %rsi */
  0x43, 0x8b, 0x54, 0x3c, 0x18,             /*114: mov     +0x18(%r12,%r15,1), %edx */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*119: mov     +0x20(%rsp), %rcx        */
  0x4c, 0x89, 0xf7,                         /*11e: mov     %r14, %rdi               */
  0x41, 0xff, 0x95, 0x20, 0x02, 0x00, 0x00, /*121: callq   +0x220(%r13)             */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*128: mov     %rax, +0x10(%rsp)        */
  0x89, 0x54, 0x24, 0x18,                   /*12d: mov     %edx, +0x18(%rsp)        */
  0xeb, 0x66,                               /*131: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*133: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*138: mov     +0x18(%rax), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x38,             /*13c: movslq  +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*141: shl     $0x4, %rcx               */
  0x48, 0x8d, 0x7c, 0x08, 0x20,             /*145: lea     +0x20(%rax,%rcx,1), %rdi */
  0x48, 0x8d, 0x74, 0x08, 0x10,             /*14a: lea     +0x10(%rax,%rcx,1), %rsi */
  0x48, 0x63, 0x54, 0x24, 0x34,             /*14f: movslq  +0x34(%rsp), %rdx        */
  0x48, 0xff, 0xc2,                         /*154: inc     %rdx                     */
  0x89, 0x54, 0x24, 0x34,                   /*157: mov     %edx, +0x34(%rsp)        */
  0x41, 0xff, 0x95, 0xa0, 0x00, 0x00, 0x00, /*15b: callq   +0xa0(%r13)              */
  0x48, 0x63, 0x44, 0x24, 0x38,             /*162: movslq  +0x38(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*167: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x68,             /*16b: mov     +0x68(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*170: mov     +0x18(%rcx), %rcx        */
  0xc7, 0x44, 0x08, 0x18, 0x04, 0x00, 0x00, 0x00,/*174: movl    $0x4, +0x18(%rax,%rcx,1) */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*17c: mov     +0x50(%rsp), %rax        */
  0x8b, 0x00,                               /*181: mov     (%rax), %eax             */
  0x48, 0x63, 0x4c, 0x24, 0x38,             /*183: movslq  +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*188: shl     $0x4, %rcx               */
  0x48, 0x8b, 0x54, 0x24, 0x68,             /*18c: mov     +0x68(%rsp), %rdx        */
  0x48, 0x8b, 0x52, 0x18,                   /*191: mov     +0x18(%rdx), %rdx        */
  0x89, 0x44, 0x11, 0x10,                   /*195: mov     %eax, +0x10(%rcx,%rdx,1) */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*199: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*19e: mov     +0x58(%rax), %rdi        */
  0x41, 0xff, 0x95, 0xe0, 0x00, 0x00, 0x00, /*1a2: callq   +0xe0(%r13)              */
  0x48, 0x89, 0x44, 0x24, 0x50,             /*1a9: mov     %rax, +0x50(%rsp)        */
  0x8b, 0x4c, 0x24, 0x3c,                   /*1ae: mov     +0x3c(%rsp), %ecx        */
  0x89, 0x08,                               /*1b2: mov     %ecx, (%rax)             */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*1b4: mov     +0x48(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*1b9: mov     +0x50(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*1be: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*1c2: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*1c7: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1cb: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*1cf: mov     +0x8(%rax), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*1d3: mov     +0x50(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x10,                   /*1d8: mov     %rax, +0x10(%rcx)        */
  0x83, 0x7c, 0x24, 0x34, 0x7f,             /*1dc: cmpl    $0x7f, +0x34(%rsp)       */
  0x75, 0x0e,                               /*1e1: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*1e3: mov     +0x50(%rsp), %rax        */
  0xc7, 0x40, 0x40, 0xff, 0xff, 0xff, 0xff, /*1e8: movl    $0xffffffff, +0x40(%rax) */
  0xeb, 0x0c,                               /*1ef: jmp                              */
  0x8b, 0x44, 0x24, 0x34,                   /*1f1: mov     +0x34(%rsp), %eax        */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*1f5: mov     +0x50(%rsp), %rcx        */
  0x89, 0x41, 0x40,                         /*1fa: mov     %eax, +0x40(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*1fd: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*202: mov     +0x50(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x48,                   /*207: mov     %rax, +0x48(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*20b: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x10,                   /*210: mov     +0x10(%rax), %rax        */
  0x48, 0x83, 0xc0, 0x04,                   /*214: add     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*218: mov     +0x50(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x30,                   /*21d: mov     %rax, +0x30(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*221: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*226: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*22a: mov     +0x18(%rax), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x38,             /*22e: movslq  +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*233: shl     $0x4, %rcx               */
  0x48, 0x01, 0x48, 0x08,                   /*237: add     %rcx, +0x8(%rax)         */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*23b: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*240: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*244: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*248: mov     +0x8(%rax), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x58,             /*24c: mov     +0x58(%rsp), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x60,             /*251: mov     +0x60(%rsp), %rdx        */
  0x48, 0x89, 0x50, 0x08,                   /*256: mov     %rdx, +0x8(%rax)         */
  0x48, 0x89, 0x08,                         /*25a: mov     %rcx, (%rax)             */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*25d: mov     +0x48(%rsp), %rax        */
  0x8b, 0x00,                               /*262: mov     (%rax), %eax             */
  0xc1, 0xe8, 0x0b,                         /*264: shr     $0xb, %eax               */
  0xa8, 0x80,                               /*267: test    $0x80, %al               */
  0x74, 0x1c,                               /*269: je                               */
  0x83, 0x7c, 0x24, 0x34, 0x7f,             /*26b: cmpl    $0x7f, +0x34(%rsp)       */
  0x0f, 0x85, 0xb1, 0x00, 0x00, 0x00,       /*270: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*276: mov     +0x50(%rsp), %rax        */
  0xc7, 0x40, 0x18, 0x03, 0x00, 0x00, 0x00, /*27b: movl    $0x3, +0x18(%rax)        */
  0xe9, 0xaf, 0x00, 0x00, 0x00,             /*282: jmpq                             */
  0x8b, 0x44, 0x24, 0x38,                   /*287: mov     +0x38(%rsp), %eax        */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*28b: mov     +0x50(%rsp), %rcx        */
  0x89, 0x41, 0x44,                         /*290: mov     %eax, +0x44(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*293: mov     +0x48(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*298: mov     +0x50(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*29d: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*2a1: mov     +0x48(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*2a6: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x68,             /*2aa: mov     +0x68(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*2af: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*2b3: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*2b8: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x10,                   /*2bc: mov     +0x10(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x20,                   /*2c0: mov     %rcx, +0x20(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*2c4: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*2c9: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x18,                   /*2cd: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x28,                   /*2d1: mov     %rcx, +0x28(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*2d5: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*2da: mov     +0x8(%rax), %rax         */
  0x0f, 0xb7, 0x40, 0x02,                   /*2de: movzwl  +0x2(%rax), %eax         */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*2e2: mov     +0x50(%rsp), %rcx        */
  0x89, 0x41, 0x18,                         /*2e7: mov     %eax, +0x18(%rcx)        */
  0x83, 0x7c, 0x24, 0x34, 0x7f,             /*2ea: cmpl    $0x7f, +0x34(%rsp)       */
  0x0f, 0x85, 0xe0, 0x00, 0x00, 0x00,       /*2ef: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*2f5: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*2fa: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x78, 0x58,                   /*2fe: mov     +0x58(%rax), %rdi        */
  0x0f, 0xb7, 0x41, 0x02,                   /*302: movzwl  +0x2(%rcx), %eax         */
  0xbe, 0x03, 0x00, 0x00, 0x00,             /*306: mov     $0x3, %esi               */
  0x83, 0xf8, 0x03,                         /*30b: cmp     $0x3, %eax               */
  0x7c, 0x0d,                               /*30e: jl                               */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*310: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*315: mov     +0x8(%rax), %rax         */
  0x0f, 0xb7, 0x70, 0x02,                   /*319: movzwl  +0x2(%rax), %esi         */
  0xba, 0x03, 0x00, 0x00, 0x00,             /*31d: mov     $0x3, %edx               */
  0xe9, 0xca, 0x00, 0x00, 0x00,             /*322: jmpq                             */
  0x8b, 0x44, 0x24, 0x34,                   /*327: mov     +0x34(%rsp), %eax        */
  0x83, 0xc0, 0x02,                         /*32b: add     $0x2, %eax               */
  0x48, 0x8b, 0x4c, 0x24, 0x50,             /*32e: mov     +0x50(%rsp), %rcx        */
  0x89, 0x41, 0x18,                         /*333: mov     %eax, +0x18(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*336: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*33b: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x47, 0x18,                   /*33f: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x58, 0x08,                   /*343: mov     +0x8(%rax), %rbx         */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*347: mov     +0x48(%rsp), %rax        */
  0x48, 0x8b, 0x74, 0x24, 0x58,             /*34c: mov     +0x58(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x60,                   /*351: mov     +0x60(%rsp), %edx        */
  0xff, 0x50, 0x18,                         /*355: callq   +0x18(%rax)              */
  0x48, 0x89, 0x04, 0x24,                   /*358: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*35c: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*360: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*364: mov     +0x8(%rsp), %rcx         */
  0x48, 0x89, 0x4b, 0x08,                   /*369: mov     %rcx, +0x8(%rbx)         */
  0x48, 0x89, 0x03,                         /*36d: mov     %rax, (%rbx)             */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*370: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*375: mov     +0x58(%rax), %rdi        */
  0x8b, 0x70, 0x50,                         /*379: mov     +0x50(%rax), %esi        */
  0x41, 0xff, 0x95, 0x08, 0x01, 0x00, 0x00, /*37c: callq   +0x108(%r13)             */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*383: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*388: mov     +0x58(%rax), %rax        */
  0x48, 0x83, 0x78, 0x28, 0x00,             /*38c: cmpq    $0, +0x28(%rax)          */
  0x74, 0x0e,                               /*391: je                               */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*393: mov     +0x68(%rsp), %rdi        */
  0x41, 0xff, 0x95, 0xb8, 0x01, 0x00, 0x00, /*398: callq   +0x1b8(%r13)             */
  0xeb, 0x7d,                               /*39f: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*3a1: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*3a6: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*3aa: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x48, 0x20,                   /*3ae: mov     +0x20(%rax), %rcx        */
  0x48, 0x8b, 0x49, 0x10,                   /*3b2: mov     +0x10(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x08,                   /*3b6: mov     %rcx, +0x8(%rax)         */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*3ba: mov     +0x68(%rsp), %rax        */
  0x48, 0x89, 0x48, 0x18,                   /*3bf: mov     %rcx, +0x18(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*3c3: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*3c8: mov     +0x58(%rax), %rdi        */
  0x41, 0xff, 0x95, 0x58, 0x01, 0x00, 0x00, /*3cc: callq   +0x158(%r13)             */
  0xeb, 0x49,                               /*3d3: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*3d5: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*3da: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x78, 0x58,                   /*3de: mov     +0x58(%rax), %rdi        */
  0x0f, 0xb7, 0x71, 0x02,                   /*3e2: movzwl  +0x2(%rcx), %esi         */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*3e6: mov     +0x50(%rsp), %rax        */
  0x8b, 0x50, 0x40,                         /*3eb: mov     +0x40(%rax), %edx        */
  0x83, 0xc2, 0x02,                         /*3ee: add     $0x2, %edx               */
  0x41, 0xff, 0x95, 0x30, 0x01, 0x00, 0x00, /*3f1: callq   +0x130(%r13)             */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*3f8: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x58,                   /*3fd: mov     +0x58(%rax), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*401: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x08,                   /*405: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x18,                   /*409: mov     %rcx, +0x18(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*40d: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*412: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x08,                   /*416: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x10,                   /*41a: mov     %rcx, +0x10(%rax)        */
  0x4c, 0x89, 0xef,                         /*41e: mov     %r13, %rdi               */
  0x48, 0x83, 0xc4, 0x70,                   /*421: add     $0x70, %rsp              */
  0x5b,                                     /*425: pop     %rbx                     */
  0x41, 0x5c,                               /*426: pop     %r12                     */
  0x41, 0x5d,                               /*428: pop     %r13                     */
  0x41, 0x5e,                               /*42a: pop     %r14                     */
  0x41, 0x5f,                               /*42c: pop     %r15                     */

};

static void op_super_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 48)) = a * 1 + 0;
  *((int32_t *)(op + 56)) = c * 1 + 0;
}

static void op_super_set_args_from_code(uint8_t *op, mrb_code c) {
  op_super_set_args(op, GETARG_A(c),0,GETARG_C(c));
}


/* args: {"a"=>[[1, 0, 32..35]], "b"=>[[1, 0, 43..46]]} */
static uint8_t op_argary[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x41, 0x54,                               /*04: push    %r12                     */
  0x53,                                     /*06: push    %rbx                     */
  0x48, 0x81, 0xec, 0xa8, 0x00, 0x00, 0x00, /*07: sub     $0xa8, %rsp              */
  0x49, 0x89, 0xfc,                         /*0e: mov     %rdi, %r12               */
  0x4c, 0x89, 0xa4, 0x24, 0xa0, 0x00, 0x00, 0x00,/*11: mov     %r12, +0xa0(%rsp)        */
  0xc7, 0x84, 0x24, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xab, 0x00,/*19: movl    $0xab0000, +0x9c(%rsp)   */
  0xc7, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x00,/*24: movl    $0xbc0000, +0x98(%rsp)   */
  0xc7, 0x84, 0x24, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,/*2f: movl    $0, +0x94(%rsp)          */
  0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, /*3a: mov     +0x98(%rsp), %eax        */
  0xc1, 0xe8, 0x09,                         /*41: shr     $0x9, %eax               */
  0x83, 0xe0, 0x01,                         /*44: and     $0x1, %eax               */
  0x89, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00, /*47: mov     %eax, +0x90(%rsp)        */
  0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, /*4e: mov     +0x98(%rsp), %eax        */
  0xc1, 0xe8, 0x04,                         /*55: shr     $0x4, %eax               */
  0x83, 0xe0, 0x1f,                         /*58: and     $0x1f, %eax              */
  0x89, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, /*5b: mov     %eax, +0x8c(%rsp)        */
  0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00, /*62: mov     +0x98(%rsp), %eax        */
  0x83, 0xe0, 0x0f,                         /*69: and     $0xf, %eax               */
  0x89, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, /*6c: mov     %eax, +0x88(%rsp)        */
  0x74, 0x32,                               /*73: je                               */
  0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00,/*75: mov     +0xa0(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*7d: mov     +0x58(%rax), %rdi        */
  0x8b, 0xb4, 0x24, 0x88, 0x00, 0x00, 0x00, /*81: mov     +0x88(%rsp), %esi        */
  0xff, 0xce,                               /*88: dec     %esi                     */
  0x41, 0xff, 0x94, 0x24, 0x70, 0x02, 0x00, 0x00,/*8a: callq   +0x270(%r12)             */
  0x48, 0x89, 0x44, 0x24, 0x78,             /*92: mov     %rax, +0x78(%rsp)        */
  0x48, 0x85, 0xc0,                         /*97: test    %rax, %rax               */
  0x0f, 0x84, 0x81, 0x02, 0x00, 0x00,       /*9a: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x78,             /*a0: mov     +0x78(%rsp), %rax        */
  0xeb, 0x08,                               /*a5: jmp                              */
  0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00,/*a7: mov     +0xa0(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*af: mov     +0x18(%rax), %rax        */
  0x48, 0x83, 0xc0, 0x10,                   /*b3: add     $0x10, %rax              */
  0x48, 0x89, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00,/*b7: mov     %rax, +0x80(%rsp)        */
  0x83, 0xbc, 0x24, 0x90, 0x00, 0x00, 0x00, 0x00,/*bf: cmpl    $0, +0x90(%rsp)          */
  0x0f, 0x84, 0x8f, 0x01, 0x00, 0x00,       /*c7: je                               */
  0x48, 0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x00,/*cd: movq    $0, +0x28(%rsp)          */
  0xc7, 0x44, 0x24, 0x1c, 0x00, 0x00, 0x00, 0x00,/*d6: movl    $0, +0x1c(%rsp)          */
  0x48, 0x63, 0x84, 0x24, 0x94, 0x00, 0x00, 0x00,/*de: movslq  +0x94(%rsp), %rax        */
  0x48, 0x8b, 0x8c, 0x24, 0x80, 0x00, 0x00, 0x00,/*e6: mov     +0x80(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*ee: shl     $0x4, %rax               */
  0x83, 0x7c, 0x01, 0x08, 0x0e,             /*f2: cmpl    $0xe, +0x8(%rcx,%rax,1)  */
  0x75, 0x32,                               /*f7: jne                              */
  0x48, 0x63, 0x84, 0x24, 0x94, 0x00, 0x00, 0x00,/*f9: movslq  +0x94(%rsp), %rax        */
  0x48, 0x8b, 0x8c, 0x24, 0x80, 0x00, 0x00, 0x00,/*101: mov     +0x80(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*109: shl     $0x4, %rax               */
  0x48, 0x8b, 0x04, 0x01,                   /*10d: mov     (%rcx,%rax,1), %rax      */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*111: mov     %rax, +0x10(%rsp)        */
  0x48, 0x8b, 0x40, 0x28,                   /*116: mov     +0x28(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x28,             /*11a: mov     %rax, +0x28(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*11f: mov     +0x10(%rsp), %rax        */
  0x8b, 0x40, 0x18,                         /*124: mov     +0x18(%rax), %eax        */
  0x89, 0x44, 0x24, 0x1c,                   /*127: mov     %eax, +0x1c(%rsp)        */
  0x48, 0x63, 0x9c, 0x24, 0x9c, 0x00, 0x00, 0x00,/*12b: movslq  +0x9c(%rsp), %rbx        */
  0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00,/*133: mov     +0xa0(%rsp), %rax        */
  0x48, 0xc1, 0xe3, 0x04,                   /*13b: shl     $0x4, %rbx               */
  0x4c, 0x8b, 0x70, 0x18,                   /*13f: mov     +0x18(%rax), %r14        */
  0x48, 0x8b, 0x78, 0x58,                   /*143: mov     +0x58(%rax), %rdi        */
  0x8b, 0xb4, 0x24, 0x94, 0x00, 0x00, 0x00, /*147: mov     +0x94(%rsp), %esi        */
  0x03, 0x74, 0x24, 0x1c,                   /*14e: add     +0x1c(%rsp), %esi        */
  0x03, 0xb4, 0x24, 0x8c, 0x00, 0x00, 0x00, /*152: add     +0x8c(%rsp), %esi        */
  0x41, 0xff, 0x94, 0x24, 0xd0, 0x00, 0x00, 0x00,/*159: callq   +0xd0(%r12)              */
  0x48, 0x89, 0x04, 0x24,                   /*161: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*165: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*169: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*16d: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x4c, 0x1e, 0x08,             /*172: mov     %rcx, +0x8(%r14,%rbx,1)  */
  0x49, 0x89, 0x04, 0x1e,                   /*177: mov     %rax, (%r14,%rbx,1)      */
  0x48, 0x63, 0x84, 0x24, 0x9c, 0x00, 0x00, 0x00,/*17b: movslq  +0x9c(%rsp), %rax        */
  0x48, 0x8b, 0x8c, 0x24, 0xa0, 0x00, 0x00, 0x00,/*183: mov     +0xa0(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*18b: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*18f: shl     $0x4, %rax               */
  0x48, 0x8b, 0x04, 0x01,                   /*193: mov     (%rcx,%rax,1), %rax      */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*197: mov     %rax, +0x20(%rsp)        */
  0x83, 0xbc, 0x24, 0x94, 0x00, 0x00, 0x00, 0x00,/*19c: cmpl    $0, +0x94(%rsp)          */
  0x7e, 0x21,                               /*1a4: jle                              */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*1a6: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x28,                   /*1ab: mov     +0x28(%rax), %rdi        */
  0x48, 0x8b, 0xb4, 0x24, 0x80, 0x00, 0x00, 0x00,/*1af: mov     +0x80(%rsp), %rsi        */
  0x48, 0x63, 0x94, 0x24, 0x94, 0x00, 0x00, 0x00,/*1b7: movslq  +0x94(%rsp), %rdx        */
  0x41, 0xff, 0x94, 0x24, 0x60, 0x02, 0x00, 0x00,/*1bf: callq   +0x260(%r12)             */
  0x83, 0x7c, 0x24, 0x1c, 0x00,             /*1c7: cmpl    $0, +0x1c(%rsp)          */
  0x7e, 0x27,                               /*1cc: jle                              */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*1ce: mov     +0x20(%rsp), %rax        */
  0x48, 0x63, 0xbc, 0x24, 0x94, 0x00, 0x00, 0x00,/*1d3: movslq  +0x94(%rsp), %rdi        */
  0x48, 0xc1, 0xe7, 0x04,                   /*1db: shl     $0x4, %rdi               */
  0x48, 0x03, 0x78, 0x28,                   /*1df: add     +0x28(%rax), %rdi        */
  0x48, 0x8b, 0x74, 0x24, 0x28,             /*1e3: mov     +0x28(%rsp), %rsi        */
  0x48, 0x63, 0x54, 0x24, 0x1c,             /*1e8: movslq  +0x1c(%rsp), %rdx        */
  0x41, 0xff, 0x94, 0x24, 0x60, 0x02, 0x00, 0x00,/*1ed: callq   +0x260(%r12)             */
  0x83, 0xbc, 0x24, 0x8c, 0x00, 0x00, 0x00, 0x00,/*1f5: cmpl    $0, +0x8c(%rsp)          */
  0x7e, 0x41,                               /*1fd: jle                              */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*1ff: mov     +0x20(%rsp), %rax        */
  0x48, 0x63, 0x8c, 0x24, 0x94, 0x00, 0x00, 0x00,/*204: movslq  +0x94(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*20c: shl     $0x4, %rcx               */
  0x48, 0x8b, 0x40, 0x28,                   /*210: mov     +0x28(%rax), %rax        */
  0x48, 0x01, 0xc8,                         /*214: add     %rcx, %rax               */
  0x48, 0x63, 0x7c, 0x24, 0x1c,             /*217: movslq  +0x1c(%rsp), %rdi        */
  0x48, 0xc1, 0xe7, 0x04,                   /*21c: shl     $0x4, %rdi               */
  0x48, 0x01, 0xc7,                         /*220: add     %rax, %rdi               */
  0x48, 0x8b, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00,/*223: mov     +0x80(%rsp), %rax        */
  0x48, 0x8d, 0x74, 0x08, 0x10,             /*22b: lea     +0x10(%rax,%rcx,1), %rsi */
  0x48, 0x63, 0x94, 0x24, 0x8c, 0x00, 0x00, 0x00,/*230: movslq  +0x8c(%rsp), %rdx        */
  0x41, 0xff, 0x94, 0x24, 0x60, 0x02, 0x00, 0x00,/*238: callq   +0x260(%r12)             */
  0x8b, 0x84, 0x24, 0x94, 0x00, 0x00, 0x00, /*240: mov     +0x94(%rsp), %eax        */
  0x03, 0x44, 0x24, 0x1c,                   /*247: add     +0x1c(%rsp), %eax        */
  0x03, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, /*24b: add     +0x8c(%rsp), %eax        */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*252: mov     +0x20(%rsp), %rcx        */
  0x89, 0x41, 0x18,                         /*257: mov     %eax, +0x18(%rcx)        */
  0xeb, 0x56,                               /*25a: jmp                              */
  0x48, 0x63, 0x9c, 0x24, 0x9c, 0x00, 0x00, 0x00,/*25c: movslq  +0x9c(%rsp), %rbx        */
  0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00,/*264: mov     +0xa0(%rsp), %rax        */
  0x48, 0xc1, 0xe3, 0x04,                   /*26c: shl     $0x4, %rbx               */
  0x4c, 0x8b, 0x70, 0x18,                   /*270: mov     +0x18(%rax), %r14        */
  0x48, 0x8b, 0x78, 0x58,                   /*274: mov     +0x58(%rax), %rdi        */
  0x8b, 0xb4, 0x24, 0x94, 0x00, 0x00, 0x00, /*278: mov     +0x94(%rsp), %esi        */
  0x03, 0xb4, 0x24, 0x8c, 0x00, 0x00, 0x00, /*27f: add     +0x8c(%rsp), %esi        */
  0x48, 0x8b, 0x94, 0x24, 0x80, 0x00, 0x00, 0x00,/*286: mov     +0x80(%rsp), %rdx        */
  0x41, 0xff, 0x94, 0x24, 0x30, 0x02, 0x00, 0x00,/*28e: callq   +0x230(%r12)             */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*296: mov     %rax, +0x30(%rsp)        */
  0x89, 0x54, 0x24, 0x38,                   /*29b: mov     %edx, +0x38(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*29f: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*2a4: mov     +0x38(%rsp), %rcx        */
  0x49, 0x89, 0x4c, 0x1e, 0x08,             /*2a9: mov     %rcx, +0x8(%r14,%rbx,1)  */
  0x49, 0x89, 0x04, 0x1e,                   /*2ae: mov     %rax, (%r14,%rbx,1)      */
  0x48, 0x63, 0x84, 0x24, 0x9c, 0x00, 0x00, 0x00,/*2b2: movslq  +0x9c(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*2ba: shl     $0x4, %rax               */
  0x48, 0x8b, 0x8c, 0x24, 0xa0, 0x00, 0x00, 0x00,/*2be: mov     +0xa0(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*2c6: mov     +0x18(%rcx), %rcx        */
  0x48, 0x63, 0x94, 0x24, 0x94, 0x00, 0x00, 0x00,/*2ca: movslq  +0x94(%rsp), %rdx        */
  0x48, 0x63, 0xb4, 0x24, 0x90, 0x00, 0x00, 0x00,/*2d2: movslq  +0x90(%rsp), %rsi        */
  0x48, 0x01, 0xd6,                         /*2da: add     %rdx, %rsi               */
  0x48, 0x63, 0x94, 0x24, 0x8c, 0x00, 0x00, 0x00,/*2dd: movslq  +0x8c(%rsp), %rdx        */
  0x48, 0x01, 0xf2,                         /*2e5: add     %rsi, %rdx               */
  0x48, 0x8b, 0xb4, 0x24, 0x80, 0x00, 0x00, 0x00,/*2e8: mov     +0x80(%rsp), %rsi        */
  0x48, 0xc1, 0xe2, 0x04,                   /*2f0: shl     $0x4, %rdx               */
  0x48, 0x8b, 0x3c, 0x16,                   /*2f4: mov     (%rsi,%rdx,1), %rdi      */
  0x48, 0x8b, 0x54, 0x16, 0x08,             /*2f8: mov     +0x8(%rsi,%rdx,1), %rdx  */
  0x48, 0x89, 0x54, 0x08, 0x18,             /*2fd: mov     %rdx, +0x18(%rax,%rcx,1) */
  0x48, 0x89, 0x7c, 0x08, 0x10,             /*302: mov     %rdi, +0x10(%rax,%rcx,1) */
  0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00,/*307: mov     +0xa0(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*30f: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*312: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*316: mov     %ecx, +0xdc(%rax)        */
  0xe9, 0xa7, 0x00, 0x00, 0x00,             /*31c: jmpq                             */
  0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00,/*321: mov     +0xa0(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*329: mov     +0x58(%rax), %rdi        */
  0x48, 0x89, 0x7c, 0x24, 0x60,             /*32d: mov     %rdi, +0x60(%rsp)        */
  0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00,/*332: mov     +0xa0(%rsp), %rax        */
  0x4c, 0x8b, 0x70, 0x58,                   /*33a: mov     +0x58(%rax), %r14        */
  0x49, 0x8b, 0x44, 0x24, 0x68,             /*33e: mov     +0x68(%r12), %rax        */
  0x48, 0x8b, 0x30,                         /*343: mov     (%rax), %rsi             */
  0x41, 0xff, 0x94, 0x24, 0x10, 0x01, 0x00, 0x00,/*346: callq   +0x110(%r12)             */
  0x49, 0x89, 0xc7,                         /*34e: mov     %rax, %r15               */
  0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00,/*351: mov     +0xa0(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*359: mov     +0x58(%rax), %rdi        */
  0x49, 0x8b, 0xb4, 0x24, 0x98, 0x02, 0x00, 0x00,/*35d: mov     +0x298(%r12), %rsi       */
  0xba, 0x1e, 0x00, 0x00, 0x00,             /*365: mov     $0x1e, %edx              */
  0x41, 0xff, 0x54, 0x24, 0x78,             /*36a: callq   +0x78(%r12)              */
  0x89, 0xd1,                               /*36f: mov     %edx, %ecx               */
  0x48, 0x89, 0x44, 0x24, 0x50,             /*371: mov     %rax, +0x50(%rsp)        */
  0x89, 0x4c, 0x24, 0x58,                   /*376: mov     %ecx, +0x58(%rsp)        */
  0x48, 0x8b, 0x54, 0x24, 0x50,             /*37a: mov     +0x50(%rsp), %rdx        */
  0x4c, 0x89, 0xf7,                         /*37f: mov     %r14, %rdi               */
  0x4c, 0x89, 0xfe,                         /*382: mov     %r15, %rsi               */
  0x41, 0xff, 0x94, 0x24, 0xd0, 0x01, 0x00, 0x00,/*385: callq   +0x1d0(%r12)             */
  0x48, 0x89, 0x44, 0x24, 0x40,             /*38d: mov     %rax, +0x40(%rsp)        */
  0x89, 0x54, 0x24, 0x48,                   /*392: mov     %edx, +0x48(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*396: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x48,             /*39b: mov     +0x48(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x70,             /*3a0: mov     %rcx, +0x70(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x68,             /*3a5: mov     %rax, +0x68(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*3aa: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x60,             /*3af: mov     +0x60(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x28,                   /*3b4: mov     %rax, +0x28(%rcx)        */
  0x48, 0x8b, 0xbc, 0x24, 0xa0, 0x00, 0x00, 0x00,/*3b8: mov     +0xa0(%rsp), %rdi        */
  0x41, 0xff, 0x94, 0x24, 0xb8, 0x01, 0x00, 0x00,/*3c0: callq   +0x1b8(%r12)             */
  0x4c, 0x89, 0xe7,                         /*3c8: mov     %r12, %rdi               */
  0x48, 0x81, 0xc4, 0xa8, 0x00, 0x00, 0x00, /*3cb: add     $0xa8, %rsp              */
  0x5b,                                     /*3d2: pop     %rbx                     */
  0x41, 0x5c,                               /*3d3: pop     %r12                     */
  0x41, 0x5e,                               /*3d5: pop     %r14                     */
  0x41, 0x5f,                               /*3d7: pop     %r15                     */

};

static void op_argary_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 32)) = a * 1 + 0;
  *((int32_t *)(op + 43)) = b * 1 + 0;
}

static void op_argary_set_args_from_code(uint8_t *op, mrb_code c) {
  op_argary_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[1, 0, 42..45]]} */
static uint8_t op_enter[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x53,                                     /*04: push    %rbx                     */
  0x48, 0x81, 0xec, 0xa0, 0x00, 0x00, 0x00, /*05: sub     $0xa0, %rsp              */
  0x49, 0x89, 0xfe,                         /*0c: mov     %rdi, %r14               */
  0x4c, 0x89, 0xb4, 0x24, 0x98, 0x00, 0x00, 0x00,/*0f: mov     %r14, +0x98(%rsp)        */
  0x49, 0x8b, 0x46, 0x10,                   /*17: mov     +0x10(%r14), %rax        */
  0x48, 0x89, 0x84, 0x24, 0x90, 0x00, 0x00, 0x00,/*1b: mov     %rax, +0x90(%rsp)        */
  0xc7, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xab, 0x00,/*23: movl    $0xab0000, +0x8c(%rsp)   */
  0xc7, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,/*2e: movl    $0xa, +0x88(%rsp)        */
  0x8b, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, /*39: mov     +0x8c(%rsp), %eax        */
  0xc1, 0xe8, 0x0d,                         /*40: shr     $0xd, %eax               */
  0x83, 0xe0, 0x1f,                         /*43: and     $0x1f, %eax              */
  0x89, 0x84, 0x24, 0x84, 0x00, 0x00, 0x00, /*46: mov     %eax, +0x84(%rsp)        */
  0x8b, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, /*4d: mov     +0x8c(%rsp), %eax        */
  0xc1, 0xe8, 0x0c,                         /*54: shr     $0xc, %eax               */
  0x83, 0xe0, 0x01,                         /*57: and     $0x1, %eax               */
  0x89, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, /*5a: mov     %eax, +0x80(%rsp)        */
  0x8b, 0x84, 0x24, 0x8c, 0x00, 0x00, 0x00, /*61: mov     +0x8c(%rsp), %eax        */
  0xc1, 0xe8, 0x07,                         /*68: shr     $0x7, %eax               */
  0x83, 0xe0, 0x1f,                         /*6b: and     $0x1f, %eax              */
  0x89, 0x44, 0x24, 0x7c,                   /*6e: mov     %eax, +0x7c(%rsp)        */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*72: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*7a: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*7e: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*82: mov     +0x20(%rax), %rax        */
  0x8b, 0x40, 0x40,                         /*86: mov     +0x40(%rax), %eax        */
  0x89, 0x44, 0x24, 0x78,                   /*89: mov     %eax, +0x78(%rsp)        */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*8d: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*95: mov     +0x18(%rax), %rax        */
  0x48, 0x83, 0xc0, 0x10,                   /*99: add     $0x10, %rax              */
  0x48, 0x89, 0x44, 0x24, 0x70,             /*9d: mov     %rax, +0x70(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x68,             /*a2: mov     %rax, +0x68(%rsp)        */
  0x8b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, /*a7: mov     +0x88(%rsp), %eax        */
  0x03, 0x84, 0x24, 0x84, 0x00, 0x00, 0x00, /*ae: add     +0x84(%rsp), %eax        */
  0x03, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, /*b5: add     +0x80(%rsp), %eax        */
  0x03, 0x44, 0x24, 0x7c,                   /*bc: add     +0x7c(%rsp), %eax        */
  0x89, 0x44, 0x24, 0x64,                   /*c0: mov     %eax, +0x64(%rsp)        */
  0xb8, 0x01, 0x00, 0x00, 0x00,             /*c4: mov     $0x1, %eax               */
  0x83, 0x7c, 0x24, 0x78, 0x00,             /*c9: cmpl    $0, +0x78(%rsp)          */
  0x78, 0x04,                               /*ce: js                               */
  0x8b, 0x44, 0x24, 0x78,                   /*d0: mov     +0x78(%rsp), %eax        */
  0x48, 0x98,                               /*d4: cltq                             */
  0x48, 0xc1, 0xe0, 0x04,                   /*d6: shl     $0x4, %rax               */
  0x48, 0x03, 0x44, 0x24, 0x70,             /*da: add     +0x70(%rsp), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x58,             /*df: mov     %rax, +0x58(%rsp)        */
  0x66, 0xc7, 0x44, 0x24, 0x56, 0x00, 0x00, /*e4: movw    $0, +0x56(%rsp)          */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*eb: mov     +0x58(%rsp), %rax        */
  0x83, 0x78, 0x08, 0x00,                   /*f0: cmpl    $0, +0x8(%rax)           */
  0x75, 0x0a,                               /*f4: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*f6: mov     +0x58(%rsp), %rax        */
  0x83, 0x38, 0x00,                         /*fb: cmpl    $0, (%rax)               */
  0x74, 0x56,                               /*fe: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*100: mov     +0x58(%rsp), %rax        */
  0x83, 0x78, 0x08, 0x0d,                   /*105: cmpl    $0xd, +0x8(%rax)         */
  0x74, 0x4b,                               /*109: je                               */
  0x48, 0x8b, 0x5c, 0x24, 0x58,             /*10b: mov     +0x58(%rsp), %rbx        */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*110: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*118: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x33,                         /*11c: mov     (%rbx), %rsi             */
  0x8b, 0x53, 0x08,                         /*11f: mov     +0x8(%rbx), %edx         */
  0x4d, 0x8b, 0x86, 0xa0, 0x02, 0x00, 0x00, /*122: mov     +0x2a0(%r14), %r8        */
  0x4d, 0x8b, 0x8e, 0xa8, 0x02, 0x00, 0x00, /*129: mov     +0x2a8(%r14), %r9        */
  0xb9, 0x0d, 0x00, 0x00, 0x00,             /*130: mov     $0xd, %ecx               */
  0x41, 0xff, 0x96, 0x18, 0x01, 0x00, 0x00, /*135: callq   +0x118(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x40,             /*13c: mov     %rax, +0x40(%rsp)        */
  0x89, 0x54, 0x24, 0x48,                   /*141: mov     %edx, +0x48(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*145: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x48,             /*14a: mov     +0x48(%rsp), %rcx        */
  0x48, 0x89, 0x4b, 0x08,                   /*14f: mov     %rcx, +0x8(%rbx)         */
  0x48, 0x89, 0x03,                         /*153: mov     %rax, (%rbx)             */
  0x83, 0x7c, 0x24, 0x78, 0x00,             /*156: cmpl    $0, +0x78(%rsp)          */
  0x79, 0x48,                               /*15b: jns                              */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*15d: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*165: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x10,                   /*169: mov     +0x10(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x38,             /*16d: mov     %rax, +0x38(%rsp)        */
  0x48, 0x8b, 0x40, 0x28,                   /*172: mov     +0x28(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x70,             /*176: mov     %rax, +0x70(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*17b: mov     +0x38(%rsp), %rax        */
  0x8b, 0x40, 0x18,                         /*180: mov     +0x18(%rax), %eax        */
  0x89, 0x44, 0x24, 0x78,                   /*183: mov     %eax, +0x78(%rsp)        */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*187: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x18,                   /*18f: mov     +0x18(%rax), %rcx        */
  0x48, 0x8b, 0x78, 0x58,                   /*193: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x71, 0x10,                   /*197: mov     +0x10(%rcx), %rsi        */
  0x8b, 0x51, 0x18,                         /*19b: mov     +0x18(%rcx), %edx        */
  0x41, 0xff, 0x96, 0xe8, 0x01, 0x00, 0x00, /*19e: callq   +0x1e8(%r14)             */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*1a5: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*1ad: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1b1: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*1b5: mov     +0x20(%rax), %rax        */
  0x48, 0x83, 0x78, 0x08, 0x00,             /*1b9: cmpq    $0, +0x8(%rax)           */
  0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00,       /*1be: je                               */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*1c4: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*1cc: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1d0: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*1d4: mov     +0x20(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*1d8: mov     +0x8(%rax), %rax         */
  0x8b, 0x00,                               /*1dc: mov     (%rax), %eax             */
  0xc1, 0xe8, 0x0b,                         /*1de: shr     $0xb, %eax               */
  0xf6, 0xc4, 0x01,                         /*1e1: test    $0x1, %ah                */
  0x74, 0x6a,                               /*1e4: je                               */
  0x83, 0x7c, 0x24, 0x78, 0x00,             /*1e6: cmpl    $0, +0x78(%rsp)          */
  0x0f, 0x88, 0xb6, 0x00, 0x00, 0x00,       /*1eb: js                               */
  0x8b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, /*1f1: mov     +0x88(%rsp), %eax        */
  0x03, 0x44, 0x24, 0x7c,                   /*1f8: add     +0x7c(%rsp), %eax        */
  0x39, 0x44, 0x24, 0x78,                   /*1fc: cmp     %eax, +0x78(%rsp)        */
  0x7c, 0x1c,                               /*200: jl                               */
  0x83, 0xbc, 0x24, 0x80, 0x00, 0x00, 0x00, 0x00,/*202: cmpl    $0, +0x80(%rsp)          */
  0x0f, 0x85, 0x97, 0x00, 0x00, 0x00,       /*20a: jne                              */
  0x8b, 0x44, 0x24, 0x78,                   /*210: mov     +0x78(%rsp), %eax        */
  0x3b, 0x44, 0x24, 0x64,                   /*214: cmp     +0x64(%rsp), %eax        */
  0x0f, 0x8e, 0x89, 0x00, 0x00, 0x00,       /*218: jle                              */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*21e: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*226: mov     +0x58(%rax), %rdi        */
  0x8b, 0xb4, 0x24, 0x88, 0x00, 0x00, 0x00, /*22a: mov     +0x88(%rsp), %esi        */
  0x03, 0x74, 0x24, 0x7c,                   /*231: add     +0x7c(%rsp), %esi        */
  0x41, 0xff, 0x96, 0x88, 0x02, 0x00, 0x00, /*235: callq   +0x288(%r14)             */
  0x48, 0x8b, 0xbc, 0x24, 0x98, 0x00, 0x00, 0x00,/*23c: mov     +0x98(%rsp), %rdi        */
  0x41, 0xff, 0x96, 0xb8, 0x01, 0x00, 0x00, /*244: callq   +0x1b8(%r14)             */
  0xe9, 0x2f, 0x04, 0x00, 0x00,             /*24b: jmpq                             */
  0x83, 0x7c, 0x24, 0x64, 0x02,             /*250: cmpl    $0x2, +0x64(%rsp)        */
  0x7c, 0x50,                               /*255: jl                               */
  0x83, 0x7c, 0x24, 0x78, 0x01,             /*257: cmpl    $0x1, +0x78(%rsp)        */
  0x75, 0x49,                               /*25c: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*25e: mov     +0x70(%rsp), %rax        */
  0x83, 0x78, 0x08, 0x0e,                   /*263: cmpl    $0xe, +0x8(%rax)         */
  0x75, 0x3e,                               /*267: jne                              */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*269: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*271: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*275: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x30,                         /*27a: mov     (%rax), %rsi             */
  0x8b, 0x50, 0x08,                         /*27d: mov     +0x8(%rax), %edx         */
  0x41, 0xff, 0x96, 0xe8, 0x01, 0x00, 0x00, /*280: callq   +0x1e8(%r14)             */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*287: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x00,                         /*28c: mov     (%rax), %rax             */
  0x8b, 0x40, 0x18,                         /*28f: mov     +0x18(%rax), %eax        */
  0x89, 0x44, 0x24, 0x78,                   /*292: mov     %eax, +0x78(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*296: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x00,                         /*29b: mov     (%rax), %rax             */
  0x48, 0x8b, 0x40, 0x28,                   /*29e: mov     +0x28(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x70,             /*2a2: mov     %rax, +0x70(%rsp)        */
  0x8b, 0x44, 0x24, 0x64,                   /*2a7: mov     +0x64(%rsp), %eax        */
  0x48, 0x8b, 0x8c, 0x24, 0x98, 0x00, 0x00, 0x00,/*2ab: mov     +0x98(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x58,                   /*2b3: mov     +0x58(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*2b7: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x20,                   /*2bb: mov     +0x20(%rcx), %rcx        */
  0x89, 0x41, 0x40,                         /*2bf: mov     %eax, +0x40(%rcx)        */
  0x8b, 0x44, 0x24, 0x78,                   /*2c2: mov     +0x78(%rsp), %eax        */
  0x3b, 0x44, 0x24, 0x64,                   /*2c6: cmp     +0x64(%rsp), %eax        */
  0x7d, 0x42,                               /*2ca: jge                              */
  0x8b, 0x44, 0x24, 0x7c,                   /*2cc: mov     +0x7c(%rsp), %eax        */
  0x89, 0x44, 0x24, 0x34,                   /*2d0: mov     %eax, +0x34(%rsp)        */
  0x8b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, /*2d4: mov     +0x88(%rsp), %eax        */
  0x03, 0x44, 0x24, 0x7c,                   /*2db: add     +0x7c(%rsp), %eax        */
  0x39, 0x44, 0x24, 0x78,                   /*2df: cmp     %eax, +0x78(%rsp)        */
  0x0f, 0x8d, 0xdd, 0x01, 0x00, 0x00,       /*2e3: jge                              */
  0x8b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, /*2e9: mov     +0x88(%rsp), %eax        */
  0x3b, 0x44, 0x24, 0x78,                   /*2f0: cmp     +0x78(%rsp), %eax        */
  0x0f, 0x8d, 0xc4, 0x01, 0x00, 0x00,       /*2f4: jge                              */
  0x8b, 0x44, 0x24, 0x78,                   /*2fa: mov     +0x78(%rsp), %eax        */
  0x2b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, /*2fe: sub     +0x88(%rsp), %eax        */
  0x89, 0x44, 0x24, 0x34,                   /*305: mov     %eax, +0x34(%rsp)        */
  0xe9, 0xb8, 0x01, 0x00, 0x00,             /*309: jmpq                             */
  0xc7, 0x44, 0x24, 0x1c, 0x00, 0x00, 0x00, 0x00,/*30e: movl    $0, +0x1c(%rsp)          */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*316: mov     +0x68(%rsp), %rax        */
  0x48, 0x3b, 0x44, 0x24, 0x70,             /*31b: cmp     +0x70(%rsp), %rax        */
  0x74, 0x5a,                               /*320: je                               */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*322: movslq  +0x64(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*327: shl     $0x4, %rax               */
  0x48, 0x8b, 0x8c, 0x24, 0x98, 0x00, 0x00, 0x00,/*32b: mov     +0x98(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*333: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x58,             /*337: mov     +0x58(%rsp), %rdx        */
  0x48, 0x8b, 0x32,                         /*33c: mov     (%rdx), %rsi             */
  0x48, 0x8b, 0x52, 0x08,                   /*33f: mov     +0x8(%rdx), %rdx         */
  0x48, 0x89, 0x54, 0x08, 0x18,             /*343: mov     %rdx, +0x18(%rax,%rcx,1) */
  0x48, 0x89, 0x74, 0x08, 0x10,             /*348: mov     %rsi, +0x10(%rax,%rcx,1) */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*34d: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x18,                   /*355: mov     +0x18(%rax), %rdi        */
  0x48, 0x83, 0xc7, 0x10,                   /*359: add     $0x10, %rdi              */
  0x48, 0x8b, 0x74, 0x24, 0x70,             /*35d: mov     +0x70(%rsp), %rsi        */
  0x48, 0x63, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00,/*362: movslq  +0x88(%rsp), %rax        */
  0x48, 0x63, 0x94, 0x24, 0x84, 0x00, 0x00, 0x00,/*36a: movslq  +0x84(%rsp), %rdx        */
  0x48, 0x01, 0xc2,                         /*372: add     %rax, %rdx               */
  0x41, 0xff, 0x96, 0xa0, 0x00, 0x00, 0x00, /*375: callq   +0xa0(%r14)              */
  0x83, 0xbc, 0x24, 0x80, 0x00, 0x00, 0x00, 0x00,/*37c: cmpl    $0, +0x80(%rsp)          */
  0x74, 0x76,                               /*384: je                               */
  0x8b, 0x74, 0x24, 0x78,                   /*386: mov     +0x78(%rsp), %esi        */
  0x2b, 0xb4, 0x24, 0x88, 0x00, 0x00, 0x00, /*38a: sub     +0x88(%rsp), %esi        */
  0x2b, 0xb4, 0x24, 0x84, 0x00, 0x00, 0x00, /*391: sub     +0x84(%rsp), %esi        */
  0x2b, 0x74, 0x24, 0x7c,                   /*398: sub     +0x7c(%rsp), %esi        */
  0x89, 0x74, 0x24, 0x1c,                   /*39c: mov     %esi, +0x1c(%rsp)        */
  0x48, 0x63, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00,/*3a0: movslq  +0x88(%rsp), %rax        */
  0x48, 0x63, 0x94, 0x24, 0x84, 0x00, 0x00, 0x00,/*3a8: movslq  +0x84(%rsp), %rdx        */
  0x48, 0x8d, 0x1c, 0x10,                   /*3b0: lea     (%rax,%rdx,1), %rbx      */
  0x48, 0xc1, 0xe3, 0x04,                   /*3b4: shl     $0x4, %rbx               */
  0x48, 0x8b, 0x8c, 0x24, 0x98, 0x00, 0x00, 0x00,/*3b8: mov     +0x98(%rsp), %rcx        */
  0x4c, 0x8b, 0x79, 0x18,                   /*3c0: mov     +0x18(%rcx), %r15        */
  0x48, 0x8b, 0x79, 0x58,                   /*3c4: mov     +0x58(%rcx), %rdi        */
  0x48, 0xc1, 0xe0, 0x04,                   /*3c8: shl     $0x4, %rax               */
  0x48, 0x03, 0x44, 0x24, 0x70,             /*3cc: add     +0x70(%rsp), %rax        */
  0x48, 0xc1, 0xe2, 0x04,                   /*3d1: shl     $0x4, %rdx               */
  0x48, 0x01, 0xc2,                         /*3d5: add     %rax, %rdx               */
  0x41, 0xff, 0x96, 0x30, 0x02, 0x00, 0x00, /*3d8: callq   +0x230(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*3df: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*3e4: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*3e8: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*3ed: mov     +0x10(%rsp), %rcx        */
  0x4a, 0x89, 0x4c, 0x3b, 0x18,             /*3f2: mov     %rcx, +0x18(%rbx,%r15,1) */
  0x4a, 0x89, 0x44, 0x3b, 0x10,             /*3f7: mov     %rax, +0x10(%rbx,%r15,1) */
  0x83, 0x7c, 0x24, 0x7c, 0x00,             /*3fc: cmpl    $0, +0x7c(%rsp)          */
  0x74, 0x61,                               /*401: je                               */
  0x8b, 0x44, 0x24, 0x78,                   /*403: mov     +0x78(%rsp), %eax        */
  0x2b, 0x44, 0x24, 0x7c,                   /*407: sub     +0x7c(%rsp), %eax        */
  0x3b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, /*40b: cmp     +0x88(%rsp), %eax        */
  0x7e, 0x50,                               /*412: jle                              */
  0x48, 0x63, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00,/*414: movslq  +0x88(%rsp), %rax        */
  0x48, 0x63, 0x8c, 0x24, 0x84, 0x00, 0x00, 0x00,/*41c: movslq  +0x84(%rsp), %rcx        */
  0x48, 0x01, 0xc1,                         /*424: add     %rax, %rcx               */
  0x48, 0x63, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00,/*427: movslq  +0x80(%rsp), %rax        */
  0x48, 0x01, 0xc8,                         /*42f: add     %rcx, %rax               */
  0x48, 0xc1, 0xe0, 0x04,                   /*432: shl     $0x4, %rax               */
  0x48, 0x8b, 0x94, 0x24, 0x98, 0x00, 0x00, 0x00,/*436: mov     +0x98(%rsp), %rdx        */
  0x48, 0x8b, 0x52, 0x18,                   /*43e: mov     +0x18(%rdx), %rdx        */
  0x48, 0x8d, 0x7c, 0x10, 0x10,             /*442: lea     +0x10(%rax,%rdx,1), %rdi */
  0x48, 0x63, 0x74, 0x24, 0x1c,             /*447: movslq  +0x1c(%rsp), %rsi        */
  0x48, 0x01, 0xce,                         /*44c: add     %rcx, %rsi               */
  0x48, 0xc1, 0xe6, 0x04,                   /*44f: shl     $0x4, %rsi               */
  0x48, 0x03, 0x74, 0x24, 0x70,             /*453: add     +0x70(%rsp), %rsi        */
  0x48, 0x63, 0x54, 0x24, 0x7c,             /*458: movslq  +0x7c(%rsp), %rdx        */
  0x41, 0xff, 0x96, 0xa0, 0x00, 0x00, 0x00, /*45d: callq   +0xa0(%r14)              */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*464: mov     +0x68(%rsp), %rax        */
  0x48, 0x3b, 0x44, 0x24, 0x70,             /*469: cmp     +0x70(%rsp), %rax        */
  0x75, 0x2b,                               /*46e: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*470: movslq  +0x64(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*475: shl     $0x4, %rax               */
  0x48, 0x8b, 0x8c, 0x24, 0x98, 0x00, 0x00, 0x00,/*479: mov     +0x98(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*481: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x58,             /*485: mov     +0x58(%rsp), %rdx        */
  0x48, 0x8b, 0x32,                         /*48a: mov     (%rdx), %rsi             */
  0x48, 0x8b, 0x52, 0x08,                   /*48d: mov     +0x8(%rdx), %rdx         */
  0x48, 0x89, 0x54, 0x08, 0x18,             /*491: mov     %rdx, +0x18(%rax,%rcx,1) */
  0x48, 0x89, 0x74, 0x08, 0x10,             /*496: mov     %rsi, +0x10(%rax,%rcx,1) */
  0x83, 0xbc, 0x24, 0x84, 0x00, 0x00, 0x00, 0x00,/*49b: cmpl    $0, +0x84(%rsp)          */
  0x0f, 0x8e, 0x6f, 0x01, 0x00, 0x00,       /*4a3: jle                              */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*4a9: mov     +0x98(%rsp), %rax        */
  0x48, 0x63, 0x8c, 0x24, 0x84, 0x00, 0x00, 0x00,/*4b1: movslq  +0x84(%rsp), %rcx        */
  0xe9, 0x8b, 0x01, 0x00, 0x00,             /*4b9: jmpq                             */
  0xc7, 0x44, 0x24, 0x34, 0x00, 0x00, 0x00, 0x00,/*4be: movl    $0, +0x34(%rsp)          */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*4c6: movslq  +0x64(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*4cb: shl     $0x4, %rax               */
  0x48, 0x8b, 0x8c, 0x24, 0x98, 0x00, 0x00, 0x00,/*4cf: mov     +0x98(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*4d7: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x58,             /*4db: mov     +0x58(%rsp), %rdx        */
  0x48, 0x8b, 0x32,                         /*4e0: mov     (%rdx), %rsi             */
  0x48, 0x8b, 0x52, 0x08,                   /*4e3: mov     +0x8(%rdx), %rdx         */
  0x48, 0x89, 0x54, 0x08, 0x18,             /*4e7: mov     %rdx, +0x18(%rax,%rcx,1) */
  0x48, 0x89, 0x74, 0x08, 0x10,             /*4ec: mov     %rsi, +0x10(%rax,%rcx,1) */
  0x48, 0x63, 0x44, 0x24, 0x78,             /*4f1: movslq  +0x78(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*4f6: shl     $0x4, %rax               */
  0x48, 0x8b, 0x8c, 0x24, 0x98, 0x00, 0x00, 0x00,/*4fa: mov     +0x98(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*502: mov     +0x18(%rcx), %rcx        */
  0xc7, 0x44, 0x08, 0x18, 0x00, 0x00, 0x00, 0x00,/*506: movl    $0, +0x18(%rax,%rcx,1)   */
  0x48, 0x63, 0x44, 0x24, 0x78,             /*50e: movslq  +0x78(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*513: shl     $0x4, %rax               */
  0x48, 0x8b, 0x8c, 0x24, 0x98, 0x00, 0x00, 0x00,/*517: mov     +0x98(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*51f: mov     +0x18(%rcx), %rcx        */
  0xc7, 0x44, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00,/*523: movl    $0, +0x10(%rax,%rcx,1)   */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*52b: mov     +0x68(%rsp), %rax        */
  0x48, 0x3b, 0x44, 0x24, 0x70,             /*530: cmp     +0x70(%rsp), %rax        */
  0x74, 0x29,                               /*535: je                               */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*537: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x18,                   /*53f: mov     +0x18(%rax), %rdi        */
  0x48, 0x83, 0xc7, 0x10,                   /*543: add     $0x10, %rdi              */
  0x48, 0x8b, 0x74, 0x24, 0x70,             /*547: mov     +0x70(%rsp), %rsi        */
  0x48, 0x63, 0x54, 0x24, 0x78,             /*54c: movslq  +0x78(%rsp), %rdx        */
  0x48, 0x63, 0x44, 0x24, 0x34,             /*551: movslq  +0x34(%rsp), %rax        */
  0x48, 0x29, 0xc2,                         /*556: sub     %rax, %rdx               */
  0x41, 0xff, 0x96, 0xa0, 0x00, 0x00, 0x00, /*559: callq   +0xa0(%r14)              */
  0x83, 0x7c, 0x24, 0x34, 0x00,             /*560: cmpl    $0, +0x34(%rsp)          */
  0x74, 0x3f,                               /*565: je                               */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*567: movslq  +0x64(%rsp), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x7c,             /*56c: movslq  +0x7c(%rsp), %rcx        */
  0x48, 0x29, 0xc8,                         /*571: sub     %rcx, %rax               */
  0x48, 0xc1, 0xe0, 0x04,                   /*574: shl     $0x4, %rax               */
  0x48, 0x8b, 0x8c, 0x24, 0x98, 0x00, 0x00, 0x00,/*578: mov     +0x98(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*580: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8d, 0x7c, 0x08, 0x10,             /*584: lea     +0x10(%rax,%rcx,1), %rdi */
  0x48, 0x63, 0x74, 0x24, 0x78,             /*589: movslq  +0x78(%rsp), %rsi        */
  0x48, 0x63, 0x54, 0x24, 0x34,             /*58e: movslq  +0x34(%rsp), %rdx        */
  0x48, 0x29, 0xd6,                         /*593: sub     %rdx, %rsi               */
  0x48, 0xc1, 0xe6, 0x04,                   /*596: shl     $0x4, %rsi               */
  0x48, 0x03, 0x74, 0x24, 0x70,             /*59a: add     +0x70(%rsp), %rsi        */
  0x41, 0xff, 0x96, 0xa0, 0x00, 0x00, 0x00, /*59f: callq   +0xa0(%r14)              */
  0x83, 0xbc, 0x24, 0x80, 0x00, 0x00, 0x00, 0x00,/*5a6: cmpl    $0, +0x80(%rsp)          */
  0x74, 0x4d,                               /*5ae: je                               */
  0x48, 0x63, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00,/*5b0: movslq  +0x88(%rsp), %rax        */
  0x48, 0x63, 0x9c, 0x24, 0x84, 0x00, 0x00, 0x00,/*5b8: movslq  +0x84(%rsp), %rbx        */
  0x48, 0x01, 0xc3,                         /*5c0: add     %rax, %rbx               */
  0x48, 0xc1, 0xe3, 0x04,                   /*5c3: shl     $0x4, %rbx               */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*5c7: mov     +0x98(%rsp), %rax        */
  0x4c, 0x8b, 0x78, 0x18,                   /*5cf: mov     +0x18(%rax), %r15        */
  0x48, 0x8b, 0x78, 0x58,                   /*5d3: mov     +0x58(%rax), %rdi        */
  0x31, 0xf6,                               /*5d7: xor     %esi, %esi               */
  0x41, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, /*5d9: callq   +0xd0(%r14)              */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*5e0: mov     %rax, +0x20(%rsp)        */
  0x89, 0x54, 0x24, 0x28,                   /*5e5: mov     %edx, +0x28(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*5e9: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x28,             /*5ee: mov     +0x28(%rsp), %rcx        */
  0x4a, 0x89, 0x4c, 0x3b, 0x18,             /*5f3: mov     %rcx, +0x18(%rbx,%r15,1) */
  0x4a, 0x89, 0x44, 0x3b, 0x10,             /*5f8: mov     %rax, +0x10(%rbx,%r15,1) */
  0x83, 0xbc, 0x24, 0x84, 0x00, 0x00, 0x00, 0x00,/*5fd: cmpl    $0, +0x84(%rsp)          */
  0x74, 0x11,                               /*605: je                               */
  0x8b, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00, /*607: mov     +0x88(%rsp), %eax        */
  0x03, 0x44, 0x24, 0x7c,                   /*60e: add     +0x7c(%rsp), %eax        */
  0x39, 0x44, 0x24, 0x78,                   /*612: cmp     %eax, +0x78(%rsp)        */
  0x7d, 0x11,                               /*616: jge                              */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*618: mov     +0x98(%rsp), %rax        */
  0x48, 0x8b, 0x00,                         /*620: mov     (%rax), %rax             */
  0x66, 0x8b, 0x40, 0x38,                   /*623: mov     +0x38(%rax), %ax         */
  0xeb, 0x28,                               /*627: jmp                              */
  0x48, 0x8b, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00,/*629: mov     +0x98(%rsp), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x78,             /*631: movslq  +0x78(%rsp), %rcx        */
  0x48, 0x63, 0x94, 0x24, 0x88, 0x00, 0x00, 0x00,/*636: movslq  +0x88(%rsp), %rdx        */
  0x48, 0x29, 0xd1,                         /*63e: sub     %rdx, %rcx               */
  0x48, 0x63, 0x54, 0x24, 0x7c,             /*641: movslq  +0x7c(%rsp), %rdx        */
  0x48, 0x29, 0xd1,                         /*646: sub     %rdx, %rcx               */
  0x48, 0x8b, 0x00,                         /*649: mov     (%rax), %rax             */
  0x66, 0x8b, 0x44, 0x48, 0x38,             /*64c: mov     +0x38(%rax,%rcx,2), %ax  */
  0x66, 0x89, 0x44, 0x24, 0x56,             /*651: mov     %ax, +0x56(%rsp)         */
  0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00, 0x00,/*656: movl    $0, +0x4(%rsp)           */
  0xeb, 0x04,                               /*65e: jmp                              */
  0xff, 0x44, 0x24, 0x04,                   /*660: incl    +0x4(%rsp)               */
  0x83, 0x7c, 0x24, 0x04, 0x0e,             /*664: cmpl    $0xe, +0x4(%rsp)         */
  0x7e, 0xf5,                               /*669: jle                              */
  0x48, 0x8b, 0xbc, 0x24, 0x98, 0x00, 0x00, 0x00,/*66b: mov     +0x98(%rsp), %rdi        */
  0x0f, 0xb7, 0x74, 0x24, 0x56,             /*673: movzwl  +0x56(%rsp), %esi        */
  0x4c, 0x89, 0xf7,                         /*678: mov     %r14, %rdi               */
  0x48, 0x81, 0xc4, 0xa0, 0x00, 0x00, 0x00, /*67b: add     $0xa0, %rsp              */
  0x5b,                                     /*682: pop     %rbx                     */
  0x41, 0x5e,                               /*683: pop     %r14                     */
  0x41, 0x5f,                               /*685: pop     %r15                     */
  0xff, 0xe6,                               /*687: jmp     %rsi                     */

};

static void op_enter_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 42)) = a * 1 + 0;
}

static void op_enter_set_args_from_code(uint8_t *op, mrb_code c) {
  op_enter_set_args(op, GETARG_Ax(c),0,0);
}


/* args: {} */
static uint8_t op_karg[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */

};

static void op_karg_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
}

static void op_karg_set_args_from_code(uint8_t *op, mrb_code c) {
  op_karg_set_args(op, 0,0,0);
}


/* args: {} */
static uint8_t op_kdict[] = {
  0x48, 0x89, 0x3c, 0x24,                   /*00: mov     %rdi, (%rsp)             */

};

static void op_kdict_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
}

static void op_kdict_set_args_from_code(uint8_t *op, mrb_code c) {
  op_kdict_set_args(op, 0,0,0);
}


/* args: {"b"=>[[1, 0, 14..17]]} */
static uint8_t op_return[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0xbe, 0x00, 0x00, 0xbc, 0x00,             /*0d: mov     $0xbc0000, %esi          */
  0xff, 0x93, 0x80, 0x00, 0x00, 0x00,       /*12: callq   +0x80(%rbx)              */
  0x48, 0x89, 0xdf,                         /*18: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*1b: add     $0x10, %rsp              */
  0x5b,                                     /*1f: pop     %rbx                     */

};

static void op_return_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 14)) = b * 1 + 0;
}

static void op_return_set_args_from_code(uint8_t *op, mrb_code c) {
  op_return_set_args(op, 0,GETARG_B(c),0);
}


/* args: {"a"=>[[1, 0, 28..31]], "c"=>[[1, 0, 36..39]], "b"=>[[4, 0, 51..54]]} */
static uint8_t op_tailcall[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x78,                   /*03: sub     $0x78, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x70,             /*0a: mov     %r14, +0x70(%rsp)        */
  0x49, 0x8b, 0x46, 0x58,                   /*0f: mov     +0x58(%r14), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x68,             /*13: mov     %rax, +0x68(%rsp)        */
  0xc7, 0x44, 0x24, 0x64, 0x00, 0x00, 0xab, 0x00,/*18: movl    $0xab0000, +0x64(%rsp)   */
  0xc7, 0x44, 0x24, 0x60, 0x00, 0x00, 0xcd, 0x00,/*20: movl    $0xcd0000, +0x60(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*28: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x28,                   /*2d: mov     +0x28(%rax), %rax        */
  0x8b, 0x80, 0x00, 0x04, 0xbc, 0x00,       /*31: mov     +0xbc0400(%rax), %eax    */
  0x89, 0x44, 0x24, 0x34,                   /*37: mov     %eax, +0x34(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*3b: movslq  +0x64(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x70,             /*40: mov     +0x70(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*45: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*49: shl     $0x4, %rax               */
  0x48, 0x8b, 0x14, 0x01,                   /*4d: mov     (%rcx,%rax,1), %rdx      */
  0x48, 0x8b, 0x44, 0x01, 0x08,             /*51: mov     +0x8(%rcx,%rax,1), %rax  */
  0x48, 0x89, 0x44, 0x24, 0x40,             /*56: mov     %rax, +0x40(%rsp)        */
  0x48, 0x89, 0x54, 0x24, 0x38,             /*5b: mov     %rdx, +0x38(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*60: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*65: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x74, 0x24, 0x38,             /*69: mov     +0x38(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x40,                   /*6e: mov     +0x40(%rsp), %edx        */
  0x41, 0xff, 0x96, 0x78, 0x02, 0x00, 0x00, /*72: callq   +0x278(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x50,             /*79: mov     %rax, +0x50(%rsp)        */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*7e: mov     +0x68(%rsp), %rdi        */
  0x8b, 0x54, 0x24, 0x34,                   /*83: mov     +0x34(%rsp), %edx        */
  0x48, 0x8d, 0x74, 0x24, 0x50,             /*87: lea     +0x50(%rsp), %rsi        */
  0x41, 0xff, 0x96, 0xc8, 0x00, 0x00, 0x00, /*8c: callq   +0xc8(%r14)              */
  0x48, 0x89, 0x44, 0x24, 0x58,             /*93: mov     %rax, +0x58(%rsp)        */
  0x48, 0x85, 0xc0,                         /*98: test    %rax, %rax               */
  0x0f, 0x85, 0xe0, 0x00, 0x00, 0x00,       /*9b: jne                              */
  0x8b, 0x7c, 0x24, 0x34,                   /*a1: mov     +0x34(%rsp), %edi        */
  0x41, 0xff, 0x96, 0x48, 0x01, 0x00, 0x00, /*a5: callq   +0x148(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*ac: mov     %rax, +0x20(%rsp)        */
  0x89, 0x54, 0x24, 0x28,                   /*b1: mov     %edx, +0x28(%rsp)        */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*b5: mov     +0x68(%rsp), %rdi        */
  0x49, 0x8b, 0xb6, 0x90, 0x02, 0x00, 0x00, /*ba: mov     +0x290(%r14), %rsi       */
  0xba, 0x0e, 0x00, 0x00, 0x00,             /*c1: mov     $0xe, %edx               */
  0x41, 0xff, 0x96, 0x80, 0x02, 0x00, 0x00, /*c6: callq   +0x280(%r14)             */
  0x89, 0x44, 0x24, 0x34,                   /*cd: mov     %eax, +0x34(%rsp)        */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*d1: mov     +0x68(%rsp), %rdi        */
  0x48, 0x8d, 0x74, 0x24, 0x50,             /*d6: lea     +0x50(%rsp), %rsi        */
  0x89, 0xc2,                               /*db: mov     %eax, %edx               */
  0x41, 0xff, 0x96, 0xc8, 0x00, 0x00, 0x00, /*dd: callq   +0xc8(%r14)              */
  0x48, 0x89, 0x44, 0x24, 0x58,             /*e4: mov     %rax, +0x58(%rsp)        */
  0x83, 0x7c, 0x24, 0x60, 0x7f,             /*e9: cmpl    $0x7f, +0x60(%rsp)       */
  0x75, 0x3c,                               /*ee: jne                              */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*f0: mov     +0x68(%rsp), %rdi        */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*f5: movslq  +0x64(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*fa: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x70,             /*fe: mov     +0x70(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*103: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x74, 0x08, 0x10,             /*107: mov     +0x10(%rax,%rcx,1), %rsi */
  0x8b, 0x54, 0x08, 0x18,                   /*10c: mov     +0x18(%rax,%rcx,1), %edx */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*110: mov     +0x20(%rsp), %rcx        */
  0x44, 0x8b, 0x44, 0x24, 0x28,             /*115: mov     +0x28(%rsp), %r8d        */
  0x41, 0xff, 0x96, 0x20, 0x02, 0x00, 0x00, /*11a: callq   +0x220(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*121: mov     %rax, +0x10(%rsp)        */
  0x89, 0x54, 0x24, 0x18,                   /*126: mov     %edx, +0x18(%rsp)        */
  0xeb, 0x55,                               /*12a: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*12c: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*131: mov     +0x18(%rax), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x64,             /*135: movslq  +0x64(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*13a: shl     $0x4, %rcx               */
  0x48, 0x8d, 0x7c, 0x08, 0x20,             /*13e: lea     +0x20(%rax,%rcx,1), %rdi */
  0x48, 0x8d, 0x74, 0x08, 0x10,             /*143: lea     +0x10(%rax,%rcx,1), %rsi */
  0x48, 0x63, 0x54, 0x24, 0x60,             /*148: movslq  +0x60(%rsp), %rdx        */
  0x48, 0xff, 0xc2,                         /*14d: inc     %rdx                     */
  0x89, 0x54, 0x24, 0x60,                   /*150: mov     %edx, +0x60(%rsp)        */
  0x41, 0xff, 0x96, 0xa0, 0x00, 0x00, 0x00, /*154: callq   +0xa0(%r14)              */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*15b: movslq  +0x64(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*160: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x70,             /*164: mov     +0x70(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*169: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x20,             /*16d: mov     +0x20(%rsp), %rdx        */
  0x48, 0x8b, 0x74, 0x24, 0x28,             /*172: mov     +0x28(%rsp), %rsi        */
  0x48, 0x89, 0x74, 0x08, 0x18,             /*177: mov     %rsi, +0x18(%rax,%rcx,1) */
  0x48, 0x89, 0x54, 0x08, 0x10,             /*17c: mov     %rdx, +0x10(%rax,%rcx,1) */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*181: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*186: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*18a: mov     +0x20(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x48,             /*18e: mov     %rax, +0x48(%rsp)        */
  0x8b, 0x4c, 0x24, 0x34,                   /*193: mov     +0x34(%rsp), %ecx        */
  0x89, 0x08,                               /*197: mov     %ecx, (%rax)             */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*199: mov     +0x50(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x48,             /*19e: mov     +0x48(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x48,                   /*1a3: mov     %rax, +0x48(%rcx)        */
  0x83, 0x7c, 0x24, 0x60, 0x7f,             /*1a7: cmpl    $0x7f, +0x60(%rsp)       */
  0x75, 0x0e,                               /*1ac: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*1ae: mov     +0x48(%rsp), %rax        */
  0xc7, 0x40, 0x40, 0xff, 0xff, 0xff, 0xff, /*1b3: movl    $0xffffffff, +0x40(%rax) */
  0xeb, 0x0c,                               /*1ba: jmp                              */
  0x8b, 0x44, 0x24, 0x60,                   /*1bc: mov     +0x60(%rsp), %eax        */
  0x48, 0x8b, 0x4c, 0x24, 0x48,             /*1c0: mov     +0x48(%rsp), %rcx        */
  0x89, 0x41, 0x40,                         /*1c5: mov     %eax, +0x40(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*1c8: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1cd: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x78, 0x08,                   /*1d1: mov     +0x8(%rax), %rdi         */
  0x48, 0x63, 0x74, 0x24, 0x64,             /*1d5: movslq  +0x64(%rsp), %rsi        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*1da: mov     +0x70(%rsp), %rax        */
  0x48, 0xc1, 0xe6, 0x04,                   /*1df: shl     $0x4, %rsi               */
  0x48, 0x03, 0x70, 0x18,                   /*1e3: add     +0x18(%rax), %rsi        */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*1e7: mov     +0x48(%rsp), %rax        */
  0x48, 0x63, 0x50, 0x40,                   /*1ec: movslq  +0x40(%rax), %rdx        */
  0x48, 0xff, 0xc2,                         /*1f0: inc     %rdx                     */
  0x41, 0xff, 0x96, 0xa0, 0x00, 0x00, 0x00, /*1f3: callq   +0xa0(%r14)              */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*1fa: mov     +0x58(%rsp), %rax        */
  0x8b, 0x00,                               /*1ff: mov     (%rax), %eax             */
  0xc1, 0xe8, 0x0b,                         /*201: shr     $0xb, %eax               */
  0xa8, 0x80,                               /*204: test    $0x80, %al               */
  0x74, 0x5d,                               /*206: je                               */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*208: mov     +0x68(%rsp), %rdi        */
  0x48, 0x8b, 0x47, 0x18,                   /*20d: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x58, 0x08,                   /*211: mov     +0x8(%rax), %rbx         */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*215: mov     +0x58(%rsp), %rax        */
  0x48, 0x8b, 0x74, 0x24, 0x38,             /*21a: mov     +0x38(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x40,                   /*21f: mov     +0x40(%rsp), %edx        */
  0xff, 0x50, 0x18,                         /*223: callq   +0x18(%rax)              */
  0x48, 0x89, 0x04, 0x24,                   /*226: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*22a: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*22e: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*232: mov     +0x8(%rsp), %rcx         */
  0x48, 0x89, 0x4b, 0x08,                   /*237: mov     %rcx, +0x8(%rbx)         */
  0x48, 0x89, 0x03,                         /*23b: mov     %rax, (%rbx)             */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*23e: mov     +0x68(%rsp), %rdi        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*243: mov     +0x70(%rsp), %rax        */
  0x8b, 0x70, 0x50,                         /*248: mov     +0x50(%rax), %esi        */
  0x41, 0xff, 0x96, 0x08, 0x01, 0x00, 0x00, /*24b: callq   +0x108(%r14)             */
  0x48, 0x8b, 0x7c, 0x24, 0x70,             /*252: mov     +0x70(%rsp), %rdi        */
  0x31, 0xf6,                               /*257: xor     %esi, %esi               */
  0x41, 0xff, 0x96, 0x80, 0x00, 0x00, 0x00, /*259: callq   +0x80(%r14)              */
  0xe9, 0xba, 0x00, 0x00, 0x00,             /*260: jmpq                             */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*265: mov     +0x58(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*26a: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x70,             /*26e: mov     +0x70(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*273: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*277: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*27c: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x10,                   /*280: mov     +0x10(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x20,                   /*284: mov     %rcx, +0x20(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*288: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*28d: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x18,                   /*291: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x28,                   /*295: mov     %rcx, +0x28(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*299: mov     +0x48(%rsp), %rax        */
  0x83, 0x78, 0x40, 0x00,                   /*29e: cmpl    $0, +0x40(%rax)          */
  0x78, 0x1f,                               /*2a2: js                               */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*2a4: mov     +0x68(%rsp), %rdi        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*2a9: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*2ae: mov     +0x8(%rax), %rax         */
  0x0f, 0xb7, 0x70, 0x02,                   /*2b2: movzwl  +0x2(%rax), %esi         */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*2b6: mov     +0x48(%rsp), %rax        */
  0x8b, 0x50, 0x40,                         /*2bb: mov     +0x40(%rax), %edx        */
  0x83, 0xc2, 0x02,                         /*2be: add     $0x2, %edx               */
  0xeb, 0x2e,                               /*2c1: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x68,             /*2c3: mov     +0x68(%rsp), %rdi        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*2c8: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*2cd: mov     +0x8(%rax), %rax         */
  0x0f, 0xb7, 0x40, 0x02,                   /*2d1: movzwl  +0x2(%rax), %eax         */
  0xbe, 0x03, 0x00, 0x00, 0x00,             /*2d5: mov     $0x3, %esi               */
  0x83, 0xf8, 0x03,                         /*2da: cmp     $0x3, %eax               */
  0x7c, 0x0d,                               /*2dd: jl                               */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*2df: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*2e4: mov     +0x8(%rax), %rax         */
  0x0f, 0xb7, 0x70, 0x02,                   /*2e8: movzwl  +0x2(%rax), %esi         */
  0xba, 0x03, 0x00, 0x00, 0x00,             /*2ec: mov     $0x3, %edx               */
  0x41, 0xff, 0x96, 0x30, 0x01, 0x00, 0x00, /*2f1: callq   +0x130(%r14)             */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*2f8: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*2fd: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*301: mov     +0x8(%rax), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x70,             /*305: mov     +0x70(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x18,                   /*30a: mov     %rax, +0x18(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x70,             /*30e: mov     +0x70(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*313: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x08,                   /*317: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x10,                   /*31b: mov     %rcx, +0x10(%rax)        */
  0x4c, 0x89, 0xf7,                         /*31f: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x78,                   /*322: add     $0x78, %rsp              */
  0x5b,                                     /*326: pop     %rbx                     */
  0x41, 0x5e,                               /*327: pop     %r14                     */

};

static void op_tailcall_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 28)) = a * 1 + 0;
  *((int32_t *)(op + 36)) = c * 1 + 0;
  *((int32_t *)(op + 51)) = b * 4 + 0;
}

static void op_tailcall_set_args_from_code(uint8_t *op, mrb_code c) {
  op_tailcall_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"a"=>[[1, 0, 26..29]], "b"=>[[1, 0, 34..37]]} */
static uint8_t op_blkpush[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x40,                   /*01: sub     $0x40, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x38,             /*08: mov     %rbx, +0x38(%rsp)        */
  0x48, 0x8b, 0x43, 0x58,                   /*0d: mov     +0x58(%rbx), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*11: mov     %rax, +0x30(%rsp)        */
  0xc7, 0x44, 0x24, 0x2c, 0x00, 0x00, 0xab, 0x00,/*16: movl    $0xab0000, +0x2c(%rsp)   */
  0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0xbc, 0x00,/*1e: movl    $0xbc0000, +0x28(%rsp)   */
  0xc7, 0x44, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00,/*26: movl    $0, +0x24(%rsp)          */
  0x8b, 0x44, 0x24, 0x28,                   /*2e: mov     +0x28(%rsp), %eax        */
  0xc1, 0xe8, 0x09,                         /*32: shr     $0x9, %eax               */
  0x83, 0xe0, 0x01,                         /*35: and     $0x1, %eax               */
  0x89, 0x44, 0x24, 0x20,                   /*38: mov     %eax, +0x20(%rsp)        */
  0x8b, 0x44, 0x24, 0x28,                   /*3c: mov     +0x28(%rsp), %eax        */
  0xc1, 0xe8, 0x04,                         /*40: shr     $0x4, %eax               */
  0x83, 0xe0, 0x1f,                         /*43: and     $0x1f, %eax              */
  0x89, 0x44, 0x24, 0x1c,                   /*46: mov     %eax, +0x1c(%rsp)        */
  0x8b, 0x44, 0x24, 0x28,                   /*4a: mov     +0x28(%rsp), %eax        */
  0x83, 0xe0, 0x0f,                         /*4e: and     $0xf, %eax               */
  0x89, 0x44, 0x24, 0x18,                   /*51: mov     %eax, +0x18(%rsp)        */
  0x74, 0x26,                               /*55: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*57: mov     +0x38(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*5c: mov     +0x58(%rax), %rdi        */
  0x8b, 0x74, 0x24, 0x18,                   /*60: mov     +0x18(%rsp), %esi        */
  0xff, 0xce,                               /*64: dec     %esi                     */
  0xff, 0x93, 0x70, 0x02, 0x00, 0x00,       /*66: callq   +0x270(%rbx)             */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*6c: mov     %rax, +0x8(%rsp)         */
  0x48, 0x85, 0xc0,                         /*71: test    %rax, %rax               */
  0x74, 0x5d,                               /*74: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*76: mov     +0x8(%rsp), %rax         */
  0xeb, 0x05,                               /*7b: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*7d: mov     +0x38(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*82: mov     +0x18(%rax), %rax        */
  0x48, 0x83, 0xc0, 0x10,                   /*86: add     $0x10, %rax              */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*8a: mov     %rax, +0x10(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x2c,             /*8f: movslq  +0x2c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*94: mov     +0x38(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*99: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*9d: shl     $0x4, %rax               */
  0x48, 0x63, 0x54, 0x24, 0x24,             /*a1: movslq  +0x24(%rsp), %rdx        */
  0x48, 0x63, 0x74, 0x24, 0x20,             /*a6: movslq  +0x20(%rsp), %rsi        */
  0x48, 0x01, 0xd6,                         /*ab: add     %rdx, %rsi               */
  0x48, 0x63, 0x54, 0x24, 0x1c,             /*ae: movslq  +0x1c(%rsp), %rdx        */
  0x48, 0x01, 0xf2,                         /*b3: add     %rsi, %rdx               */
  0x48, 0x8b, 0x74, 0x24, 0x10,             /*b6: mov     +0x10(%rsp), %rsi        */
  0x48, 0xc1, 0xe2, 0x04,                   /*bb: shl     $0x4, %rdx               */
  0x48, 0x8b, 0x3c, 0x16,                   /*bf: mov     (%rsi,%rdx,1), %rdi      */
  0x48, 0x8b, 0x54, 0x16, 0x08,             /*c3: mov     +0x8(%rsi,%rdx,1), %rdx  */
  0x48, 0x89, 0x54, 0x01, 0x08,             /*c8: mov     %rdx, +0x8(%rcx,%rax,1)  */
  0x48, 0x89, 0x3c, 0x01,                   /*cd: mov     %rdi, (%rcx,%rax,1)      */
  0xeb, 0x1b,                               /*d1: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x30,             /*d3: mov     +0x30(%rsp), %rdi        */
  0xbe, 0x02, 0x00, 0x00, 0x00,             /*d8: mov     $0x2, %esi               */
  0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*dd: callq   +0x1b0(%rbx)             */
  0x48, 0x8b, 0x7c, 0x24, 0x38,             /*e3: mov     +0x38(%rsp), %rdi        */
  0xff, 0x93, 0xb8, 0x01, 0x00, 0x00,       /*e8: callq   +0x1b8(%rbx)             */
  0x48, 0x89, 0xdf,                         /*ee: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x40,                   /*f1: add     $0x40, %rsp              */
  0x5b,                                     /*f5: pop     %rbx                     */

};

static void op_blkpush_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 26)) = a * 1 + 0;
  *((int32_t *)(op + 34)) = b * 1 + 0;
}

static void op_blkpush_set_args_from_code(uint8_t *op, mrb_code c) {
  op_blkpush_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[1, 0, 21..24]]} */
static uint8_t op_add[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x53,                                     /*04: push    %rbx                     */
  0x48, 0x83, 0xec, 0x60,                   /*05: sub     $0x60, %rsp              */
  0x49, 0x89, 0xfe,                         /*09: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x58,             /*0c: mov     %r14, +0x58(%rsp)        */
  0xc7, 0x44, 0x24, 0x54, 0x00, 0x00, 0xab, 0x00,/*11: movl    $0xab0000, +0x54(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*19: mov     +0x58(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*1e: mov     +0x58(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x48,             /*22: mov     %rax, +0x48(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*27: mov     +0x58(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*2c: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x40,             /*30: mov     %rax, +0x40(%rsp)        */
  0x48, 0x63, 0x4c, 0x24, 0x54,             /*35: movslq  +0x54(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*3a: shl     $0x4, %rcx               */
  0x0f, 0xb7, 0x54, 0x08, 0x08,             /*3e: movzwl  +0x8(%rax,%rcx,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*43: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x08, 0x18,             /*46: movzbl  +0x18(%rax,%rcx,1), %eax */
  0x09, 0xd0,                               /*4b: or      %edx, %eax               */
  0x3d, 0x0f, 0x10, 0x00, 0x00,             /*4d: cmp     $0x100f, %eax            */
  0x0f, 0x8f, 0x82, 0x00, 0x00, 0x00,       /*52: jg                               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*58: cmp     $0x602, %eax             */
  0x0f, 0x8f, 0xd0, 0x00, 0x00, 0x00,       /*5d: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*63: cmp     $0x303, %eax             */
  0x0f, 0x85, 0xf3, 0x00, 0x00, 0x00,       /*68: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*6e: mov     +0x40(%rsp), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x54,             /*73: movslq  +0x54(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*78: shl     $0x4, %rcx               */
  0x48, 0x8d, 0x14, 0x08,                   /*7c: lea     (%rax,%rcx,1), %rdx      */
  0x48, 0x89, 0x54, 0x24, 0x28,             /*80: mov     %rdx, +0x28(%rsp)        */
  0x8b, 0x04, 0x08,                         /*85: mov     (%rax,%rcx,1), %eax      */
  0x89, 0x44, 0x24, 0x3c,                   /*88: mov     %eax, +0x3c(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*8c: mov     +0x28(%rsp), %rax        */
  0x8b, 0x70, 0x10,                         /*91: mov     +0x10(%rax), %esi        */
  0x89, 0x74, 0x24, 0x38,                   /*94: mov     %esi, +0x38(%rsp)        */
  0x8b, 0x7c, 0x24, 0x3c,                   /*98: mov     +0x3c(%rsp), %edi        */
  0x48, 0x8d, 0x54, 0x24, 0x34,             /*9c: lea     +0x34(%rsp), %rdx        */
  0x41, 0xff, 0x96, 0x88, 0x01, 0x00, 0x00, /*a1: callq   +0x188(%r14)             */
  0x84, 0xc0,                               /*a8: test    %al, %al                 */
  0x0f, 0x84, 0x5a, 0x01, 0x00, 0x00,       /*aa: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*b0: mov     +0x28(%rsp), %rax        */
  0xc7, 0x40, 0x08, 0x06, 0x00, 0x00, 0x00, /*b5: movl    $0x6, +0x8(%rax)         */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x3c,       /*bc: cvtsi2sdl+0x3c(%rsp), %xmm0      */
  0xf2, 0x0f, 0x2a, 0x4c, 0x24, 0x38,       /*c2: cvtsi2sdl+0x38(%rsp), %xmm1      */
  0xf2, 0x0f, 0x58, 0xc8,                   /*c8: addsd   %xmm0, %xmm1             */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*cc: mov     +0x28(%rsp), %rax        */
  0xf2, 0x0f, 0x11, 0x08,                   /*d1: movsd   %xmm1, (%rax)            */
  0xe9, 0x5b, 0x01, 0x00, 0x00,             /*d5: jmpq                             */
  0x3d, 0x10, 0x10, 0x00, 0x00,             /*da: cmp     $0x1010, %eax            */
  0x0f, 0x85, 0x17, 0x01, 0x00, 0x00,       /*df: jne                              */
  0x48, 0x63, 0x5c, 0x24, 0x54,             /*e5: movslq  +0x54(%rsp), %rbx        */
  0x4c, 0x8b, 0x7c, 0x24, 0x40,             /*ea: mov     +0x40(%rsp), %r15        */
  0x48, 0xc1, 0xe3, 0x04,                   /*ef: shl     $0x4, %rbx               */
  0x48, 0x8b, 0x7c, 0x24, 0x48,             /*f3: mov     +0x48(%rsp), %rdi        */
  0x49, 0x8b, 0x34, 0x1f,                   /*f8: mov     (%r15,%rbx,1), %rsi      */
  0x41, 0x8b, 0x54, 0x1f, 0x08,             /*fc: mov     +0x8(%r15,%rbx,1), %edx  */
  0x49, 0x8b, 0x4c, 0x1f, 0x10,             /*101: mov     +0x10(%r15,%rbx,1), %rcx */
  0x45, 0x8b, 0x44, 0x1f, 0x18,             /*106: mov     +0x18(%r15,%rbx,1), %r8d */
  0x41, 0xff, 0x96, 0x40, 0x01, 0x00, 0x00, /*10b: callq   +0x140(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*112: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*117: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*11b: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*120: mov     +0x10(%rsp), %rcx        */
  0x49, 0x89, 0x4c, 0x1f, 0x08,             /*125: mov     %rcx, +0x8(%r15,%rbx,1)  */
  0x49, 0x89, 0x04, 0x1f,                   /*12a: mov     %rax, (%r15,%rbx,1)      */
  0xe9, 0x02, 0x01, 0x00, 0x00,             /*12e: jmpq                             */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*133: cmp     $0x603, %eax             */
  0x0f, 0x85, 0x97, 0x00, 0x00, 0x00,       /*138: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x54,             /*13e: movslq  +0x54(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*143: mov     +0x40(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*148: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x44, 0x01, 0x10,       /*14c: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm0 */
  0xf2, 0x0f, 0x58, 0x04, 0x01,             /*152: addsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*157: movsd   %xmm0, (%rcx,%rax,1)     */
  0xe9, 0xd4, 0x00, 0x00, 0x00,             /*15c: jmpq                             */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*161: cmp     $0x306, %eax             */
  0x0f, 0x85, 0x90, 0x00, 0x00, 0x00,       /*166: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x54,             /*16c: movslq  +0x54(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*171: mov     +0x40(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*176: shl     $0x4, %rax               */
  0x8b, 0x04, 0x01,                         /*17a: mov     (%rcx,%rax,1), %eax      */
  0x89, 0x44, 0x24, 0x24,                   /*17d: mov     %eax, +0x24(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x54,             /*181: movslq  +0x54(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*186: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*18a: mov     +0x40(%rsp), %rcx        */
  0xf2, 0x0f, 0x10, 0x44, 0x08, 0x10,       /*18f: movsd   +0x10(%rax,%rcx,1), %xmm0 */
  0xf2, 0x0f, 0x11, 0x44, 0x24, 0x18,       /*195: movsd   %xmm0, +0x18(%rsp)       */
  0x48, 0x63, 0x44, 0x24, 0x54,             /*19b: movslq  +0x54(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*1a0: mov     +0x40(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*1a5: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00,/*1a9: movl    $0x6, +0x8(%rcx,%rax,1)  */
  0x0f, 0x57, 0xc0,                         /*1b1: xorps   %xmm0, %xmm0             */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x24,       /*1b4: cvtsi2sdl+0x24(%rsp), %xmm0      */
  0xf2, 0x0f, 0x58, 0x44, 0x24, 0x18,       /*1ba: addsd   +0x18(%rsp), %xmm0       */
  0x48, 0x63, 0x44, 0x24, 0x54,             /*1c0: movslq  +0x54(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*1c5: mov     +0x40(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*1ca: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*1ce: movsd   %xmm0, (%rcx,%rax,1)     */
  0xeb, 0x60,                               /*1d3: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*1d5: cmp     $0x606, %eax             */
  0x75, 0x20,                               /*1da: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x54,             /*1dc: movslq  +0x54(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*1e1: mov     +0x40(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*1e6: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*1ea: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x58, 0x44, 0x01, 0x10,       /*1ef: addsd   +0x10(%rcx,%rax,1), %xmm0 */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*1f5: movsd   %xmm0, (%rcx,%rax,1)     */
  0xeb, 0x39,                               /*1fa: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x58,             /*1fc: mov     +0x58(%rsp), %rdi        */
  0x41, 0xff, 0x96, 0x48, 0x02, 0x00, 0x00, /*201: callq   +0x248(%r14)             */
  0xeb, 0x3e,                               /*208: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x54,             /*20a: movslq  +0x54(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*20f: mov     +0x40(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*214: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x03, 0x00, 0x00, 0x00,/*218: movl    $0x3, +0x8(%rcx,%rax,1)  */
  0x8b, 0x44, 0x24, 0x34,                   /*220: mov     +0x34(%rsp), %eax        */
  0x48, 0x63, 0x4c, 0x24, 0x54,             /*224: movslq  +0x54(%rsp), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x40,             /*229: mov     +0x40(%rsp), %rdx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*22e: shl     $0x4, %rcx               */
  0x89, 0x04, 0x0a,                         /*232: mov     %eax, (%rdx,%rcx,1)      */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*235: mov     +0x58(%rsp), %rax        */
  0x8b, 0x40, 0x50,                         /*23a: mov     +0x50(%rax), %eax        */
  0x48, 0x8b, 0x4c, 0x24, 0x48,             /*23d: mov     +0x48(%rsp), %rcx        */
  0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*242: mov     %eax, +0xdc(%rcx)        */
  0x4c, 0x89, 0xf7,                         /*248: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x60,                   /*24b: add     $0x60, %rsp              */
  0x5b,                                     /*24f: pop     %rbx                     */
  0x41, 0x5e,                               /*250: pop     %r14                     */
  0x41, 0x5f,                               /*252: pop     %r15                     */

};

static void op_add_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 21)) = a * 1 + 0;
}

static void op_add_set_args_from_code(uint8_t *op, mrb_code c) {
  op_add_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 17..20]], "c"=>[[1, 0, 120..123], [1, 0, 134..137], [1, 0, 251..254]], "b"=>[[1, 0, 270..273]]} */
static uint8_t op_addi[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x30,                   /*01: sub     $0x30, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x28,             /*08: mov     %rbx, +0x28(%rsp)        */
  0xc7, 0x44, 0x24, 0x24, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x24(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*15: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*1e: mov     %rax, +0x18(%rsp)        */
  0x48, 0x63, 0x4c, 0x24, 0x24,             /*23: movslq  +0x24(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*28: shl     $0x4, %rcx               */
  0x8b, 0x44, 0x08, 0x08,                   /*2c: mov     +0x8(%rax,%rcx,1), %eax  */
  0x83, 0xf8, 0x06,                         /*30: cmp     $0x6, %eax               */
  0x75, 0x25,                               /*33: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*35: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*3a: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*3f: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*43: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*48: addsd   +0(%rip), %xmm0, "        # 50 <op_addi+0x50>" */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*50: movsd   %xmm0, (%rcx,%rax,1)     */
  0xe9, 0xf1, 0x00, 0x00, 0x00,             /*55: jmpq                             */
  0x83, 0xf8, 0x03,                         /*5a: cmp     $0x3, %eax               */
  0x75, 0x74,                               /*5d: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*5f: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*64: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*69: shl     $0x4, %rax               */
  0x8b, 0x04, 0x01,                         /*6d: mov     (%rcx,%rax,1), %eax      */
  0x89, 0x44, 0x24, 0x14,                   /*70: mov     %eax, +0x14(%rsp)        */
  0xc7, 0x44, 0x24, 0x10, 0x00, 0x00, 0xcd, 0x00,/*74: movl    $0xcd0000, +0x10(%rsp)   */
  0x8b, 0x7c, 0x24, 0x14,                   /*7c: mov     +0x14(%rsp), %edi        */
  0x48, 0x8d, 0x54, 0x24, 0x0c,             /*80: lea     +0xc(%rsp), %rdx         */
  0xbe, 0x00, 0x00, 0xcd, 0x00,             /*85: mov     $0xcd0000, %esi          */
  0xff, 0x93, 0x88, 0x01, 0x00, 0x00,       /*8a: callq   +0x188(%rbx)             */
  0x84, 0xc0,                               /*90: test    %al, %al                 */
  0x0f, 0x84, 0x88, 0x00, 0x00, 0x00,       /*92: je                               */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*98: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*9d: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*a2: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00,/*a6: movl    $0x6, +0x8(%rcx,%rax,1)  */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x14,       /*ae: cvtsi2sdl+0x14(%rsp), %xmm0      */
  0xf2, 0x0f, 0x2a, 0x4c, 0x24, 0x10,       /*b4: cvtsi2sdl+0x10(%rsp), %xmm1      */
  0xf2, 0x0f, 0x58, 0xc8,                   /*ba: addsd   %xmm0, %xmm1             */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*be: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*c3: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*c8: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x11, 0x0c, 0x01,             /*cc: movsd   %xmm1, (%rcx,%rax,1)     */
  0xeb, 0x78,                               /*d1: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*d3: movslq  +0x24(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*d8: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*dc: mov     +0x18(%rsp), %rcx        */
  0xc7, 0x44, 0x08, 0x18, 0x03, 0x00, 0x00, 0x00,/*e1: movl    $0x3, +0x18(%rax,%rcx,1) */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*e9: movslq  +0x24(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*ee: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*f2: mov     +0x18(%rsp), %rcx        */
  0xc7, 0x44, 0x08, 0x10, 0x00, 0x00, 0xcd, 0x00,/*f7: movl    $0xcd0000, +0x10(%rax,%rcx,1) */
  0x48, 0x8b, 0x7c, 0x24, 0x28,             /*ff: mov     +0x28(%rsp), %rdi        */
  0x8b, 0x54, 0x24, 0x24,                   /*104: mov     +0x24(%rsp), %edx        */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*108: mov     $0x20, %esi              */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*10d: mov     $0xbc0000, %ecx          */
  0x41, 0xb8, 0x01, 0x00, 0x00, 0x00,       /*112: mov     $0x1, %r8d               */
  0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*118: callq   +0x1e0(%rbx)             */
  0xeb, 0x2b,                               /*11e: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*120: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*125: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*12a: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x03, 0x00, 0x00, 0x00,/*12e: movl    $0x3, +0x8(%rcx,%rax,1)  */
  0x8b, 0x44, 0x24, 0x0c,                   /*136: mov     +0xc(%rsp), %eax         */
  0x48, 0x63, 0x4c, 0x24, 0x24,             /*13a: movslq  +0x24(%rsp), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x18,             /*13f: mov     +0x18(%rsp), %rdx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*144: shl     $0x4, %rcx               */
  0x89, 0x04, 0x0a,                         /*148: mov     %eax, (%rdx,%rcx,1)      */
  0x48, 0x89, 0xdf,                         /*14b: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x30,                   /*14e: add     $0x30, %rsp              */
  0x5b,                                     /*152: pop     %rbx                     */

};

static void op_addi_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
  *((int32_t *)(op + 120)) = c * 1 + 0;
  *((int32_t *)(op + 134)) = c * 1 + 0;
  *((int32_t *)(op + 251)) = c * 1 + 0;
  *((int32_t *)(op + 270)) = b * 1 + 0;
}

static void op_addi_set_args_from_code(uint8_t *op, mrb_code c) {
  op_addi_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_sub[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x30,                   /*01: sub     $0x30, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x28,             /*08: mov     %rbx, +0x28(%rsp)        */
  0xc7, 0x44, 0x24, 0x24, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x24(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*15: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*1e: mov     %rax, +0x18(%rsp)        */
  0x48, 0x63, 0x4c, 0x24, 0x24,             /*23: movslq  +0x24(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*28: shl     $0x4, %rcx               */
  0x0f, 0xb7, 0x54, 0x08, 0x08,             /*2c: movzwl  +0x8(%rax,%rcx,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*31: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x08, 0x18,             /*34: movzbl  +0x18(%rax,%rcx,1), %eax */
  0x09, 0xd0,                               /*39: or      %edx, %eax               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*3b: cmp     $0x602, %eax             */
  0x7f, 0x78,                               /*40: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*42: cmp     $0x303, %eax             */
  0x0f, 0x85, 0x9f, 0x00, 0x00, 0x00,       /*47: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*4d: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*52: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*57: shl     $0x4, %rax               */
  0x8b, 0x04, 0x01,                         /*5b: mov     (%rcx,%rax,1), %eax      */
  0x89, 0x44, 0x24, 0x14,                   /*5e: mov     %eax, +0x14(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*62: movslq  +0x24(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*67: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*6b: mov     +0x18(%rsp), %rcx        */
  0x8b, 0x74, 0x08, 0x10,                   /*70: mov     +0x10(%rax,%rcx,1), %esi */
  0x89, 0x74, 0x24, 0x10,                   /*74: mov     %esi, +0x10(%rsp)        */
  0x8b, 0x7c, 0x24, 0x14,                   /*78: mov     +0x14(%rsp), %edi        */
  0x48, 0x8d, 0x54, 0x24, 0x0c,             /*7c: lea     +0xc(%rsp), %rdx         */
  0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*81: callq   +0x168(%rbx)             */
  0x84, 0xc0,                               /*87: test    %al, %al                 */
  0x0f, 0x84, 0x03, 0x01, 0x00, 0x00,       /*89: je                               */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*8f: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*94: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*99: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00,/*9d: movl    $0x6, +0x8(%rcx,%rax,1)  */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x14,       /*a5: cvtsi2sdl+0x14(%rsp), %xmm0      */
  0xf2, 0x0f, 0x2a, 0x4c, 0x24, 0x10,       /*ab: cvtsi2sdl+0x10(%rsp), %xmm1      */
  0xf2, 0x0f, 0x5c, 0xc1,                   /*b1: subsd   %xmm1, %xmm0             */
  0xe9, 0x8f, 0x00, 0x00, 0x00,             /*b5: jmpq                             */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*ba: cmp     $0x603, %eax             */
  0x0f, 0x85, 0x99, 0x00, 0x00, 0x00,       /*bf: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*c5: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*ca: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*cf: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*d3: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x2a, 0x4c, 0x01, 0x10,       /*d8: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm1 */
  0xf2, 0x0f, 0x5c, 0xc1,                   /*de: subsd   %xmm1, %xmm0             */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*e2: movsd   %xmm0, (%rcx,%rax,1)     */
  0xe9, 0xd1, 0x00, 0x00, 0x00,             /*e7: jmpq                             */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*ec: cmp     $0x306, %eax             */
  0x0f, 0x85, 0x8e, 0x00, 0x00, 0x00,       /*f1: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*f7: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*fc: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*101: shl     $0x4, %rax               */
  0x8b, 0x04, 0x01,                         /*105: mov     (%rcx,%rax,1), %eax      */
  0x89, 0x44, 0x24, 0x08,                   /*108: mov     %eax, +0x8(%rsp)         */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*10c: movslq  +0x24(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*111: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*115: mov     +0x18(%rsp), %rcx        */
  0xf2, 0x0f, 0x10, 0x44, 0x08, 0x10,       /*11a: movsd   +0x10(%rax,%rcx,1), %xmm0 */
  0xf2, 0x0f, 0x11, 0x04, 0x24,             /*120: movsd   %xmm0, (%rsp)            */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*125: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*12a: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*12f: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00,/*133: movl    $0x6, +0x8(%rcx,%rax,1)  */
  0x0f, 0x57, 0xc0,                         /*13b: xorps   %xmm0, %xmm0             */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x08,       /*13e: cvtsi2sdl+0x8(%rsp), %xmm0       */
  0xf2, 0x0f, 0x5c, 0x04, 0x24,             /*144: subsd   (%rsp), %xmm0            */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*149: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*14e: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*153: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*157: movsd   %xmm0, (%rcx,%rax,1)     */
  0xeb, 0x5f,                               /*15c: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*15e: cmp     $0x606, %eax             */
  0x75, 0x20,                               /*163: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*165: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*16a: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*16f: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*173: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x5c, 0x44, 0x01, 0x10,       /*178: subsd   +0x10(%rcx,%rax,1), %xmm0 */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*17e: movsd   %xmm0, (%rcx,%rax,1)     */
  0xeb, 0x38,                               /*183: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x28,             /*185: mov     +0x28(%rsp), %rdi        */
  0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*18a: callq   +0x248(%rbx)             */
  0xeb, 0x2b,                               /*190: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*192: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*197: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*19c: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x03, 0x00, 0x00, 0x00,/*1a0: movl    $0x3, +0x8(%rcx,%rax,1)  */
  0x8b, 0x44, 0x24, 0x0c,                   /*1a8: mov     +0xc(%rsp), %eax         */
  0x48, 0x63, 0x4c, 0x24, 0x24,             /*1ac: movslq  +0x24(%rsp), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x18,             /*1b1: mov     +0x18(%rsp), %rdx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*1b6: shl     $0x4, %rcx               */
  0x89, 0x04, 0x0a,                         /*1ba: mov     %eax, (%rdx,%rcx,1)      */
  0x48, 0x89, 0xdf,                         /*1bd: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x30,                   /*1c0: add     $0x30, %rsp              */
  0x5b,                                     /*1c4: pop     %rbx                     */

};

static void op_sub_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_sub_set_args_from_code(uint8_t *op, mrb_code c) {
  op_sub_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 17..20]], "c"=>[[1, 0, 108..111], [1, 0, 122..125], [1, 0, 195..198]], "b"=>[[1, 0, 214..217]]} */
static uint8_t op_subi[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x30,                   /*01: sub     $0x30, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x28,             /*08: mov     %rbx, +0x28(%rsp)        */
  0xc7, 0x44, 0x24, 0x24, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x24(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*15: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*1e: mov     %rax, +0x18(%rsp)        */
  0x48, 0x63, 0x4c, 0x24, 0x24,             /*23: movslq  +0x24(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*28: shl     $0x4, %rcx               */
  0x48, 0x8d, 0x14, 0x08,                   /*2c: lea     (%rax,%rcx,1), %rdx      */
  0x48, 0x89, 0x54, 0x24, 0x10,             /*30: mov     %rdx, +0x10(%rsp)        */
  0x8b, 0x44, 0x08, 0x08,                   /*35: mov     +0x8(%rax,%rcx,1), %eax  */
  0x83, 0xf8, 0x06,                         /*39: cmp     $0x6, %eax               */
  0x75, 0x1a,                               /*3c: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*3e: mov     +0x10(%rsp), %rax        */
  0xf2, 0x0f, 0x10, 0x00,                   /*43: movsd   (%rax), %xmm0            */
  0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*47: addsd   +0(%rip), %xmm0, "        # 4f <op_subi+0x4f>" */
  0xf2, 0x0f, 0x11, 0x00,                   /*4f: movsd   %xmm0, (%rax)            */
  0xe9, 0xa7, 0x00, 0x00, 0x00,             /*53: jmpq                             */
  0x83, 0xf8, 0x03,                         /*58: cmp     $0x3, %eax               */
  0x75, 0x52,                               /*5b: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*5d: mov     +0x10(%rsp), %rax        */
  0x8b, 0x00,                               /*62: mov     (%rax), %eax             */
  0x89, 0x44, 0x24, 0x0c,                   /*64: mov     %eax, +0xc(%rsp)         */
  0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0xcd, 0x00,/*68: movl    $0xcd0000, +0x8(%rsp)    */
  0x8b, 0x7c, 0x24, 0x0c,                   /*70: mov     +0xc(%rsp), %edi         */
  0x48, 0x8d, 0x54, 0x24, 0x04,             /*74: lea     +0x4(%rsp), %rdx         */
  0xbe, 0x00, 0x00, 0xcd, 0x00,             /*79: mov     $0xcd0000, %esi          */
  0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*7e: callq   +0x168(%rbx)             */
  0x84, 0xc0,                               /*84: test    %al, %al                 */
  0x74, 0x60,                               /*86: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*88: mov     +0x10(%rsp), %rax        */
  0xc7, 0x40, 0x08, 0x06, 0x00, 0x00, 0x00, /*8d: movl    $0x6, +0x8(%rax)         */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x0c,       /*94: cvtsi2sdl+0xc(%rsp), %xmm0       */
  0xf2, 0x0f, 0x2a, 0x4c, 0x24, 0x08,       /*9a: cvtsi2sdl+0x8(%rsp), %xmm1       */
  0xf2, 0x0f, 0x5c, 0xc1,                   /*a0: subsd   %xmm1, %xmm0             */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*a4: mov     +0x10(%rsp), %rax        */
  0xf2, 0x0f, 0x11, 0x00,                   /*a9: movsd   %xmm0, (%rax)            */
  0xeb, 0x50,                               /*ad: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*af: mov     +0x10(%rsp), %rax        */
  0xc7, 0x40, 0x18, 0x03, 0x00, 0x00, 0x00, /*b4: movl    $0x3, +0x18(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*bb: mov     +0x10(%rsp), %rax        */
  0xc7, 0x40, 0x10, 0x00, 0x00, 0xcd, 0x00, /*c0: movl    $0xcd0000, +0x10(%rax)   */
  0x48, 0x8b, 0x7c, 0x24, 0x28,             /*c7: mov     +0x28(%rsp), %rdi        */
  0x8b, 0x54, 0x24, 0x24,                   /*cc: mov     +0x24(%rsp), %edx        */
  0xbe, 0x20, 0x00, 0x00, 0x00,             /*d0: mov     $0x20, %esi              */
  0xb9, 0x00, 0x00, 0xbc, 0x00,             /*d5: mov     $0xbc0000, %ecx          */
  0x41, 0xb8, 0x01, 0x00, 0x00, 0x00,       /*da: mov     $0x1, %r8d               */
  0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*e0: callq   +0x1e0(%rbx)             */
  0xeb, 0x17,                               /*e6: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*e8: mov     +0x10(%rsp), %rax        */
  0xc7, 0x40, 0x08, 0x03, 0x00, 0x00, 0x00, /*ed: movl    $0x3, +0x8(%rax)         */
  0x8b, 0x44, 0x24, 0x04,                   /*f4: mov     +0x4(%rsp), %eax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*f8: mov     +0x10(%rsp), %rcx        */
  0x89, 0x01,                               /*fd: mov     %eax, (%rcx)             */
  0x48, 0x89, 0xdf,                         /*ff: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x30,                   /*102: add     $0x30, %rsp              */
  0x5b,                                     /*106: pop     %rbx                     */

};

static void op_subi_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
  *((int32_t *)(op + 108)) = c * 1 + 0;
  *((int32_t *)(op + 122)) = c * 1 + 0;
  *((int32_t *)(op + 195)) = c * 1 + 0;
  *((int32_t *)(op + 214)) = b * 1 + 0;
}

static void op_subi_set_args_from_code(uint8_t *op, mrb_code c) {
  op_subi_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"a"=>[[1, 0, 19..22]]} */
static uint8_t op_mul[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x58,                   /*03: sub     $0x58, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x50,             /*0a: mov     %r14, +0x50(%rsp)        */
  0xc7, 0x44, 0x24, 0x4c, 0x00, 0x00, 0xab, 0x00,/*0f: movl    $0xab0000, +0x4c(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*17: mov     +0x50(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*1c: mov     +0x58(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x40,             /*20: mov     %rax, +0x40(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*25: mov     +0x50(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*2a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x38,             /*2e: mov     %rax, +0x38(%rsp)        */
  0x48, 0x63, 0x4c, 0x24, 0x4c,             /*33: movslq  +0x4c(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*38: shl     $0x4, %rcx               */
  0x0f, 0xb7, 0x54, 0x08, 0x08,             /*3c: movzwl  +0x8(%rax,%rcx,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*41: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x08, 0x18,             /*44: movzbl  +0x18(%rax,%rcx,1), %eax */
  0x09, 0xd0,                               /*49: or      %edx, %eax               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*4b: cmp     $0x602, %eax             */
  0x0f, 0x8f, 0x82, 0x00, 0x00, 0x00,       /*50: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*56: cmp     $0x303, %eax             */
  0x0f, 0x85, 0xa0, 0x00, 0x00, 0x00,       /*5b: jne                              */
  0x48, 0x8b, 0x7c, 0x24, 0x40,             /*61: mov     +0x40(%rsp), %rdi        */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*66: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x5c, 0x24, 0x38,             /*6b: mov     +0x38(%rsp), %rbx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*70: shl     $0x4, %rax               */
  0x48, 0x8b, 0x34, 0x03,                   /*74: mov     (%rbx,%rax,1), %rsi      */
  0x8b, 0x54, 0x03, 0x08,                   /*78: mov     +0x8(%rbx,%rax,1), %edx  */
  0x48, 0x8b, 0x4c, 0x03, 0x10,             /*7c: mov     +0x10(%rbx,%rax,1), %rcx */
  0x44, 0x8b, 0x44, 0x03, 0x18,             /*81: mov     +0x18(%rbx,%rax,1), %r8d */
  0x41, 0xff, 0x96, 0x58, 0x02, 0x00, 0x00, /*86: callq   +0x258(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*8d: mov     %rax, +0x18(%rsp)        */
  0x89, 0x54, 0x24, 0x20,                   /*92: mov     %edx, +0x20(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*96: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*9b: mov     +0x20(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x30,             /*a0: mov     %rcx, +0x30(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x28,             /*a5: mov     %rax, +0x28(%rsp)        */
  0x8b, 0x44, 0x24, 0x30,                   /*aa: mov     +0x30(%rsp), %eax        */
  0x83, 0xf8, 0x06,                         /*ae: cmp     $0x6, %eax               */
  0x0f, 0x85, 0xee, 0x00, 0x00, 0x00,       /*b1: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*b7: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*bc: mov     +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*c1: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00,/*c5: movl    $0x6, +0x8(%rcx,%rax,1)  */
  0xf2, 0x0f, 0x10, 0x44, 0x24, 0x28,       /*cd: movsd   +0x28(%rsp), %xmm0       */
  0xe9, 0x88, 0x00, 0x00, 0x00,             /*d3: jmpq                             */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*d8: cmp     $0x603, %eax             */
  0x0f, 0x85, 0x8d, 0x00, 0x00, 0x00,       /*dd: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*e3: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*e8: mov     +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*ed: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x44, 0x01, 0x10,       /*f1: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm0 */
  0xf2, 0x0f, 0x59, 0x04, 0x01,             /*f7: mulsd   (%rcx,%rax,1), %xmm0     */
  0xe9, 0x8f, 0x00, 0x00, 0x00,             /*fc: jmpq                             */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*101: cmp     $0x306, %eax             */
  0x0f, 0x85, 0x8b, 0x00, 0x00, 0x00,       /*106: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*10c: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*111: mov     +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*116: shl     $0x4, %rax               */
  0x8b, 0x04, 0x01,                         /*11a: mov     (%rcx,%rax,1), %eax      */
  0x89, 0x44, 0x24, 0x14,                   /*11d: mov     %eax, +0x14(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*121: movslq  +0x4c(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*126: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*12a: mov     +0x38(%rsp), %rcx        */
  0xf2, 0x0f, 0x10, 0x44, 0x08, 0x10,       /*12f: movsd   +0x10(%rax,%rcx,1), %xmm0 */
  0xf2, 0x0f, 0x11, 0x44, 0x24, 0x08,       /*135: movsd   %xmm0, +0x8(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*13b: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*140: mov     +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*145: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00,/*149: movl    $0x6, +0x8(%rcx,%rax,1)  */
  0x0f, 0x57, 0xc0,                         /*151: xorps   %xmm0, %xmm0             */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x14,       /*154: cvtsi2sdl+0x14(%rsp), %xmm0      */
  0xf2, 0x0f, 0x59, 0x44, 0x24, 0x08,       /*15a: mulsd   +0x8(%rsp), %xmm0        */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*160: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*165: mov     +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*16a: shl     $0x4, %rax               */
  0xeb, 0x20,                               /*16e: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*170: cmp     $0x606, %eax             */
  0x75, 0x20,                               /*175: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*177: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*17c: mov     +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*181: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*185: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x59, 0x44, 0x01, 0x10,       /*18a: mulsd   +0x10(%rcx,%rax,1), %xmm0 */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*190: movsd   %xmm0, (%rcx,%rax,1)     */
  0xeb, 0x3e,                               /*195: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x50,             /*197: mov     +0x50(%rsp), %rdi        */
  0x41, 0xff, 0x96, 0x48, 0x02, 0x00, 0x00, /*19c: callq   +0x248(%r14)             */
  0xeb, 0x30,                               /*1a3: jmp                              */
  0x83, 0xf8, 0x03,                         /*1a5: cmp     $0x3, %eax               */
  0x75, 0x2b,                               /*1a8: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*1aa: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*1af: mov     +0x38(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*1b4: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x03, 0x00, 0x00, 0x00,/*1b8: movl    $0x3, +0x8(%rcx,%rax,1)  */
  0x8b, 0x44, 0x24, 0x28,                   /*1c0: mov     +0x28(%rsp), %eax        */
  0x48, 0x63, 0x4c, 0x24, 0x4c,             /*1c4: movslq  +0x4c(%rsp), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x38,             /*1c9: mov     +0x38(%rsp), %rdx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*1ce: shl     $0x4, %rcx               */
  0x89, 0x04, 0x0a,                         /*1d2: mov     %eax, (%rdx,%rcx,1)      */
  0x4c, 0x89, 0xf7,                         /*1d5: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x58,                   /*1d8: add     $0x58, %rsp              */
  0x5b,                                     /*1dc: pop     %rbx                     */
  0x41, 0x5e,                               /*1dd: pop     %r14                     */

};

static void op_mul_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = a * 1 + 0;
}

static void op_mul_set_args_from_code(uint8_t *op, mrb_code c) {
  op_mul_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_div[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x30,                   /*01: sub     $0x30, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x28,             /*08: mov     %rbx, +0x28(%rsp)        */
  0xc7, 0x44, 0x24, 0x24, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x24(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x28,             /*15: mov     +0x28(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*1e: mov     %rax, +0x18(%rsp)        */
  0x48, 0x63, 0x4c, 0x24, 0x24,             /*23: movslq  +0x24(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*28: shl     $0x4, %rcx               */
  0x0f, 0xb7, 0x54, 0x08, 0x08,             /*2c: movzwl  +0x8(%rax,%rcx,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*31: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x08, 0x18,             /*34: movzbl  +0x18(%rax,%rcx,1), %eax */
  0x09, 0xd0,                               /*39: or      %edx, %eax               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*3b: cmp     $0x602, %eax             */
  0x7f, 0x61,                               /*40: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*42: cmp     $0x303, %eax             */
  0x0f, 0x85, 0x83, 0x00, 0x00, 0x00,       /*47: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*4d: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*52: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*57: shl     $0x4, %rax               */
  0x8b, 0x04, 0x01,                         /*5b: mov     (%rcx,%rax,1), %eax      */
  0x89, 0x44, 0x24, 0x14,                   /*5e: mov     %eax, +0x14(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*62: movslq  +0x24(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*67: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*6b: mov     +0x18(%rsp), %rcx        */
  0x8b, 0x44, 0x08, 0x10,                   /*70: mov     +0x10(%rax,%rcx,1), %eax */
  0x89, 0x44, 0x24, 0x10,                   /*74: mov     %eax, +0x10(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*78: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*7d: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*82: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00,/*86: movl    $0x6, +0x8(%rcx,%rax,1)  */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x14,       /*8e: cvtsi2sdl+0x14(%rsp), %xmm0      */
  0xf2, 0x0f, 0x2a, 0x4c, 0x24, 0x10,       /*94: cvtsi2sdl+0x10(%rsp), %xmm1      */
  0xf2, 0x0f, 0x5e, 0xc1,                   /*9a: divsd   %xmm1, %xmm0             */
  0xe9, 0x8a, 0x00, 0x00, 0x00,             /*9e: jmpq                             */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*a3: cmp     $0x603, %eax             */
  0x0f, 0x85, 0x8f, 0x00, 0x00, 0x00,       /*a8: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*ae: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*b3: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*b8: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*bc: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x2a, 0x4c, 0x01, 0x10,       /*c1: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm1 */
  0xf2, 0x0f, 0x5e, 0xc1,                   /*c7: divsd   %xmm1, %xmm0             */
  0xe9, 0x8d, 0x00, 0x00, 0x00,             /*cb: jmpq                             */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*d0: cmp     $0x306, %eax             */
  0x0f, 0x85, 0x89, 0x00, 0x00, 0x00,       /*d5: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*db: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*e0: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*e5: shl     $0x4, %rax               */
  0x8b, 0x04, 0x01,                         /*e9: mov     (%rcx,%rax,1), %eax      */
  0x89, 0x44, 0x24, 0x0c,                   /*ec: mov     %eax, +0xc(%rsp)         */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*f0: movslq  +0x24(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*f5: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*f9: mov     +0x18(%rsp), %rcx        */
  0xf2, 0x0f, 0x10, 0x44, 0x08, 0x10,       /*fe: movsd   +0x10(%rax,%rcx,1), %xmm0 */
  0xf2, 0x0f, 0x11, 0x04, 0x24,             /*104: movsd   %xmm0, (%rsp)            */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*109: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*10e: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*113: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x06, 0x00, 0x00, 0x00,/*117: movl    $0x6, +0x8(%rcx,%rax,1)  */
  0x0f, 0x57, 0xc0,                         /*11f: xorps   %xmm0, %xmm0             */
  0xf2, 0x0f, 0x2a, 0x44, 0x24, 0x0c,       /*122: cvtsi2sdl+0xc(%rsp), %xmm0       */
  0xf2, 0x0f, 0x5e, 0x04, 0x24,             /*128: divsd   (%rsp), %xmm0            */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*12d: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*132: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*137: shl     $0x4, %rax               */
  0xeb, 0x20,                               /*13b: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*13d: cmp     $0x606, %eax             */
  0x75, 0x20,                               /*142: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x24,             /*144: movslq  +0x24(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*149: mov     +0x18(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*14e: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*152: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x5e, 0x44, 0x01, 0x10,       /*157: divsd   +0x10(%rcx,%rax,1), %xmm0 */
  0xf2, 0x0f, 0x11, 0x04, 0x01,             /*15d: movsd   %xmm0, (%rcx,%rax,1)     */
  0xeb, 0x0b,                               /*162: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x28,             /*164: mov     +0x28(%rsp), %rdi        */
  0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*169: callq   +0x248(%rbx)             */
  0x48, 0x89, 0xdf,                         /*16f: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x30,                   /*172: add     $0x30, %rsp              */
  0x5b,                                     /*176: pop     %rbx                     */

};

static void op_div_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_div_set_args_from_code(uint8_t *op, mrb_code c) {
  op_div_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 19..22]]} */
static uint8_t op_eq[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x28,                   /*03: sub     $0x28, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x20,             /*0a: mov     %r14, +0x20(%rsp)        */
  0xc7, 0x44, 0x24, 0x1c, 0x00, 0x00, 0xab, 0x00,/*0f: movl    $0xab0000, +0x1c(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*17: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1c: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*20: mov     %rax, +0x10(%rsp)        */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*25: mov     +0x20(%rsp), %rcx        */
  0x48, 0x8b, 0x79, 0x58,                   /*2a: mov     +0x58(%rcx), %rdi        */
  0x48, 0x63, 0x5c, 0x24, 0x1c,             /*2e: movslq  +0x1c(%rsp), %rbx        */
  0x48, 0xc1, 0xe3, 0x04,                   /*33: shl     $0x4, %rbx               */
  0x48, 0x8b, 0x34, 0x18,                   /*37: mov     (%rax,%rbx,1), %rsi      */
  0x8b, 0x54, 0x18, 0x08,                   /*3b: mov     +0x8(%rax,%rbx,1), %edx  */
  0x48, 0x8b, 0x4c, 0x18, 0x10,             /*3f: mov     +0x10(%rax,%rbx,1), %rcx */
  0x44, 0x8b, 0x44, 0x18, 0x18,             /*44: mov     +0x18(%rax,%rbx,1), %r8d */
  0x41, 0xff, 0x96, 0x98, 0x00, 0x00, 0x00, /*49: callq   +0x98(%r14)              */
  0x84, 0xc0,                               /*50: test    %al, %al                 */
  0x0f, 0x85, 0xc7, 0x00, 0x00, 0x00,       /*52: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*58: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*5d: mov     +0x10(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*62: shl     $0x4, %rax               */
  0x0f, 0xb7, 0x54, 0x01, 0x08,             /*66: movzwl  +0x8(%rcx,%rax,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*6b: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x01, 0x18,             /*6e: movzbl  +0x18(%rcx,%rax,1), %eax */
  0x09, 0xd0,                               /*73: or      %edx, %eax               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*75: cmp     $0x602, %eax             */
  0x7f, 0x28,                               /*7a: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*7c: cmp     $0x303, %eax             */
  0x75, 0x44,                               /*81: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*83: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*88: mov     +0x10(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*8d: shl     $0x4, %rax               */
  0x8b, 0x14, 0x01,                         /*91: mov     (%rcx,%rax,1), %edx      */
  0x3b, 0x54, 0x01, 0x10,                   /*94: cmp     +0x10(%rcx,%rax,1), %edx */
  0x0f, 0x94, 0xc0,                         /*98: sete    %al                      */
  0x0f, 0xb6, 0xc0,                         /*9b: movzbl  %al, %eax                */
  0x89, 0x44, 0x24, 0x0c,                   /*9e: mov     %eax, +0xc(%rsp)         */
  0xeb, 0x74,                               /*a2: jmp                              */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*a4: cmp     $0x603, %eax             */
  0x75, 0x3c,                               /*a9: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*ab: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*b0: mov     +0x10(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*b5: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x44, 0x01, 0x10,       /*b9: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm0 */
  0xf2, 0x0f, 0xc2, 0x04, 0x01, 0x00,       /*bf: cmpeqsd (%rcx,%rax,1), %xmm0     */
  0xeb, 0x45,                               /*c5: jmp                              */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*c7: cmp     $0x306, %eax             */
  0x0f, 0x85, 0xa0, 0x00, 0x00, 0x00,       /*cc: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*d2: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*d7: mov     +0x10(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*dc: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x04, 0x01,             /*e0: cvtsi2sdl(%rcx,%rax,1), %xmm0    */
  0xeb, 0x1e,                               /*e5: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*e7: cmp     $0x606, %eax             */
  0x0f, 0x85, 0x80, 0x00, 0x00, 0x00,       /*ec: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*f2: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*f7: mov     +0x10(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*fc: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*100: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0xc2, 0x44, 0x01, 0x10, 0x00, /*105: cmpeqsd +0x10(%rcx,%rax,1), %xmm0 */
  0x66, 0x48, 0x0f, 0x7e, 0xc0,             /*10c: movq    %xmm0, %rax              */
  0x83, 0xe0, 0x01,                         /*111: and     $0x1, %eax               */
  0x89, 0x44, 0x24, 0x0c,                   /*114: mov     %eax, +0xc(%rsp)         */
  0x83, 0x7c, 0x24, 0x0c, 0x00,             /*118: cmpl    $0, +0xc(%rsp)           */
  0x74, 0x3b,                               /*11d: je                               */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*11f: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*124: mov     +0x10(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*129: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x02, 0x00, 0x00, 0x00,/*12d: movl    $0x2, +0x8(%rcx,%rax,1)  */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*135: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*13a: mov     +0x10(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*13f: shl     $0x4, %rax               */
  0xc7, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, /*143: movl    $0x1, (%rcx,%rax,1)      */
  0x4c, 0x89, 0xf7,                         /*14a: mov     %r14, %rdi               */
  0xe8, 0xae, 0xfe, 0xff, 0xff,             /*14d: callq                            */
  0x48, 0x83, 0xc4, 0x28,                   /*152: add     $0x28, %rsp              */
  0x5b,                                     /*156: pop     %rbx                     */
  0x41, 0x5e,                               /*157: pop     %r14                     */
  0xeb, 0x26,                               /*159: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*15b: movslq  +0x1c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*160: mov     +0x10(%rsp), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*165: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00,/*169: movl    $0, +0x8(%rcx,%rax,1)    */
  0xeb, 0xc3,                               /*171: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x20,             /*173: mov     +0x20(%rsp), %rdi        */
  0xeb, 0xca,                               /*178: jmp                              */

};

static void op_eq_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = a * 1 + 0;
}

static void op_eq_set_args_from_code(uint8_t *op, mrb_code c) {
  op_eq_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_lt[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x20,                   /*01: sub     $0x20, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x18,             /*08: mov     %rbx, +0x18(%rsp)        */
  0xc7, 0x44, 0x24, 0x14, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x14(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*15: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*1e: mov     %rax, +0x8(%rsp)         */
  0x48, 0x63, 0x4c, 0x24, 0x14,             /*23: movslq  +0x14(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*28: shl     $0x4, %rcx               */
  0x0f, 0xb7, 0x54, 0x08, 0x08,             /*2c: movzwl  +0x8(%rax,%rcx,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*31: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x08, 0x18,             /*34: movzbl  +0x18(%rax,%rcx,1), %eax */
  0x09, 0xd0,                               /*39: or      %edx, %eax               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*3b: cmp     $0x602, %eax             */
  0x7f, 0x21,                               /*40: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*42: cmp     $0x303, %eax             */
  0x75, 0x37,                               /*47: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*49: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*4e: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*53: shl     $0x4, %rax               */
  0x8b, 0x14, 0x01,                         /*57: mov     (%rcx,%rax,1), %edx      */
  0x3b, 0x54, 0x01, 0x10,                   /*5a: cmp     +0x10(%rcx,%rax,1), %edx */
  0x0f, 0x9c, 0xc0,                         /*5e: setl    %al                      */
  0xeb, 0x6a,                               /*61: jmp                              */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*63: cmp     $0x603, %eax             */
  0x75, 0x40,                               /*68: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*6a: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*6f: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*74: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x44, 0x01, 0x10,       /*78: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm0 */
  0xeb, 0x45,                               /*7e: jmp                              */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*80: cmp     $0x306, %eax             */
  0x0f, 0x85, 0x95, 0x00, 0x00, 0x00,       /*85: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*8b: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*90: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*95: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x04, 0x01,             /*99: cvtsi2sdl(%rcx,%rax,1), %xmm0    */
  0xf2, 0x0f, 0x10, 0x4c, 0x01, 0x10,       /*9e: movsd   +0x10(%rcx,%rax,1), %xmm1 */
  0x66, 0x0f, 0x2e, 0xc8,                   /*a4: ucomisd %xmm0, %xmm1             */
  0xeb, 0x20,                               /*a8: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*aa: cmp     $0x606, %eax             */
  0x75, 0x6f,                               /*af: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*b1: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*b6: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*bb: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x44, 0x01, 0x10,       /*bf: movsd   +0x10(%rcx,%rax,1), %xmm0 */
  0x66, 0x0f, 0x2e, 0x04, 0x01,             /*c5: ucomisd (%rcx,%rax,1), %xmm0     */
  0x0f, 0x97, 0xc0,                         /*ca: seta    %al                      */
  0x0f, 0xb6, 0xc0,                         /*cd: movzbl  %al, %eax                */
  0x89, 0x44, 0x24, 0x04,                   /*d0: mov     %eax, +0x4(%rsp)         */
  0x83, 0x7c, 0x24, 0x04, 0x00,             /*d4: cmpl    $0, +0x4(%rsp)           */
  0x74, 0x18,                               /*d9: je                               */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*db: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*e0: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*e5: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x02, 0x00, 0x00, 0x00,/*e9: movl    $0x2, +0x8(%rcx,%rax,1)  */
  0xeb, 0x16,                               /*f1: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*f3: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*f8: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*fd: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00,/*101: movl    $0, +0x8(%rcx,%rax,1)    */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*109: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*10e: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*113: shl     $0x4, %rax               */
  0xc7, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, /*117: movl    $0x1, (%rcx,%rax,1)      */
  0xeb, 0x0b,                               /*11e: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x18,             /*120: mov     +0x18(%rsp), %rdi        */
  0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*125: callq   +0x248(%rbx)             */
  0x48, 0x89, 0xdf,                         /*12b: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x20,                   /*12e: add     $0x20, %rsp              */
  0x5b,                                     /*132: pop     %rbx                     */

};

static void op_lt_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_lt_set_args_from_code(uint8_t *op, mrb_code c) {
  op_lt_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_le[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x20,                   /*01: sub     $0x20, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x18,             /*08: mov     %rbx, +0x18(%rsp)        */
  0xc7, 0x44, 0x24, 0x14, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x14(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*15: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*1e: mov     %rax, +0x8(%rsp)         */
  0x48, 0x63, 0x4c, 0x24, 0x14,             /*23: movslq  +0x14(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*28: shl     $0x4, %rcx               */
  0x0f, 0xb7, 0x54, 0x08, 0x08,             /*2c: movzwl  +0x8(%rax,%rcx,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*31: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x08, 0x18,             /*34: movzbl  +0x18(%rax,%rcx,1), %eax */
  0x09, 0xd0,                               /*39: or      %edx, %eax               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*3b: cmp     $0x602, %eax             */
  0x7f, 0x21,                               /*40: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*42: cmp     $0x303, %eax             */
  0x75, 0x37,                               /*47: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*49: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*4e: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*53: shl     $0x4, %rax               */
  0x8b, 0x14, 0x01,                         /*57: mov     (%rcx,%rax,1), %edx      */
  0x3b, 0x54, 0x01, 0x10,                   /*5a: cmp     +0x10(%rcx,%rax,1), %edx */
  0x0f, 0x9e, 0xc0,                         /*5e: setle   %al                      */
  0xeb, 0x6a,                               /*61: jmp                              */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*63: cmp     $0x603, %eax             */
  0x75, 0x40,                               /*68: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*6a: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*6f: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*74: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x44, 0x01, 0x10,       /*78: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm0 */
  0xeb, 0x45,                               /*7e: jmp                              */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*80: cmp     $0x306, %eax             */
  0x0f, 0x85, 0x95, 0x00, 0x00, 0x00,       /*85: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*8b: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*90: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*95: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x04, 0x01,             /*99: cvtsi2sdl(%rcx,%rax,1), %xmm0    */
  0xf2, 0x0f, 0x10, 0x4c, 0x01, 0x10,       /*9e: movsd   +0x10(%rcx,%rax,1), %xmm1 */
  0x66, 0x0f, 0x2e, 0xc8,                   /*a4: ucomisd %xmm0, %xmm1             */
  0xeb, 0x20,                               /*a8: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*aa: cmp     $0x606, %eax             */
  0x75, 0x6f,                               /*af: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*b1: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*b6: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*bb: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x44, 0x01, 0x10,       /*bf: movsd   +0x10(%rcx,%rax,1), %xmm0 */
  0x66, 0x0f, 0x2e, 0x04, 0x01,             /*c5: ucomisd (%rcx,%rax,1), %xmm0     */
  0x0f, 0x93, 0xc0,                         /*ca: setae   %al                      */
  0x0f, 0xb6, 0xc0,                         /*cd: movzbl  %al, %eax                */
  0x89, 0x44, 0x24, 0x04,                   /*d0: mov     %eax, +0x4(%rsp)         */
  0x83, 0x7c, 0x24, 0x04, 0x00,             /*d4: cmpl    $0, +0x4(%rsp)           */
  0x74, 0x18,                               /*d9: je                               */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*db: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*e0: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*e5: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x02, 0x00, 0x00, 0x00,/*e9: movl    $0x2, +0x8(%rcx,%rax,1)  */
  0xeb, 0x16,                               /*f1: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*f3: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*f8: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*fd: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00,/*101: movl    $0, +0x8(%rcx,%rax,1)    */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*109: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*10e: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*113: shl     $0x4, %rax               */
  0xc7, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, /*117: movl    $0x1, (%rcx,%rax,1)      */
  0xeb, 0x0b,                               /*11e: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x18,             /*120: mov     +0x18(%rsp), %rdi        */
  0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*125: callq   +0x248(%rbx)             */
  0x48, 0x89, 0xdf,                         /*12b: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x20,                   /*12e: add     $0x20, %rsp              */
  0x5b,                                     /*132: pop     %rbx                     */

};

static void op_le_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_le_set_args_from_code(uint8_t *op, mrb_code c) {
  op_le_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_gt[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x20,                   /*01: sub     $0x20, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x18,             /*08: mov     %rbx, +0x18(%rsp)        */
  0xc7, 0x44, 0x24, 0x14, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x14(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*15: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*1e: mov     %rax, +0x8(%rsp)         */
  0x48, 0x63, 0x4c, 0x24, 0x14,             /*23: movslq  +0x14(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*28: shl     $0x4, %rcx               */
  0x0f, 0xb7, 0x54, 0x08, 0x08,             /*2c: movzwl  +0x8(%rax,%rcx,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*31: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x08, 0x18,             /*34: movzbl  +0x18(%rax,%rcx,1), %eax */
  0x09, 0xd0,                               /*39: or      %edx, %eax               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*3b: cmp     $0x602, %eax             */
  0x7f, 0x21,                               /*40: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*42: cmp     $0x303, %eax             */
  0x75, 0x43,                               /*47: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*49: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*4e: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*53: shl     $0x4, %rax               */
  0x8b, 0x14, 0x01,                         /*57: mov     (%rcx,%rax,1), %edx      */
  0x3b, 0x54, 0x01, 0x10,                   /*5a: cmp     +0x10(%rcx,%rax,1), %edx */
  0x0f, 0x9f, 0xc0,                         /*5e: setg    %al                      */
  0xeb, 0x6c,                               /*61: jmp                              */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*63: cmp     $0x603, %eax             */
  0x75, 0x42,                               /*68: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*6a: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*6f: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*74: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*78: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x2a, 0x4c, 0x01, 0x10,       /*7d: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm1 */
  0x66, 0x0f, 0x2e, 0xc1,                   /*83: ucomisd %xmm1, %xmm0             */
  0x0f, 0x97, 0xc0,                         /*87: seta    %al                      */
  0xeb, 0x43,                               /*8a: jmp                              */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*8c: cmp     $0x306, %eax             */
  0x0f, 0x85, 0x8b, 0x00, 0x00, 0x00,       /*91: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*97: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*9c: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*a1: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x04, 0x01,             /*a5: cvtsi2sdl(%rcx,%rax,1), %xmm0    */
  0xeb, 0x1a,                               /*aa: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*ac: cmp     $0x606, %eax             */
  0x75, 0x6f,                               /*b1: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*b3: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*b8: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*bd: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*c1: movsd   (%rcx,%rax,1), %xmm0     */
  0x66, 0x0f, 0x2e, 0x44, 0x01, 0x10,       /*c6: ucomisd +0x10(%rcx,%rax,1), %xmm0 */
  0x0f, 0x97, 0xc0,                         /*cc: seta    %al                      */
  0x0f, 0xb6, 0xc0,                         /*cf: movzbl  %al, %eax                */
  0x89, 0x44, 0x24, 0x04,                   /*d2: mov     %eax, +0x4(%rsp)         */
  0x83, 0x7c, 0x24, 0x04, 0x00,             /*d6: cmpl    $0, +0x4(%rsp)           */
  0x74, 0x18,                               /*db: je                               */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*dd: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*e2: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*e7: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x02, 0x00, 0x00, 0x00,/*eb: movl    $0x2, +0x8(%rcx,%rax,1)  */
  0xeb, 0x16,                               /*f3: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*f5: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*fa: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*ff: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00,/*103: movl    $0, +0x8(%rcx,%rax,1)    */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*10b: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*110: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*115: shl     $0x4, %rax               */
  0xc7, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, /*119: movl    $0x1, (%rcx,%rax,1)      */
  0xeb, 0x0b,                               /*120: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x18,             /*122: mov     +0x18(%rsp), %rdi        */
  0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*127: callq   +0x248(%rbx)             */
  0x48, 0x89, 0xdf,                         /*12d: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x20,                   /*130: add     $0x20, %rsp              */
  0x5b,                                     /*134: pop     %rbx                     */

};

static void op_gt_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_gt_set_args_from_code(uint8_t *op, mrb_code c) {
  op_gt_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_ge[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x20,                   /*01: sub     $0x20, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x18,             /*08: mov     %rbx, +0x18(%rsp)        */
  0xc7, 0x44, 0x24, 0x14, 0x00, 0x00, 0xab, 0x00,/*0d: movl    $0xab0000, +0x14(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*15: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*1e: mov     %rax, +0x8(%rsp)         */
  0x48, 0x63, 0x4c, 0x24, 0x14,             /*23: movslq  +0x14(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*28: shl     $0x4, %rcx               */
  0x0f, 0xb7, 0x54, 0x08, 0x08,             /*2c: movzwl  +0x8(%rax,%rcx,1), %edx  */
  0xc1, 0xe2, 0x08,                         /*31: shl     $0x8, %edx               */
  0x0f, 0xb6, 0x44, 0x08, 0x18,             /*34: movzbl  +0x18(%rax,%rcx,1), %eax */
  0x09, 0xd0,                               /*39: or      %edx, %eax               */
  0x3d, 0x02, 0x06, 0x00, 0x00,             /*3b: cmp     $0x602, %eax             */
  0x7f, 0x21,                               /*40: jg                               */
  0x3d, 0x03, 0x03, 0x00, 0x00,             /*42: cmp     $0x303, %eax             */
  0x75, 0x43,                               /*47: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*49: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*4e: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*53: shl     $0x4, %rax               */
  0x8b, 0x14, 0x01,                         /*57: mov     (%rcx,%rax,1), %edx      */
  0x3b, 0x54, 0x01, 0x10,                   /*5a: cmp     +0x10(%rcx,%rax,1), %edx */
  0x0f, 0x9d, 0xc0,                         /*5e: setge   %al                      */
  0xeb, 0x6c,                               /*61: jmp                              */
  0x3d, 0x03, 0x06, 0x00, 0x00,             /*63: cmp     $0x603, %eax             */
  0x75, 0x42,                               /*68: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*6a: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*6f: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*74: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*78: movsd   (%rcx,%rax,1), %xmm0     */
  0xf2, 0x0f, 0x2a, 0x4c, 0x01, 0x10,       /*7d: cvtsi2sdl+0x10(%rcx,%rax,1), %xmm1 */
  0x66, 0x0f, 0x2e, 0xc1,                   /*83: ucomisd %xmm1, %xmm0             */
  0x0f, 0x93, 0xc0,                         /*87: setae   %al                      */
  0xeb, 0x43,                               /*8a: jmp                              */
  0x3d, 0x06, 0x03, 0x00, 0x00,             /*8c: cmp     $0x306, %eax             */
  0x0f, 0x85, 0x8b, 0x00, 0x00, 0x00,       /*91: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*97: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*9c: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*a1: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x2a, 0x04, 0x01,             /*a5: cvtsi2sdl(%rcx,%rax,1), %xmm0    */
  0xeb, 0x1a,                               /*aa: jmp                              */
  0x3d, 0x06, 0x06, 0x00, 0x00,             /*ac: cmp     $0x606, %eax             */
  0x75, 0x6f,                               /*b1: jne                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*b3: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*b8: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*bd: shl     $0x4, %rax               */
  0xf2, 0x0f, 0x10, 0x04, 0x01,             /*c1: movsd   (%rcx,%rax,1), %xmm0     */
  0x66, 0x0f, 0x2e, 0x44, 0x01, 0x10,       /*c6: ucomisd +0x10(%rcx,%rax,1), %xmm0 */
  0x0f, 0x93, 0xc0,                         /*cc: setae   %al                      */
  0x0f, 0xb6, 0xc0,                         /*cf: movzbl  %al, %eax                */
  0x89, 0x44, 0x24, 0x04,                   /*d2: mov     %eax, +0x4(%rsp)         */
  0x83, 0x7c, 0x24, 0x04, 0x00,             /*d6: cmpl    $0, +0x4(%rsp)           */
  0x74, 0x18,                               /*db: je                               */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*dd: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*e2: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*e7: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x02, 0x00, 0x00, 0x00,/*eb: movl    $0x2, +0x8(%rcx,%rax,1)  */
  0xeb, 0x16,                               /*f3: jmp                              */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*f5: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*fa: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*ff: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00,/*103: movl    $0, +0x8(%rcx,%rax,1)    */
  0x48, 0x63, 0x44, 0x24, 0x14,             /*10b: movslq  +0x14(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*110: mov     +0x8(%rsp), %rcx         */
  0x48, 0xc1, 0xe0, 0x04,                   /*115: shl     $0x4, %rax               */
  0xc7, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, /*119: movl    $0x1, (%rcx,%rax,1)      */
  0xeb, 0x0b,                               /*120: jmp                              */
  0x48, 0x8b, 0x7c, 0x24, 0x18,             /*122: mov     +0x18(%rsp), %rdi        */
  0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*127: callq   +0x248(%rbx)             */
  0x48, 0x89, 0xdf,                         /*12d: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x20,                   /*130: add     $0x20, %rsp              */
  0x5b,                                     /*134: pop     %rbx                     */

};

static void op_ge_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_ge_set_args_from_code(uint8_t *op, mrb_code c) {
  op_ge_set_args(op, GETARG_A(c),0,0);
}


/* args: {"b"=>[[16, 0, 26..29]], "c"=>[[1, 0, 31..34]], "a"=>[[16, 8, 61..64], [16, 0, 68..71]]} */
static uint8_t op_array[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*0a: mov     %rbx, +0x10(%rsp)        */
  0x4c, 0x8b, 0x73, 0x18,                   /*0f: mov     +0x18(%rbx), %r14        */
  0x48, 0x8b, 0x7b, 0x58,                   /*13: mov     +0x58(%rbx), %rdi        */
  0x49, 0x8d, 0x96, 0x00, 0x10, 0xbc, 0x00, /*17: lea     +0xbc1000(%r14), %rdx    */
  0xbe, 0x00, 0x00, 0xcd, 0x00,             /*1e: mov     $0xcd0000, %esi          */
  0xff, 0x93, 0x30, 0x02, 0x00, 0x00,       /*23: callq   +0x230(%rbx)             */
  0x48, 0x89, 0x04, 0x24,                   /*29: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*2d: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*31: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*35: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*3a: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*41: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*48: mov     +0x10(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*4d: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*50: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*54: mov     %ecx, +0xdc(%rax)        */
  0x48, 0x89, 0xdf,                         /*5a: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*5d: add     $0x18, %rsp              */
  0x5b,                                     /*61: pop     %rbx                     */
  0x41, 0x5e,                               /*62: pop     %r14                     */

};

static void op_array_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 26)) = b * 16 + 0;
  *((int32_t *)(op + 31)) = c * 1 + 0;
  *((int32_t *)(op + 61)) = a * 16 + 8;
  *((int32_t *)(op + 68)) = a * 16 + 0;
}

static void op_array_set_args_from_code(uint8_t *op, mrb_code c) {
  op_array_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"b"=>[[16, 0, 28..31], [16, 8, 34..37]], "a"=>[[16, 0, 64..67], [16, 8, 70..73]]} */
static uint8_t op_arycat[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x53,                                     /*04: push    %rbx                     */
  0x48, 0x83, 0xec, 0x20,                   /*05: sub     $0x20, %rsp              */
  0x49, 0x89, 0xff,                         /*09: mov     %rdi, %r15               */
  0x4c, 0x89, 0x7c, 0x24, 0x18,             /*0c: mov     %r15, +0x18(%rsp)        */
  0x49, 0x8b, 0x5f, 0x18,                   /*11: mov     +0x18(%r15), %rbx        */
  0x4d, 0x8b, 0x77, 0x58,                   /*15: mov     +0x58(%r15), %r14        */
  0x48, 0x8b, 0xb3, 0x00, 0x10, 0xbc, 0x00, /*19: mov     +0xbc1000(%rbx), %rsi    */
  0x8b, 0x93, 0x08, 0x10, 0xbc, 0x00,       /*20: mov     +0xbc1008(%rbx), %edx    */
  0x4c, 0x89, 0xf7,                         /*26: mov     %r14, %rdi               */
  0x41, 0xff, 0x97, 0xf0, 0x00, 0x00, 0x00, /*29: callq   +0xf0(%r15)              */
  0x41, 0x89, 0xd0,                         /*30: mov     %edx, %r8d               */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*33: mov     %rax, +0x8(%rsp)         */
  0x44, 0x89, 0x44, 0x24, 0x10,             /*38: mov     %r8d, +0x10(%rsp)        */
  0x48, 0x8b, 0xb3, 0x00, 0x10, 0xab, 0x00, /*3d: mov     +0xab1000(%rbx), %rsi    */
  0x8b, 0x93, 0x08, 0x10, 0xab, 0x00,       /*44: mov     +0xab1008(%rbx), %edx    */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*4a: mov     +0x8(%rsp), %rcx         */
  0x4c, 0x89, 0xf7,                         /*4f: mov     %r14, %rdi               */
  0x41, 0xff, 0x97, 0x98, 0x01, 0x00, 0x00, /*52: callq   +0x198(%r15)             */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*59: mov     +0x18(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*5e: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*61: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*65: mov     %ecx, +0xdc(%rax)        */
  0x4c, 0x89, 0xff,                         /*6b: mov     %r15, %rdi               */
  0x48, 0x83, 0xc4, 0x20,                   /*6e: add     $0x20, %rsp              */
  0x5b,                                     /*72: pop     %rbx                     */
  0x41, 0x5e,                               /*73: pop     %r14                     */
  0x41, 0x5f,                               /*75: pop     %r15                     */

};

static void op_arycat_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 28)) = b * 16 + 0;
  *((int32_t *)(op + 34)) = b * 16 + 8;
  *((int32_t *)(op + 64)) = a * 16 + 0;
  *((int32_t *)(op + 70)) = a * 16 + 8;
}

static void op_arycat_set_args_from_code(uint8_t *op, mrb_code c) {
  op_arycat_set_args(op, GETARG_A(c),GETARG_B(c),0);
}


/* args: {"a"=>[[16, 0, 24..27], [16, 8, 30..33]], "b"=>[[16, 0, 37..40], [16, 8, 44..47]]} */
static uint8_t op_arypush[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x43, 0x18,                   /*0d: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x7b, 0x58,                   /*11: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xab, 0x00, /*15: mov     +0xab1000(%rax), %rsi    */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*1c: mov     +0xab1008(%rax), %edx    */
  0x48, 0x8b, 0x88, 0x00, 0x10, 0xbc, 0x00, /*22: mov     +0xbc1000(%rax), %rcx    */
  0x44, 0x8b, 0x80, 0x08, 0x10, 0xbc, 0x00, /*29: mov     +0xbc1008(%rax), %r8d    */
  0xff, 0x93, 0x50, 0x02, 0x00, 0x00,       /*30: callq   +0x250(%rbx)             */
  0x48, 0x89, 0xdf,                         /*36: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*39: add     $0x10, %rsp              */
  0x5b,                                     /*3d: pop     %rbx                     */

};

static void op_arypush_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 24)) = a * 16 + 0;
  *((int32_t *)(op + 30)) = a * 16 + 8;
  *((int32_t *)(op + 37)) = b * 16 + 0;
  *((int32_t *)(op + 44)) = b * 16 + 8;
}

static void op_arypush_set_args_from_code(uint8_t *op, mrb_code c) {
  op_arypush_set_args(op, GETARG_A(c),GETARG_B(c),0);
}


/* args: {"a"=>[[1, 0, 19..22], [16, 8, 125..128], [16, 0, 132..135], [16, 8, 220..223], [16, 0, 227..230]], "c"=>[[1, 0, 27..30]], "b"=>[[16, 0, 43..46], [16, 8, 50..53]]} */
static uint8_t op_aref[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x38,                   /*03: sub     $0x38, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x30,             /*0a: mov     %rbx, +0x30(%rsp)        */
  0xc7, 0x44, 0x24, 0x2c, 0x00, 0x00, 0xab, 0x00,/*0f: movl    $0xab0000, +0x2c(%rsp)   */
  0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0xcd, 0x00,/*17: movl    $0xcd0000, +0x28(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*1f: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*24: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x88, 0x00, 0x10, 0xbc, 0x00, /*28: mov     +0xbc1000(%rax), %rcx    */
  0x48, 0x8b, 0x80, 0x08, 0x10, 0xbc, 0x00, /*2f: mov     +0xbc1008(%rax), %rax    */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*36: mov     %rax, +0x20(%rsp)        */
  0x48, 0x89, 0x4c, 0x24, 0x18,             /*3b: mov     %rcx, +0x18(%rsp)        */
  0x83, 0x7c, 0x24, 0x20, 0x0e,             /*40: cmpl    $0xe, +0x20(%rsp)        */
  0x75, 0x43,                               /*45: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*47: mov     +0x30(%rsp), %rax        */
  0x4c, 0x8b, 0x70, 0x18,                   /*4c: mov     +0x18(%rax), %r14        */
  0x48, 0x8b, 0x78, 0x58,                   /*50: mov     +0x58(%rax), %rdi        */
  0x8b, 0x4c, 0x24, 0x28,                   /*54: mov     +0x28(%rsp), %ecx        */
  0x48, 0x8b, 0x74, 0x24, 0x18,             /*58: mov     +0x18(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x20,                   /*5d: mov     +0x20(%rsp), %edx        */
  0xff, 0x93, 0x08, 0x02, 0x00, 0x00,       /*61: callq   +0x208(%rbx)             */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*67: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*6c: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*70: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*75: mov     +0x10(%rsp), %rcx        */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*7a: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*81: mov     %rax, +0xab1000(%r14)    */
  0xeb, 0x5d,                               /*88: jmp                              */
  0x83, 0x7c, 0x24, 0x28, 0x00,             /*8a: cmpl    $0, +0x28(%rsp)          */
  0x74, 0x35,                               /*8f: je                               */
  0x48, 0x63, 0x44, 0x24, 0x2c,             /*91: movslq  +0x2c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*96: mov     +0x30(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*9b: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*9f: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00,/*a3: movl    $0, +0x8(%rcx,%rax,1)    */
  0x48, 0x63, 0x44, 0x24, 0x2c,             /*ab: movslq  +0x2c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*b0: mov     +0x30(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*b5: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*b9: shl     $0x4, %rax               */
  0xc7, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, /*bd: movl    $0, (%rcx,%rax,1)        */
  0xeb, 0x21,                               /*c4: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*c6: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*cb: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*cf: mov     +0x18(%rsp), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x20,             /*d4: mov     +0x20(%rsp), %rdx        */
  0x48, 0x89, 0x90, 0x08, 0x10, 0xab, 0x00, /*d9: mov     %rdx, +0xab1008(%rax)    */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*e0: mov     %rcx, +0xab1000(%rax)    */
  0x48, 0x89, 0xdf,                         /*e7: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x38,                   /*ea: add     $0x38, %rsp              */
  0x5b,                                     /*ee: pop     %rbx                     */
  0x41, 0x5e,                               /*ef: pop     %r14                     */

};

static void op_aref_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = a * 1 + 0;
  *((int32_t *)(op + 125)) = a * 16 + 8;
  *((int32_t *)(op + 132)) = a * 16 + 0;
  *((int32_t *)(op + 220)) = a * 16 + 8;
  *((int32_t *)(op + 227)) = a * 16 + 0;
  *((int32_t *)(op + 27)) = c * 1 + 0;
  *((int32_t *)(op + 43)) = b * 16 + 0;
  *((int32_t *)(op + 50)) = b * 16 + 8;
}

static void op_aref_set_args_from_code(uint8_t *op, mrb_code c) {
  op_aref_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"b"=>[[16, 0, 24..27], [16, 8, 30..33]], "a"=>[[16, 0, 37..40], [16, 8, 44..47]], "c"=>[[1, 0, 49..52]]} */
static uint8_t op_aset[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x43, 0x18,                   /*0d: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x7b, 0x58,                   /*11: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xbc, 0x00, /*15: mov     +0xbc1000(%rax), %rsi    */
  0x8b, 0x90, 0x08, 0x10, 0xbc, 0x00,       /*1c: mov     +0xbc1008(%rax), %edx    */
  0x4c, 0x8b, 0x80, 0x00, 0x10, 0xab, 0x00, /*22: mov     +0xab1000(%rax), %r8     */
  0x44, 0x8b, 0x88, 0x08, 0x10, 0xab, 0x00, /*29: mov     +0xab1008(%rax), %r9d    */
  0xb9, 0x00, 0x00, 0xcd, 0x00,             /*30: mov     $0xcd0000, %ecx          */
  0xff, 0x93, 0x40, 0x02, 0x00, 0x00,       /*35: callq   +0x240(%rbx)             */
  0x48, 0x89, 0xdf,                         /*3b: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*3e: add     $0x10, %rsp              */
  0x5b,                                     /*42: pop     %rbx                     */

};

static void op_aset_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 24)) = b * 16 + 0;
  *((int32_t *)(op + 30)) = b * 16 + 8;
  *((int32_t *)(op + 37)) = a * 16 + 0;
  *((int32_t *)(op + 44)) = a * 16 + 8;
  *((int32_t *)(op + 49)) = c * 1 + 0;
}

static void op_aset_set_args_from_code(uint8_t *op, mrb_code c) {
  op_aset_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"a"=>[[1, 0, 21..24]], "b"=>[[1, 0, 66..69]], "c"=>[[1, 0, 74..77]]} */
static uint8_t op_apost[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x53,                                     /*04: push    %rbx                     */
  0x48, 0x83, 0xec, 0x70,                   /*05: sub     $0x70, %rsp              */
  0x49, 0x89, 0xfe,                         /*09: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x68,             /*0c: mov     %r14, +0x68(%rsp)        */
  0xc7, 0x44, 0x24, 0x64, 0x00, 0x00, 0xab, 0x00,/*11: movl    $0xab0000, +0x64(%rsp)   */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*19: movslq  +0x64(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x68,             /*1e: mov     +0x68(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*23: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*27: shl     $0x4, %rax               */
  0x48, 0x8b, 0x14, 0x01,                   /*2b: mov     (%rcx,%rax,1), %rdx      */
  0x48, 0x8b, 0x44, 0x01, 0x08,             /*2f: mov     +0x8(%rcx,%rax,1), %rax  */
  0x48, 0x89, 0x44, 0x24, 0x58,             /*34: mov     %rax, +0x58(%rsp)        */
  0x48, 0x89, 0x54, 0x24, 0x50,             /*39: mov     %rdx, +0x50(%rsp)        */
  0xc7, 0x44, 0x24, 0x4c, 0x00, 0x00, 0xbc, 0x00,/*3e: movl    $0xbc0000, +0x4c(%rsp)   */
  0xc7, 0x44, 0x24, 0x48, 0x00, 0x00, 0xcd, 0x00,/*46: movl    $0xcd0000, +0x48(%rsp)   */
  0x83, 0x7c, 0x24, 0x58, 0x0e,             /*4e: cmpl    $0xe, +0x58(%rsp)        */
  0x0f, 0x85, 0xe1, 0x00, 0x00, 0x00,       /*53: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x50,             /*59: mov     +0x50(%rsp), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*5e: mov     %rax, +0x30(%rsp)        */
  0x8b, 0x40, 0x18,                         /*63: mov     +0x18(%rax), %eax        */
  0x89, 0x44, 0x24, 0x2c,                   /*66: mov     %eax, +0x2c(%rsp)        */
  0x8b, 0x4c, 0x24, 0x4c,                   /*6a: mov     +0x4c(%rsp), %ecx        */
  0x03, 0x4c, 0x24, 0x48,                   /*6e: add     +0x48(%rsp), %ecx        */
  0x39, 0xc8,                               /*72: cmp     %ecx, %eax               */
  0x0f, 0x8e, 0x51, 0x01, 0x00, 0x00,       /*74: jle                              */
  0x48, 0x63, 0x5c, 0x24, 0x64,             /*7a: movslq  +0x64(%rsp), %rbx        */
  0x8d, 0x43, 0x01,                         /*7f: lea     +0x1(%rbx), %eax         */
  0x89, 0x44, 0x24, 0x64,                   /*82: mov     %eax, +0x64(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*86: mov     +0x68(%rsp), %rax        */
  0x48, 0xc1, 0xe3, 0x04,                   /*8b: shl     $0x4, %rbx               */
  0x4c, 0x8b, 0x78, 0x18,                   /*8f: mov     +0x18(%rax), %r15        */
  0x48, 0x8b, 0x78, 0x58,                   /*93: mov     +0x58(%rax), %rdi        */
  0x8b, 0x74, 0x24, 0x2c,                   /*97: mov     +0x2c(%rsp), %esi        */
  0x48, 0x63, 0x54, 0x24, 0x4c,             /*9b: movslq  +0x4c(%rsp), %rdx        */
  0x29, 0xd6,                               /*a0: sub     %edx, %esi               */
  0x2b, 0x74, 0x24, 0x48,                   /*a2: sub     +0x48(%rsp), %esi        */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*a6: mov     +0x30(%rsp), %rax        */
  0x48, 0xc1, 0xe2, 0x04,                   /*ab: shl     $0x4, %rdx               */
  0x48, 0x03, 0x50, 0x28,                   /*af: add     +0x28(%rax), %rdx        */
  0x41, 0xff, 0x96, 0x30, 0x02, 0x00, 0x00, /*b3: callq   +0x230(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*ba: mov     %rax, +0x18(%rsp)        */
  0x89, 0x54, 0x24, 0x20,                   /*bf: mov     %edx, +0x20(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*c3: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x20,             /*c8: mov     +0x20(%rsp), %rcx        */
  0x49, 0x89, 0x4c, 0x1f, 0x08,             /*cd: mov     %rcx, +0x8(%r15,%rbx,1)  */
  0x49, 0x89, 0x04, 0x1f,                   /*d2: mov     %rax, (%r15,%rbx,1)      */
  0xeb, 0x4e,                               /*d6: jmp                              */
  0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*d8: nopl    +0(%rax,%rax,1)          */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*e0: movslq  +0x64(%rsp), %rax        */
  0x8d, 0x48, 0x01,                         /*e5: lea     +0x1(%rax), %ecx         */
  0x89, 0x4c, 0x24, 0x64,                   /*e8: mov     %ecx, +0x64(%rsp)        */
  0x48, 0x8b, 0x4c, 0x24, 0x68,             /*ec: mov     +0x68(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*f1: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*f5: shl     $0x4, %rax               */
  0x48, 0x63, 0x54, 0x24, 0x2c,             /*f9: movslq  +0x2c(%rsp), %rdx        */
  0x48, 0x63, 0x74, 0x24, 0x48,             /*fe: movslq  +0x48(%rsp), %rsi        */
  0x48, 0x29, 0xf2,                         /*103: sub     %rsi, %rdx               */
  0x48, 0xc1, 0xe2, 0x04,                   /*106: shl     $0x4, %rdx               */
  0x48, 0x8b, 0x74, 0x24, 0x30,             /*10a: mov     +0x30(%rsp), %rsi        */
  0x48, 0x8b, 0x76, 0x28,                   /*10f: mov     +0x28(%rsi), %rsi        */
  0x48, 0x8b, 0x7c, 0x32, 0xf0,             /*113: mov     -0x10(%rdx,%rsi,1), %rdi */
  0x48, 0x8b, 0x54, 0x32, 0xf8,             /*118: mov     -0x8(%rdx,%rsi,1), %rdx  */
  0x48, 0x89, 0x54, 0x01, 0x08,             /*11d: mov     %rdx, +0x8(%rcx,%rax,1)  */
  0x48, 0x89, 0x3c, 0x01,                   /*122: mov     %rdi, (%rcx,%rax,1)      */
  0x8b, 0x44, 0x24, 0x48,                   /*126: mov     +0x48(%rsp), %eax        */
  0x8d, 0x48, 0xff,                         /*12a: lea     -0x1(%rax), %ecx         */
  0x89, 0x4c, 0x24, 0x48,                   /*12d: mov     %ecx, +0x48(%rsp)        */
  0x85, 0xc0,                               /*131: test    %eax, %eax               */
  0x75, 0xab,                               /*133: jne                              */
  0xe9, 0x97, 0x01, 0x00, 0x00,             /*135: jmpq                             */
  0x48, 0x63, 0x5c, 0x24, 0x64,             /*13a: movslq  +0x64(%rsp), %rbx        */
  0x8d, 0x43, 0x01,                         /*13f: lea     +0x1(%rbx), %eax         */
  0x89, 0x44, 0x24, 0x64,                   /*142: mov     %eax, +0x64(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*146: mov     +0x68(%rsp), %rax        */
  0x48, 0xc1, 0xe3, 0x04,                   /*14b: shl     $0x4, %rbx               */
  0x4c, 0x8b, 0x78, 0x18,                   /*14f: mov     +0x18(%rax), %r15        */
  0x48, 0x8b, 0x78, 0x58,                   /*153: mov     +0x58(%rax), %rdi        */
  0x31, 0xf6,                               /*157: xor     %esi, %esi               */
  0x41, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, /*159: callq   +0xd0(%r14)              */
  0x48, 0x89, 0x44, 0x24, 0x38,             /*160: mov     %rax, +0x38(%rsp)        */
  0x89, 0x54, 0x24, 0x40,                   /*165: mov     %edx, +0x40(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*169: mov     +0x38(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*16e: mov     +0x40(%rsp), %rcx        */
  0x49, 0x89, 0x4c, 0x1f, 0x08,             /*173: mov     %rcx, +0x8(%r15,%rbx,1)  */
  0x49, 0x89, 0x04, 0x1f,                   /*178: mov     %rax, (%r15,%rbx,1)      */
  0xeb, 0x39,                               /*17c: jmp                              */
  0x66, 0x90,                               /*17e: xchg    %ax, %ax                 */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*180: movslq  +0x64(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x68,             /*185: mov     +0x68(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*18a: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*18e: shl     $0x4, %rax               */
  0xc7, 0x44, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00,/*192: movl    $0, +0x8(%rcx,%rax,1)    */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*19a: movslq  +0x64(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x68,             /*19f: mov     +0x68(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*1a4: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*1a8: shl     $0x4, %rax               */
  0xc7, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, /*1ac: movl    $0, (%rcx,%rax,1)        */
  0xff, 0x44, 0x24, 0x64,                   /*1b3: incl    +0x64(%rsp)              */
  0x8b, 0x44, 0x24, 0x48,                   /*1b7: mov     +0x48(%rsp), %eax        */
  0x8d, 0x48, 0xff,                         /*1bb: lea     -0x1(%rax), %ecx         */
  0x89, 0x4c, 0x24, 0x48,                   /*1be: mov     %ecx, +0x48(%rsp)        */
  0x85, 0xc0,                               /*1c2: test    %eax, %eax               */
  0x75, 0xba,                               /*1c4: jne                              */
  0xe9, 0x06, 0x01, 0x00, 0x00,             /*1c6: jmpq                             */
  0x48, 0x63, 0x5c, 0x24, 0x64,             /*1cb: movslq  +0x64(%rsp), %rbx        */
  0x8d, 0x43, 0x01,                         /*1d0: lea     +0x1(%rbx), %eax         */
  0x89, 0x44, 0x24, 0x64,                   /*1d3: mov     %eax, +0x64(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*1d7: mov     +0x68(%rsp), %rax        */
  0x48, 0xc1, 0xe3, 0x04,                   /*1dc: shl     $0x4, %rbx               */
  0x4c, 0x8b, 0x78, 0x18,                   /*1e0: mov     +0x18(%rax), %r15        */
  0x48, 0x8b, 0x78, 0x58,                   /*1e4: mov     +0x58(%rax), %rdi        */
  0x31, 0xf6,                               /*1e8: xor     %esi, %esi               */
  0x41, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, /*1ea: callq   +0xd0(%r14)              */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*1f1: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*1f6: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*1fa: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*1ff: mov     +0x10(%rsp), %rcx        */
  0x49, 0x89, 0x4c, 0x1f, 0x08,             /*204: mov     %rcx, +0x8(%r15,%rbx,1)  */
  0x49, 0x89, 0x04, 0x1f,                   /*209: mov     %rax, (%r15,%rbx,1)      */
  0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x00,/*20d: movl    $0, +0x28(%rsp)          */
  0xeb, 0x4e,                               /*215: jmp                              */
  0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*217: nopw    +0(%rax,%rax,1)          */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*220: movslq  +0x64(%rsp), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x28,             /*225: movslq  +0x28(%rsp), %rcx        */
  0x48, 0x01, 0xc8,                         /*22a: add     %rcx, %rax               */
  0x48, 0x8b, 0x54, 0x24, 0x68,             /*22d: mov     +0x68(%rsp), %rdx        */
  0x48, 0x8b, 0x52, 0x18,                   /*232: mov     +0x18(%rdx), %rdx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*236: shl     $0x4, %rax               */
  0x48, 0x63, 0x74, 0x24, 0x4c,             /*23a: movslq  +0x4c(%rsp), %rsi        */
  0x48, 0x01, 0xce,                         /*23f: add     %rcx, %rsi               */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*242: mov     +0x30(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x28,                   /*247: mov     +0x28(%rcx), %rcx        */
  0x48, 0xc1, 0xe6, 0x04,                   /*24b: shl     $0x4, %rsi               */
  0x48, 0x8b, 0x3c, 0x31,                   /*24f: mov     (%rcx,%rsi,1), %rdi      */
  0x48, 0x8b, 0x4c, 0x31, 0x08,             /*253: mov     +0x8(%rcx,%rsi,1), %rcx  */
  0x48, 0x89, 0x4c, 0x02, 0x08,             /*258: mov     %rcx, +0x8(%rdx,%rax,1)  */
  0x48, 0x89, 0x3c, 0x02,                   /*25d: mov     %rdi, (%rdx,%rax,1)      */
  0xff, 0x44, 0x24, 0x28,                   /*261: incl    +0x28(%rsp)              */
  0x8b, 0x44, 0x24, 0x28,                   /*265: mov     +0x28(%rsp), %eax        */
  0x03, 0x44, 0x24, 0x4c,                   /*269: add     +0x4c(%rsp), %eax        */
  0x3b, 0x44, 0x24, 0x2c,                   /*26d: cmp     +0x2c(%rsp), %eax        */
  0x7c, 0xad,                               /*271: jl                               */
  0xeb, 0x52,                               /*273: jmp                              */
  0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*275: data16  "nopw %cs:0x0(%rax,%rax,1)" */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*280: movslq  +0x64(%rsp), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x28,             /*285: movslq  +0x28(%rsp), %rcx        */
  0x48, 0x01, 0xc1,                         /*28a: add     %rax, %rcx               */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*28d: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*292: mov     +0x18(%rax), %rax        */
  0x48, 0xc1, 0xe1, 0x04,                   /*296: shl     $0x4, %rcx               */
  0xc7, 0x44, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00,/*29a: movl    $0, +0x8(%rax,%rcx,1)    */
  0x48, 0x63, 0x44, 0x24, 0x64,             /*2a2: movslq  +0x64(%rsp), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x28,             /*2a7: movslq  +0x28(%rsp), %rcx        */
  0x48, 0x01, 0xc1,                         /*2ac: add     %rax, %rcx               */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*2af: mov     +0x68(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*2b4: mov     +0x18(%rax), %rax        */
  0x48, 0xc1, 0xe1, 0x04,                   /*2b8: shl     $0x4, %rcx               */
  0xc7, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, /*2bc: movl    $0, (%rax,%rcx,1)        */
  0xff, 0x44, 0x24, 0x28,                   /*2c3: incl    +0x28(%rsp)              */
  0x8b, 0x44, 0x24, 0x28,                   /*2c7: mov     +0x28(%rsp), %eax        */
  0x3b, 0x44, 0x24, 0x48,                   /*2cb: cmp     +0x48(%rsp), %eax        */
  0x7c, 0xaf,                               /*2cf: jl                               */
  0x48, 0x8b, 0x44, 0x24, 0x68,             /*2d1: mov     +0x68(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*2d6: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*2d9: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*2dd: mov     %ecx, +0xdc(%rax)        */
  0x4c, 0x89, 0xf7,                         /*2e3: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x70,                   /*2e6: add     $0x70, %rsp              */
  0x5b,                                     /*2ea: pop     %rbx                     */
  0x41, 0x5e,                               /*2eb: pop     %r14                     */
  0x41, 0x5f,                               /*2ed: pop     %r15                     */

};

static void op_apost_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 21)) = a * 1 + 0;
  *((int32_t *)(op + 66)) = b * 1 + 0;
  *((int32_t *)(op + 74)) = c * 1 + 0;
}

static void op_apost_set_args_from_code(uint8_t *op, mrb_code c) {
  op_apost_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"b"=>[[16, 0, 30..33], [16, 8, 36..39]], "a"=>[[16, 8, 66..69], [16, 0, 73..76]]} */
static uint8_t op_string[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*0a: mov     %rbx, +0x10(%rsp)        */
  0x48, 0x8b, 0x7b, 0x58,                   /*0f: mov     +0x58(%rbx), %rdi        */
  0x4c, 0x8b, 0x73, 0x18,                   /*13: mov     +0x18(%rbx), %r14        */
  0x48, 0x8b, 0x43, 0x20,                   /*17: mov     +0x20(%rbx), %rax        */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xbc, 0x00, /*1b: mov     +0xbc1000(%rax), %rsi    */
  0x8b, 0x90, 0x08, 0x10, 0xbc, 0x00,       /*22: mov     +0xbc1008(%rax), %edx    */
  0xff, 0x93, 0xc8, 0x01, 0x00, 0x00,       /*28: callq   +0x1c8(%rbx)             */
  0x48, 0x89, 0x04, 0x24,                   /*2e: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*32: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*36: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*3a: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*3f: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*46: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*4d: mov     +0x10(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*52: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*55: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*59: mov     %ecx, +0xdc(%rax)        */
  0x48, 0x89, 0xdf,                         /*5f: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*62: add     $0x18, %rsp              */
  0x5b,                                     /*66: pop     %rbx                     */
  0x41, 0x5e,                               /*67: pop     %r14                     */

};

static void op_string_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 30)) = b * 16 + 0;
  *((int32_t *)(op + 36)) = b * 16 + 8;
  *((int32_t *)(op + 66)) = a * 16 + 8;
  *((int32_t *)(op + 73)) = a * 16 + 0;
}

static void op_string_set_args_from_code(uint8_t *op, mrb_code c) {
  op_string_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[16, 0, 24..27], [16, 8, 30..33]], "b"=>[[16, 0, 37..40], [16, 8, 44..47]]} */
static uint8_t op_strcat[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0x43, 0x18,                   /*0d: mov     +0x18(%rbx), %rax        */
  0x48, 0x8b, 0x7b, 0x58,                   /*11: mov     +0x58(%rbx), %rdi        */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xab, 0x00, /*15: mov     +0xab1000(%rax), %rsi    */
  0x8b, 0x90, 0x08, 0x10, 0xab, 0x00,       /*1c: mov     +0xab1008(%rax), %edx    */
  0x48, 0x8b, 0x88, 0x00, 0x10, 0xbc, 0x00, /*22: mov     +0xbc1000(%rax), %rcx    */
  0x44, 0x8b, 0x80, 0x08, 0x10, 0xbc, 0x00, /*29: mov     +0xbc1008(%rax), %r8d    */
  0xff, 0x93, 0xf8, 0x01, 0x00, 0x00,       /*30: callq   +0x1f8(%rbx)             */
  0x48, 0x89, 0xdf,                         /*36: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*39: add     $0x10, %rsp              */
  0x5b,                                     /*3d: pop     %rbx                     */

};

static void op_strcat_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 24)) = a * 16 + 0;
  *((int32_t *)(op + 30)) = a * 16 + 8;
  *((int32_t *)(op + 37)) = b * 16 + 0;
  *((int32_t *)(op + 44)) = b * 16 + 8;
}

static void op_strcat_set_args_from_code(uint8_t *op, mrb_code c) {
  op_strcat_set_args(op, GETARG_A(c),GETARG_B(c),0);
}


/* args: {"b"=>[[1, 0, 19..22]], "c"=>[[1, 0, 27..30]], "a"=>[[16, 8, 183..186], [16, 0, 190..193]]} */
static uint8_t op_hash[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x38,                   /*03: sub     $0x38, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x30,             /*0a: mov     %r14, +0x30(%rsp)        */
  0xc7, 0x44, 0x24, 0x2c, 0x00, 0x00, 0xbc, 0x00,/*0f: movl    $0xbc0000, +0x2c(%rsp)   */
  0xc7, 0x44, 0x24, 0x28, 0x00, 0x00, 0xcd, 0x00,/*17: movl    $0xcd0000, +0x28(%rsp)   */
  0xb8, 0x00, 0x00, 0x9a, 0x01,             /*1f: mov     $0x19a0000, %eax         */
  0x03, 0x44, 0x24, 0x2c,                   /*24: add     +0x2c(%rsp), %eax        */
  0x89, 0x44, 0x24, 0x24,                   /*28: mov     %eax, +0x24(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*2c: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*31: mov     +0x58(%rax), %rdi        */
  0x8b, 0x74, 0x24, 0x28,                   /*35: mov     +0x28(%rsp), %esi        */
  0x41, 0xff, 0x96, 0x60, 0x01, 0x00, 0x00, /*39: callq   +0x160(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*40: mov     %rax, +0x10(%rsp)        */
  0x89, 0x54, 0x24, 0x18,                   /*45: mov     %edx, +0x18(%rsp)        */
  0xeb, 0x4c,                               /*49: jmp                              */
  0x0f, 0x1f, 0x44, 0x00, 0x00,             /*4b: nopl    +0(%rax,%rax,1)          */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*50: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x58, 0x18,                   /*55: mov     +0x18(%rax), %rbx        */
  0x48, 0x8b, 0x78, 0x58,                   /*59: mov     +0x58(%rax), %rdi        */
  0x48, 0x63, 0x44, 0x24, 0x2c,             /*5d: movslq  +0x2c(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*62: shl     $0x4, %rax               */
  0x48, 0x8b, 0x74, 0x24, 0x10,             /*66: mov     +0x10(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x18,                   /*6b: mov     +0x18(%rsp), %edx        */
  0x48, 0x8b, 0x0c, 0x03,                   /*6f: mov     (%rbx,%rax,1), %rcx      */
  0x44, 0x8b, 0x44, 0x03, 0x08,             /*73: mov     +0x8(%rbx,%rax,1), %r8d  */
  0x4c, 0x8b, 0x4c, 0x03, 0x10,             /*78: mov     +0x10(%rbx,%rax,1), %r9  */
  0x48, 0x8b, 0x44, 0x03, 0x18,             /*7d: mov     +0x18(%rbx,%rax,1), %rax */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*82: mov     %rax, +0x8(%rsp)         */
  0x4c, 0x89, 0x0c, 0x24,                   /*87: mov     %r9, (%rsp)              */
  0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*8b: callq   +0x1a8(%r14)             */
  0x83, 0x44, 0x24, 0x2c, 0x02,             /*92: addl    $0x2, +0x2c(%rsp)        */
  0x8b, 0x44, 0x24, 0x2c,                   /*97: mov     +0x2c(%rsp), %eax        */
  0x3b, 0x44, 0x24, 0x24,                   /*9b: cmp     +0x24(%rsp), %eax        */
  0x7c, 0xaf,                               /*9f: jl                               */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*a1: mov     +0x30(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*a6: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*aa: mov     +0x10(%rsp), %rcx        */
  0x48, 0x8b, 0x54, 0x24, 0x18,             /*af: mov     +0x18(%rsp), %rdx        */
  0x48, 0x89, 0x90, 0x08, 0x10, 0xab, 0x00, /*b4: mov     %rdx, +0xab1008(%rax)    */
  0x48, 0x89, 0x88, 0x00, 0x10, 0xab, 0x00, /*bb: mov     %rcx, +0xab1000(%rax)    */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*c2: mov     +0x30(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*c7: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*ca: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*ce: mov     %ecx, +0xdc(%rax)        */
  0x4c, 0x89, 0xf7,                         /*d4: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x38,                   /*d7: add     $0x38, %rsp              */
  0x5b,                                     /*db: pop     %rbx                     */
  0x41, 0x5e,                               /*dc: pop     %r14                     */

};

static void op_hash_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = b * 1 + 0;
  *((int32_t *)(op + 27)) = c * 1 + 0;
  *((int32_t *)(op + 183)) = a * 16 + 8;
  *((int32_t *)(op + 190)) = a * 16 + 0;
}

static void op_hash_set_args_from_code(uint8_t *op, mrb_code c) {
  op_hash_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"a"=>[[16, 8, 346..349], [16, 0, 353..356], [16, 0, 369..372], [16, 8, 375..378], [1, 0, 388..391]]} */
static uint8_t op_lambda[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x41, 0x54,                               /*04: push    %r12                     */
  0x53,                                     /*06: push    %rbx                     */
  0x48, 0x83, 0xec, 0x48,                   /*07: sub     $0x48, %rsp              */
  0x49, 0x89, 0xfc,                         /*0b: mov     %rdi, %r12               */
  0x4c, 0x89, 0x64, 0x24, 0x40,             /*0e: mov     %r12, +0x40(%rsp)        */
  0x49, 0x8b, 0x44, 0x24, 0x10,             /*13: mov     +0x10(%r12), %rax        */
  0x8b, 0x00,                               /*18: mov     (%rax), %eax             */
  0xc1, 0xe8, 0x07,                         /*1a: shr     $0x7, %eax               */
  0x83, 0xe0, 0x03,                         /*1d: and     $0x3, %eax               */
  0x89, 0x44, 0x24, 0x34,                   /*20: mov     %eax, +0x34(%rsp)        */
  0xf6, 0x44, 0x24, 0x34, 0x02,             /*24: testb   $0x2, +0x34(%rsp)        */
  0x74, 0x32,                               /*29: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*2b: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*30: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x48, 0x08,                   /*34: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x40, 0x10,                   /*38: mov     +0x10(%rax), %rax        */
  0x8b, 0x00,                               /*3c: mov     (%rax), %eax             */
  0xc1, 0xe8, 0x09,                         /*3e: shr     $0x9, %eax               */
  0x25, 0xff, 0x3f, 0x00, 0x00,             /*41: and     $0x3fff, %eax            */
  0x48, 0x8b, 0x49, 0x20,                   /*46: mov     +0x20(%rcx), %rcx        */
  0x48, 0x8b, 0x34, 0xc1,                   /*4a: mov     (%rcx,%rax,8), %rsi      */
  0x41, 0xff, 0x54, 0x24, 0x70,             /*4e: callq   +0x70(%r12)              */
  0x48, 0x89, 0x44, 0x24, 0x38,             /*53: mov     %rax, +0x38(%rsp)        */
  0xe9, 0xad, 0x00, 0x00, 0x00,             /*58: jmpq                             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*5d: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*62: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x48, 0x08,                   /*66: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x40, 0x10,                   /*6a: mov     +0x10(%rax), %rax        */
  0x8b, 0x00,                               /*6e: mov     (%rax), %eax             */
  0xc1, 0xe8, 0x09,                         /*70: shr     $0x9, %eax               */
  0x25, 0xff, 0x3f, 0x00, 0x00,             /*73: and     $0x3fff, %eax            */
  0x48, 0x8b, 0x49, 0x20,                   /*78: mov     +0x20(%rcx), %rcx        */
  0x48, 0x8b, 0x34, 0xc1,                   /*7c: mov     (%rcx,%rax,8), %rsi      */
  0x41, 0xff, 0x94, 0x24, 0x38, 0x01, 0x00, 0x00,/*80: callq   +0x138(%r12)             */
  0x48, 0x89, 0x44, 0x24, 0x38,             /*88: mov     %rax, +0x38(%rsp)        */
  0xf6, 0x44, 0x24, 0x34, 0x01,             /*8d: testb   $0x1, +0x34(%rsp)        */
  0x74, 0x76,                               /*92: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*94: mov     +0x38(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*99: mov     +0x20(%rax), %rax        */
  0x0f, 0xb6, 0x00,                         /*9d: movzbl  (%rax), %eax             */
  0x83, 0xf8, 0x0c,                         /*a0: cmp     $0xc, %eax               */
  0x75, 0x65,                               /*a3: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*a5: mov     +0x40(%rsp), %rax        */
  0x4c, 0x8b, 0x70, 0x58,                   /*aa: mov     +0x58(%rax), %r14        */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*ae: mov     +0x38(%rsp), %rax        */
  0x4c, 0x8b, 0x78, 0x20,                   /*b3: mov     +0x20(%rax), %r15        */
  0x49, 0x8b, 0xb4, 0x24, 0xb0, 0x02, 0x00, 0x00,/*b7: mov     +0x2b0(%r12), %rsi       */
  0xba, 0x0c, 0x00, 0x00, 0x00,             /*bf: mov     $0xc, %edx               */
  0x4c, 0x89, 0xf7,                         /*c4: mov     %r14, %rdi               */
  0x41, 0xff, 0x94, 0x24, 0x80, 0x02, 0x00, 0x00,/*c7: callq   +0x280(%r12)             */
  0x4c, 0x89, 0xf7,                         /*cf: mov     %r14, %rdi               */
  0x4c, 0x89, 0xfe,                         /*d2: mov     %r15, %rsi               */
  0x89, 0xc2,                               /*d5: mov     %eax, %edx               */
  0x41, 0xff, 0x94, 0x24, 0x50, 0x01, 0x00, 0x00,/*d7: callq   +0x150(%r12)             */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*df: mov     %rax, +0x10(%rsp)        */
  0x89, 0x54, 0x24, 0x18,                   /*e4: mov     %edx, +0x18(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*e8: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*ed: mov     +0x18(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x28,             /*f2: mov     %rcx, +0x28(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*f7: mov     %rax, +0x20(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*fc: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*101: mov     +0x38(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x20,                   /*106: mov     %rax, +0x20(%rcx)        */
  0xf6, 0x44, 0x24, 0x34, 0x01,             /*10a: testb   $0x1, +0x34(%rsp)        */
  0x74, 0x1f,                               /*10f: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*111: mov     +0x38(%rsp), %rax        */
  0x8b, 0x08,                               /*116: mov     (%rax), %ecx             */
  0x89, 0xca,                               /*118: mov     %ecx, %edx               */
  0x81, 0xe2, 0x00, 0xf8, 0xf7, 0xff,       /*11a: and     $0xfff7f800, %edx        */
  0x81, 0xe1, 0xff, 0x07, 0x00, 0x00,       /*120: and     $0x7ff, %ecx             */
  0x09, 0xd1,                               /*126: or      %edx, %ecx               */
  0x81, 0xc9, 0x00, 0x00, 0x08, 0x00,       /*128: or      $0x80000, %ecx           */
  0x89, 0x08,                               /*12e: mov     %ecx, (%rax)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*130: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x58, 0x18,                   /*135: mov     +0x18(%rax), %rbx        */
  0x48, 0x8b, 0x7c, 0x24, 0x38,             /*139: mov     +0x38(%rsp), %rdi        */
  0x41, 0xff, 0x94, 0x24, 0x28, 0x02, 0x00, 0x00,/*13e: callq   +0x228(%r12)             */
  0x48, 0x89, 0x04, 0x24,                   /*146: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*14a: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*14e: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*152: mov     +0x8(%rsp), %rcx         */
  0x48, 0x89, 0x8b, 0x08, 0x10, 0xab, 0x00, /*157: mov     %rcx, +0xab1008(%rbx)    */
  0x48, 0x89, 0x83, 0x00, 0x10, 0xab, 0x00, /*15e: mov     %rax, +0xab1000(%rbx)    */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*165: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*16a: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*16e: mov     +0xab1000(%rax), %rdx    */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*175: mov     +0xab1008(%rax), %ecx    */
  0x49, 0x8b, 0xbc, 0x24, 0xb8, 0x02, 0x00, 0x00,/*17b: mov     +0x2b8(%r12), %rdi       */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*183: mov     $0xab0000, %esi          */
  0x31, 0xc0,                               /*188: xor     %eax, %eax               */
  0x41, 0xff, 0x94, 0x24, 0x70, 0x01, 0x00, 0x00,/*18a: callq   +0x170(%r12)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*192: mov     +0x40(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*197: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*19a: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*19e: mov     %ecx, +0xdc(%rax)        */
  0x4c, 0x89, 0xe7,                         /*1a4: mov     %r12, %rdi               */
  0x48, 0x83, 0xc4, 0x48,                   /*1a7: add     $0x48, %rsp              */
  0x5b,                                     /*1ab: pop     %rbx                     */
  0x41, 0x5c,                               /*1ac: pop     %r12                     */
  0x41, 0x5e,                               /*1ae: pop     %r14                     */
  0x41, 0x5f,                               /*1b0: pop     %r15                     */

};

static void op_lambda_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 346)) = a * 16 + 8;
  *((int32_t *)(op + 353)) = a * 16 + 0;
  *((int32_t *)(op + 369)) = a * 16 + 0;
  *((int32_t *)(op + 375)) = a * 16 + 8;
  *((int32_t *)(op + 388)) = a * 1 + 0;
}

static void op_lambda_set_args_from_code(uint8_t *op, mrb_code c) {
  op_lambda_set_args(op, GETARG_A(c),GETARG_b(c),GETARG_c(c));
}


/* args: {"b"=>[[1, 0, 19..22]], "a"=>[[16, 8, 98..101], [16, 0, 105..108]]} */
static uint8_t op_range[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x28,                   /*03: sub     $0x28, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x20,             /*0a: mov     %r14, +0x20(%rsp)        */
  0xc7, 0x44, 0x24, 0x1c, 0x00, 0x00, 0xbc, 0x00,/*0f: movl    $0xbc0000, +0x1c(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*17: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x58, 0x18,                   /*1c: mov     +0x18(%rax), %rbx        */
  0x48, 0x8b, 0x78, 0x58,                   /*20: mov     +0x58(%rax), %rdi        */
  0x48, 0x63, 0x44, 0x24, 0x1c,             /*24: movslq  +0x1c(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*29: shl     $0x4, %rax               */
  0x48, 0x8b, 0x34, 0x03,                   /*2d: mov     (%rbx,%rax,1), %rsi      */
  0x8b, 0x54, 0x03, 0x08,                   /*31: mov     +0x8(%rbx,%rax,1), %edx  */
  0x48, 0x8b, 0x4c, 0x03, 0x10,             /*35: mov     +0x10(%rbx,%rax,1), %rcx */
  0x44, 0x8b, 0x44, 0x03, 0x18,             /*3a: mov     +0x18(%rbx,%rax,1), %r8d */
  0x41, 0xb9, 0x01, 0x00, 0x00, 0x00,       /*3f: mov     $0x1, %r9d               */
  0x41, 0xff, 0x96, 0x78, 0x01, 0x00, 0x00, /*45: callq   +0x178(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*4c: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*51: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*55: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*5a: mov     +0x10(%rsp), %rcx        */
  0x48, 0x89, 0x8b, 0x08, 0x10, 0xab, 0x00, /*5f: mov     %rcx, +0xab1008(%rbx)    */
  0x48, 0x89, 0x83, 0x00, 0x10, 0xab, 0x00, /*66: mov     %rax, +0xab1000(%rbx)    */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*6d: mov     +0x20(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*72: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*75: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*79: mov     %ecx, +0xdc(%rax)        */
  0x4c, 0x89, 0xf7,                         /*7f: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x28,                   /*82: add     $0x28, %rsp              */
  0x5b,                                     /*86: pop     %rbx                     */
  0x41, 0x5e,                               /*87: pop     %r14                     */

};

static void op_range_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = b * 1 + 0;
  *((int32_t *)(op + 98)) = a * 16 + 8;
  *((int32_t *)(op + 105)) = a * 16 + 0;
}

static void op_range_set_args_from_code(uint8_t *op, mrb_code c) {
  op_range_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {"a"=>[[16, 8, 53..56], [16, 0, 60..63]]} */
static uint8_t op_oclass[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*0a: mov     %rbx, +0x10(%rsp)        */
  0x4c, 0x8b, 0x73, 0x18,                   /*0f: mov     +0x18(%rbx), %r14        */
  0x48, 0x8b, 0x43, 0x58,                   /*13: mov     +0x58(%rbx), %rax        */
  0x48, 0x8b, 0x78, 0x40,                   /*17: mov     +0x40(%rax), %rdi        */
  0xff, 0x93, 0x28, 0x02, 0x00, 0x00,       /*1b: callq   +0x228(%rbx)             */
  0x48, 0x89, 0x04, 0x24,                   /*21: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*25: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*29: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*2d: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*32: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*39: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x89, 0xdf,                         /*40: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*43: add     $0x18, %rsp              */
  0x5b,                                     /*47: pop     %rbx                     */
  0x41, 0x5e,                               /*48: pop     %r14                     */

};

static void op_oclass_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 53)) = a * 16 + 8;
  *((int32_t *)(op + 60)) = a * 16 + 0;
}

static void op_oclass_set_args_from_code(uint8_t *op, mrb_code c) {
  op_oclass_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 30..33]], "b"=>[[4, 0, 45..48]]} */
static uint8_t op_class[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x53,                                     /*04: push    %rbx                     */
  0x48, 0x83, 0xec, 0x60,                   /*05: sub     $0x60, %rsp              */
  0x49, 0x89, 0xfe,                         /*09: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x58,             /*0c: mov     %r14, +0x58(%rsp)        */
  0x48, 0xc7, 0x44, 0x24, 0x50, 0x00, 0x00, 0x00, 0x00,/*11: movq    $0, +0x50(%rsp)          */
  0xc7, 0x44, 0x24, 0x4c, 0x00, 0x00, 0xab, 0x00,/*1a: movl    $0xab0000, +0x4c(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*22: mov     +0x58(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x28,                   /*27: mov     +0x28(%rax), %rax        */
  0x8b, 0x80, 0x00, 0x04, 0xbc, 0x00,       /*2b: mov     +0xbc0400(%rax), %eax    */
  0x89, 0x44, 0x24, 0x24,                   /*31: mov     %eax, +0x24(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*35: movslq  +0x4c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x58,             /*3a: mov     +0x58(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*3f: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*43: shl     $0x4, %rax               */
  0x48, 0x8b, 0x14, 0x01,                   /*47: mov     (%rcx,%rax,1), %rdx      */
  0x48, 0x8b, 0x44, 0x01, 0x08,             /*4b: mov     +0x8(%rcx,%rax,1), %rax  */
  0x48, 0x89, 0x44, 0x24, 0x40,             /*50: mov     %rax, +0x40(%rsp)        */
  0x48, 0x89, 0x54, 0x24, 0x38,             /*55: mov     %rdx, +0x38(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x4c,             /*5a: movslq  +0x4c(%rsp), %rax        */
  0x48, 0xc1, 0xe0, 0x04,                   /*5f: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x24, 0x58,             /*63: mov     +0x58(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*68: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x54, 0x08, 0x10,             /*6c: mov     +0x10(%rax,%rcx,1), %rdx */
  0x48, 0x8b, 0x44, 0x08, 0x18,             /*71: mov     +0x18(%rax,%rcx,1), %rax */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*76: mov     %rax, +0x30(%rsp)        */
  0x48, 0x89, 0x54, 0x24, 0x28,             /*7b: mov     %rdx, +0x28(%rsp)        */
  0x83, 0x7c, 0x24, 0x40, 0x00,             /*80: cmpl    $0, +0x40(%rsp)          */
  0x75, 0x40,                               /*85: jne                              */
  0x83, 0x7c, 0x24, 0x38, 0x00,             /*87: cmpl    $0, +0x38(%rsp)          */
  0x75, 0x39,                               /*8c: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*8e: mov     +0x58(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*93: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*97: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*9b: mov     +0x20(%rax), %rax        */
  0x48, 0x8b, 0x78, 0x48,                   /*9f: mov     +0x48(%rax), %rdi        */
  0x41, 0xff, 0x96, 0x28, 0x02, 0x00, 0x00, /*a3: callq   +0x228(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*aa: mov     %rax, +0x10(%rsp)        */
  0x89, 0x54, 0x24, 0x18,                   /*af: mov     %edx, +0x18(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*b3: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*b8: mov     +0x18(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x40,             /*bd: mov     %rcx, +0x40(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x38,             /*c2: mov     %rax, +0x38(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*c7: mov     +0x58(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*cc: mov     +0x58(%rax), %rdi        */
  0x44, 0x8b, 0x4c, 0x24, 0x24,             /*d0: mov     +0x24(%rsp), %r9d        */
  0x48, 0x8b, 0x74, 0x24, 0x38,             /*d5: mov     +0x38(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x40,                   /*da: mov     +0x40(%rsp), %edx        */
  0x48, 0x8b, 0x4c, 0x24, 0x28,             /*de: mov     +0x28(%rsp), %rcx        */
  0x44, 0x8b, 0x44, 0x24, 0x30,             /*e3: mov     +0x30(%rsp), %r8d        */
  0x41, 0xff, 0x96, 0x80, 0x01, 0x00, 0x00, /*e8: callq   +0x180(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x50,             /*ef: mov     %rax, +0x50(%rsp)        */
  0x48, 0x63, 0x5c, 0x24, 0x4c,             /*f4: movslq  +0x4c(%rsp), %rbx        */
  0x48, 0x8b, 0x4c, 0x24, 0x58,             /*f9: mov     +0x58(%rsp), %rcx        */
  0x4c, 0x8b, 0x79, 0x18,                   /*fe: mov     +0x18(%rcx), %r15        */
  0x48, 0xc1, 0xe3, 0x04,                   /*102: shl     $0x4, %rbx               */
  0x48, 0x89, 0xc7,                         /*106: mov     %rax, %rdi               */
  0x41, 0xff, 0x96, 0x28, 0x02, 0x00, 0x00, /*109: callq   +0x228(%r14)             */
  0x48, 0x89, 0x04, 0x24,                   /*110: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*114: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*118: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*11c: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x4c, 0x1f, 0x08,             /*121: mov     %rcx, +0x8(%r15,%rbx,1)  */
  0x49, 0x89, 0x04, 0x1f,                   /*126: mov     %rax, (%r15,%rbx,1)      */
  0x48, 0x8b, 0x44, 0x24, 0x58,             /*12a: mov     +0x58(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*12f: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*132: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*136: mov     %ecx, +0xdc(%rax)        */
  0x4c, 0x89, 0xf7,                         /*13c: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x60,                   /*13f: add     $0x60, %rsp              */
  0x5b,                                     /*143: pop     %rbx                     */
  0x41, 0x5e,                               /*144: pop     %r14                     */
  0x41, 0x5f,                               /*146: pop     %r15                     */

};

static void op_class_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 30)) = a * 1 + 0;
  *((int32_t *)(op + 45)) = b * 4 + 0;
}

static void op_class_set_args_from_code(uint8_t *op, mrb_code c) {
  op_class_set_args(op, GETARG_A(c),GETARG_B(c),0);
}


/* args: {"a"=>[[1, 0, 30..33]], "b"=>[[4, 0, 45..48]]} */
static uint8_t op_module[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x53,                                     /*04: push    %rbx                     */
  0x48, 0x83, 0xec, 0x50,                   /*05: sub     $0x50, %rsp              */
  0x49, 0x89, 0xfe,                         /*09: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x48,             /*0c: mov     %r14, +0x48(%rsp)        */
  0x48, 0xc7, 0x44, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,/*11: movq    $0, +0x40(%rsp)          */
  0xc7, 0x44, 0x24, 0x3c, 0x00, 0x00, 0xab, 0x00,/*1a: movl    $0xab0000, +0x3c(%rsp)   */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*22: mov     +0x48(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x28,                   /*27: mov     +0x28(%rax), %rax        */
  0x8b, 0x80, 0x00, 0x04, 0xbc, 0x00,       /*2b: mov     +0xbc0400(%rax), %eax    */
  0x89, 0x44, 0x24, 0x24,                   /*31: mov     %eax, +0x24(%rsp)        */
  0x48, 0x63, 0x44, 0x24, 0x3c,             /*35: movslq  +0x3c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x48,             /*3a: mov     +0x48(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*3f: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*43: shl     $0x4, %rax               */
  0x48, 0x8b, 0x14, 0x01,                   /*47: mov     (%rcx,%rax,1), %rdx      */
  0x48, 0x8b, 0x44, 0x01, 0x08,             /*4b: mov     +0x8(%rcx,%rax,1), %rax  */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*50: mov     %rax, +0x30(%rsp)        */
  0x48, 0x89, 0x54, 0x24, 0x28,             /*55: mov     %rdx, +0x28(%rsp)        */
  0x83, 0x7c, 0x24, 0x30, 0x00,             /*5a: cmpl    $0, +0x30(%rsp)          */
  0x75, 0x40,                               /*5f: jne                              */
  0x83, 0x7c, 0x24, 0x28, 0x00,             /*61: cmpl    $0, +0x28(%rsp)          */
  0x75, 0x39,                               /*66: jne                              */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*68: mov     +0x48(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*6d: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*71: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*75: mov     +0x20(%rax), %rax        */
  0x48, 0x8b, 0x78, 0x48,                   /*79: mov     +0x48(%rax), %rdi        */
  0x41, 0xff, 0x96, 0x28, 0x02, 0x00, 0x00, /*7d: callq   +0x228(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*84: mov     %rax, +0x10(%rsp)        */
  0x89, 0x54, 0x24, 0x18,                   /*89: mov     %edx, +0x18(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*8d: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x18,             /*92: mov     +0x18(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x30,             /*97: mov     %rcx, +0x30(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x28,             /*9c: mov     %rax, +0x28(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*a1: mov     +0x48(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*a6: mov     +0x58(%rax), %rdi        */
  0x8b, 0x4c, 0x24, 0x24,                   /*aa: mov     +0x24(%rsp), %ecx        */
  0x48, 0x8b, 0x74, 0x24, 0x28,             /*ae: mov     +0x28(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x30,                   /*b3: mov     +0x30(%rsp), %edx        */
  0x41, 0xff, 0x96, 0xa8, 0x00, 0x00, 0x00, /*b7: callq   +0xa8(%r14)              */
  0x48, 0x89, 0x44, 0x24, 0x40,             /*be: mov     %rax, +0x40(%rsp)        */
  0x48, 0x63, 0x5c, 0x24, 0x3c,             /*c3: movslq  +0x3c(%rsp), %rbx        */
  0x48, 0x8b, 0x4c, 0x24, 0x48,             /*c8: mov     +0x48(%rsp), %rcx        */
  0x4c, 0x8b, 0x79, 0x18,                   /*cd: mov     +0x18(%rcx), %r15        */
  0x48, 0xc1, 0xe3, 0x04,                   /*d1: shl     $0x4, %rbx               */
  0x48, 0x89, 0xc7,                         /*d5: mov     %rax, %rdi               */
  0x41, 0xff, 0x96, 0x28, 0x02, 0x00, 0x00, /*d8: callq   +0x228(%r14)             */
  0x48, 0x89, 0x04, 0x24,                   /*df: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*e3: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*e7: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*eb: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x4c, 0x1f, 0x08,             /*f0: mov     %rcx, +0x8(%r15,%rbx,1)  */
  0x49, 0x89, 0x04, 0x1f,                   /*f5: mov     %rax, (%r15,%rbx,1)      */
  0x48, 0x8b, 0x44, 0x24, 0x48,             /*f9: mov     +0x48(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*fe: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*101: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*105: mov     %ecx, +0xdc(%rax)        */
  0x4c, 0x89, 0xf7,                         /*10b: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x50,                   /*10e: add     $0x50, %rsp              */
  0x5b,                                     /*112: pop     %rbx                     */
  0x41, 0x5e,                               /*113: pop     %r14                     */
  0x41, 0x5f,                               /*115: pop     %r15                     */

};

static void op_module_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 30)) = a * 1 + 0;
  *((int32_t *)(op + 45)) = b * 4 + 0;
}

static void op_module_set_args_from_code(uint8_t *op, mrb_code c) {
  op_module_set_args(op, GETARG_A(c),GETARG_B(c),0);
}


/* args: {"a"=>[[1, 0, 19..22]], "b"=>[[8, 0, 219..222]]} */
static uint8_t op_exec[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x48,                   /*03: sub     $0x48, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x40,             /*0a: mov     %r14, +0x40(%rsp)        */
  0xc7, 0x44, 0x24, 0x3c, 0x00, 0x00, 0xab, 0x00,/*0f: movl    $0xab0000, +0x3c(%rsp)   */
  0x48, 0x63, 0x44, 0x24, 0x3c,             /*17: movslq  +0x3c(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*1c: mov     +0x40(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*21: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*25: shl     $0x4, %rax               */
  0x48, 0x8b, 0x14, 0x01,                   /*29: mov     (%rcx,%rax,1), %rdx      */
  0x48, 0x8b, 0x44, 0x01, 0x08,             /*2d: mov     +0x8(%rcx,%rax,1), %rax  */
  0x48, 0x89, 0x44, 0x24, 0x28,             /*32: mov     %rax, +0x28(%rsp)        */
  0x48, 0x89, 0x54, 0x24, 0x20,             /*37: mov     %rdx, +0x20(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*3c: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*41: mov     +0x58(%rax), %rdi        */
  0x41, 0xff, 0x96, 0xe0, 0x00, 0x00, 0x00, /*45: callq   +0xe0(%r14)              */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*4c: mov     %rax, +0x30(%rsp)        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*51: mov     +0x40(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x10,                   /*56: mov     +0x10(%rcx), %rcx        */
  0x48, 0x83, 0xc1, 0x04,                   /*5a: add     $0x4, %rcx               */
  0x48, 0x89, 0x48, 0x30,                   /*5e: mov     %rcx, +0x30(%rax)        */
  0x8b, 0x44, 0x24, 0x3c,                   /*62: mov     +0x3c(%rsp), %eax        */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*66: mov     +0x30(%rsp), %rcx        */
  0x89, 0x41, 0x44,                         /*6b: mov     %eax, +0x44(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*6e: mov     +0x30(%rsp), %rax        */
  0xc7, 0x00, 0x00, 0x00, 0x00, 0x00,       /*73: movl    $0, (%rax)               */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*79: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*7e: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*82: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*86: mov     +0x8(%rax), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*8a: mov     +0x30(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x10,                   /*8f: mov     %rax, +0x10(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*93: mov     +0x30(%rsp), %rax        */
  0xc7, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, /*98: movl    $0, +0x40(%rax)          */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*9f: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*a4: mov     +0x30(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x48,                   /*a9: mov     %rax, +0x48(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*ad: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*b2: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*b6: mov     +0x18(%rax), %rax        */
  0x48, 0x63, 0x4c, 0x24, 0x3c,             /*ba: movslq  +0x3c(%rsp), %rcx        */
  0x48, 0xc1, 0xe1, 0x04,                   /*bf: shl     $0x4, %rcx               */
  0x48, 0x01, 0x48, 0x08,                   /*c3: add     %rcx, +0x8(%rax)         */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*c7: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*cc: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x78, 0x58,                   /*d0: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x41, 0x20,                   /*d4: mov     +0x20(%rcx), %rax        */
  0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*d8: mov     +0xbc0800(%rax), %rsi    */
  0x41, 0xff, 0x96, 0x38, 0x01, 0x00, 0x00, /*df: callq   +0x138(%r14)             */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*e6: mov     %rax, +0x18(%rsp)        */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*eb: mov     +0x30(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x48,                   /*f0: mov     +0x48(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x20,                   /*f4: mov     %rcx, +0x20(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*f8: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*fd: mov     +0x30(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*102: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*106: mov     +0x18(%rsp), %rax        */
  0x8b, 0x00,                               /*10b: mov     (%rax), %eax             */
  0xc1, 0xe8, 0x0b,                         /*10d: shr     $0xb, %eax               */
  0xa8, 0x80,                               /*110: test    $0x80, %al               */
  0x0f, 0x84, 0x80, 0x00, 0x00, 0x00,       /*112: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x30,             /*118: mov     +0x30(%rsp), %rax        */
  0xc7, 0x40, 0x18, 0x00, 0x00, 0x00, 0x00, /*11d: movl    $0, +0x18(%rax)          */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*124: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*129: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x47, 0x18,                   /*12d: mov     +0x18(%rdi), %rax        */
  0x48, 0x8b, 0x58, 0x08,                   /*131: mov     +0x8(%rax), %rbx         */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*135: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x74, 0x24, 0x20,             /*13a: mov     +0x20(%rsp), %rsi        */
  0x8b, 0x54, 0x24, 0x28,                   /*13f: mov     +0x28(%rsp), %edx        */
  0xff, 0x50, 0x18,                         /*143: callq   +0x18(%rax)              */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*146: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*14b: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*14f: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*154: mov     +0x10(%rsp), %rcx        */
  0x48, 0x89, 0x4b, 0x08,                   /*159: mov     %rcx, +0x8(%rbx)         */
  0x48, 0x89, 0x03,                         /*15d: mov     %rax, (%rbx)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*160: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*165: mov     +0x58(%rax), %rdi        */
  0x8b, 0x70, 0x50,                         /*169: mov     +0x50(%rax), %esi        */
  0x41, 0xff, 0x96, 0x08, 0x01, 0x00, 0x00, /*16c: callq   +0x108(%r14)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*173: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*178: mov     +0x58(%rax), %rax        */
  0x48, 0x83, 0x78, 0x28, 0x00,             /*17c: cmpq    $0, +0x28(%rax)          */
  0x0f, 0x84, 0x9f, 0x00, 0x00, 0x00,       /*181: je                               */
  0x48, 0x8b, 0x7c, 0x24, 0x40,             /*187: mov     +0x40(%rsp), %rdi        */
  0x41, 0xff, 0x96, 0xb8, 0x01, 0x00, 0x00, /*18c: callq   +0x1b8(%r14)             */
  0xe9, 0xc0, 0x00, 0x00, 0x00,             /*193: jmpq                             */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*198: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*19d: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*1a1: mov     +0x40(%rsp), %rcx        */
  0x48, 0x89, 0x41, 0x08,                   /*1a6: mov     %rax, +0x8(%rcx)         */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*1aa: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*1af: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x10,                   /*1b3: mov     +0x10(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x20,                   /*1b7: mov     %rcx, +0x20(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*1bb: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*1c0: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x18,                   /*1c4: mov     +0x18(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x28,                   /*1c8: mov     %rcx, +0x28(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*1cc: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*1d1: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x78, 0x58,                   /*1d5: mov     +0x58(%rax), %rdi        */
  0x0f, 0xb7, 0x71, 0x02,                   /*1d9: movzwl  +0x2(%rcx), %esi         */
  0xba, 0x01, 0x00, 0x00, 0x00,             /*1dd: mov     $0x1, %edx               */
  0x41, 0xff, 0x96, 0x30, 0x01, 0x00, 0x00, /*1e2: callq   +0x130(%r14)             */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*1e9: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x08,                   /*1ee: mov     +0x8(%rax), %rax         */
  0x0f, 0xb7, 0x40, 0x02,                   /*1f2: movzwl  +0x2(%rax), %eax         */
  0x48, 0x8b, 0x4c, 0x24, 0x30,             /*1f6: mov     +0x30(%rsp), %rcx        */
  0x89, 0x41, 0x18,                         /*1fb: mov     %eax, +0x18(%rcx)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*1fe: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x58,                   /*203: mov     +0x58(%rax), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*207: mov     +0x18(%rcx), %rcx        */
  0x48, 0x8b, 0x49, 0x08,                   /*20b: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x18,                   /*20f: mov     %rcx, +0x18(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*213: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x48, 0x08,                   /*218: mov     +0x8(%rax), %rcx         */
  0x48, 0x8b, 0x49, 0x08,                   /*21c: mov     +0x8(%rcx), %rcx         */
  0x48, 0x89, 0x48, 0x10,                   /*220: mov     %rcx, +0x10(%rax)        */
  0xeb, 0x32,                               /*224: jmp                              */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*226: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x58,                   /*22b: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*22f: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x48, 0x20,                   /*233: mov     +0x20(%rax), %rcx        */
  0x48, 0x8b, 0x49, 0x10,                   /*237: mov     +0x10(%rcx), %rcx        */
  0x48, 0x89, 0x48, 0x08,                   /*23b: mov     %rcx, +0x8(%rax)         */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*23f: mov     +0x40(%rsp), %rax        */
  0x48, 0x89, 0x48, 0x18,                   /*244: mov     %rcx, +0x18(%rax)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*248: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*24d: mov     +0x58(%rax), %rdi        */
  0x41, 0xff, 0x96, 0x58, 0x01, 0x00, 0x00, /*251: callq   +0x158(%r14)             */
  0x4c, 0x89, 0xf7,                         /*258: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x48,                   /*25b: add     $0x48, %rsp              */
  0x5b,                                     /*25f: pop     %rbx                     */
  0x41, 0x5e,                               /*260: pop     %r14                     */

};

static void op_exec_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = a * 1 + 0;
  *((int32_t *)(op + 219)) = b * 8 + 0;
}

static void op_exec_set_args_from_code(uint8_t *op, mrb_code c) {
  op_exec_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}


/* args: {"a"=>[[1, 0, 19..22], [16, 0, 61..64], [16, 8, 67..70], [1, 0, 79..82]], "b"=>[[4, 0, 115..118]]} */
static uint8_t op_method[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x49, 0x89, 0xfe,                         /*07: mov     %rdi, %r14               */
  0x4c, 0x89, 0x74, 0x24, 0x10,             /*0a: mov     %r14, +0x10(%rsp)        */
  0xc7, 0x44, 0x24, 0x0c, 0x00, 0x00, 0xab, 0x00,/*0f: movl    $0xab0000, +0xc(%rsp)    */
  0x48, 0x63, 0x44, 0x24, 0x0c,             /*17: movslq  +0xc(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*1c: mov     +0x10(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x18,                   /*21: mov     +0x18(%rcx), %rcx        */
  0x48, 0xc1, 0xe0, 0x04,                   /*25: shl     $0x4, %rax               */
  0x48, 0x8b, 0x04, 0x01,                   /*29: mov     (%rcx,%rax,1), %rax      */
  0x48, 0x89, 0x04, 0x24,                   /*2d: mov     %rax, (%rsp)             */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*31: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*36: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*3a: mov     +0xab1000(%rax), %rdx    */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*41: mov     +0xab1008(%rax), %ecx    */
  0x49, 0x8b, 0xbe, 0xc0, 0x02, 0x00, 0x00, /*47: mov     +0x2c0(%r14), %rdi       */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*4e: mov     $0xab0000, %esi          */
  0x31, 0xc0,                               /*53: xor     %eax, %eax               */
  0x41, 0xff, 0x96, 0x70, 0x01, 0x00, 0x00, /*55: callq   +0x170(%r14)             */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*5c: mov     +0x10(%rsp), %rax        */
  0x48, 0x8b, 0x78, 0x58,                   /*61: mov     +0x58(%rax), %rdi        */
  0x48, 0x8b, 0x34, 0x24,                   /*65: mov     (%rsp), %rsi             */
  0x48, 0x8b, 0x58, 0x18,                   /*69: mov     +0x18(%rax), %rbx        */
  0x48, 0x8b, 0x40, 0x28,                   /*6d: mov     +0x28(%rax), %rax        */
  0x8b, 0x90, 0x00, 0x04, 0xbc, 0x00,       /*71: mov     +0xbc0400(%rax), %edx    */
  0x48, 0x63, 0x44, 0x24, 0x0c,             /*77: movslq  +0xc(%rsp), %rax         */
  0x48, 0xc1, 0xe0, 0x04,                   /*7c: shl     $0x4, %rax               */
  0x48, 0x8b, 0x4c, 0x18, 0x10,             /*80: mov     +0x10(%rax,%rbx,1), %rcx */
  0x44, 0x8b, 0x44, 0x18, 0x18,             /*85: mov     +0x18(%rax,%rbx,1), %r8d */
  0x41, 0xff, 0x96, 0xe8, 0x00, 0x00, 0x00, /*8a: callq   +0xe8(%r14)              */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*91: mov     +0x10(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*96: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*99: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*9d: mov     %ecx, +0xdc(%rax)        */
  0x4c, 0x89, 0xf7,                         /*a3: mov     %r14, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*a6: add     $0x18, %rsp              */
  0x5b,                                     /*aa: pop     %rbx                     */
  0x41, 0x5e,                               /*ab: pop     %r14                     */

};

static void op_method_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 19)) = a * 1 + 0;
  *((int32_t *)(op + 61)) = a * 16 + 0;
  *((int32_t *)(op + 67)) = a * 16 + 8;
  *((int32_t *)(op + 79)) = a * 1 + 0;
  *((int32_t *)(op + 115)) = b * 4 + 0;
}

static void op_method_set_args_from_code(uint8_t *op, mrb_code c) {
  op_method_set_args(op, GETARG_A(c),GETARG_B(c),0);
}


/* args: {"b"=>[[16, 0, 26..29], [16, 8, 33..36]], "a"=>[[16, 8, 63..66], [16, 0, 70..73]]} */
static uint8_t op_sclass[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x18,                   /*03: sub     $0x18, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x10,             /*0a: mov     %rbx, +0x10(%rsp)        */
  0x4c, 0x8b, 0x73, 0x18,                   /*0f: mov     +0x18(%rbx), %r14        */
  0x48, 0x8b, 0x7b, 0x58,                   /*13: mov     +0x58(%rbx), %rdi        */
  0x49, 0x8b, 0xb6, 0x00, 0x10, 0xbc, 0x00, /*17: mov     +0xbc1000(%r14), %rsi    */
  0x41, 0x8b, 0x96, 0x08, 0x10, 0xbc, 0x00, /*1e: mov     +0xbc1008(%r14), %edx    */
  0xff, 0x93, 0xc0, 0x00, 0x00, 0x00,       /*25: callq   +0xc0(%rbx)              */
  0x48, 0x89, 0x04, 0x24,                   /*2b: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*2f: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*33: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*37: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*3c: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*43: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x8b, 0x44, 0x24, 0x10,             /*4a: mov     +0x10(%rsp), %rax        */
  0x8b, 0x48, 0x50,                         /*4f: mov     +0x50(%rax), %ecx        */
  0x48, 0x8b, 0x40, 0x58,                   /*52: mov     +0x58(%rax), %rax        */
  0x89, 0x88, 0xdc, 0x00, 0x00, 0x00,       /*56: mov     %ecx, +0xdc(%rax)        */
  0x48, 0x89, 0xdf,                         /*5c: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x18,                   /*5f: add     $0x18, %rsp              */
  0x5b,                                     /*63: pop     %rbx                     */
  0x41, 0x5e,                               /*64: pop     %r14                     */

};

static void op_sclass_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 26)) = b * 16 + 0;
  *((int32_t *)(op + 33)) = b * 16 + 8;
  *((int32_t *)(op + 63)) = a * 16 + 8;
  *((int32_t *)(op + 70)) = a * 16 + 0;
}

static void op_sclass_set_args_from_code(uint8_t *op, mrb_code c) {
  op_sclass_set_args(op, GETARG_A(c),GETARG_B(c),0);
}


/* args: {"a"=>[[16, 8, 92..95], [16, 0, 99..102], [16, 0, 115..118], [16, 8, 121..124], [1, 0, 133..136]]} */
static uint8_t op_tclass[] = {
  0x41, 0x57,                               /*00: push    %r15                     */
  0x41, 0x56,                               /*02: push    %r14                     */
  0x53,                                     /*04: push    %rbx                     */
  0x48, 0x83, 0xec, 0x40,                   /*05: sub     $0x40, %rsp              */
  0x48, 0x89, 0xfb,                         /*09: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x38,             /*0c: mov     %rbx, +0x38(%rsp)        */
  0x48, 0x8b, 0x43, 0x58,                   /*11: mov     +0x58(%rbx), %rax        */
  0x48, 0x89, 0x44, 0x24, 0x30,             /*15: mov     %rax, +0x30(%rsp)        */
  0x48, 0x8b, 0x40, 0x18,                   /*1a: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*1e: mov     +0x20(%rax), %rax        */
  0x48, 0x83, 0x78, 0x48, 0x00,             /*22: cmpq    $0, +0x48(%rax)          */
  0x74, 0x6a,                               /*27: je                               */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*29: mov     +0x38(%rsp), %rax        */
  0x4c, 0x8b, 0x70, 0x18,                   /*2e: mov     +0x18(%rax), %r14        */
  0x48, 0x8b, 0x40, 0x58,                   /*32: mov     +0x58(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*36: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*3a: mov     +0x20(%rax), %rax        */
  0x48, 0x8b, 0x78, 0x48,                   /*3e: mov     +0x48(%rax), %rdi        */
  0xff, 0x93, 0x28, 0x02, 0x00, 0x00,       /*42: callq   +0x228(%rbx)             */
  0x48, 0x89, 0x04, 0x24,                   /*48: mov     %rax, (%rsp)             */
  0x89, 0x54, 0x24, 0x08,                   /*4c: mov     %edx, +0x8(%rsp)         */
  0x48, 0x8b, 0x04, 0x24,                   /*50: mov     (%rsp), %rax             */
  0x48, 0x8b, 0x4c, 0x24, 0x08,             /*54: mov     +0x8(%rsp), %rcx         */
  0x49, 0x89, 0x8e, 0x08, 0x10, 0xab, 0x00, /*59: mov     %rcx, +0xab1008(%r14)    */
  0x49, 0x89, 0x86, 0x00, 0x10, 0xab, 0x00, /*60: mov     %rax, +0xab1000(%r14)    */
  0x48, 0x8b, 0x44, 0x24, 0x38,             /*67: mov     +0x38(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x18,                   /*6c: mov     +0x18(%rax), %rax        */
  0x48, 0x8b, 0x90, 0x00, 0x10, 0xab, 0x00, /*70: mov     +0xab1000(%rax), %rdx    */
  0x8b, 0x88, 0x08, 0x10, 0xab, 0x00,       /*77: mov     +0xab1008(%rax), %ecx    */
  0x48, 0x8b, 0xbb, 0xc0, 0x02, 0x00, 0x00, /*7d: mov     +0x2c0(%rbx), %rdi       */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*84: mov     $0xab0000, %esi          */
  0x31, 0xc0,                               /*89: xor     %eax, %eax               */
  0xff, 0x93, 0x70, 0x01, 0x00, 0x00,       /*8b: callq   +0x170(%rbx)             */
  0xeb, 0x71,                               /*91: jmp                              */
  0x4c, 0x8b, 0x74, 0x24, 0x30,             /*93: mov     +0x30(%rsp), %r14        */
  0x48, 0x8b, 0x83, 0xa0, 0x01, 0x00, 0x00, /*98: mov     +0x1a0(%rbx), %rax       */
  0x48, 0x8b, 0x30,                         /*9f: mov     (%rax), %rsi             */
  0x4c, 0x89, 0xf7,                         /*a2: mov     %r14, %rdi               */
  0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*a5: callq   +0x110(%rbx)             */
  0x49, 0x89, 0xc7,                         /*ab: mov     %rax, %r15               */
  0x48, 0x8b, 0x7c, 0x24, 0x30,             /*ae: mov     +0x30(%rsp), %rdi        */
  0x48, 0x8b, 0xb3, 0xc8, 0x02, 0x00, 0x00, /*b3: mov     +0x2c8(%rbx), %rsi       */
  0xba, 0x19, 0x00, 0x00, 0x00,             /*ba: mov     $0x19, %edx              */
  0xff, 0x53, 0x78,                         /*bf: callq   +0x78(%rbx)              */
  0x89, 0xd1,                               /*c2: mov     %edx, %ecx               */
  0x48, 0x89, 0x44, 0x24, 0x10,             /*c4: mov     %rax, +0x10(%rsp)        */
  0x89, 0x4c, 0x24, 0x18,                   /*c9: mov     %ecx, +0x18(%rsp)        */
  0x48, 0x8b, 0x54, 0x24, 0x10,             /*cd: mov     +0x10(%rsp), %rdx        */
  0x4c, 0x89, 0xf7,                         /*d2: mov     %r14, %rdi               */
  0x4c, 0x89, 0xfe,                         /*d5: mov     %r15, %rsi               */
  0xff, 0x93, 0xd0, 0x01, 0x00, 0x00,       /*d8: callq   +0x1d0(%rbx)             */
  0x48, 0x89, 0x44, 0x24, 0x20,             /*de: mov     %rax, +0x20(%rsp)        */
  0x89, 0x54, 0x24, 0x28,                   /*e3: mov     %edx, +0x28(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x20,             /*e7: mov     +0x20(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x38,             /*ec: mov     +0x38(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x58,                   /*f1: mov     +0x58(%rcx), %rcx        */
  0x48, 0x89, 0x41, 0x28,                   /*f5: mov     %rax, +0x28(%rcx)        */
  0x48, 0x8b, 0x7c, 0x24, 0x38,             /*f9: mov     +0x38(%rsp), %rdi        */
  0xff, 0x93, 0xb8, 0x01, 0x00, 0x00,       /*fe: callq   +0x1b8(%rbx)             */
  0x48, 0x89, 0xdf,                         /*104: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x40,                   /*107: add     $0x40, %rsp              */
  0x5b,                                     /*10b: pop     %rbx                     */
  0x41, 0x5e,                               /*10c: pop     %r14                     */
  0x41, 0x5f,                               /*10e: pop     %r15                     */

};

static void op_tclass_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 92)) = a * 16 + 8;
  *((int32_t *)(op + 99)) = a * 16 + 0;
  *((int32_t *)(op + 115)) = a * 16 + 0;
  *((int32_t *)(op + 121)) = a * 16 + 8;
  *((int32_t *)(op + 133)) = a * 1 + 0;
}

static void op_tclass_set_args_from_code(uint8_t *op, mrb_code c) {
  op_tclass_set_args(op, GETARG_A(c),0,0);
}


/* args: {"a"=>[[1, 0, 21..24]], "b"=>[[1, 0, 26..29]], "c"=>[[1, 0, 31..34]]} */
static uint8_t op_debug[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0x48, 0x8b, 0xbb, 0xd0, 0x02, 0x00, 0x00, /*0d: mov     +0x2d0(%rbx), %rdi       */
  0xbe, 0x00, 0x00, 0xab, 0x00,             /*14: mov     $0xab0000, %esi          */
  0xba, 0x00, 0x00, 0xbc, 0x00,             /*19: mov     $0xbc0000, %edx          */
  0xb9, 0x00, 0x00, 0xcd, 0x00,             /*1e: mov     $0xcd0000, %ecx          */
  0x31, 0xc0,                               /*23: xor     %eax, %eax               */
  0xff, 0x93, 0x70, 0x01, 0x00, 0x00,       /*25: callq   +0x170(%rbx)             */
  0x48, 0x89, 0xdf,                         /*2b: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*2e: add     $0x10, %rsp              */
  0x5b,                                     /*32: pop     %rbx                     */

};

static void op_debug_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 21)) = a * 1 + 0;
  *((int32_t *)(op + 26)) = b * 1 + 0;
  *((int32_t *)(op + 31)) = c * 1 + 0;
}

static void op_debug_set_args_from_code(uint8_t *op, mrb_code c) {
  op_debug_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c));
}


/* args: {} */
static uint8_t op_stop[] = {
  0x53,                                     /*00: push    %rbx                     */
  0x48, 0x83, 0xec, 0x10,                   /*01: sub     $0x10, %rsp              */
  0x48, 0x89, 0xfb,                         /*05: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x08,             /*08: mov     %rbx, +0x8(%rsp)         */
  0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*0d: callq   +0x1d8(%rbx)             */
  0x48, 0x89, 0xdf,                         /*13: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x10,                   /*16: add     $0x10, %rsp              */
  0x5b,                                     /*1a: pop     %rbx                     */

};

static void op_stop_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
}

static void op_stop_set_args_from_code(uint8_t *op, mrb_code c) {
  op_stop_set_args(op, 0,0,0);
}


/* args: {"b"=>[[16, 0, 36..39], [16, 8, 42..45]]} */
static uint8_t op_err[] = {
  0x41, 0x56,                               /*00: push    %r14                     */
  0x53,                                     /*02: push    %rbx                     */
  0x48, 0x83, 0xec, 0x48,                   /*03: sub     $0x48, %rsp              */
  0x48, 0x89, 0xfb,                         /*07: mov     %rdi, %rbx               */
  0x48, 0x89, 0x5c, 0x24, 0x40,             /*0a: mov     %rbx, +0x40(%rsp)        */
  0x48, 0x8b, 0x7b, 0x58,                   /*0f: mov     +0x58(%rbx), %rdi        */
  0x48, 0x89, 0x7c, 0x24, 0x38,             /*13: mov     %rdi, +0x38(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x40,             /*18: mov     +0x40(%rsp), %rax        */
  0x48, 0x8b, 0x40, 0x20,                   /*1d: mov     +0x20(%rax), %rax        */
  0x48, 0x8b, 0xb0, 0x00, 0x10, 0xbc, 0x00, /*21: mov     +0xbc1000(%rax), %rsi    */
  0x8b, 0x90, 0x08, 0x10, 0xbc, 0x00,       /*28: mov     +0xbc1008(%rax), %edx    */
  0xff, 0x93, 0xc8, 0x01, 0x00, 0x00,       /*2e: callq   +0x1c8(%rbx)             */
  0x48, 0x89, 0x44, 0x24, 0x28,             /*34: mov     %rax, +0x28(%rsp)        */
  0x89, 0x54, 0x24, 0x30,                   /*39: mov     %edx, +0x30(%rsp)        */
  0x4c, 0x8b, 0x74, 0x24, 0x38,             /*3d: mov     +0x38(%rsp), %r14        */
  0x48, 0x8b, 0x83, 0x68, 0x02, 0x00, 0x00, /*42: mov     +0x268(%rbx), %rax       */
  0x48, 0x8b, 0x30,                         /*49: mov     (%rax), %rsi             */
  0x4c, 0x89, 0xf7,                         /*4c: mov     %r14, %rdi               */
  0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*4f: callq   +0x110(%rbx)             */
  0x48, 0x8b, 0x54, 0x24, 0x28,             /*55: mov     +0x28(%rsp), %rdx        */
  0x8b, 0x4c, 0x24, 0x30,                   /*5a: mov     +0x30(%rsp), %ecx        */
  0x4c, 0x89, 0xf7,                         /*5e: mov     %r14, %rdi               */
  0x48, 0x89, 0xc6,                         /*61: mov     %rax, %rsi               */
  0xff, 0x93, 0xd0, 0x01, 0x00, 0x00,       /*64: callq   +0x1d0(%rbx)             */
  0x48, 0x89, 0x44, 0x24, 0x08,             /*6a: mov     %rax, +0x8(%rsp)         */
  0x89, 0x54, 0x24, 0x10,                   /*6f: mov     %edx, +0x10(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x08,             /*73: mov     +0x8(%rsp), %rax         */
  0x48, 0x8b, 0x4c, 0x24, 0x10,             /*78: mov     +0x10(%rsp), %rcx        */
  0x48, 0x89, 0x4c, 0x24, 0x20,             /*7d: mov     %rcx, +0x20(%rsp)        */
  0x48, 0x89, 0x44, 0x24, 0x18,             /*82: mov     %rax, +0x18(%rsp)        */
  0x48, 0x8b, 0x44, 0x24, 0x18,             /*87: mov     +0x18(%rsp), %rax        */
  0x48, 0x8b, 0x4c, 0x24, 0x40,             /*8c: mov     +0x40(%rsp), %rcx        */
  0x48, 0x8b, 0x49, 0x58,                   /*91: mov     +0x58(%rcx), %rcx        */
  0x48, 0x89, 0x41, 0x28,                   /*95: mov     %rax, +0x28(%rcx)        */
  0x48, 0x8b, 0x7c, 0x24, 0x40,             /*99: mov     +0x40(%rsp), %rdi        */
  0xff, 0x93, 0xb8, 0x01, 0x00, 0x00,       /*9e: callq   +0x1b8(%rbx)             */
  0x48, 0x89, 0xdf,                         /*a4: mov     %rbx, %rdi               */
  0x48, 0x83, 0xc4, 0x48,                   /*a7: add     $0x48, %rsp              */
  0x5b,                                     /*ab: pop     %rbx                     */
  0x41, 0x5e,                               /*ac: pop     %r14                     */

};

static void op_err_set_args(uint8_t *op, int32_t a, int32_t b, int32_t c) {
  *((int32_t *)(op + 36)) = b * 16 + 0;
  *((int32_t *)(op + 42)) = b * 16 + 8;
}

static void op_err_set_args_from_code(uint8_t *op, mrb_code c) {
  op_err_set_args(op, GETARG_A(c),GETARG_Bx(c),0);
}

typedef void (*jit_args_func_t)(uint8_t *op, mrb_code c);
static jit_args_func_t arg_funcs[76];
static uint8_t* ops[76];
static size_t op_sizes[] = {
  sizeof(op_nop), /* op_nop */
  sizeof(op_move), /* op_move */
  sizeof(op_loadl), /* op_loadl */
  sizeof(op_loadi), /* op_loadi */
  sizeof(op_loadsym), /* op_loadsym */
  sizeof(op_loadnil), /* op_loadnil */
  sizeof(op_loadself), /* op_loadself */
  sizeof(op_loadt), /* op_loadt */
  sizeof(op_loadf), /* op_loadf */
  sizeof(op_getglobal), /* op_getglobal */
  sizeof(op_setglobal), /* op_setglobal */
  sizeof(op_getspecial), /* op_getspecial */
  sizeof(op_setspecial), /* op_setspecial */
  sizeof(op_getiv), /* op_getiv */
  sizeof(op_setiv), /* op_setiv */
  sizeof(op_getcv), /* op_getcv */
  sizeof(op_setcv), /* op_setcv */
  sizeof(op_getconst), /* op_getconst */
  sizeof(op_setconst), /* op_setconst */
  sizeof(op_getmcnst), /* op_getmcnst */
  sizeof(op_setmcnst), /* op_setmcnst */
  sizeof(op_getupvar), /* op_getupvar */
  sizeof(op_setupvar), /* op_setupvar */
  sizeof(op_jmp), /* op_jmp */
  sizeof(op_jmpif), /* op_jmpif */
  sizeof(op_jmpnot), /* op_jmpnot */
  sizeof(op_onerr), /* op_onerr */
  sizeof(op_rescue), /* op_rescue */
  sizeof(op_poperr), /* op_poperr */
  sizeof(op_raise), /* op_raise */
  sizeof(op_epush), /* op_epush */
  sizeof(op_epop), /* op_epop */
  sizeof(op_send), /* op_send */
  sizeof(op_sendb), /* op_sendb */
  sizeof(op_fsend), /* op_fsend */
  sizeof(op_call), /* op_call */
  sizeof(op_super), /* op_super */
  sizeof(op_argary), /* op_argary */
  sizeof(op_enter), /* op_enter */
  sizeof(op_karg), /* op_karg */
  sizeof(op_kdict), /* op_kdict */
  sizeof(op_return), /* op_return */
  sizeof(op_tailcall), /* op_tailcall */
  sizeof(op_blkpush), /* op_blkpush */
  sizeof(op_add), /* op_add */
  sizeof(op_addi), /* op_addi */
  sizeof(op_sub), /* op_sub */
  sizeof(op_subi), /* op_subi */
  sizeof(op_mul), /* op_mul */
  sizeof(op_div), /* op_div */
  sizeof(op_eq), /* op_eq */
  sizeof(op_lt), /* op_lt */
  sizeof(op_le), /* op_le */
  sizeof(op_gt), /* op_gt */
  sizeof(op_ge), /* op_ge */
  sizeof(op_array), /* op_array */
  sizeof(op_arycat), /* op_arycat */
  sizeof(op_arypush), /* op_arypush */
  sizeof(op_aref), /* op_aref */
  sizeof(op_aset), /* op_aset */
  sizeof(op_apost), /* op_apost */
  sizeof(op_string), /* op_string */
  sizeof(op_strcat), /* op_strcat */
  sizeof(op_hash), /* op_hash */
  sizeof(op_lambda), /* op_lambda */
  sizeof(op_range), /* op_range */
  sizeof(op_oclass), /* op_oclass */
  sizeof(op_class), /* op_class */
  sizeof(op_module), /* op_module */
  sizeof(op_exec), /* op_exec */
  sizeof(op_method), /* op_method */
  sizeof(op_sclass), /* op_sclass */
  sizeof(op_tclass), /* op_tclass */
  sizeof(op_debug), /* op_debug */
  sizeof(op_stop), /* op_stop */
  sizeof(op_err), /* op_err */

};

extern void init_symtbl();
void init_ops() {
  static int init = 0;
  if(init == 0) {
    init = 1;
    init_symtbl();
    ops[0] = op_nop;
    arg_funcs[0] = op_nop_set_args_from_code;
    ops[1] = op_move;
    arg_funcs[1] = op_move_set_args_from_code;
    ops[2] = op_loadl;
    arg_funcs[2] = op_loadl_set_args_from_code;
    ops[3] = op_loadi;
    arg_funcs[3] = op_loadi_set_args_from_code;
    ops[4] = op_loadsym;
    arg_funcs[4] = op_loadsym_set_args_from_code;
    ops[5] = op_loadnil;
    arg_funcs[5] = op_loadnil_set_args_from_code;
    ops[6] = op_loadself;
    arg_funcs[6] = op_loadself_set_args_from_code;
    ops[7] = op_loadt;
    arg_funcs[7] = op_loadt_set_args_from_code;
    ops[8] = op_loadf;
    arg_funcs[8] = op_loadf_set_args_from_code;
    ops[9] = op_getglobal;
    arg_funcs[9] = op_getglobal_set_args_from_code;
    ops[10] = op_setglobal;
    arg_funcs[10] = op_setglobal_set_args_from_code;
    ops[11] = op_getspecial;
    arg_funcs[11] = op_getspecial_set_args_from_code;
    ops[12] = op_setspecial;
    arg_funcs[12] = op_setspecial_set_args_from_code;
    ops[13] = op_getiv;
    arg_funcs[13] = op_getiv_set_args_from_code;
    ops[14] = op_setiv;
    arg_funcs[14] = op_setiv_set_args_from_code;
    ops[15] = op_getcv;
    arg_funcs[15] = op_getcv_set_args_from_code;
    ops[16] = op_setcv;
    arg_funcs[16] = op_setcv_set_args_from_code;
    ops[17] = op_getconst;
    arg_funcs[17] = op_getconst_set_args_from_code;
    ops[18] = op_setconst;
    arg_funcs[18] = op_setconst_set_args_from_code;
    ops[19] = op_getmcnst;
    arg_funcs[19] = op_getmcnst_set_args_from_code;
    ops[20] = op_setmcnst;
    arg_funcs[20] = op_setmcnst_set_args_from_code;
    ops[21] = op_getupvar;
    arg_funcs[21] = op_getupvar_set_args_from_code;
    ops[22] = op_setupvar;
    arg_funcs[22] = op_setupvar_set_args_from_code;
    ops[23] = op_jmp;
    arg_funcs[23] = op_jmp_set_args_from_code;
    ops[24] = op_jmpif;
    arg_funcs[24] = op_jmpif_set_args_from_code;
    ops[25] = op_jmpnot;
    arg_funcs[25] = op_jmpnot_set_args_from_code;
    ops[26] = op_onerr;
    arg_funcs[26] = op_onerr_set_args_from_code;
    ops[27] = op_rescue;
    arg_funcs[27] = op_rescue_set_args_from_code;
    ops[28] = op_poperr;
    arg_funcs[28] = op_poperr_set_args_from_code;
    ops[29] = op_raise;
    arg_funcs[29] = op_raise_set_args_from_code;
    ops[30] = op_epush;
    arg_funcs[30] = op_epush_set_args_from_code;
    ops[31] = op_epop;
    arg_funcs[31] = op_epop_set_args_from_code;
    ops[32] = op_send;
    arg_funcs[32] = op_send_set_args_from_code;
    ops[33] = op_sendb;
    arg_funcs[33] = op_sendb_set_args_from_code;
    ops[34] = op_fsend;
    arg_funcs[34] = op_fsend_set_args_from_code;
    ops[35] = op_call;
    arg_funcs[35] = op_call_set_args_from_code;
    ops[36] = op_super;
    arg_funcs[36] = op_super_set_args_from_code;
    ops[37] = op_argary;
    arg_funcs[37] = op_argary_set_args_from_code;
    ops[38] = op_enter;
    arg_funcs[38] = op_enter_set_args_from_code;
    ops[39] = op_karg;
    arg_funcs[39] = op_karg_set_args_from_code;
    ops[40] = op_kdict;
    arg_funcs[40] = op_kdict_set_args_from_code;
    ops[41] = op_return;
    arg_funcs[41] = op_return_set_args_from_code;
    ops[42] = op_tailcall;
    arg_funcs[42] = op_tailcall_set_args_from_code;
    ops[43] = op_blkpush;
    arg_funcs[43] = op_blkpush_set_args_from_code;
    ops[44] = op_add;
    arg_funcs[44] = op_add_set_args_from_code;
    ops[45] = op_addi;
    arg_funcs[45] = op_addi_set_args_from_code;
    ops[46] = op_sub;
    arg_funcs[46] = op_sub_set_args_from_code;
    ops[47] = op_subi;
    arg_funcs[47] = op_subi_set_args_from_code;
    ops[48] = op_mul;
    arg_funcs[48] = op_mul_set_args_from_code;
    ops[49] = op_div;
    arg_funcs[49] = op_div_set_args_from_code;
    ops[50] = op_eq;
    arg_funcs[50] = op_eq_set_args_from_code;
    ops[51] = op_lt;
    arg_funcs[51] = op_lt_set_args_from_code;
    ops[52] = op_le;
    arg_funcs[52] = op_le_set_args_from_code;
    ops[53] = op_gt;
    arg_funcs[53] = op_gt_set_args_from_code;
    ops[54] = op_ge;
    arg_funcs[54] = op_ge_set_args_from_code;
    ops[55] = op_array;
    arg_funcs[55] = op_array_set_args_from_code;
    ops[56] = op_arycat;
    arg_funcs[56] = op_arycat_set_args_from_code;
    ops[57] = op_arypush;
    arg_funcs[57] = op_arypush_set_args_from_code;
    ops[58] = op_aref;
    arg_funcs[58] = op_aref_set_args_from_code;
    ops[59] = op_aset;
    arg_funcs[59] = op_aset_set_args_from_code;
    ops[60] = op_apost;
    arg_funcs[60] = op_apost_set_args_from_code;
    ops[61] = op_string;
    arg_funcs[61] = op_string_set_args_from_code;
    ops[62] = op_strcat;
    arg_funcs[62] = op_strcat_set_args_from_code;
    ops[63] = op_hash;
    arg_funcs[63] = op_hash_set_args_from_code;
    ops[64] = op_lambda;
    arg_funcs[64] = op_lambda_set_args_from_code;
    ops[65] = op_range;
    arg_funcs[65] = op_range_set_args_from_code;
    ops[66] = op_oclass;
    arg_funcs[66] = op_oclass_set_args_from_code;
    ops[67] = op_class;
    arg_funcs[67] = op_class_set_args_from_code;
    ops[68] = op_module;
    arg_funcs[68] = op_module_set_args_from_code;
    ops[69] = op_exec;
    arg_funcs[69] = op_exec_set_args_from_code;
    ops[70] = op_method;
    arg_funcs[70] = op_method_set_args_from_code;
    ops[71] = op_sclass;
    arg_funcs[71] = op_sclass_set_args_from_code;
    ops[72] = op_tclass;
    arg_funcs[72] = op_tclass_set_args_from_code;
    ops[73] = op_debug;
    arg_funcs[73] = op_debug_set_args_from_code;
    ops[74] = op_stop;
    arg_funcs[74] = op_stop_set_args_from_code;
    ops[75] = op_err;
    arg_funcs[75] = op_err_set_args_from_code;
  }
}
int jit_return(uint8_t *b) {
  *b++ = 0xc3;
  return 1;
}
int jit_jump(uint8_t *b, int32_t n) {
  if(n >= -128 && n < 127) {
    *b++ = 235;
    *b++ = (int8_t) n;
    return 1;
  }
  if(n >= -32768 && n < 32767) {
    *b++ = 233;
    *((int16_t *)(b)) = (int16_t) n;
    b += sizeof(int16_t);
    return 1;
  }
  return 0;
}
int jit_jump_if(uint8_t *b, int32_t n) {
  if(n >= -128 && n < 127) {
    *b++ = 116;
    *b++ = (int8_t) n;
    return 1;
  }
  if(n >= -32768 && n < 32767) {
    *((uint16_t *)(b)) = (uint16_t) -31729;
    b += sizeof(uint16_t);
    *((int16_t *)(b)) = (int16_t) n;
    b += sizeof(int16_t);
    return 1;
  }
  return 0;
}
int jit_jump_not(uint8_t *b, int32_t n) {
  if(n >= -128 && n < 127) {
    *b++ = 117;
    *b++ = (int8_t) n;
    return 1;
  }
  if(n >= -32768 && n < 32767) {
    *((uint16_t *)(b)) = (uint16_t) -31473;
    b += sizeof(uint16_t);
    *((int16_t *)(b)) = (int16_t) n;
    b += sizeof(int16_t);
    return 1;
  }
  return 0;
}
