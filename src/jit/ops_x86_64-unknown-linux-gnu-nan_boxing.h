
/* args: {} */
static uint8_t op_nop[] = {

};

static void op_nop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_nop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_nop_set_args(op, 0,0,0,op_idx);
}


/* args: {"b"=>[[8, 0, 8..11]], "a"=>[[8, 0, 16..19]]} */
static uint8_t op_move[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xbc, 0x00,/*4: movsd  0xbc0800(%rax),%xmm0 */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*c: movsd  %xmm0,0xab0800(%rax) */

};

static void op_move_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 8)) = b * 8 + 0;
  *((int32_t *)(op + 16)) = a * 8 + 0;
}

static void op_move_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_move_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[8, 0, 12..15]], "a"=>[[8, 0, 20..23]]} */
static uint8_t op_loadl[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x4f, 0x20,                   /*4: mov    0x20(%rdi),%rcx */
0xf2, 0x0f, 0x10, 0x81, 0x00, 0x08, 0xbc, 0x00,/*8: movsd  0xbc0800(%rcx),%xmm0 */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*10: movsd  %xmm0,0xab0800(%rax) */

};

static void op_loadl_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 12)) = b * 8 + 0;
  *((int32_t *)(op + 20)) = a * 8 + 0;
}

static void op_loadl_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadl_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 4, 6..9], [8, 0, 20..23]], "b"=>[[1, 0, 24..27]]} */
static uint8_t op_loadi[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x04, 0x08, 0xab, 0x00, 0x00, 0x00, 0xf1, 0xff,/*4: movl   $0xfff10000,0xab0804(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0xbc, 0x00,/*12: movl   $0xbc0000,0xab0800(%rax) */

};

static void op_loadi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 8 + 4;
  *((int32_t *)(op + 20)) = a * 8 + 0;
  *((int32_t *)(op + 24)) = b * 1 + 0;
}

static void op_loadi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadi_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[8, 4, 6..9], [8, 0, 30..33]], "b"=>[[4, 0, 24..27]]} */
static uint8_t op_loadsym[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x04, 0x08, 0xab, 0x00, 0x00, 0x40, 0xf1, 0xff,/*4: movl   $0xfff14000,0xab0804(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x4f, 0x28,                   /*12: mov    0x28(%rdi),%rcx */
0x8b, 0x89, 0x00, 0x04, 0xbc, 0x00,       /*16: mov    0xbc0400(%rcx),%ecx */
0x89, 0x88, 0x00, 0x08, 0xab, 0x00,       /*1c: mov    %ecx,0xab0800(%rax) */

};

static void op_loadsym_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 8 + 4;
  *((int32_t *)(op + 30)) = a * 8 + 0;
  *((int32_t *)(op + 24)) = b * 4 + 0;
}

static void op_loadsym_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadsym_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 4, 6..9], [8, 0, 20..23]]} */
static uint8_t op_loadnil[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x04, 0x08, 0xab, 0x00, 0x00, 0x40, 0xf0, 0xff,/*4: movl   $0xfff04000,0xab0804(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*12: movl   $0x0,0xab0800(%rax) */

};

static void op_loadnil_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 8 + 4;
  *((int32_t *)(op + 20)) = a * 8 + 0;
}

static void op_loadnil_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadnil_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 12..15]]} */
static uint8_t op_loadself[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0xf2, 0x0f, 0x10, 0x00,                   /*4: movsd  (%rax),%xmm0 */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*8: movsd  %xmm0,0xab0800(%rax) */

};

static void op_loadself_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 12)) = a * 8 + 0;
}

static void op_loadself_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadself_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 4, 6..9], [8, 0, 20..23]]} */
static uint8_t op_loadt[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x04, 0x08, 0xab, 0x00, 0x00, 0xc0, 0xf0, 0xff,/*4: movl   $0xfff0c000,0xab0804(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*12: movl   $0x1,0xab0800(%rax) */

};

static void op_loadt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 8 + 4;
  *((int32_t *)(op + 20)) = a * 8 + 0;
}

static void op_loadt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadt_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 4, 6..9], [8, 0, 20..23]]} */
static uint8_t op_loadf[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x04, 0x08, 0xab, 0x00, 0x00, 0x40, 0xf0, 0xff,/*4: movl   $0xfff04000,0xab0804(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*e: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x01, 0x00, 0x00, 0x00,/*12: movl   $0x1,0xab0800(%rax) */

};

static void op_loadf_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 6)) = a * 8 + 4;
  *((int32_t *)(op + 20)) = a * 8 + 0;
}

static void op_loadf_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadf_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[4, 0, 20..23]], "a"=>[[8, 0, 33..36]]} */
static uint8_t op_getglobal[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*6: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x28,                   /*e: mov    0x28(%rbx),%rax */
0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*12: mov    0xbc0400(%rax),%esi */
0xff, 0x93, 0xc0, 0x01, 0x00, 0x00,       /*18: callq  *0x1c0(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*1e: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
0x5b,                                     /*28: pop    %rbx */
0x41, 0x5e,                               /*29: pop    %r14 */

};

static void op_getglobal_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 20)) = b * 4 + 0;
  *((int32_t *)(op + 33)) = a * 8 + 0;
}

static void op_getglobal_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getglobal_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28]]} */
static uint8_t op_setglobal[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rdx */
0xff, 0x93, 0x98, 0x00, 0x00, 0x00,       /*1d: callq  *0x98(%rbx) */
0x48, 0x89, 0xdf,                         /*23: mov    %rbx,%rdi */
0x5b,                                     /*26: pop    %rbx */

};

static void op_setglobal_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
}

static void op_setglobal_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setglobal_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[1, 0, 15..18]], "a"=>[[8, 0, 28..31]]} */
static uint8_t op_getspecial[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0xbe, 0x00, 0x00, 0xbc, 0x00,             /*e: mov    $0xbc0000,%esi */
0xff, 0x93, 0x30, 0x02, 0x00, 0x00,       /*13: callq  *0x230(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*19: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*20: mov    %rbx,%rdi */
0x5b,                                     /*23: pop    %rbx */
0x41, 0x5e,                               /*24: pop    %r14 */

};

static void op_getspecial_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = b * 1 + 0;
  *((int32_t *)(op + 28)) = a * 8 + 0;
}

static void op_getspecial_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getspecial_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18]], "b"=>[[1, 0, 20..23]]} */
static uint8_t op_setspecial[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*8: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rdx */
0xbe, 0x00, 0x00, 0xbc, 0x00,             /*13: mov    $0xbc0000,%esi */
0xff, 0x93, 0x38, 0x01, 0x00, 0x00,       /*18: callq  *0x138(%rbx) */
0x48, 0x89, 0xdf,                         /*1e: mov    %rbx,%rdi */
0x5b,                                     /*21: pop    %rbx */

};

static void op_setspecial_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
  *((int32_t *)(op + 20)) = b * 1 + 0;
}

static void op_setspecial_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setspecial_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 20..23]], "a"=>[[8, 0, 33..36]]} */
static uint8_t op_getiv[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*6: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x28,                   /*e: mov    0x28(%rbx),%rax */
0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*12: mov    0xbc0400(%rax),%esi */
0xff, 0x93, 0xc0, 0x00, 0x00, 0x00,       /*18: callq  *0xc0(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*1e: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
0x5b,                                     /*28: pop    %rbx */
0x41, 0x5e,                               /*29: pop    %r14 */

};

static void op_getiv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 20)) = b * 4 + 0;
  *((int32_t *)(op + 33)) = a * 8 + 0;
}

static void op_getiv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getiv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28]]} */
static uint8_t op_setiv[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rdx */
0xff, 0x93, 0xf0, 0x01, 0x00, 0x00,       /*1d: callq  *0x1f0(%rbx) */
0x48, 0x89, 0xdf,                         /*23: mov    %rbx,%rdi */
0x5b,                                     /*26: pop    %rbx */

};

static void op_setiv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
}

static void op_setiv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setiv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 40..43]], "a"=>[[8, 0, 53..56]]} */
static uint8_t op_getcv[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x10,                   /*6: mov    0x10(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*a: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*e: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*12: mov    0x20(%rcx),%rcx */
0x48, 0x89, 0x41, 0x38,                   /*16: mov    %rax,0x38(%rcx) */
0x48, 0x8b, 0x7b, 0x50,                   /*1a: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0x73, 0x18,                   /*1e: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x28,                   /*22: mov    0x28(%rbx),%rax */
0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*26: mov    0xbc0400(%rax),%esi */
0xff, 0x93, 0xe0, 0x00, 0x00, 0x00,       /*2c: callq  *0xe0(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*32: mov    %rax,0xab0800(%r14) */
0x48, 0x8b, 0x43, 0x50,                   /*39: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*3d: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*41: mov    0x20(%rax),%rax */
0x48, 0xc7, 0x40, 0x38, 0x00, 0x00, 0x00, 0x00,/*45: movq   $0x0,0x38(%rax) */
0x48, 0x89, 0xdf,                         /*4d: mov    %rbx,%rdi */
0x5b,                                     /*50: pop    %rbx */
0x41, 0x5e,                               /*51: pop    %r14 */

};

static void op_getcv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 40)) = b * 4 + 0;
  *((int32_t *)(op + 53)) = a * 8 + 0;
}

static void op_getcv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getcv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28]]} */
static uint8_t op_setcv[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rdx */
0xff, 0x93, 0x10, 0x02, 0x00, 0x00,       /*1d: callq  *0x210(%rbx) */
0x48, 0x89, 0xdf,                         /*23: mov    %rbx,%rdi */
0x5b,                                     /*26: pop    %rbx */

};

static void op_setcv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
}

static void op_setcv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setcv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 34..37]], "a"=>[[8, 0, 83..86]]} */
static uint8_t op_getconst[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x10,                   /*4: mov    0x10(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*8: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*c: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*10: mov    0x20(%rcx),%rcx */
0x48, 0x89, 0x41, 0x38,                   /*14: mov    %rax,0x38(%rcx) */
0x48, 0x8b, 0x43, 0x28,                   /*18: mov    0x28(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*1c: mov    0x50(%rbx),%rdi */
0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*20: mov    0xbc0400(%rax),%esi */
0xff, 0x93, 0xa0, 0x00, 0x00, 0x00,       /*26: callq  *0xa0(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*2c: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*30: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*34: mov    0x20(%rcx),%rcx */
0x48, 0xc7, 0x41, 0x38, 0x00, 0x00, 0x00, 0x00,/*38: movq   $0x0,0x38(%rcx) */
0x48, 0x8b, 0x4b, 0x50,                   /*40: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*44: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*48: mov    0x8(%rcx),%rcx */
0x48, 0x89, 0x4b, 0x18,                   /*4c: mov    %rcx,0x18(%rbx) */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*50: mov    %rax,0xab0800(%rcx) */
0x48, 0x89, 0xdf,                         /*57: mov    %rbx,%rdi */
0x5b,                                     /*5a: pop    %rbx */

};

static void op_getconst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 34)) = b * 4 + 0;
  *((int32_t *)(op + 83)) = a * 8 + 0;
}

static void op_getconst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getconst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28]]} */
static uint8_t op_setconst[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rdx */
0xff, 0x93, 0xb8, 0x01, 0x00, 0x00,       /*1d: callq  *0x1b8(%rbx) */
0x48, 0x89, 0xdf,                         /*23: mov    %rbx,%rdi */
0x5b,                                     /*26: pop    %rbx */

};

static void op_setconst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
}

static void op_setconst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setconst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 38..41]], "a"=>[[8, 0, 45..48], [8, 0, 94..97]]} */
static uint8_t op_getmcnst[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x10,                   /*4: mov    0x10(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*8: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*c: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*10: mov    0x20(%rcx),%rcx */
0x48, 0x89, 0x41, 0x38,                   /*14: mov    %rax,0x38(%rcx) */
0x48, 0x8b, 0x7b, 0x50,                   /*18: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*1c: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*20: mov    0x28(%rbx),%rcx */
0x8b, 0x91, 0x00, 0x04, 0xbc, 0x00,       /*24: mov    0xbc0400(%rcx),%edx */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*2a: mov    0xab0800(%rax),%rsi */
0xff, 0x93, 0x18, 0x02, 0x00, 0x00,       /*31: callq  *0x218(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*37: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*3b: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*3f: mov    0x20(%rcx),%rcx */
0x48, 0xc7, 0x41, 0x38, 0x00, 0x00, 0x00, 0x00,/*43: movq   $0x0,0x38(%rcx) */
0x48, 0x8b, 0x4b, 0x50,                   /*4b: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*4f: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*53: mov    0x8(%rcx),%rcx */
0x48, 0x89, 0x4b, 0x18,                   /*57: mov    %rcx,0x18(%rbx) */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*5b: mov    %rax,0xab0800(%rcx) */
0x48, 0x89, 0xdf,                         /*62: mov    %rbx,%rdi */
0x5b,                                     /*65: pop    %rbx */

};

static void op_getmcnst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 38)) = b * 4 + 0;
  *((int32_t *)(op + 45)) = a * 8 + 0;
  *((int32_t *)(op + 94)) = a * 8 + 0;
}

static void op_getmcnst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getmcnst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28], [8, 8, 32..35]]} */
static uint8_t op_setmcnst[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0x91, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%edx */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rcx */
0x48, 0x8b, 0xb0, 0x08, 0x08, 0xab, 0x00, /*1d: mov    0xab0808(%rax),%rsi */
0xff, 0x93, 0x08, 0x01, 0x00, 0x00,       /*24: callq  *0x108(%rbx) */
0x48, 0x89, 0xdf,                         /*2a: mov    %rbx,%rdi */
0x5b,                                     /*2d: pop    %rbx */

};

static void op_setmcnst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
  *((int32_t *)(op + 32)) = a * 8 + 8;
}

static void op_setmcnst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setmcnst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"c"=>[[1, 0, 11..14]], "b"=>[[8, 0, 94..97]], "a"=>[[8, 0, 101..104]]} */
static uint8_t op_getupvar[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*a: mov    $0xcd0000,%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*f: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*13: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*17: mov    0x20(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*1b: mov    0x8(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x28,                   /*1f: mov    0x28(%rcx),%rcx */
0xeb, 0x11,                               /*23: jmp    36 <op_getupvar+0x36> */
0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*25: data16 nopw %cs:0x0(%rax,%rax,1) */
0xff, 0xc8,                               /*30: dec    %eax */
0x48, 0x8b, 0x49, 0x08,                   /*32: mov    0x8(%rcx),%rcx */
0x48, 0x85, 0xc9,                         /*36: test   %rcx,%rcx */
0x0f, 0x94, 0xc2,                         /*39: sete   %dl */
0x85, 0xc0,                               /*3c: test   %eax,%eax */
0x74, 0x07,                               /*3e: je     47 <op_getupvar+0x47> */
0xf6, 0xc2, 0x01,                         /*40: test   $0x1,%dl */
0x74, 0xeb,                               /*43: je     30 <op_getupvar+0x30> */
0xeb, 0x04,                               /*45: jmp    4b <op_getupvar+0x4b> */
0x84, 0xd2,                               /*47: test   %dl,%dl */
0x74, 0x0c,                               /*49: je     57 <op_getupvar+0x57> */
0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0xff,/*4b: movabs $0xfff0400000000000,%rax */
0xeb, 0x0b,                               /*55: jmp    62 <op_getupvar+0x62> */
0x48, 0x8b, 0x41, 0x18,                   /*57: mov    0x18(%rcx),%rax */
0x48, 0x8b, 0x80, 0x00, 0x08, 0xbc, 0x00, /*5b: mov    0xbc0800(%rax),%rax */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*62: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*69: mov    %rbx,%rdi */
0x5b,                                     /*6c: pop    %rbx */
0x41, 0x5e,                               /*6d: pop    %r14 */

};

static void op_getupvar_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 11)) = c * 1 + 0;
  *((int32_t *)(op + 94)) = b * 8 + 0;
  *((int32_t *)(op + 101)) = a * 8 + 0;
}

static void op_getupvar_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getupvar_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"c"=>[[1, 0, 5..8]], "a"=>[[8, 0, 71..74]], "b"=>[[8, 0, 79..82]]} */
static uint8_t op_setupvar[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*4: mov    $0xcd0000,%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*9: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*d: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*11: mov    0x20(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*15: mov    0x8(%rcx),%rcx */
0x48, 0x8b, 0x71, 0x28,                   /*19: mov    0x28(%rcx),%rsi */
0xeb, 0x07,                               /*1d: jmp    26 <op_setupvar+0x26> */
0x90,                                     /*1f: nop */
0xff, 0xc8,                               /*20: dec    %eax */
0x48, 0x8b, 0x76, 0x08,                   /*22: mov    0x8(%rsi),%rsi */
0x48, 0x85, 0xf6,                         /*26: test   %rsi,%rsi */
0x0f, 0x94, 0xc1,                         /*29: sete   %cl */
0x85, 0xc0,                               /*2c: test   %eax,%eax */
0x74, 0x07,                               /*2e: je     37 <op_setupvar+0x37> */
0xf6, 0xc1, 0x01,                         /*30: test   $0x1,%cl */
0x74, 0xeb,                               /*33: je     20 <op_setupvar+0x20> */
0xeb, 0x26,                               /*35: jmp    5d <op_setupvar+0x5d> */
0x84, 0xc9,                               /*37: test   %cl,%cl */
0x75, 0x22,                               /*39: jne    5d <op_setupvar+0x5d> */
0x48, 0x8b, 0x43, 0x18,                   /*3b: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4e, 0x18,                   /*3f: mov    0x18(%rsi),%rcx */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*43: movsd  0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x11, 0x81, 0x00, 0x08, 0xbc, 0x00,/*4b: movsd  %xmm0,0xbc0800(%rcx) */
0x48, 0x8b, 0x7b, 0x50,                   /*53: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0x00, 0x01, 0x00, 0x00,       /*57: callq  *0x100(%rbx) */
0x48, 0x89, 0xdf,                         /*5d: mov    %rbx,%rdi */
0x5b,                                     /*60: pop    %rbx */

};

static void op_setupvar_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = c * 1 + 0;
  *((int32_t *)(op + 71)) = a * 8 + 0;
  *((int32_t *)(op + 79)) = b * 8 + 0;
}

static void op_setupvar_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setupvar_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_jmp[] = {

};

static void op_jmp_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_jmp_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmp_set_args(op, 0,GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[8, 4, 7..10]]} */
static uint8_t op_jmpif[] = {
0x50,                                     /*0: push   %rax */
0x48, 0x8b, 0x47, 0x18,                   /*1: mov    0x18(%rdi),%rax */
0x8b, 0x80, 0x04, 0x08, 0xab, 0x00,       /*5: mov    0xab0804(%rax),%eax */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*b: cmp    $0xfff00001,%eax */
0x72, 0x0c,                               /*10: jb     1e <op_jmpif+0x1e> */
0x25, 0x00, 0xc0, 0x0f, 0x00,             /*12: and    $0xfc000,%eax */
0x3d, 0x00, 0x40, 0x00, 0x00,             /*17: cmp    $0x4000,%eax */
0x74, 0x0b,                               /*1c: je     29 <op_jmpif+0x29> */
0xc7, 0x04, 0x25, 0xab, 0x0f, 0x00, 0x00, 0xab, 0x0f, 0x00, 0x00,/*1e: movl   $0xfab,0xfab */
0xe8, 0x00, 0x00, 0x00, 0x00,             /*29: callq  2e <op_jmpif+0x2e> */
0x58,                                     /*2e: pop    %rax */
0xc3,                                     /*2f: retq */

};

static void op_jmpif_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 4;
}

static void op_jmpif_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmpif_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[8, 4, 7..10]]} */
static uint8_t op_jmpnot[] = {
0x50,                                     /*0: push   %rax */
0x48, 0x8b, 0x47, 0x18,                   /*1: mov    0x18(%rdi),%rax */
0x8b, 0x80, 0x04, 0x08, 0xab, 0x00,       /*5: mov    0xab0804(%rax),%eax */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*b: cmp    $0xfff00001,%eax */
0x72, 0x17,                               /*10: jb     29 <op_jmpnot+0x29> */
0x25, 0x00, 0xc0, 0x0f, 0x00,             /*12: and    $0xfc000,%eax */
0x3d, 0x00, 0x40, 0x00, 0x00,             /*17: cmp    $0x4000,%eax */
0x75, 0x0b,                               /*1c: jne    29 <op_jmpnot+0x29> */
0xc7, 0x04, 0x25, 0xab, 0x0f, 0x00, 0x00, 0xab, 0x0f, 0x00, 0x00,/*1e: movl   $0xfab,0xfab */
0xe8, 0x00, 0x00, 0x00, 0x00,             /*29: callq  2e <op_jmpnot+0x2e> */
0x58,                                     /*2e: pop    %rax */
0xc3,                                     /*2f: retq */

};

static void op_jmpnot_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 4;
}

static void op_jmpnot_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmpnot_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"op_idx"=>[[4, 0, 93..96]]} */
static uint8_t op_onerr[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x50,                   /*4: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x48, 0x18,                   /*8: mov    0x18(%rax),%rcx */
0x8b, 0x51, 0x40,                         /*c: mov    0x40(%rcx),%edx */
0x48, 0x8b, 0x71, 0x20,                   /*f: mov    0x20(%rcx),%rsi */
0x3b, 0x56, 0x1c,                         /*13: cmp    0x1c(%rsi),%edx */
0x7f, 0x3a,                               /*16: jg     52 <op_onerr+0x52> */
0x8d, 0x04, 0x12,                         /*18: lea    (%rdx,%rdx,1),%eax */
0x85, 0xd2,                               /*1b: test   %edx,%edx */
0xba, 0x10, 0x00, 0x00, 0x00,             /*1d: mov    $0x10,%edx */
0x0f, 0x45, 0xd0,                         /*22: cmovne %eax,%edx */
0x89, 0x51, 0x40,                         /*25: mov    %edx,0x40(%rcx) */
0x48, 0x8b, 0x7b, 0x50,                   /*28: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*2c: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x70, 0x38,                   /*30: mov    0x38(%rax),%rsi */
0x48, 0x63, 0x50, 0x40,                   /*34: movslq 0x40(%rax),%rdx */
0x48, 0xc1, 0xe2, 0x03,                   /*38: shl    $0x3,%rdx */
0xff, 0x93, 0x28, 0x01, 0x00, 0x00,       /*3c: callq  *0x128(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*42: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*46: mov    0x18(%rcx),%rcx */
0x48, 0x89, 0x41, 0x38,                   /*4a: mov    %rax,0x38(%rcx) */
0x48, 0x8b, 0x43, 0x50,                   /*4e: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x08,                   /*52: mov    0x8(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*56: mov    0x8(%rcx),%rcx */
0x48, 0x8d, 0x91, 0x00, 0x04, 0xde, 0x00, /*5a: lea    0xde0400(%rcx),%rdx */
0x48, 0x89, 0x53, 0x10,                   /*61: mov    %rdx,0x10(%rbx) */
0x48, 0x81, 0xc1, 0x00, 0x00, 0x68, 0x06, /*65: add    $0x6680000,%rcx */
0x48, 0x8b, 0x40, 0x18,                   /*6c: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*70: mov    0x20(%rax),%rax */
0x48, 0x63, 0x50, 0x1c,                   /*74: movslq 0x1c(%rax),%rdx */
0x8d, 0x72, 0x01,                         /*78: lea    0x1(%rdx),%esi */
0x89, 0x70, 0x1c,                         /*7b: mov    %esi,0x1c(%rax) */
0x48, 0x8b, 0x43, 0x50,                   /*7e: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*82: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x38,                   /*86: mov    0x38(%rax),%rax */
0x48, 0x89, 0x0c, 0xd0,                   /*8a: mov    %rcx,(%rax,%rdx,8) */
0x48, 0x89, 0xdf,                         /*8e: mov    %rbx,%rdi */
0x5b,                                     /*91: pop    %rbx */

};

static void op_onerr_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 93)) = op_idx * 4 + 0;
}

static void op_onerr_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_onerr_set_args(op, 0,GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[8, 4, 31..34], [8, 0, 63..66], [8, 0, 75..78], [8, 0, 102..105]]} */
static uint8_t op_rescue[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x4f, 0x50,                   /*4: mov    0x50(%rdi),%rcx */
0x48, 0x8b, 0x49, 0x28,                   /*8: mov    0x28(%rcx),%rcx */
0x8b, 0x09,                               /*c: mov    (%rcx),%ecx */
0xc1, 0xe1, 0x0e,                         /*e: shl    $0xe,%ecx */
0x81, 0xc1, 0x00, 0x40, 0x00, 0x00,       /*11: add    $0x4000,%ecx */
0x81, 0xc9, 0x00, 0x00, 0xf0, 0xff,       /*17: or     $0xfff00000,%ecx */
0x89, 0x88, 0x04, 0x08, 0xab, 0x00,       /*1d: mov    %ecx,0xab0804(%rax) */
0x48, 0x8b, 0x47, 0x50,                   /*23: mov    0x50(%rdi),%rax */
0x48, 0x8b, 0x40, 0x28,                   /*27: mov    0x28(%rax),%rax */
0x0f, 0xb6, 0x08,                         /*2b: movzbl (%rax),%ecx */
0x83, 0xf9, 0x05,                         /*2e: cmp    $0x5,%ecx */
0x77, 0x12,                               /*31: ja     45 <op_rescue+0x45> */
0x83, 0xf9, 0x01,                         /*33: cmp    $0x1,%ecx */
0x74, 0x0d,                               /*36: je     45 <op_rescue+0x45> */
0x48, 0x8b, 0x4f, 0x18,                   /*38: mov    0x18(%rdi),%rcx */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*3c: mov    %rax,0xab0800(%rcx) */
0xeb, 0x25,                               /*43: jmp    6a <op_rescue+0x6a> */
0x48, 0x8b, 0x47, 0x18,                   /*45: mov    0x18(%rdi),%rax */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*49: movl   $0x0,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*53: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x4f, 0x50,                   /*57: mov    0x50(%rdi),%rcx */
0x48, 0x8b, 0x49, 0x28,                   /*5b: mov    0x28(%rcx),%rcx */
0x48, 0xc1, 0xe9, 0x02,                   /*5f: shr    $0x2,%rcx */
0x48, 0x09, 0x88, 0x00, 0x08, 0xab, 0x00, /*63: or     %rcx,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x50,                   /*6a: mov    0x50(%rdi),%rax */
0x48, 0xc7, 0x40, 0x28, 0x00, 0x00, 0x00, 0x00,/*6e: movq   $0x0,0x28(%rax) */

};

static void op_rescue_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 31)) = a * 8 + 4;
  *((int32_t *)(op + 63)) = a * 8 + 0;
  *((int32_t *)(op + 75)) = a * 8 + 0;
  *((int32_t *)(op + 102)) = a * 8 + 0;
}

static void op_rescue_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_rescue_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {} */
static uint8_t op_poperr[] = {
0xb8, 0x00, 0x00, 0x55, 0xff,             /*0: mov    $0xff550000,%eax */
0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*5: data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x4f, 0x50,                   /*10: mov    0x50(%rdi),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*14: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*18: mov    0x20(%rcx),%rcx */
0xff, 0x49, 0x1c,                         /*1c: decl   0x1c(%rcx) */
0xff, 0xc0,                               /*1f: inc    %eax */
0x75, 0xed,                               /*21: jne    10 <op_poperr+0x10> */

};

static void op_poperr_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_poperr_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_poperr_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18]]} */
static uint8_t op_raise[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*8: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x80, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rax */
0x48, 0xc1, 0xe0, 0x02,                   /*13: shl    $0x2,%rax */
0x48, 0xba, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*17: movabs $0xfffffffffffc,%rdx */
0x48, 0x21, 0xc2,                         /*21: and    %rax,%rdx */
0x48, 0x89, 0x51, 0x28,                   /*24: mov    %rdx,0x28(%rcx) */
0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*28: callq  *0x1b0(%rbx) */
0x48, 0x89, 0xdf,                         /*2e: mov    %rbx,%rdi */
0x5b,                                     /*31: pop    %rbx */

};

static void op_raise_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
}

static void op_raise_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_raise_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[8, 0, 21..24]]} */
static uint8_t op_epush[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x08,                   /*6: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x40, 0x20,                   /*e: mov    0x20(%rax),%rax */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*12: mov    0xbc0800(%rax),%rsi */
0xff, 0x53, 0x78,                         /*19: callq  *0x78(%rbx) */
0x49, 0x89, 0xc6,                         /*1c: mov    %rax,%r14 */
0x48, 0x8b, 0x43, 0x50,                   /*1f: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*23: mov    0x18(%rax),%rax */
0x8b, 0x70, 0x50,                         /*27: mov    0x50(%rax),%esi */
0x48, 0x8b, 0x48, 0x20,                   /*2a: mov    0x20(%rax),%rcx */
0x8b, 0x51, 0x20,                         /*2e: mov    0x20(%rcx),%edx */
0x39, 0xd6,                               /*31: cmp    %edx,%esi */
0x7f, 0x45,                               /*33: jg     7a <op_epush+0x7a> */
0x8d, 0x0c, 0x36,                         /*35: lea    (%rsi,%rsi,1),%ecx */
0x85, 0xf6,                               /*38: test   %esi,%esi */
0xba, 0x10, 0x00, 0x00, 0x00,             /*3a: mov    $0x10,%edx */
0x0f, 0x45, 0xd1,                         /*3f: cmovne %ecx,%edx */
0x89, 0x50, 0x50,                         /*42: mov    %edx,0x50(%rax) */
0x48, 0x8b, 0x7b, 0x50,                   /*45: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*49: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x70, 0x48,                   /*4d: mov    0x48(%rax),%rsi */
0x48, 0x63, 0x50, 0x50,                   /*51: movslq 0x50(%rax),%rdx */
0x48, 0xc1, 0xe2, 0x03,                   /*55: shl    $0x3,%rdx */
0xff, 0x93, 0x28, 0x01, 0x00, 0x00,       /*59: callq  *0x128(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*5f: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*63: mov    0x18(%rcx),%rcx */
0x48, 0x89, 0x41, 0x48,                   /*67: mov    %rax,0x48(%rcx) */
0x48, 0x8b, 0x43, 0x50,                   /*6b: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*6f: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x20,                   /*73: mov    0x20(%rax),%rcx */
0x8b, 0x51, 0x20,                         /*77: mov    0x20(%rcx),%edx */
0x8d, 0x42, 0x01,                         /*7a: lea    0x1(%rdx),%eax */
0x89, 0x41, 0x20,                         /*7d: mov    %eax,0x20(%rcx) */
0x48, 0x63, 0xc2,                         /*80: movslq %edx,%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*83: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*87: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x48,                   /*8b: mov    0x48(%rcx),%rcx */
0x4c, 0x89, 0x34, 0xc1,                   /*8f: mov    %r14,(%rcx,%rax,8) */
0x8b, 0x43, 0x48,                         /*93: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*96: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*9a: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*a0: mov    %rbx,%rdi */
0x5b,                                     /*a3: pop    %rbx */
0x41, 0x5e,                               /*a4: pop    %r14 */

};

static void op_epush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 8 + 0;
}

static void op_epush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_epush_set_args(op, 0,GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[1, 0, 71..74]]} */
static uint8_t op_epop[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x53,                                     /*5: push   %rbx */
0x49, 0x89, 0xff,                         /*6: mov    %rdi,%r15 */
0x49, 0x8b, 0x47, 0x50,                   /*9: mov    0x50(%r15),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*d: mov    0x18(%rax),%rax */
0x4c, 0x8b, 0x70, 0x20,                   /*11: mov    0x20(%rax),%r14 */
0x41, 0x8b, 0x6e, 0x20,                   /*15: mov    0x20(%r14),%ebp */
0x31, 0xdb,                               /*19: xor    %ebx,%ebx */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*1b: nopl   0x0(%rax,%rax,1) */
0x41, 0x3b, 0x6e, 0xc8,                   /*20: cmp    -0x38(%r14),%ebp */
0x7e, 0x27,                               /*24: jle    4d <op_epop+0x4d> */
0x49, 0x8b, 0x7f, 0x50,                   /*26: mov    0x50(%r15),%rdi */
0xff, 0xcd,                               /*2a: dec    %ebp */
0x89, 0xee,                               /*2c: mov    %ebp,%esi */
0x41, 0xff, 0x97, 0x00, 0x02, 0x00, 0x00, /*2e: callq  *0x200(%r15) */
0x41, 0x8b, 0x47, 0x48,                   /*35: mov    0x48(%r15),%eax */
0x49, 0x8b, 0x4f, 0x50,                   /*39: mov    0x50(%r15),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*3d: mov    %eax,0xdc(%rcx) */
0xff, 0xc3,                               /*43: inc    %ebx */
0x81, 0xfb, 0x00, 0x00, 0xab, 0x00,       /*45: cmp    $0xab0000,%ebx */
0x7c, 0xd3,                               /*4b: jl     20 <op_epop+0x20> */
0x4c, 0x89, 0xff,                         /*4d: mov    %r15,%rdi */
0x5b,                                     /*50: pop    %rbx */
0x41, 0x5e,                               /*51: pop    %r14 */
0x41, 0x5f,                               /*53: pop    %r15 */
0x5d,                                     /*55: pop    %rbp */

};

static void op_epop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 71)) = a * 1 + 0;
}

static void op_epop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_epop_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 15..18]], "op_idx"=>[[4, 0, 36..39]], "b"=>[[1, 0, 54..57]], "c"=>[[1, 0, 60..63]]} */
static uint8_t op_send[] = {
0x55,                                     /*0: push   %rbp */
0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
0x41, 0x56,                               /*4: push   %r14 */
0x53,                                     /*6: push   %rbx */
0x48, 0x83, 0xe4, 0xf0,                   /*7: and    $0xfffffffffffffff0,%rsp */
0x48, 0x89, 0xfb,                         /*b: mov    %rdi,%rbx */
0xb8, 0x00, 0x00, 0xab, 0x00,             /*e: mov    $0xab0000,%eax */
0x48, 0x8b, 0x4b, 0x08,                   /*13: mov    0x8(%rbx),%rcx */
0x48, 0x8b, 0x53, 0x50,                   /*17: mov    0x50(%rbx),%rdx */
0x48, 0x8b, 0x52, 0x18,                   /*1b: mov    0x18(%rdx),%rdx */
0x4c, 0x8b, 0x72, 0x20,                   /*1f: mov    0x20(%rdx),%r14 */
0xba, 0x00, 0x04, 0xde, 0x00,             /*23: mov    $0xde0400,%edx */
0x48, 0x03, 0x51, 0x08,                   /*28: add    0x8(%rcx),%rdx */
0x48, 0x89, 0x53, 0x10,                   /*2c: mov    %rdx,0x10(%rbx) */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*30: mov    $0x20,%esi */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*35: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*3a: mov    $0xcd0000,%r8d */
0x48, 0x89, 0xdf,                         /*40: mov    %rbx,%rdi */
0x89, 0xc2,                               /*43: mov    %eax,%edx */
0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*45: callq  *0x1e0(%rbx) */
0x48, 0x8b, 0x43, 0x50,                   /*4b: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*4f: mov    0x18(%rax),%rax */
0x4c, 0x39, 0x70, 0x20,                   /*53: cmp    %r14,0x20(%rax) */
0x73, 0x0c,                               /*57: jae    65 <op_send+0x65> */
0x48, 0x89, 0xdf,                         /*59: mov    %rbx,%rdi */
0x48, 0x8d, 0x65, 0xf0,                   /*5c: lea    -0x10(%rbp),%rsp */
0x5b,                                     /*60: pop    %rbx */
0x41, 0x5e,                               /*61: pop    %r14 */
0x5d,                                     /*63: pop    %rbp */
0xc3,                                     /*64: retq */
0x48, 0x89, 0xdf,                         /*65: mov    %rbx,%rdi */
0x48, 0x8d, 0x65, 0xf0,                   /*68: lea    -0x10(%rbp),%rsp */
0x5b,                                     /*6c: pop    %rbx */
0x41, 0x5e,                               /*6d: pop    %r14 */
0x5d,                                     /*6f: pop    %rbp */

};

static void op_send_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 1 + 0;
  *((int32_t *)(op + 36)) = op_idx * 4 + 0;
  *((int32_t *)(op + 54)) = b * 1 + 0;
  *((int32_t *)(op + 60)) = c * 1 + 0;
}

static void op_send_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_send_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[1, 0, 17..20]], "b"=>[[1, 0, 27..30]], "c"=>[[1, 0, 33..36]]} */
static uint8_t op_sendb[] = {
0x55,                                     /*0: push   %rbp */
0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
0x53,                                     /*4: push   %rbx */
0x48, 0x83, 0xe4, 0xf0,                   /*5: and    $0xfffffffffffffff0,%rsp */
0x48, 0x83, 0xec, 0x10,                   /*9: sub    $0x10,%rsp */
0x48, 0x89, 0xfb,                         /*d: mov    %rdi,%rbx */
0xb8, 0x00, 0x00, 0xab, 0x00,             /*10: mov    $0xab0000,%eax */
0xbe, 0x21, 0x00, 0x00, 0x00,             /*15: mov    $0x21,%esi */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*1a: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*1f: mov    $0xcd0000,%r8d */
0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
0x89, 0xc2,                               /*28: mov    %eax,%edx */
0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*2a: callq  *0x1e0(%rbx) */
0x48, 0x89, 0xdf,                         /*30: mov    %rbx,%rdi */
0x48, 0x8d, 0x65, 0xf8,                   /*33: lea    -0x8(%rbp),%rsp */
0x5b,                                     /*37: pop    %rbx */
0x5d,                                     /*38: pop    %rbp */

};

static void op_sendb_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
  *((int32_t *)(op + 27)) = b * 1 + 0;
  *((int32_t *)(op + 33)) = c * 1 + 0;
}

static void op_sendb_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sendb_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_fsend[] = {

};

static void op_fsend_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_fsend_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_fsend_set_args(op, 0,0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 351..354]]} */
static uint8_t op_call[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x49, 0x89, 0xff,                         /*5: mov    %rdi,%r15 */
0x49, 0x8b, 0x47, 0x50,                   /*8: mov    0x50(%r15),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*c: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x08,                   /*10: mov    0x8(%rax),%rcx */
0x48, 0x8b, 0x40, 0x20,                   /*14: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x31,                         /*18: mov    (%rcx),%rsi */
0x48, 0x8d, 0x0c, 0xb5, 0x00, 0x00, 0x00, 0x00,/*1b: lea    0x0(,%rsi,4),%rcx */
0x48, 0xbb, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*23: movabs $0xfffffffffffc,%rbx */
0x48, 0x21, 0xcb,                         /*2d: and    %rcx,%rbx */
0x48, 0x8b, 0x4b, 0x20,                   /*30: mov    0x20(%rbx),%rcx */
0x48, 0x89, 0x48, 0x48,                   /*34: mov    %rcx,0x48(%rax) */
0x48, 0x89, 0x58, 0x08,                   /*38: mov    %rbx,0x8(%rax) */
0x48, 0x8b, 0x4b, 0x28,                   /*3c: mov    0x28(%rbx),%rcx */
0x48, 0x85, 0xc9,                         /*40: test   %rcx,%rcx */
0x74, 0x24,                               /*43: je     69 <op_call+0x69> */
0x8b, 0x51, 0x20,                         /*45: mov    0x20(%rcx),%edx */
0x85, 0xd2,                               /*48: test   %edx,%edx */
0x74, 0x06,                               /*4a: je     52 <op_call+0x52> */
0x89, 0x10,                               /*4c: mov    %edx,(%rax) */
0x48, 0x8b, 0x4b, 0x28,                   /*4e: mov    0x28(%rbx),%rcx */
0x48, 0x83, 0x79, 0x18, 0x00,             /*52: cmpq   $0x0,0x18(%rcx) */
0x75, 0x10,                               /*57: jne    69 <op_call+0x69> */
0x49, 0x8b, 0x57, 0x50,                   /*59: mov    0x50(%r15),%rdx */
0x48, 0x8b, 0x52, 0x18,                   /*5d: mov    0x18(%rdx),%rdx */
0x48, 0x8b, 0x52, 0x08,                   /*61: mov    0x8(%rdx),%rdx */
0x48, 0x89, 0x51, 0x18,                   /*65: mov    %rdx,0x18(%rcx) */
0xf6, 0x43, 0x02, 0x04,                   /*69: testb  $0x4,0x2(%rbx) */
0x74, 0x33,                               /*6d: je     a2 <op_call+0xa2> */
0x49, 0x8b, 0x7f, 0x50,                   /*6f: mov    0x50(%r15),%rdi */
0xff, 0x53, 0x18,                         /*73: callq  *0x18(%rbx) */
0x49, 0x89, 0xc6,                         /*76: mov    %rax,%r14 */
0x49, 0x8b, 0x7f, 0x50,                   /*79: mov    0x50(%r15),%rdi */
0x41, 0x8b, 0x77, 0x48,                   /*7d: mov    0x48(%r15),%esi */
0x41, 0xff, 0x97, 0x10, 0x01, 0x00, 0x00, /*81: callq  *0x110(%r15) */
0x49, 0x8b, 0x47, 0x50,                   /*88: mov    0x50(%r15),%rax */
0x48, 0x83, 0x78, 0x28, 0x00,             /*8c: cmpq   $0x0,0x28(%rax) */
0x74, 0x59,                               /*91: je     ec <op_call+0xec> */
0x4c, 0x89, 0xff,                         /*93: mov    %r15,%rdi */
0x41, 0xff, 0x97, 0xb0, 0x01, 0x00, 0x00, /*96: callq  *0x1b0(%r15) */
0xe9, 0x21, 0x01, 0x00, 0x00,             /*9d: jmpq   1c3 <op_call+0x1c3> */
0x49, 0x89, 0x1f,                         /*a2: mov    %rbx,(%r15) */
0x48, 0x8b, 0x4b, 0x18,                   /*a5: mov    0x18(%rbx),%rcx */
0x49, 0x89, 0x4f, 0x08,                   /*a9: mov    %rcx,0x8(%r15) */
0x48, 0x85, 0xc9,                         /*ad: test   %rcx,%rcx */
0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00,       /*b0: je     145 <op_call+0x145> */
0x48, 0x8b, 0x51, 0x10,                   /*b6: mov    0x10(%rcx),%rdx */
0x49, 0x89, 0x57, 0x20,                   /*ba: mov    %rdx,0x20(%r15) */
0x48, 0x8b, 0x51, 0x18,                   /*be: mov    0x18(%rcx),%rdx */
0x49, 0x89, 0x57, 0x28,                   /*c2: mov    %rdx,0x28(%r15) */
0x0f, 0xb7, 0x49, 0x02,                   /*c6: movzwl 0x2(%rcx),%ecx */
0x89, 0x48, 0x18,                         /*ca: mov    %ecx,0x18(%rax) */
0x8b, 0x50, 0x40,                         /*cd: mov    0x40(%rax),%edx */
0x49, 0x8b, 0x47, 0x08,                   /*d0: mov    0x8(%r15),%rax */
0x49, 0x8b, 0x7f, 0x50,                   /*d4: mov    0x50(%r15),%rdi */
0x0f, 0xb7, 0x70, 0x02,                   /*d8: movzwl 0x2(%rax),%esi */
0x85, 0xd2,                               /*dc: test   %edx,%edx */
0x0f, 0x88, 0x8d, 0x00, 0x00, 0x00,       /*de: js     171 <op_call+0x171> */
0x83, 0xc2, 0x02,                         /*e4: add    $0x2,%edx */
0xe9, 0x95, 0x00, 0x00, 0x00,             /*e7: jmpq   181 <op_call+0x181> */
0x48, 0x8b, 0x40, 0x18,                   /*ec: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x20,                   /*f0: mov    0x20(%rax),%rcx */
0x48, 0x8b, 0x51, 0x10,                   /*f4: mov    0x10(%rcx),%rdx */
0x48, 0x89, 0x50, 0x08,                   /*f8: mov    %rdx,0x8(%rax) */
0x49, 0x89, 0x57, 0x18,                   /*fc: mov    %rdx,0x18(%r15) */
0x48, 0x63, 0x41, 0x44,                   /*100: movslq 0x44(%rcx),%rax */
0x4c, 0x89, 0x34, 0xc2,                   /*104: mov    %r14,(%rdx,%rax,8) */
0x48, 0x8b, 0x41, 0x30,                   /*108: mov    0x30(%rcx),%rax */
0x49, 0x89, 0x47, 0x10,                   /*10c: mov    %rax,0x10(%r15) */
0x49, 0x8b, 0x7f, 0x50,                   /*110: mov    0x50(%r15),%rdi */
0x41, 0xff, 0x97, 0x68, 0x01, 0x00, 0x00, /*114: callq  *0x168(%r15) */
0x49, 0x8b, 0x47, 0x50,                   /*11b: mov    0x50(%r15),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*11f: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*123: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*127: mov    0x8(%rax),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*12b: mov    0x18(%rax),%rax */
0x49, 0x89, 0x47, 0x08,                   /*12f: mov    %rax,0x8(%r15) */
0x48, 0x8b, 0x48, 0x10,                   /*133: mov    0x10(%rax),%rcx */
0x49, 0x89, 0x4f, 0x20,                   /*137: mov    %rcx,0x20(%r15) */
0x48, 0x8b, 0x40, 0x18,                   /*13b: mov    0x18(%rax),%rax */
0x49, 0x89, 0x47, 0x28,                   /*13f: mov    %rax,0x28(%r15) */
0xeb, 0x7e,                               /*143: jmp    1c3 <op_call+0x1c3> */
0x49, 0x8b, 0x47, 0x50,                   /*145: mov    0x50(%r15),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*149: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*14d: mov    0x8(%rax),%rax */
0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0xff,/*151: movabs $0xfff0400000000000,%rcx */
0x48, 0x89, 0x08,                         /*15b: mov    %rcx,(%rax) */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*15e: mov    $0xab0000,%esi */
0x31, 0xd2,                               /*163: xor    %edx,%edx */
0x4c, 0x89, 0xff,                         /*165: mov    %r15,%rdi */
0x41, 0xff, 0x97, 0x90, 0x00, 0x00, 0x00, /*168: callq  *0x90(%r15) */
0xeb, 0x52,                               /*16f: jmp    1c3 <op_call+0x1c3> */
0x83, 0xfe, 0x03,                         /*171: cmp    $0x3,%esi */
0xb8, 0x03, 0x00, 0x00, 0x00,             /*174: mov    $0x3,%eax */
0x0f, 0x42, 0xf0,                         /*179: cmovb  %eax,%esi */
0xba, 0x03, 0x00, 0x00, 0x00,             /*17c: mov    $0x3,%edx */
0x41, 0xff, 0x97, 0x48, 0x01, 0x00, 0x00, /*181: callq  *0x148(%r15) */
0x49, 0x8b, 0x47, 0x50,                   /*188: mov    0x50(%r15),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*18c: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*190: mov    0x8(%rax),%rax */
0x49, 0x89, 0x47, 0x18,                   /*194: mov    %rax,0x18(%r15) */
0x48, 0x8b, 0x4b, 0x28,                   /*198: mov    0x28(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*19c: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x09,                         /*1a0: mov    (%rcx),%rcx */
0x48, 0x89, 0x08,                         /*1a3: mov    %rcx,(%rax) */
0x49, 0x8b, 0x47, 0x08,                   /*1a6: mov    0x8(%r15),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*1aa: mov    0x8(%rax),%rax */
0x49, 0x89, 0x47, 0x10,                   /*1ae: mov    %rax,0x10(%r15) */
0x49, 0x8b, 0x37,                         /*1b2: mov    (%r15),%rsi */
0x49, 0x8b, 0x7f, 0x50,                   /*1b5: mov    0x50(%r15),%rdi */
0x4c, 0x89, 0xfa,                         /*1b9: mov    %r15,%rdx */
0x41, 0xff, 0x97, 0x20, 0x01, 0x00, 0x00, /*1bc: callq  *0x120(%r15) */
0x4c, 0x89, 0xff,                         /*1c3: mov    %r15,%rdi */
0x5b,                                     /*1c6: pop    %rbx */
0x41, 0x5e,                               /*1c7: pop    %r14 */
0x41, 0x5f,                               /*1c9: pop    %r15 */

};

static void op_call_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 351)) = a * 1 + 0;
}

static void op_call_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_call_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"c"=>[[1, 0, 233..236], [1, 1, 356..359]], "a"=>[[1, 1, 321..324], [8, 12, 333..336], [8, 8, 351..354], [8, 0, 428..431], [1, 0, 524..527]]} */
static uint8_t op_super[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x89, 0xfb,                         /*a: mov    %rdi,%rbx */
0x48, 0x8b, 0x6b, 0x50,                   /*d: mov    0x50(%rbx),%rbp */
0x48, 0x8b, 0x45, 0x18,                   /*11: mov    0x18(%rbp),%rax */
0x4c, 0x8b, 0x68, 0x20,                   /*15: mov    0x20(%rax),%r13 */
0x45, 0x8b, 0x65, 0x00,                   /*19: mov    0x0(%r13),%r12d */
0x45, 0x85, 0xe4,                         /*1d: test   %r12d,%r12d */
0x74, 0x61,                               /*20: je     83 <op_super+0x83> */
0x48, 0x8b, 0x43, 0x18,                   /*22: mov    0x18(%rbx),%rax */
0x4c, 0x8b, 0x30,                         /*26: mov    (%rax),%r14 */
0x49, 0x8b, 0x45, 0x48,                   /*29: mov    0x48(%r13),%rax */
0x48, 0x8b, 0x48, 0x28,                   /*2d: mov    0x28(%rax),%rcx */
0x48, 0x89, 0x0c, 0x24,                   /*31: mov    %rcx,(%rsp) */
0x48, 0x8b, 0x03,                         /*35: mov    (%rbx),%rax */
0x48, 0x39, 0x48, 0x38,                   /*38: cmp    %rcx,0x38(%rax) */
0x75, 0x08,                               /*3c: jne    46 <op_super+0x46> */
0x31, 0xd2,                               /*3e: xor    %edx,%edx */
0x44, 0x39, 0x60, 0x30,                   /*40: cmp    %r12d,0x30(%rax) */
0x74, 0x33,                               /*44: je     79 <op_super+0x79> */
0x48, 0x39, 0x48, 0x48,                   /*46: cmp    %rcx,0x48(%rax) */
0x75, 0x0b,                               /*4a: jne    57 <op_super+0x57> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*4c: mov    $0x1,%edx */
0x44, 0x39, 0x60, 0x40,                   /*51: cmp    %r12d,0x40(%rax) */
0x74, 0x22,                               /*55: je     79 <op_super+0x79> */
0x48, 0x39, 0x48, 0x58,                   /*57: cmp    %rcx,0x58(%rax) */
0x75, 0x0b,                               /*5b: jne    68 <op_super+0x68> */
0xba, 0x02, 0x00, 0x00, 0x00,             /*5d: mov    $0x2,%edx */
0x44, 0x39, 0x60, 0x50,                   /*62: cmp    %r12d,0x50(%rax) */
0x74, 0x11,                               /*66: je     79 <op_super+0x79> */
0x48, 0x39, 0x48, 0x68,                   /*68: cmp    %rcx,0x68(%rax) */
0x75, 0x67,                               /*6c: jne    d5 <op_super+0xd5> */
0xba, 0x03, 0x00, 0x00, 0x00,             /*6e: mov    $0x3,%edx */
0x44, 0x39, 0x60, 0x60,                   /*73: cmp    %r12d,0x60(%rax) */
0x75, 0x5c,                               /*77: jne    d5 <op_super+0xd5> */
0x4c, 0x8b, 0xbc, 0xd0, 0x90, 0x00, 0x00, 0x00,/*79: mov    0x90(%rax,%rdx,8),%r15 */
0xeb, 0x65,                               /*81: jmp    e8 <op_super+0xe8> */
0x48, 0x8b, 0x43, 0x70,                   /*83: mov    0x70(%rbx),%rax */
0x48, 0x8b, 0x30,                         /*87: mov    (%rax),%rsi */
0x48, 0x89, 0xef,                         /*8a: mov    %rbp,%rdi */
0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*8d: callq  *0x118(%rbx) */
0x49, 0x89, 0xc6,                         /*93: mov    %rax,%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*96: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb3, 0x78, 0x02, 0x00, 0x00, /*9a: mov    0x278(%rbx),%rsi */
0xba, 0x1e, 0x00, 0x00, 0x00,             /*a1: mov    $0x1e,%edx */
0xff, 0x93, 0x80, 0x00, 0x00, 0x00,       /*a6: callq  *0x80(%rbx) */
0x48, 0x89, 0xef,                         /*ac: mov    %rbp,%rdi */
0x4c, 0x89, 0xf6,                         /*af: mov    %r14,%rsi */
0x48, 0x89, 0xc2,                         /*b2: mov    %rax,%rdx */
0xff, 0x93, 0xc8, 0x01, 0x00, 0x00,       /*b5: callq  *0x1c8(%rbx) */
0x48, 0xc1, 0xe0, 0x02,                   /*bb: shl    $0x2,%rax */
0x48, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*bf: movabs $0xfffffffffffc,%rcx */
0x48, 0x21, 0xc1,                         /*c9: and    %rax,%rcx */
0x48, 0x89, 0x4d, 0x28,                   /*cc: mov    %rcx,0x28(%rbp) */
0xe9, 0x26, 0x01, 0x00, 0x00,             /*d0: jmpq   1fb <op_super+0x1fb> */
0x48, 0x8d, 0x34, 0x24,                   /*d5: lea    (%rsp),%rsi */
0x48, 0x89, 0xef,                         /*d9: mov    %rbp,%rdi */
0x44, 0x89, 0xe2,                         /*dc: mov    %r12d,%edx */
0xff, 0x93, 0xb0, 0x00, 0x00, 0x00,       /*df: callq  *0xb0(%rbx) */
0x49, 0x89, 0xc7,                         /*e5: mov    %rax,%r15 */
0xbd, 0x00, 0x00, 0xcd, 0x00,             /*e8: mov    $0xcd0000,%ebp */
0x4d, 0x85, 0xff,                         /*ed: test   %r15,%r15 */
0x75, 0x76,                               /*f0: jne    168 <op_super+0x168> */
0x48, 0x8b, 0x7b, 0x50,                   /*f2: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb3, 0x80, 0x02, 0x00, 0x00, /*f6: mov    0x280(%rbx),%rsi */
0xba, 0x0e, 0x00, 0x00, 0x00,             /*fd: mov    $0xe,%edx */
0xff, 0x93, 0x68, 0x02, 0x00, 0x00,       /*102: callq  *0x268(%rbx) */
0x41, 0x89, 0xc4,                         /*108: mov    %eax,%r12d */
0x48, 0x8b, 0x7b, 0x50,                   /*10b: mov    0x50(%rbx),%rdi */
0x48, 0x8d, 0x34, 0x24,                   /*10f: lea    (%rsp),%rsi */
0x44, 0x89, 0xe2,                         /*113: mov    %r12d,%edx */
0xff, 0x93, 0xd0, 0x00, 0x00, 0x00,       /*116: callq  *0xd0(%rbx) */
0x49, 0x89, 0xc7,                         /*11c: mov    %rax,%r15 */
0x48, 0x8b, 0x43, 0x18,                   /*11f: mov    0x18(%rbx),%rax */
0xb9, 0x02, 0x00, 0x78, 0x01,             /*123: mov    $0x1780002,%ecx */
0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*128: nopl   0x0(%rax,%rax,1) */
0xf2, 0x0f, 0x10, 0x44, 0xc8, 0xf8,       /*130: movsd  -0x8(%rax,%rcx,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xc8,             /*136: movsd  %xmm0,(%rax,%rcx,8) */
0x48, 0xff, 0xc9,                         /*13b: dec    %rcx */
0x48, 0x81, 0xf9, 0x01, 0x00, 0xab, 0x00, /*13e: cmp    $0xab0001,%rcx */
0x75, 0xe9,                               /*145: jne    130 <op_super+0x130> */
0x48, 0x8b, 0x43, 0x18,                   /*147: mov    0x18(%rbx),%rax */
0xc7, 0x80, 0x0c, 0x08, 0xab, 0x00, 0x00, 0x40, 0xf1, 0xff,/*14b: movl   $0xfff14000,0xab080c(%rax) */
0x41, 0x8b, 0x45, 0x00,                   /*155: mov    0x0(%r13),%eax */
0x48, 0x8b, 0x4b, 0x18,                   /*159: mov    0x18(%rbx),%rcx */
0x89, 0x81, 0x08, 0x08, 0xab, 0x00,       /*15d: mov    %eax,0xab0808(%rcx) */
0xbd, 0x01, 0x00, 0xcd, 0x00,             /*163: mov    $0xcd0001,%ebp */
0x48, 0x8b, 0x7b, 0x50,                   /*168: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0xe8, 0x00, 0x00, 0x00,       /*16c: callq  *0xe8(%rbx) */
0x44, 0x89, 0x20,                         /*172: mov    %r12d,(%rax) */
0x4c, 0x89, 0x78, 0x08,                   /*175: mov    %r15,0x8(%rax) */
0x48, 0x8b, 0x4b, 0x50,                   /*179: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*17d: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*181: mov    0x8(%rcx),%rcx */
0x48, 0x89, 0x48, 0x10,                   /*185: mov    %rcx,0x10(%rax) */
0x89, 0x68, 0x40,                         /*189: mov    %ebp,0x40(%rax) */
0x48, 0x8b, 0x0c, 0x24,                   /*18c: mov    (%rsp),%rcx */
0x48, 0x89, 0x48, 0x48,                   /*190: mov    %rcx,0x48(%rax) */
0x48, 0x8b, 0x4b, 0x10,                   /*194: mov    0x10(%rbx),%rcx */
0x48, 0x83, 0xc1, 0x04,                   /*198: add    $0x4,%rcx */
0x48, 0x89, 0x48, 0x30,                   /*19c: mov    %rcx,0x30(%rax) */
0x48, 0x8b, 0x4b, 0x50,                   /*1a0: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*1a4: mov    0x18(%rcx),%rcx */
0x48, 0x81, 0x41, 0x08, 0x00, 0x08, 0xab, 0x00,/*1a8: addq   $0xab0800,0x8(%rcx) */
0x48, 0x8b, 0x4b, 0x50,                   /*1b0: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*1b4: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*1b8: mov    0x8(%rcx),%rcx */
0x4c, 0x89, 0x31,                         /*1bc: mov    %r14,(%rcx) */
0x41, 0xf6, 0x47, 0x02, 0x04,             /*1bf: testb  $0x4,0x2(%r15) */
0x74, 0x43,                               /*1c4: je     209 <op_super+0x209> */
0x83, 0xcd, 0x02,                         /*1c6: or     $0x2,%ebp */
0x89, 0x68, 0x18,                         /*1c9: mov    %ebp,0x18(%rax) */
0x48, 0x8b, 0x7b, 0x50,                   /*1cc: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*1d0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x68, 0x08,                   /*1d4: mov    0x8(%rax),%rbp */
0x4c, 0x89, 0xf6,                         /*1d8: mov    %r14,%rsi */
0x41, 0xff, 0x57, 0x18,                   /*1db: callq  *0x18(%r15) */
0x48, 0x89, 0x45, 0x00,                   /*1df: mov    %rax,0x0(%rbp) */
0x48, 0x8b, 0x7b, 0x50,                   /*1e3: mov    0x50(%rbx),%rdi */
0x8b, 0x73, 0x48,                         /*1e7: mov    0x48(%rbx),%esi */
0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*1ea: callq  *0x110(%rbx) */
0x48, 0x8b, 0x43, 0x50,                   /*1f0: mov    0x50(%rbx),%rax */
0x48, 0x83, 0x78, 0x28, 0x00,             /*1f4: cmpq   $0x0,0x28(%rax) */
0x74, 0x7a,                               /*1f9: je     275 <op_super+0x275> */
0x48, 0x89, 0xdf,                         /*1fb: mov    %rbx,%rdi */
0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*1fe: callq  *0x1b0(%rbx) */
0xe9, 0x8a, 0x00, 0x00, 0x00,             /*204: jmpq   293 <op_super+0x293> */
0xc7, 0x40, 0x44, 0x00, 0x00, 0xab, 0x00, /*209: movl   $0xab0000,0x44(%rax) */
0x4c, 0x89, 0x78, 0x08,                   /*210: mov    %r15,0x8(%rax) */
0x49, 0x8b, 0x4f, 0x18,                   /*214: mov    0x18(%r15),%rcx */
0x48, 0x89, 0x4b, 0x08,                   /*218: mov    %rcx,0x8(%rbx) */
0x48, 0x8b, 0x51, 0x10,                   /*21c: mov    0x10(%rcx),%rdx */
0x48, 0x89, 0x53, 0x20,                   /*220: mov    %rdx,0x20(%rbx) */
0x48, 0x8b, 0x51, 0x18,                   /*224: mov    0x18(%rcx),%rdx */
0x48, 0x89, 0x53, 0x28,                   /*228: mov    %rdx,0x28(%rbx) */
0x0f, 0xb7, 0x49, 0x02,                   /*22c: movzwl 0x2(%rcx),%ecx */
0x89, 0x48, 0x18,                         /*230: mov    %ecx,0x18(%rax) */
0x48, 0x8b, 0x4b, 0x08,                   /*233: mov    0x8(%rbx),%rcx */
0x48, 0x8b, 0x7b, 0x50,                   /*237: mov    0x50(%rbx),%rdi */
0x0f, 0xb7, 0x71, 0x02,                   /*23b: movzwl 0x2(%rcx),%esi */
0x8b, 0x50, 0x40,                         /*23f: mov    0x40(%rax),%edx */
0x83, 0xc2, 0x02,                         /*242: add    $0x2,%edx */
0xff, 0x93, 0x48, 0x01, 0x00, 0x00,       /*245: callq  *0x148(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*24b: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*24f: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*253: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x18,                   /*257: mov    %rax,0x18(%rbx) */
0x48, 0x8b, 0x43, 0x08,                   /*25b: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*25f: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x10,                   /*263: mov    %rax,0x10(%rbx) */
0x4c, 0x89, 0xfe,                         /*267: mov    %r15,%rsi */
0x48, 0x89, 0xda,                         /*26a: mov    %rbx,%rdx */
0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*26d: callq  *0x120(%rbx) */
0xeb, 0x1e,                               /*273: jmp    293 <op_super+0x293> */
0x48, 0x8b, 0x40, 0x18,                   /*275: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x20,                   /*279: mov    0x20(%rax),%rcx */
0x48, 0x8b, 0x49, 0x10,                   /*27d: mov    0x10(%rcx),%rcx */
0x48, 0x89, 0x48, 0x08,                   /*281: mov    %rcx,0x8(%rax) */
0x48, 0x89, 0x4b, 0x18,                   /*285: mov    %rcx,0x18(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*289: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*28d: callq  *0x168(%rbx) */
0x48, 0x89, 0xdf,                         /*293: mov    %rbx,%rdi */
0x5b,                                     /*296: pop    %rbx */
0x41, 0x5c,                               /*297: pop    %r12 */
0x41, 0x5d,                               /*299: pop    %r13 */
0x41, 0x5e,                               /*29b: pop    %r14 */
0x41, 0x5f,                               /*29d: pop    %r15 */
0x5d,                                     /*29f: pop    %rbp */

};

static void op_super_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 233)) = c * 1 + 0;
  *((int32_t *)(op + 356)) = c * 1 + 1;
  *((int32_t *)(op + 321)) = a * 1 + 1;
  *((int32_t *)(op + 333)) = a * 8 + 12;
  *((int32_t *)(op + 351)) = a * 8 + 8;
  *((int32_t *)(op + 428)) = a * 8 + 0;
  *((int32_t *)(op + 524)) = a * 1 + 0;
}

static void op_super_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_super_set_args(op, GETARG_A(c),0,GETARG_C(c),op_idx);
}


/* args: {"b"=>[[1, 0, 21..24]], "a"=>[[8, 0, 389..392], [8, 0, 466..469], [8, 0, 478..481], [8, 8, 715..718]]} */
static uint8_t op_argary[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x83, 0xec, 0x48,                   /*a: sub    $0x48,%rsp */
0x49, 0x89, 0xfc,                         /*e: mov    %rdi,%r12 */
0xc7, 0x44, 0x24, 0x44, 0x00, 0x00, 0xbc, 0x00,/*11: movl   $0xbc0000,0x44(%rsp) */
0x44, 0x8b, 0x6c, 0x24, 0x44,             /*19: mov    0x44(%rsp),%r13d */
0x44, 0x8b, 0x7c, 0x24, 0x44,             /*1e: mov    0x44(%rsp),%r15d */
0x8b, 0x5c, 0x24, 0x44,                   /*23: mov    0x44(%rsp),%ebx */
0x8b, 0x74, 0x24, 0x44,                   /*27: mov    0x44(%rsp),%esi */
0x83, 0xe6, 0x0f,                         /*2b: and    $0xf,%esi */
0x0f, 0x84, 0xa9, 0x00, 0x00, 0x00,       /*2e: je     dd <op_argary+0xdd> */
0x49, 0x8b, 0x6c, 0x24, 0x50,             /*34: mov    0x50(%r12),%rbp */
0x48, 0x8b, 0x45, 0x18,                   /*39: mov    0x18(%rbp),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*3d: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*41: mov    0x8(%rax),%rax */
0x48, 0x8b, 0x40, 0x28,                   /*45: mov    0x28(%rax),%rax */
0x48, 0x85, 0xc0,                         /*49: test   %rax,%rax */
0x0f, 0x94, 0xc1,                         /*4c: sete   %cl */
0x83, 0xfe, 0x01,                         /*4f: cmp    $0x1,%esi */
0x74, 0x1f,                               /*52: je     73 <op_argary+0x73> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*54: mov    $0x1,%edx */
0x29, 0xf2,                               /*59: sub    %esi,%edx */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*5b: nopl   0x0(%rax,%rax,1) */
0xf6, 0xc1, 0x01,                         /*60: test   $0x1,%cl */
0x75, 0x12,                               /*63: jne    77 <op_argary+0x77> */
0x48, 0x8b, 0x40, 0x08,                   /*65: mov    0x8(%rax),%rax */
0x48, 0x85, 0xc0,                         /*69: test   %rax,%rax */
0x0f, 0x94, 0xc1,                         /*6c: sete   %cl */
0xff, 0xc2,                               /*6f: inc    %edx */
0x75, 0xed,                               /*71: jne    60 <op_argary+0x60> */
0x84, 0xc9,                               /*73: test   %cl,%cl */
0x74, 0x6d,                               /*75: je     e4 <op_argary+0xe4> */
0x49, 0x8b, 0x44, 0x24, 0x70,             /*77: mov    0x70(%r12),%rax */
0x48, 0x8b, 0x30,                         /*7c: mov    (%rax),%rsi */
0x48, 0x89, 0xef,                         /*7f: mov    %rbp,%rdi */
0x41, 0xff, 0x94, 0x24, 0x18, 0x01, 0x00, 0x00,/*82: callq  *0x118(%r12) */
0x49, 0x89, 0xc6,                         /*8a: mov    %rax,%r14 */
0x49, 0x8b, 0x7c, 0x24, 0x50,             /*8d: mov    0x50(%r12),%rdi */
0x49, 0x8b, 0xb4, 0x24, 0x78, 0x02, 0x00, 0x00,/*92: mov    0x278(%r12),%rsi */
0xba, 0x1e, 0x00, 0x00, 0x00,             /*9a: mov    $0x1e,%edx */
0x41, 0xff, 0x94, 0x24, 0x80, 0x00, 0x00, 0x00,/*9f: callq  *0x80(%r12) */
0x48, 0x89, 0xef,                         /*a7: mov    %rbp,%rdi */
0x4c, 0x89, 0xf6,                         /*aa: mov    %r14,%rsi */
0x48, 0x89, 0xc2,                         /*ad: mov    %rax,%rdx */
0x41, 0xff, 0x94, 0x24, 0xc8, 0x01, 0x00, 0x00,/*b0: callq  *0x1c8(%r12) */
0x48, 0xc1, 0xe0, 0x02,                   /*b8: shl    $0x2,%rax */
0x48, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*bc: movabs $0xfffffffffffc,%rcx */
0x48, 0x21, 0xc8,                         /*c6: and    %rcx,%rax */
0x48, 0x89, 0x45, 0x28,                   /*c9: mov    %rax,0x28(%rbp) */
0x4c, 0x89, 0xe7,                         /*cd: mov    %r12,%rdi */
0x41, 0xff, 0x94, 0x24, 0xb0, 0x01, 0x00, 0x00,/*d0: callq  *0x1b0(%r12) */
0xe9, 0x02, 0x02, 0x00, 0x00,             /*d8: jmpq   2df <op_argary+0x2df> */
0x49, 0x8d, 0x44, 0x24, 0x18,             /*dd: lea    0x18(%r12),%rax */
0xeb, 0x04,                               /*e2: jmp    e8 <op_argary+0xe8> */
0x48, 0x83, 0xc0, 0x18,                   /*e4: add    $0x18,%rax */
0x41, 0xc1, 0xed, 0x0a,                   /*e8: shr    $0xa,%r13d */
0x45, 0x89, 0xee,                         /*ec: mov    %r13d,%r14d */
0x41, 0x83, 0xe6, 0x3f,                   /*ef: and    $0x3f,%r14d */
0x41, 0xc1, 0xef, 0x09,                   /*f3: shr    $0x9,%r15d */
0x41, 0x83, 0xe7, 0x01,                   /*f7: and    $0x1,%r15d */
0xc1, 0xeb, 0x04,                         /*fb: shr    $0x4,%ebx */
0x89, 0xda,                               /*fe: mov    %ebx,%edx */
0x83, 0xe2, 0x1f,                         /*100: and    $0x1f,%edx */
0x48, 0x8b, 0x08,                         /*103: mov    (%rax),%rcx */
0x48, 0x8d, 0x69, 0x08,                   /*106: lea    0x8(%rcx),%rbp */
0x45, 0x85, 0xff,                         /*10a: test   %r15d,%r15d */
0x74, 0x46,                               /*10d: je     155 <op_argary+0x155> */
0x44, 0x89, 0x7c, 0x24, 0x38,             /*10f: mov    %r15d,0x38(%rsp) */
0x44, 0x89, 0xf7,                         /*114: mov    %r14d,%edi */
0x8b, 0x44, 0xf9, 0x0c,                   /*117: mov    0xc(%rcx,%rdi,8),%eax */
0x45, 0x31, 0xff,                         /*11b: xor    %r15d,%r15d */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*11e: cmp    $0xfff00001,%eax */
0x72, 0x69,                               /*123: jb     18e <op_argary+0x18e> */
0x25, 0x00, 0xc0, 0x0f, 0x00,             /*125: and    $0xfc000,%eax */
0x3d, 0x00, 0xc0, 0x03, 0x00,             /*12a: cmp    $0x3c000,%eax */
0xb8, 0x00, 0x00, 0x00, 0x00,             /*12f: mov    $0x0,%eax */
0x75, 0x5a,                               /*134: jne    190 <op_argary+0x190> */
0x48, 0x8b, 0x44, 0xf9, 0x08,             /*136: mov    0x8(%rcx,%rdi,8),%rax */
0x48, 0xc1, 0xe0, 0x02,                   /*13b: shl    $0x2,%rax */
0x48, 0xbe, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*13f: movabs $0xfffffffffffc,%rsi */
0x48, 0x21, 0xf0,                         /*149: and    %rsi,%rax */
0x4c, 0x8b, 0x78, 0x28,                   /*14c: mov    0x28(%rax),%r15 */
0x8b, 0x40, 0x18,                         /*150: mov    0x18(%rax),%eax */
0xeb, 0x3b,                               /*153: jmp    190 <op_argary+0x190> */
0x49, 0x8b, 0x44, 0x24, 0x18,             /*155: mov    0x18(%r12),%rax */
0x48, 0x89, 0x44, 0x24, 0x38,             /*15a: mov    %rax,0x38(%rsp) */
0x48, 0x89, 0xcb,                         /*15f: mov    %rcx,%rbx */
0x49, 0x8b, 0x7c, 0x24, 0x50,             /*162: mov    0x50(%r12),%rdi */
0x49, 0x89, 0xd5,                         /*167: mov    %rdx,%r13 */
0x43, 0x8d, 0x74, 0x35, 0x00,             /*16a: lea    0x0(%r13,%r14,1),%esi */
0x48, 0x89, 0xea,                         /*16f: mov    %rbp,%rdx */
0x41, 0xff, 0x94, 0x24, 0x28, 0x02, 0x00, 0x00,/*172: callq  *0x228(%r12) */
0x49, 0x89, 0xd8,                         /*17a: mov    %rbx,%r8 */
0x48, 0x8b, 0x4c, 0x24, 0x38,             /*17d: mov    0x38(%rsp),%rcx */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*182: mov    %rax,0xab0800(%rcx) */
0xe9, 0x23, 0x01, 0x00, 0x00,             /*189: jmpq   2b1 <op_argary+0x2b1> */
0x31, 0xc0,                               /*18e: xor    %eax,%eax */
0x48, 0x89, 0x44, 0x24, 0x10,             /*190: mov    %rax,0x10(%rsp) */
0x48, 0x89, 0x7c, 0x24, 0x20,             /*195: mov    %rdi,0x20(%rsp) */
0x49, 0x8b, 0x74, 0x24, 0x18,             /*19a: mov    0x18(%r12),%rsi */
0x48, 0x89, 0x74, 0x24, 0x08,             /*19f: mov    %rsi,0x8(%rsp) */
0x48, 0x89, 0x4c, 0x24, 0x30,             /*1a4: mov    %rcx,0x30(%rsp) */
0x49, 0x8b, 0x7c, 0x24, 0x50,             /*1a9: mov    0x50(%r12),%rdi */
0x42, 0x8d, 0x34, 0x32,                   /*1ae: lea    (%rdx,%r14,1),%esi */
0x48, 0x89, 0x54, 0x24, 0x28,             /*1b2: mov    %rdx,0x28(%rsp) */
0x01, 0xc6,                               /*1b7: add    %eax,%esi */
0x89, 0x74, 0x24, 0x1c,                   /*1b9: mov    %esi,0x1c(%rsp) */
0x41, 0xff, 0x94, 0x24, 0xd8, 0x00, 0x00, 0x00,/*1bd: callq  *0xd8(%r12) */
0x4c, 0x8b, 0x44, 0x24, 0x30,             /*1c5: mov    0x30(%rsp),%r8 */
0x48, 0x8b, 0x4c, 0x24, 0x08,             /*1ca: mov    0x8(%rsp),%rcx */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*1cf: mov    %rax,0xab0800(%rcx) */
0x49, 0x8b, 0x44, 0x24, 0x18,             /*1d6: mov    0x18(%r12),%rax */
0x48, 0x8b, 0x80, 0x00, 0x08, 0xab, 0x00, /*1db: mov    0xab0800(%rax),%rax */
0x48, 0xc1, 0xe0, 0x02,                   /*1e2: shl    $0x2,%rax */
0x48, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*1e6: movabs $0xfffffffffffc,%rcx */
0x48, 0x21, 0xc8,                         /*1f0: and    %rcx,%rax */
0x45, 0x85, 0xf6,                         /*1f3: test   %r14d,%r14d */
0x74, 0x36,                               /*1f6: je     22e <op_argary+0x22e> */
0x48, 0x8b, 0x48, 0x28,                   /*1f8: mov    0x28(%rax),%rcx */
0x49, 0x83, 0xe5, 0x3f,                   /*1fc: and    $0x3f,%r13 */
0x49, 0xf7, 0xdd,                         /*200: neg    %r13 */
0x4c, 0x89, 0xc2,                         /*203: mov    %r8,%rdx */
0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*206: nopw   %cs:0x0(%rax,%rax,1) */
0x48, 0x89, 0xee,                         /*210: mov    %rbp,%rsi */
0x48, 0x83, 0xc2, 0x10,                   /*213: add    $0x10,%rdx */
0xf2, 0x0f, 0x10, 0x06,                   /*217: movsd  (%rsi),%xmm0 */
0xf2, 0x0f, 0x11, 0x01,                   /*21b: movsd  %xmm0,(%rcx) */
0x48, 0x83, 0xc1, 0x08,                   /*21f: add    $0x8,%rcx */
0x49, 0xff, 0xc5,                         /*223: inc    %r13 */
0x48, 0x89, 0xd5,                         /*226: mov    %rdx,%rbp */
0x48, 0x89, 0xf2,                         /*229: mov    %rsi,%rdx */
0x75, 0xe2,                               /*22c: jne    210 <op_argary+0x210> */
0x48, 0x8b, 0x7c, 0x24, 0x10,             /*22e: mov    0x10(%rsp),%rdi */
0x85, 0xff,                               /*233: test   %edi,%edi */
0x48, 0x8b, 0x6c, 0x24, 0x20,             /*235: mov    0x20(%rsp),%rbp */
0x7e, 0x2a,                               /*23a: jle    266 <op_argary+0x266> */
0x48, 0x8d, 0x0c, 0xed, 0x00, 0x00, 0x00, 0x00,/*23c: lea    0x0(,%rbp,8),%rcx */
0x48, 0x03, 0x48, 0x28,                   /*244: add    0x28(%rax),%rcx */
0x48, 0x63, 0xd7,                         /*248: movslq %edi,%rdx */
0x48, 0xf7, 0xda,                         /*24b: neg    %rdx */
0x66, 0x90,                               /*24e: xchg   %ax,%ax */
0xf2, 0x41, 0x0f, 0x10, 0x07,             /*250: movsd  (%r15),%xmm0 */
0x49, 0x83, 0xc7, 0x08,                   /*255: add    $0x8,%r15 */
0xf2, 0x0f, 0x11, 0x01,                   /*259: movsd  %xmm0,(%rcx) */
0x48, 0x83, 0xc1, 0x08,                   /*25d: add    $0x8,%rcx */
0x48, 0xff, 0xc2,                         /*261: inc    %rdx */
0x75, 0xea,                               /*264: jne    250 <op_argary+0x250> */
0x4c, 0x8b, 0x6c, 0x24, 0x28,             /*266: mov    0x28(%rsp),%r13 */
0x45, 0x85, 0xed,                         /*26b: test   %r13d,%r13d */
0x74, 0x35,                               /*26e: je     2a5 <op_argary+0x2a5> */
0x49, 0x8d, 0x4c, 0xe8, 0x10,             /*270: lea    0x10(%r8,%rbp,8),%rcx */
0x48, 0x63, 0xd7,                         /*275: movslq %edi,%rdx */
0x48, 0x01, 0xea,                         /*278: add    %rbp,%rdx */
0x48, 0xc1, 0xe2, 0x03,                   /*27b: shl    $0x3,%rdx */
0x48, 0x03, 0x50, 0x28,                   /*27f: add    0x28(%rax),%rdx */
0x48, 0x83, 0xe3, 0x1f,                   /*283: and    $0x1f,%rbx */
0x48, 0xf7, 0xdb,                         /*287: neg    %rbx */
0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,       /*28a: nopw   0x0(%rax,%rax,1) */
0xf2, 0x0f, 0x10, 0x01,                   /*290: movsd  (%rcx),%xmm0 */
0x48, 0x83, 0xc1, 0x08,                   /*294: add    $0x8,%rcx */
0xf2, 0x0f, 0x11, 0x02,                   /*298: movsd  %xmm0,(%rdx) */
0x48, 0x83, 0xc2, 0x08,                   /*29c: add    $0x8,%rdx */
0x48, 0xff, 0xc3,                         /*2a0: inc    %rbx */
0x75, 0xeb,                               /*2a3: jne    290 <op_argary+0x290> */
0x8b, 0x4c, 0x24, 0x1c,                   /*2a5: mov    0x1c(%rsp),%ecx */
0x89, 0x48, 0x18,                         /*2a9: mov    %ecx,0x18(%rax) */
0x44, 0x8b, 0x7c, 0x24, 0x38,             /*2ac: mov    0x38(%rsp),%r15d */
0x49, 0x8b, 0x44, 0x24, 0x18,             /*2b1: mov    0x18(%r12),%rax */
0x45, 0x01, 0xfe,                         /*2b6: add    %r15d,%r14d */
0x43, 0x8d, 0x4c, 0x35, 0x01,             /*2b9: lea    0x1(%r13,%r14,1),%ecx */
0x48, 0x63, 0xc9,                         /*2be: movslq %ecx,%rcx */
0xf2, 0x41, 0x0f, 0x10, 0x04, 0xc8,       /*2c1: movsd  (%r8,%rcx,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x80, 0x08, 0x08, 0xab, 0x00,/*2c7: movsd  %xmm0,0xab0808(%rax) */
0x41, 0x8b, 0x44, 0x24, 0x48,             /*2cf: mov    0x48(%r12),%eax */
0x49, 0x8b, 0x4c, 0x24, 0x50,             /*2d4: mov    0x50(%r12),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*2d9: mov    %eax,0xdc(%rcx) */
0x4c, 0x89, 0xe7,                         /*2df: mov    %r12,%rdi */
0x48, 0x83, 0xc4, 0x48,                   /*2e2: add    $0x48,%rsp */
0x5b,                                     /*2e6: pop    %rbx */
0x41, 0x5c,                               /*2e7: pop    %r12 */
0x41, 0x5d,                               /*2e9: pop    %r13 */
0x41, 0x5e,                               /*2eb: pop    %r14 */
0x41, 0x5f,                               /*2ed: pop    %r15 */
0x5d,                                     /*2ef: pop    %rbp */

};

static void op_argary_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 1 + 0;
  *((int32_t *)(op + 389)) = a * 8 + 0;
  *((int32_t *)(op + 466)) = a * 8 + 0;
  *((int32_t *)(op + 478)) = a * 8 + 0;
  *((int32_t *)(op + 715)) = a * 8 + 8;
}

static void op_argary_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_argary_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[1, 0, 23..26]]} */
static uint8_t op_enter[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x83, 0xec, 0x68,                   /*a: sub    $0x68,%rsp */
0x48, 0x89, 0xfb,                         /*e: mov    %rdi,%rbx */
0x48, 0x89, 0x5c, 0x24, 0x60,             /*11: mov    %rbx,0x60(%rsp) */
0xb8, 0x00, 0x00, 0xab, 0x00,             /*16: mov    $0xab0000,%eax */
0x41, 0x89, 0xc5,                         /*1b: mov    %eax,%r13d */
0x44, 0x89, 0xea,                         /*1e: mov    %r13d,%edx */
0xc1, 0xea, 0x12,                         /*21: shr    $0x12,%edx */
0x83, 0xe2, 0x1f,                         /*24: and    $0x1f,%edx */
0x48, 0x89, 0x54, 0x24, 0x58,             /*27: mov    %rdx,0x58(%rsp) */
0x44, 0x89, 0xe9,                         /*2c: mov    %r13d,%ecx */
0xc1, 0xe9, 0x0d,                         /*2f: shr    $0xd,%ecx */
0x83, 0xe1, 0x1f,                         /*32: and    $0x1f,%ecx */
0x48, 0x89, 0x4c, 0x24, 0x48,             /*35: mov    %rcx,0x48(%rsp) */
0x45, 0x89, 0xec,                         /*3a: mov    %r13d,%r12d */
0x41, 0xc1, 0xec, 0x0c,                   /*3d: shr    $0xc,%r12d */
0x41, 0x83, 0xe4, 0x01,                   /*41: and    $0x1,%r12d */
0x41, 0xc1, 0xed, 0x07,                   /*45: shr    $0x7,%r13d */
0x48, 0x8b, 0x6b, 0x18,                   /*49: mov    0x18(%rbx),%rbp */
0x48, 0x8b, 0x7b, 0x50,                   /*4d: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*51: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*55: mov    0x20(%rax),%rax */
0x4c, 0x63, 0x78, 0x40,                   /*59: movslq 0x40(%rax),%r15 */
0x44, 0x8d, 0x0c, 0x0a,                   /*5d: lea    (%rdx,%rcx,1),%r9d */
0x4d, 0x85, 0xff,                         /*61: test   %r15,%r15 */
0x49, 0x8d, 0x47, 0x01,                   /*64: lea    0x1(%r15),%rax */
0xb9, 0x02, 0x00, 0x00, 0x00,             /*68: mov    $0x2,%ecx */
0x48, 0x0f, 0x49, 0xc8,                   /*6d: cmovns %rax,%rcx */
0x48, 0x89, 0x4c, 0x24, 0x50,             /*71: mov    %rcx,0x50(%rsp) */
0x8b, 0x44, 0xcd, 0x04,                   /*76: mov    0x4(%rbp,%rcx,8),%eax */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*7a: cmp    $0xfff00001,%eax */
0x72, 0x1f,                               /*7f: jb     a0 <op_enter+0xa0> */
0x25, 0x00, 0xc0, 0x0f, 0x00,             /*81: and    $0xfc000,%eax */
0x3d, 0x00, 0x80, 0x03, 0x00,             /*86: cmp    $0x38000,%eax */
0x74, 0x46,                               /*8b: je     d3 <op_enter+0xd3> */
0x3d, 0x00, 0x40, 0x00, 0x00,             /*8d: cmp    $0x4000,%eax */
0x75, 0x0c,                               /*92: jne    a0 <op_enter+0xa0> */
0x48, 0x8b, 0x44, 0x24, 0x50,             /*94: mov    0x50(%rsp),%rax */
0x83, 0x7c, 0xc5, 0x00, 0x00,             /*99: cmpl   $0x0,0x0(%rbp,%rax,8) */
0x74, 0x33,                               /*9e: je     d3 <op_enter+0xd3> */
0x4c, 0x8b, 0x74, 0x24, 0x50,             /*a0: mov    0x50(%rsp),%r14 */
0x4a, 0x8b, 0x74, 0xf5, 0x00,             /*a5: mov    0x0(%rbp,%r14,8),%rsi */
0x48, 0x8b, 0x44, 0x24, 0x60,             /*aa: mov    0x60(%rsp),%rax */
0x48, 0x8b, 0x88, 0x88, 0x02, 0x00, 0x00, /*af: mov    0x288(%rax),%rcx */
0x4c, 0x8b, 0x80, 0x90, 0x02, 0x00, 0x00, /*b6: mov    0x290(%rax),%r8 */
0xba, 0x0d, 0x00, 0x00, 0x00,             /*bd: mov    $0xd,%edx */
0x4c, 0x89, 0xcb,                         /*c2: mov    %r9,%rbx */
0xff, 0x90, 0x30, 0x01, 0x00, 0x00,       /*c5: callq  *0x130(%rax) */
0x49, 0x89, 0xd9,                         /*cb: mov    %rbx,%r9 */
0x4a, 0x89, 0x44, 0xf5, 0x00,             /*ce: mov    %rax,0x0(%rbp,%r14,8) */
0x45, 0x89, 0xe8,                         /*d3: mov    %r13d,%r8d */
0x41, 0x83, 0xe0, 0x1f,                   /*d6: and    $0x1f,%r8d */
0x47, 0x8d, 0x14, 0x21,                   /*da: lea    (%r9,%r12,1),%r10d */
0x4c, 0x8d, 0x5d, 0x08,                   /*de: lea    0x8(%rbp),%r11 */
0x48, 0x89, 0x6c, 0x24, 0x40,             /*e2: mov    %rbp,0x40(%rsp) */
0x48, 0xba, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*e7: movabs $0xfffffffffffc,%rdx */
0x45, 0x85, 0xff,                         /*f1: test   %r15d,%r15d */
0x4d, 0x89, 0xde,                         /*f4: mov    %r11,%r14 */
0x79, 0x55,                               /*f7: jns    14e <op_enter+0x14e> */
0x48, 0x8b, 0x4c, 0x24, 0x60,             /*f9: mov    0x60(%rsp),%rcx */
0x48, 0x8b, 0x41, 0x18,                   /*fe: mov    0x18(%rcx),%rax */
0x48, 0x8b, 0x79, 0x50,                   /*102: mov    0x50(%rcx),%rdi */
0x48, 0x8b, 0x70, 0x08,                   /*106: mov    0x8(%rax),%rsi */
0x48, 0x8d, 0x04, 0xb5, 0x00, 0x00, 0x00, 0x00,/*10a: lea    0x0(,%rsi,4),%rax */
0x48, 0x21, 0xd0,                         /*112: and    %rdx,%rax */
0x48, 0x8b, 0x50, 0x28,                   /*115: mov    0x28(%rax),%rdx */
0x48, 0x89, 0x54, 0x24, 0x38,             /*119: mov    %rdx,0x38(%rsp) */
0x8b, 0x40, 0x18,                         /*11e: mov    0x18(%rax),%eax */
0x48, 0x89, 0x44, 0x24, 0x30,             /*121: mov    %rax,0x30(%rsp) */
0x4c, 0x89, 0xcd,                         /*126: mov    %r9,%rbp */
0x4c, 0x89, 0xc3,                         /*129: mov    %r8,%rbx */
0x4d, 0x89, 0xd7,                         /*12c: mov    %r10,%r15 */
0x4d, 0x89, 0xde,                         /*12f: mov    %r11,%r14 */
0xff, 0x91, 0xe8, 0x01, 0x00, 0x00,       /*132: callq  *0x1e8(%rcx) */
0x4d, 0x89, 0xf3,                         /*138: mov    %r14,%r11 */
0x4d, 0x89, 0xfa,                         /*13b: mov    %r15,%r10 */
0x49, 0x89, 0xd8,                         /*13e: mov    %rbx,%r8 */
0x4c, 0x8b, 0x74, 0x24, 0x38,             /*141: mov    0x38(%rsp),%r14 */
0x4c, 0x8b, 0x7c, 0x24, 0x30,             /*146: mov    0x30(%rsp),%r15 */
0x49, 0x89, 0xe9,                         /*14b: mov    %rbp,%r9 */
0x43, 0x8d, 0x1c, 0x02,                   /*14e: lea    (%r10,%r8,1),%ebx */
0x48, 0x8b, 0x44, 0x24, 0x60,             /*152: mov    0x60(%rsp),%rax */
0x48, 0x8b, 0x78, 0x50,                   /*157: mov    0x50(%rax),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*15b: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*15f: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x48, 0x08,                   /*163: mov    0x8(%rax),%rcx */
0x48, 0x85, 0xc9,                         /*167: test   %rcx,%rcx */
0x74, 0x48,                               /*16a: je     1b4 <op_enter+0x1b4> */
0xf6, 0x41, 0x02, 0x08,                   /*16c: testb  $0x8,0x2(%rcx) */
0x74, 0x42,                               /*170: je     1b4 <op_enter+0x1b4> */
0x45, 0x85, 0xff,                         /*172: test   %r15d,%r15d */
0x0f, 0x88, 0xcc, 0x00, 0x00, 0x00,       /*175: js     247 <op_enter+0x247> */
0x48, 0x8b, 0x4c, 0x24, 0x58,             /*17b: mov    0x58(%rsp),%rcx */
0x42, 0x8d, 0x34, 0x01,                   /*180: lea    (%rcx,%r8,1),%esi */
0x41, 0x39, 0xf7,                         /*184: cmp    %esi,%r15d */
0x7c, 0x12,                               /*187: jl     19b <op_enter+0x19b> */
0x45, 0x85, 0xe4,                         /*189: test   %r12d,%r12d */
0x0f, 0x85, 0xb5, 0x00, 0x00, 0x00,       /*18c: jne    247 <op_enter+0x247> */
0x41, 0x39, 0xdf,                         /*192: cmp    %ebx,%r15d */
0x0f, 0x8e, 0xac, 0x00, 0x00, 0x00,       /*195: jle    247 <op_enter+0x247> */
0x48, 0x8b, 0x5c, 0x24, 0x60,             /*19b: mov    0x60(%rsp),%rbx */
0xff, 0x93, 0x60, 0x02, 0x00, 0x00,       /*1a0: callq  *0x260(%rbx) */
0x48, 0x89, 0xdf,                         /*1a6: mov    %rbx,%rdi */
0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*1a9: callq  *0x1b0(%rbx) */
0xe9, 0xd9, 0x04, 0x00, 0x00,             /*1af: jmpq   68d <op_enter+0x68d> */
0x83, 0xfb, 0x02,                         /*1b4: cmp    $0x2,%ebx */
0x0f, 0x8c, 0x8a, 0x00, 0x00, 0x00,       /*1b7: jl     247 <op_enter+0x247> */
0x41, 0x83, 0xff, 0x01,                   /*1bd: cmp    $0x1,%r15d */
0x0f, 0x85, 0x80, 0x00, 0x00, 0x00,       /*1c1: jne    247 <op_enter+0x247> */
0x41, 0x8b, 0x4e, 0x04,                   /*1c7: mov    0x4(%r14),%ecx */
0x41, 0xbf, 0x01, 0x00, 0x00, 0x00,       /*1cb: mov    $0x1,%r15d */
0x81, 0xf9, 0x01, 0x00, 0xf0, 0xff,       /*1d1: cmp    $0xfff00001,%ecx */
0x72, 0x6e,                               /*1d7: jb     247 <op_enter+0x247> */
0x4c, 0x89, 0x5c, 0x24, 0x30,             /*1d9: mov    %r11,0x30(%rsp) */
0x4c, 0x89, 0x4c, 0x24, 0x38,             /*1de: mov    %r9,0x38(%rsp) */
0x81, 0xe1, 0x00, 0xc0, 0x0f, 0x00,       /*1e3: and    $0xfc000,%ecx */
0x81, 0xf9, 0x00, 0xc0, 0x03, 0x00,       /*1e9: cmp    $0x3c000,%ecx */
0x75, 0x4c,                               /*1ef: jne    23d <op_enter+0x23d> */
0x49, 0x8b, 0x36,                         /*1f1: mov    (%r14),%rsi */
0x4d, 0x89, 0xc7,                         /*1f4: mov    %r8,%r15 */
0x48, 0x89, 0x5c, 0x24, 0x28,             /*1f7: mov    %rbx,0x28(%rsp) */
0x48, 0x8b, 0x5c, 0x24, 0x60,             /*1fc: mov    0x60(%rsp),%rbx */
0x4c, 0x89, 0xd5,                         /*201: mov    %r10,%rbp */
0xff, 0x93, 0xe8, 0x01, 0x00, 0x00,       /*204: callq  *0x1e8(%rbx) */
0x49, 0x89, 0xea,                         /*20a: mov    %rbp,%r10 */
0x4d, 0x89, 0xf8,                         /*20d: mov    %r15,%r8 */
0x49, 0x8b, 0x06,                         /*210: mov    (%r14),%rax */
0x48, 0xc1, 0xe0, 0x02,                   /*213: shl    $0x2,%rax */
0x48, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*217: movabs $0xfffffffffffc,%rcx */
0x48, 0x21, 0xc8,                         /*221: and    %rcx,%rax */
0x44, 0x8b, 0x78, 0x18,                   /*224: mov    0x18(%rax),%r15d */
0x4c, 0x8b, 0x70, 0x28,                   /*228: mov    0x28(%rax),%r14 */
0x48, 0x8b, 0x43, 0x50,                   /*22c: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x5c, 0x24, 0x28,             /*230: mov    0x28(%rsp),%rbx */
0x48, 0x8b, 0x40, 0x18,                   /*235: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*239: mov    0x20(%rax),%rax */
0x4c, 0x8b, 0x4c, 0x24, 0x38,             /*23d: mov    0x38(%rsp),%r9 */
0x4c, 0x8b, 0x5c, 0x24, 0x30,             /*242: mov    0x30(%rsp),%r11 */
0x89, 0x58, 0x40,                         /*247: mov    %ebx,0x40(%rax) */
0x41, 0x39, 0xdf,                         /*24a: cmp    %ebx,%r15d */
0x0f, 0x8d, 0xb3, 0x00, 0x00, 0x00,       /*24d: jge    306 <op_enter+0x306> */
0x48, 0x8b, 0x44, 0x24, 0x58,             /*253: mov    0x58(%rsp),%rax */
0x46, 0x8d, 0x2c, 0x00,                   /*258: lea    (%rax,%r8,1),%r13d */
0x45, 0x39, 0xef,                         /*25c: cmp    %r13d,%r15d */
0x44, 0x89, 0xc0,                         /*25f: mov    %r8d,%eax */
0x7d, 0x0f,                               /*262: jge    273 <op_enter+0x273> */
0x31, 0xc9,                               /*264: xor    %ecx,%ecx */
0x44, 0x89, 0xf8,                         /*266: mov    %r15d,%eax */
0x48, 0x8b, 0x54, 0x24, 0x58,             /*269: mov    0x58(%rsp),%rdx */
0x29, 0xd0,                               /*26e: sub    %edx,%eax */
0x0f, 0x4e, 0xc1,                         /*270: cmovle %ecx,%eax */
0xff, 0xc3,                               /*273: inc    %ebx */
0x48, 0x8b, 0x7c, 0x24, 0x60,             /*275: mov    0x60(%rsp),%rdi */
0x48, 0x8b, 0x4f, 0x18,                   /*27a: mov    0x18(%rdi),%rcx */
0x48, 0x8b, 0x54, 0x24, 0x40,             /*27e: mov    0x40(%rsp),%rdx */
0x48, 0x8b, 0x74, 0x24, 0x50,             /*283: mov    0x50(%rsp),%rsi */
0xf2, 0x0f, 0x10, 0x04, 0xf2,             /*288: movsd  (%rdx,%rsi,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xd9,             /*28d: movsd  %xmm0,(%rcx,%rbx,8) */
0x41, 0x8d, 0x4f, 0x01,                   /*292: lea    0x1(%r15),%ecx */
0x48, 0x63, 0xc9,                         /*296: movslq %ecx,%rcx */
0x48, 0x8b, 0x57, 0x18,                   /*299: mov    0x18(%rdi),%rdx */
0xc7, 0x44, 0xca, 0x04, 0x00, 0x40, 0xf0, 0xff,/*29d: movl   $0xfff04000,0x4(%rdx,%rcx,8) */
0x48, 0x8b, 0x57, 0x18,                   /*2a5: mov    0x18(%rdi),%rdx */
0xc7, 0x04, 0xca, 0x00, 0x00, 0x00, 0x00, /*2a9: movl   $0x0,(%rdx,%rcx,8) */
0x4d, 0x39, 0xf3,                         /*2b0: cmp    %r14,%r11 */
0x0f, 0x84, 0xf5, 0x00, 0x00, 0x00,       /*2b3: je     3ae <op_enter+0x3ae> */
0x48, 0x8b, 0x4c, 0x24, 0x60,             /*2b9: mov    0x60(%rsp),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*2be: mov    0x18(%rcx),%rcx */
0x48, 0x8d, 0x59, 0x08,                   /*2c2: lea    0x8(%rcx),%rbx */
0x4c, 0x39, 0xf3,                         /*2c6: cmp    %r14,%rbx */
0x0f, 0x86, 0xa7, 0x00, 0x00, 0x00,       /*2c9: jbe    376 <op_enter+0x376> */
0x44, 0x89, 0xfe,                         /*2cf: mov    %r15d,%esi */
0x29, 0xc6,                               /*2d2: sub    %eax,%esi */
0x48, 0x63, 0xf6,                         /*2d4: movslq %esi,%rsi */
0x49, 0x8d, 0x3c, 0xf6,                   /*2d7: lea    (%r14,%rsi,8),%rdi */
0x48, 0x39, 0xfb,                         /*2db: cmp    %rdi,%rbx */
0x0f, 0x83, 0x92, 0x00, 0x00, 0x00,       /*2de: jae    376 <op_enter+0x376> */
0x41, 0x39, 0xc7,                         /*2e4: cmp    %eax,%r15d */
0x0f, 0x84, 0xc1, 0x00, 0x00, 0x00,       /*2e7: je     3ae <op_enter+0x3ae> */
0x0f, 0x1f, 0x00,                         /*2ed: nopl   (%rax) */
0xf2, 0x41, 0x0f, 0x10, 0x44, 0xf6, 0xf8, /*2f0: movsd  -0x8(%r14,%rsi,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xf1,             /*2f7: movsd  %xmm0,(%rcx,%rsi,8) */
0x48, 0xff, 0xce,                         /*2fc: dec    %rsi */
0x75, 0xef,                               /*2ff: jne    2f0 <op_enter+0x2f0> */
0xe9, 0xa8, 0x00, 0x00, 0x00,             /*301: jmpq   3ae <op_enter+0x3ae> */
0x4c, 0x89, 0x54, 0x24, 0x20,             /*306: mov    %r10,0x20(%rsp) */
0x4d, 0x39, 0xf3,                         /*30b: cmp    %r14,%r11 */
0x0f, 0x84, 0x4a, 0x01, 0x00, 0x00,       /*30e: je     45e <op_enter+0x45e> */
0x8d, 0x43, 0x01,                         /*314: lea    0x1(%rbx),%eax */
0x48, 0x8b, 0x7c, 0x24, 0x60,             /*317: mov    0x60(%rsp),%rdi */
0x48, 0x8b, 0x4f, 0x18,                   /*31c: mov    0x18(%rdi),%rcx */
0x48, 0x8b, 0x54, 0x24, 0x40,             /*320: mov    0x40(%rsp),%rdx */
0x48, 0x8b, 0x74, 0x24, 0x50,             /*325: mov    0x50(%rsp),%rsi */
0xf2, 0x0f, 0x10, 0x04, 0xf2,             /*32a: movsd  (%rdx,%rsi,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xc1,             /*32f: movsd  %xmm0,(%rcx,%rax,8) */
0x48, 0x8b, 0x47, 0x18,                   /*334: mov    0x18(%rdi),%rax */
0x48, 0x8d, 0x48, 0x08,                   /*338: lea    0x8(%rax),%rcx */
0x44, 0x89, 0xca,                         /*33c: mov    %r9d,%edx */
0x4c, 0x39, 0xf1,                         /*33f: cmp    %r14,%rcx */
0x0f, 0x86, 0xdc, 0x00, 0x00, 0x00,       /*342: jbe    424 <op_enter+0x424> */
0x49, 0x8d, 0x34, 0xd6,                   /*348: lea    (%r14,%rdx,8),%rsi */
0x48, 0x39, 0xf1,                         /*34c: cmp    %rsi,%rcx */
0x0f, 0x83, 0xcf, 0x00, 0x00, 0x00,       /*34f: jae    424 <op_enter+0x424> */
0x45, 0x85, 0xc9,                         /*355: test   %r9d,%r9d */
0x0f, 0x84, 0x00, 0x01, 0x00, 0x00,       /*358: je     45e <op_enter+0x45e> */
0x66, 0x90,                               /*35e: xchg   %ax,%ax */
0xf2, 0x41, 0x0f, 0x10, 0x44, 0xd6, 0xf8, /*360: movsd  -0x8(%r14,%rdx,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xd0,             /*367: movsd  %xmm0,(%rax,%rdx,8) */
0x48, 0xff, 0xca,                         /*36c: dec    %rdx */
0x75, 0xef,                               /*36f: jne    360 <op_enter+0x360> */
0xe9, 0xe8, 0x00, 0x00, 0x00,             /*371: jmpq   45e <op_enter+0x45e> */
0x4c, 0x39, 0xf3,                         /*376: cmp    %r14,%rbx */
0x74, 0x33,                               /*379: je     3ae <op_enter+0x3ae> */
0x44, 0x89, 0xfe,                         /*37b: mov    %r15d,%esi */
0x29, 0xc6,                               /*37e: sub    %eax,%esi */
0x74, 0x2c,                               /*380: je     3ae <op_enter+0x3ae> */
0x48, 0x63, 0xf6,                         /*382: movslq %esi,%rsi */
0x48, 0xf7, 0xde,                         /*385: neg    %rsi */
0x4c, 0x89, 0xf7,                         /*388: mov    %r14,%rdi */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*38b: nopl   0x0(%rax,%rax,1) */
0x48, 0x89, 0xda,                         /*390: mov    %rbx,%rdx */
0x48, 0x83, 0xc1, 0x10,                   /*393: add    $0x10,%rcx */
0xf2, 0x0f, 0x10, 0x07,                   /*397: movsd  (%rdi),%xmm0 */
0x48, 0x83, 0xc7, 0x08,                   /*39b: add    $0x8,%rdi */
0xf2, 0x0f, 0x11, 0x02,                   /*39f: movsd  %xmm0,(%rdx) */
0x48, 0xff, 0xc6,                         /*3a3: inc    %rsi */
0x48, 0x89, 0xcb,                         /*3a6: mov    %rcx,%rbx */
0x48, 0x89, 0xd1,                         /*3a9: mov    %rdx,%rcx */
0x75, 0xe2,                               /*3ac: jne    390 <op_enter+0x390> */
0x4c, 0x89, 0x44, 0x24, 0x50,             /*3ae: mov    %r8,0x50(%rsp) */
0x85, 0xc0,                               /*3b3: test   %eax,%eax */
0x0f, 0x84, 0xea, 0x01, 0x00, 0x00,       /*3b5: je     5a5 <op_enter+0x5a5> */
0x41, 0xff, 0xc2,                         /*3bb: inc    %r10d */
0x48, 0x8b, 0x4c, 0x24, 0x60,             /*3be: mov    0x60(%rsp),%rcx */
0x4c, 0x8b, 0x41, 0x18,                   /*3c3: mov    0x18(%rcx),%r8 */
0x4b, 0x8d, 0x0c, 0xd0,                   /*3c7: lea    (%r8,%r10,8),%rcx */
0x44, 0x89, 0xfa,                         /*3cb: mov    %r15d,%edx */
0x29, 0xc2,                               /*3ce: sub    %eax,%edx */
0x48, 0x63, 0xda,                         /*3d0: movslq %edx,%rbx */
0x49, 0x8d, 0x14, 0xde,                   /*3d3: lea    (%r14,%rbx,8),%rdx */
0x48, 0x39, 0xd1,                         /*3d7: cmp    %rdx,%rcx */
0x0f, 0x86, 0xa4, 0x01, 0x00, 0x00,       /*3da: jbe    584 <op_enter+0x584> */
0x48, 0x63, 0xf0,                         /*3e0: movslq %eax,%rsi */
0x48, 0x8d, 0x3c, 0x33,                   /*3e3: lea    (%rbx,%rsi,1),%rdi */
0x49, 0x8d, 0x3c, 0xfe,                   /*3e7: lea    (%r14,%rdi,8),%rdi */
0x48, 0x39, 0xf9,                         /*3eb: cmp    %rdi,%rcx */
0x0f, 0x83, 0x90, 0x01, 0x00, 0x00,       /*3ee: jae    584 <op_enter+0x584> */
0x43, 0x8d, 0x44, 0x0c, 0x01,             /*3f4: lea    0x1(%r12,%r9,1),%eax */
0x49, 0x8d, 0x44, 0xc0, 0xf8,             /*3f9: lea    -0x8(%r8,%rax,8),%rax */
0x49, 0x8d, 0x4c, 0xde, 0xf8,             /*3fe: lea    -0x8(%r14,%rbx,8),%rcx */
0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*403: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0xf2, 0x0f, 0x10, 0x04, 0xf1,             /*410: movsd  (%rcx,%rsi,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xf0,             /*415: movsd  %xmm0,(%rax,%rsi,8) */
0x48, 0xff, 0xce,                         /*41a: dec    %rsi */
0x75, 0xf1,                               /*41d: jne    410 <op_enter+0x410> */
0xe9, 0x81, 0x01, 0x00, 0x00,             /*41f: jmpq   5a5 <op_enter+0x5a5> */
0x4c, 0x39, 0xf1,                         /*424: cmp    %r14,%rcx */
0x74, 0x35,                               /*427: je     45e <op_enter+0x45e> */
0x45, 0x85, 0xc9,                         /*429: test   %r9d,%r9d */
0x74, 0x30,                               /*42c: je     45e <op_enter+0x45e> */
0x4c, 0x89, 0xca,                         /*42e: mov    %r9,%rdx */
0x48, 0xf7, 0xda,                         /*431: neg    %rdx */
0x4c, 0x89, 0xf6,                         /*434: mov    %r14,%rsi */
0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*437: nopw   0x0(%rax,%rax,1) */
0x48, 0x89, 0xcf,                         /*440: mov    %rcx,%rdi */
0x48, 0x83, 0xc0, 0x10,                   /*443: add    $0x10,%rax */
0xf2, 0x0f, 0x10, 0x06,                   /*447: movsd  (%rsi),%xmm0 */
0x48, 0x83, 0xc6, 0x08,                   /*44b: add    $0x8,%rsi */
0xf2, 0x0f, 0x11, 0x07,                   /*44f: movsd  %xmm0,(%rdi) */
0x48, 0xff, 0xc2,                         /*453: inc    %rdx */
0x48, 0x89, 0xc1,                         /*456: mov    %rax,%rcx */
0x48, 0x89, 0xf8,                         /*459: mov    %rdi,%rax */
0x75, 0xe2,                               /*45c: jne    440 <op_enter+0x440> */
0x31, 0xf6,                               /*45e: xor    %esi,%esi */
0x45, 0x85, 0xe4,                         /*460: test   %r12d,%r12d */
0x4c, 0x89, 0x64, 0x24, 0x08,             /*463: mov    %r12,0x8(%rsp) */
0x74, 0x7e,                               /*468: je     4e8 <op_enter+0x4e8> */
0x43, 0x8d, 0x04, 0x01,                   /*46a: lea    (%r9,%r8,1),%eax */
0x45, 0x89, 0xfc,                         /*46e: mov    %r15d,%r12d */
0x41, 0x29, 0xc4,                         /*471: sub    %eax,%r12d */
0x41, 0x8d, 0x41, 0x01,                   /*474: lea    0x1(%r9),%eax */
0x48, 0x89, 0x44, 0x24, 0x18,             /*478: mov    %rax,0x18(%rsp) */
0x48, 0x89, 0x5c, 0x24, 0x28,             /*47d: mov    %rbx,0x28(%rsp) */
0x48, 0x8b, 0x5c, 0x24, 0x60,             /*482: mov    0x60(%rsp),%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*487: mov    0x18(%rbx),%rax */
0x48, 0x89, 0x44, 0x24, 0x10,             /*48b: mov    %rax,0x10(%rsp) */
0x48, 0x8b, 0x7b, 0x50,                   /*490: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x44, 0x24, 0x58,             /*494: mov    0x58(%rsp),%rax */
0x89, 0xc0,                               /*499: mov    %eax,%eax */
0x48, 0x8b, 0x4c, 0x24, 0x48,             /*49b: mov    0x48(%rsp),%rcx */
0x89, 0xc9,                               /*4a0: mov    %ecx,%ecx */
0x48, 0x01, 0xc1,                         /*4a2: add    %rax,%rcx */
0x49, 0x8d, 0x14, 0xce,                   /*4a5: lea    (%r14,%rcx,8),%rdx */
0x44, 0x89, 0xe6,                         /*4a9: mov    %r12d,%esi */
0x4c, 0x89, 0x74, 0x24, 0x38,             /*4ac: mov    %r14,0x38(%rsp) */
0x4d, 0x89, 0xce,                         /*4b1: mov    %r9,%r14 */
0x4c, 0x89, 0xc5,                         /*4b4: mov    %r8,%rbp */
0x4c, 0x89, 0x5c, 0x24, 0x30,             /*4b7: mov    %r11,0x30(%rsp) */
0xff, 0x93, 0x28, 0x02, 0x00, 0x00,       /*4bc: callq  *0x228(%rbx) */
0x4c, 0x89, 0xe6,                         /*4c2: mov    %r12,%rsi */
0x48, 0x8b, 0x5c, 0x24, 0x28,             /*4c5: mov    0x28(%rsp),%rbx */
0x4c, 0x8b, 0x5c, 0x24, 0x30,             /*4ca: mov    0x30(%rsp),%r11 */
0x49, 0x89, 0xe8,                         /*4cf: mov    %rbp,%r8 */
0x4d, 0x89, 0xf1,                         /*4d2: mov    %r14,%r9 */
0x4c, 0x8b, 0x74, 0x24, 0x38,             /*4d5: mov    0x38(%rsp),%r14 */
0x48, 0x8b, 0x4c, 0x24, 0x18,             /*4da: mov    0x18(%rsp),%rcx */
0x48, 0x8b, 0x54, 0x24, 0x10,             /*4df: mov    0x10(%rsp),%rdx */
0x48, 0x89, 0x04, 0xca,                   /*4e4: mov    %rax,(%rdx,%rcx,8) */
0x45, 0x85, 0xc0,                         /*4e8: test   %r8d,%r8d */
0x0f, 0x84, 0x44, 0x01, 0x00, 0x00,       /*4eb: je     635 <op_enter+0x635> */
0x45, 0x29, 0xc7,                         /*4f1: sub    %r8d,%r15d */
0x48, 0x8b, 0x44, 0x24, 0x58,             /*4f4: mov    0x58(%rsp),%rax */
0x41, 0x39, 0xc7,                         /*4f9: cmp    %eax,%r15d */
0x0f, 0x8e, 0x33, 0x01, 0x00, 0x00,       /*4fc: jle    635 <op_enter+0x635> */
0x48, 0x8b, 0x4c, 0x24, 0x20,             /*502: mov    0x20(%rsp),%rcx */
0xff, 0xc1,                               /*507: inc    %ecx */
0x48, 0x8b, 0x44, 0x24, 0x60,             /*509: mov    0x60(%rsp),%rax */
0x48, 0x8b, 0x68, 0x18,                   /*50e: mov    0x18(%rax),%rbp */
0x48, 0x8d, 0x44, 0xcd, 0x00,             /*512: lea    0x0(%rbp,%rcx,8),%rax */
0x42, 0x8d, 0x0c, 0x0e,                   /*517: lea    (%rsi,%r9,1),%ecx */
0x48, 0x63, 0xf9,                         /*51b: movslq %ecx,%rdi */
0x49, 0x8d, 0x0c, 0xfe,                   /*51e: lea    (%r14,%rdi,8),%rcx */
0x44, 0x89, 0xc2,                         /*522: mov    %r8d,%edx */
0x48, 0x39, 0xc8,                         /*525: cmp    %rcx,%rax */
0x0f, 0x86, 0xe0, 0x00, 0x00, 0x00,       /*528: jbe    60e <op_enter+0x60e> */
0x48, 0x01, 0xd7,                         /*52e: add    %rdx,%rdi */
0x49, 0x8d, 0x3c, 0xfe,                   /*531: lea    (%r14,%rdi,8),%rdi */
0x48, 0x39, 0xf8,                         /*535: cmp    %rdi,%rax */
0x0f, 0x83, 0xd0, 0x00, 0x00, 0x00,       /*538: jae    60e <op_enter+0x60e> */
0x48, 0x8b, 0x44, 0x24, 0x08,             /*53e: mov    0x8(%rsp),%rax */
0x42, 0x8d, 0x44, 0x08, 0x01,             /*543: lea    0x1(%rax,%r9,1),%eax */
0x48, 0x8d, 0x44, 0xc5, 0xf8,             /*548: lea    -0x8(%rbp,%rax,8),%rax */
0x48, 0x8b, 0x4c, 0x24, 0x58,             /*54d: mov    0x58(%rsp),%rcx */
0x01, 0xce,                               /*552: add    %ecx,%esi */
0x48, 0x8b, 0x4c, 0x24, 0x48,             /*554: mov    0x48(%rsp),%rcx */
0x01, 0xce,                               /*559: add    %ecx,%esi */
0x48, 0x63, 0xce,                         /*55b: movslq %esi,%rcx */
0x49, 0x8d, 0x4c, 0xce, 0xf8,             /*55e: lea    -0x8(%r14,%rcx,8),%rcx */
0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*563: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0xf2, 0x0f, 0x10, 0x04, 0xd1,             /*570: movsd  (%rcx,%rdx,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xd0,             /*575: movsd  %xmm0,(%rax,%rdx,8) */
0x48, 0xff, 0xca,                         /*57a: dec    %rdx */
0x75, 0xf1,                               /*57d: jne    570 <op_enter+0x570> */
0xe9, 0xb1, 0x00, 0x00, 0x00,             /*57f: jmpq   635 <op_enter+0x635> */
0x48, 0x39, 0xd1,                         /*584: cmp    %rdx,%rcx */
0x74, 0x1c,                               /*587: je     5a5 <op_enter+0x5a5> */
0x48, 0x98,                               /*589: cltq */
0x48, 0xf7, 0xd8,                         /*58b: neg    %rax */
0x66, 0x90,                               /*58e: xchg   %ax,%ax */
0xf2, 0x0f, 0x10, 0x02,                   /*590: movsd  (%rdx),%xmm0 */
0x48, 0x83, 0xc2, 0x08,                   /*594: add    $0x8,%rdx */
0xf2, 0x0f, 0x11, 0x01,                   /*598: movsd  %xmm0,(%rcx) */
0x48, 0x83, 0xc1, 0x08,                   /*59c: add    $0x8,%rcx */
0x48, 0xff, 0xc0,                         /*5a0: inc    %rax */
0x75, 0xeb,                               /*5a3: jne    590 <op_enter+0x590> */
0x45, 0x85, 0xe4,                         /*5a5: test   %r12d,%r12d */
0x74, 0x1f,                               /*5a8: je     5c9 <op_enter+0x5c9> */
0x41, 0xff, 0xc1,                         /*5aa: inc    %r9d */
0x48, 0x8b, 0x44, 0x24, 0x60,             /*5ad: mov    0x60(%rsp),%rax */
0x48, 0x8b, 0x58, 0x18,                   /*5b2: mov    0x18(%rax),%rbx */
0x48, 0x8b, 0x78, 0x50,                   /*5b6: mov    0x50(%rax),%rdi */
0x31, 0xf6,                               /*5ba: xor    %esi,%esi */
0x4c, 0x89, 0xcd,                         /*5bc: mov    %r9,%rbp */
0xff, 0x90, 0xd8, 0x00, 0x00, 0x00,       /*5bf: callq  *0xd8(%rax) */
0x48, 0x89, 0x04, 0xeb,                   /*5c5: mov    %rax,(%rbx,%rbp,8) */
0x48, 0x8b, 0x44, 0x24, 0x48,             /*5c9: mov    0x48(%rsp),%rax */
0x85, 0xc0,                               /*5ce: test   %eax,%eax */
0x48, 0x8b, 0x44, 0x24, 0x60,             /*5d0: mov    0x60(%rsp),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*5d5: mov    0x8(%rax),%rax */
0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*5d9: mov    0x98(%rax),%rcx */
0x0f, 0x84, 0x94, 0x00, 0x00, 0x00,       /*5e0: je     67a <op_enter+0x67a> */
0x45, 0x39, 0xef,                         /*5e6: cmp    %r13d,%r15d */
0x0f, 0x8c, 0x8b, 0x00, 0x00, 0x00,       /*5e9: jl     67a <op_enter+0x67a> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*5ef: mov    $0x1,%edx */
0x48, 0x8b, 0x74, 0x24, 0x58,             /*5f4: mov    0x58(%rsp),%rsi */
0x29, 0xf2,                               /*5f9: sub    %esi,%edx */
0x48, 0x8b, 0x74, 0x24, 0x50,             /*5fb: mov    0x50(%rsp),%rsi */
0x29, 0xf2,                               /*600: sub    %esi,%edx */
0x44, 0x01, 0xfa,                         /*602: add    %r15d,%edx */
0x48, 0x63, 0xd2,                         /*605: movslq %edx,%rdx */
0x48, 0x8d, 0x0c, 0x91,                   /*608: lea    (%rcx,%rdx,4),%rcx */
0xeb, 0x70,                               /*60c: jmp    67e <op_enter+0x67e> */
0x48, 0x39, 0xc8,                         /*60e: cmp    %rcx,%rax */
0x74, 0x22,                               /*611: je     635 <op_enter+0x635> */
0x49, 0x83, 0xe5, 0x1f,                   /*613: and    $0x1f,%r13 */
0x49, 0xf7, 0xdd,                         /*617: neg    %r13 */
0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,       /*61a: nopw   0x0(%rax,%rax,1) */
0xf2, 0x0f, 0x10, 0x01,                   /*620: movsd  (%rcx),%xmm0 */
0x48, 0x83, 0xc1, 0x08,                   /*624: add    $0x8,%rcx */
0xf2, 0x0f, 0x11, 0x00,                   /*628: movsd  %xmm0,(%rax) */
0x48, 0x83, 0xc0, 0x08,                   /*62c: add    $0x8,%rax */
0x49, 0xff, 0xc5,                         /*630: inc    %r13 */
0x75, 0xeb,                               /*633: jne    620 <op_enter+0x620> */
0x4d, 0x39, 0xf3,                         /*635: cmp    %r14,%r11 */
0x75, 0x1f,                               /*638: jne    659 <op_enter+0x659> */
0xff, 0xc3,                               /*63a: inc    %ebx */
0x48, 0x8b, 0x44, 0x24, 0x60,             /*63c: mov    0x60(%rsp),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*641: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x4c, 0x24, 0x40,             /*645: mov    0x40(%rsp),%rcx */
0x48, 0x8b, 0x54, 0x24, 0x50,             /*64a: mov    0x50(%rsp),%rdx */
0xf2, 0x0f, 0x10, 0x04, 0xd1,             /*64f: movsd  (%rcx,%rdx,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xd8,             /*654: movsd  %xmm0,(%rax,%rbx,8) */
0x48, 0x8b, 0x54, 0x24, 0x48,             /*659: mov    0x48(%rsp),%rdx */
0x85, 0xd2,                               /*65e: test   %edx,%edx */
0x48, 0x8b, 0x44, 0x24, 0x60,             /*660: mov    0x60(%rsp),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*665: mov    0x8(%rax),%rax */
0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*669: mov    0x98(%rax),%rcx */
0x74, 0x08,                               /*670: je     67a <op_enter+0x67a> */
0xff, 0xc2,                               /*672: inc    %edx */
0x48, 0x8d, 0x0c, 0x91,                   /*674: lea    (%rcx,%rdx,4),%rcx */
0xeb, 0x04,                               /*678: jmp    67e <op_enter+0x67e> */
0x48, 0x83, 0xc1, 0x04,                   /*67a: add    $0x4,%rcx */
0x0f, 0xb7, 0x31,                         /*67e: movzwl (%rcx),%esi */
0x48, 0x03, 0xb0, 0xa0, 0x00, 0x00, 0x00, /*681: add    0xa0(%rax),%rsi */
0x48, 0x8b, 0x7c, 0x24, 0x60,             /*688: mov    0x60(%rsp),%rdi */
0x48, 0x8b, 0x7c, 0x24, 0x60,             /*68d: mov    0x60(%rsp),%rdi */
0x48, 0x83, 0xc4, 0x68,                   /*692: add    $0x68,%rsp */
0x5b,                                     /*696: pop    %rbx */
0x41, 0x5c,                               /*697: pop    %r12 */
0x41, 0x5d,                               /*699: pop    %r13 */
0x41, 0x5e,                               /*69b: pop    %r14 */
0x41, 0x5f,                               /*69d: pop    %r15 */
0x5d,                                     /*69f: pop    %rbp */
0xff, 0xe6,                               /*6a0: jmpq   *%rsi */

};

static void op_enter_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 23)) = a * 1 + 0;
}

static void op_enter_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_enter_set_args(op, GETARG_Ax(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 14..17]]} */
static uint8_t op_enter_method_m[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x49, 0x89, 0xfe,                         /*a: mov    %rdi,%r14 */
0xb8, 0x00, 0x00, 0xab, 0x00,             /*d: mov    $0xab0000,%eax */
0x41, 0x89, 0xc4,                         /*12: mov    %eax,%r12d */
0x41, 0xc1, 0xec, 0x12,                   /*15: shr    $0x12,%r12d */
0x4d, 0x8b, 0x6e, 0x18,                   /*19: mov    0x18(%r14),%r13 */
0x49, 0x8b, 0x7e, 0x50,                   /*1d: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*21: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*25: mov    0x20(%rax),%rax */
0x48, 0x63, 0x58, 0x40,                   /*29: movslq 0x40(%rax),%rbx */
0x48, 0x85, 0xdb,                         /*2d: test   %rbx,%rbx */
0x48, 0x8d, 0x43, 0x01,                   /*30: lea    0x1(%rbx),%rax */
0xbd, 0x02, 0x00, 0x00, 0x00,             /*34: mov    $0x2,%ebp */
0x48, 0x0f, 0x49, 0xe8,                   /*39: cmovns %rax,%rbp */
0x41, 0x8b, 0x44, 0xed, 0x04,             /*3d: mov    0x4(%r13,%rbp,8),%eax */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*42: cmp    $0xfff00001,%eax */
0x72, 0x1b,                               /*47: jb     64 <op_enter_method_m+0x64> */
0x25, 0x00, 0xc0, 0x0f, 0x00,             /*49: and    $0xfc000,%eax */
0x3d, 0x00, 0x80, 0x03, 0x00,             /*4e: cmp    $0x38000,%eax */
0x74, 0x33,                               /*53: je     88 <op_enter_method_m+0x88> */
0x3d, 0x00, 0x40, 0x00, 0x00,             /*55: cmp    $0x4000,%eax */
0x75, 0x08,                               /*5a: jne    64 <op_enter_method_m+0x64> */
0x41, 0x83, 0x7c, 0xed, 0x00, 0x00,       /*5c: cmpl   $0x0,0x0(%r13,%rbp,8) */
0x74, 0x24,                               /*62: je     88 <op_enter_method_m+0x88> */
0x49, 0x8b, 0x74, 0xed, 0x00,             /*64: mov    0x0(%r13,%rbp,8),%rsi */
0x49, 0x8b, 0x8e, 0x88, 0x02, 0x00, 0x00, /*69: mov    0x288(%r14),%rcx */
0x4d, 0x8b, 0x86, 0x90, 0x02, 0x00, 0x00, /*70: mov    0x290(%r14),%r8 */
0xba, 0x0d, 0x00, 0x00, 0x00,             /*77: mov    $0xd,%edx */
0x41, 0xff, 0x96, 0x30, 0x01, 0x00, 0x00, /*7c: callq  *0x130(%r14) */
0x49, 0x89, 0x44, 0xed, 0x00,             /*83: mov    %rax,0x0(%r13,%rbp,8) */
0x45, 0x89, 0xe7,                         /*88: mov    %r12d,%r15d */
0x41, 0x83, 0xe7, 0x1f,                   /*8b: and    $0x1f,%r15d */
0x49, 0x8d, 0x55, 0x08,                   /*8f: lea    0x8(%r13),%rdx */
0x85, 0xdb,                               /*93: test   %ebx,%ebx */
0x78, 0x25,                               /*95: js     bc <op_enter_method_m+0xbc> */
0x44, 0x39, 0xfb,                         /*97: cmp    %r15d,%ebx */
0x48, 0x89, 0xd3,                         /*9a: mov    %rdx,%rbx */
0x7d, 0x4d,                               /*9d: jge    ec <op_enter_method_m+0xec> */
0x49, 0x8b, 0x7e, 0x50,                   /*9f: mov    0x50(%r14),%rdi */
0x44, 0x89, 0xfe,                         /*a3: mov    %r15d,%esi */
0x41, 0xff, 0x96, 0x60, 0x02, 0x00, 0x00, /*a6: callq  *0x260(%r14) */
0x4c, 0x89, 0xf7,                         /*ad: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xb0, 0x01, 0x00, 0x00, /*b0: callq  *0x1b0(%r14) */
0xe9, 0xeb, 0x00, 0x00, 0x00,             /*b7: jmpq   1a7 <op_enter_method_m+0x1a7> */
0x49, 0x8b, 0x46, 0x18,                   /*bc: mov    0x18(%r14),%rax */
0x49, 0x8b, 0x7e, 0x50,                   /*c0: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0x70, 0x08,                   /*c4: mov    0x8(%rax),%rsi */
0x48, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00,/*c8: movabs $0x3fffffffffff,%rax */
0x48, 0x21, 0xf0,                         /*d2: and    %rsi,%rax */
0x48, 0x8b, 0x1c, 0x85, 0x28, 0x00, 0x00, 0x00,/*d5: mov    0x28(,%rax,4),%rbx */
0x48, 0x89, 0x14, 0x24,                   /*dd: mov    %rdx,(%rsp) */
0x41, 0xff, 0x96, 0xe8, 0x01, 0x00, 0x00, /*e1: callq  *0x1e8(%r14) */
0x48, 0x8b, 0x14, 0x24,                   /*e8: mov    (%rsp),%rdx */
0x49, 0x8b, 0x46, 0x50,                   /*ec: mov    0x50(%r14),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*f0: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*f4: mov    0x20(%rax),%rax */
0x44, 0x89, 0x78, 0x40,                   /*f8: mov    %r15d,0x40(%rax) */
0x41, 0x8d, 0x47, 0x01,                   /*fc: lea    0x1(%r15),%eax */
0x49, 0x8b, 0x4e, 0x18,                   /*100: mov    0x18(%r14),%rcx */
0xf2, 0x41, 0x0f, 0x10, 0x44, 0xed, 0x00, /*104: movsd  0x0(%r13,%rbp,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xc1,             /*10b: movsd  %xmm0,(%rcx,%rax,8) */
0x48, 0x39, 0xda,                         /*110: cmp    %rbx,%rdx */
0x74, 0x79,                               /*113: je     18e <op_enter_method_m+0x18e> */
0x49, 0x8b, 0x46, 0x18,                   /*115: mov    0x18(%r14),%rax */
0x48, 0x8d, 0x48, 0x08,                   /*119: lea    0x8(%rax),%rcx */
0x44, 0x89, 0xfa,                         /*11d: mov    %r15d,%edx */
0x48, 0x39, 0xd9,                         /*120: cmp    %rbx,%rcx */
0x76, 0x2d,                               /*123: jbe    152 <op_enter_method_m+0x152> */
0x48, 0x8d, 0x34, 0xd3,                   /*125: lea    (%rbx,%rdx,8),%rsi */
0x48, 0x39, 0xf1,                         /*129: cmp    %rsi,%rcx */
0x73, 0x24,                               /*12c: jae    152 <op_enter_method_m+0x152> */
0x45, 0x85, 0xff,                         /*12e: test   %r15d,%r15d */
0x74, 0x5b,                               /*131: je     18e <op_enter_method_m+0x18e> */
0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*133: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0xf2, 0x0f, 0x10, 0x44, 0xd3, 0xf8,       /*140: movsd  -0x8(%rbx,%rdx,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xd0,             /*146: movsd  %xmm0,(%rax,%rdx,8) */
0x48, 0xff, 0xca,                         /*14b: dec    %rdx */
0x75, 0xf0,                               /*14e: jne    140 <op_enter_method_m+0x140> */
0xeb, 0x3c,                               /*150: jmp    18e <op_enter_method_m+0x18e> */
0x48, 0x39, 0xd9,                         /*152: cmp    %rbx,%rcx */
0x74, 0x37,                               /*155: je     18e <op_enter_method_m+0x18e> */
0x45, 0x85, 0xff,                         /*157: test   %r15d,%r15d */
0x74, 0x32,                               /*15a: je     18e <op_enter_method_m+0x18e> */
0x49, 0x83, 0xe4, 0x1f,                   /*15c: and    $0x1f,%r12 */
0x49, 0xf7, 0xdc,                         /*160: neg    %r12 */
0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*163: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x89, 0xca,                         /*170: mov    %rcx,%rdx */
0x48, 0x83, 0xc0, 0x10,                   /*173: add    $0x10,%rax */
0xf2, 0x0f, 0x10, 0x03,                   /*177: movsd  (%rbx),%xmm0 */
0x48, 0x83, 0xc3, 0x08,                   /*17b: add    $0x8,%rbx */
0xf2, 0x0f, 0x11, 0x02,                   /*17f: movsd  %xmm0,(%rdx) */
0x49, 0xff, 0xc4,                         /*183: inc    %r12 */
0x48, 0x89, 0xc1,                         /*186: mov    %rax,%rcx */
0x48, 0x89, 0xd0,                         /*189: mov    %rdx,%rax */
0x75, 0xe2,                               /*18c: jne    170 <op_enter_method_m+0x170> */
0x49, 0x8b, 0x46, 0x08,                   /*18e: mov    0x8(%r14),%rax */
0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*192: mov    0x98(%rax),%rcx */
0x0f, 0xb7, 0x71, 0x04,                   /*199: movzwl 0x4(%rcx),%esi */
0x48, 0x03, 0xb0, 0xa0, 0x00, 0x00, 0x00, /*19d: add    0xa0(%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*1a4: mov    %r14,%rdi */
0x4c, 0x89, 0xf7,                         /*1a7: mov    %r14,%rdi */
0x5b,                                     /*1aa: pop    %rbx */
0x41, 0x5c,                               /*1ab: pop    %r12 */
0x41, 0x5d,                               /*1ad: pop    %r13 */
0x41, 0x5e,                               /*1af: pop    %r14 */
0x41, 0x5f,                               /*1b1: pop    %r15 */
0x5d,                                     /*1b3: pop    %rbp */
0xff, 0xe6,                               /*1b4: jmpq   *%rsi */

};

static void op_enter_method_m_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = a * 1 + 0;
}

static void op_enter_method_m_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_enter_method_m_set_args(op, GETARG_Ax(c),0,0,op_idx);
}


/* args: {} */
static uint8_t op_karg[] = {

};

static void op_karg_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_karg_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_karg_set_args(op, 0,0,0,op_idx);
}


/* args: {} */
static uint8_t op_kdict[] = {

};

static void op_kdict_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_kdict_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_kdict_set_args(op, 0,0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_return[] = {
0x55,                                     /*0: push   %rbp */
0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
0x53,                                     /*4: push   %rbx */
0x48, 0x83, 0xe4, 0xf0,                   /*5: and    $0xfffffffffffffff0,%rsp */
0x48, 0x83, 0xec, 0x10,                   /*9: sub    $0x10,%rsp */
0x48, 0x89, 0xfb,                         /*d: mov    %rdi,%rbx */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*10: mov    $0xab0000,%esi */
0x31, 0xd2,                               /*15: xor    %edx,%edx */
0xff, 0x93, 0x90, 0x00, 0x00, 0x00,       /*17: callq  *0x90(%rbx) */
0x48, 0x89, 0xdf,                         /*1d: mov    %rbx,%rdi */
0x48, 0x8d, 0x65, 0xf8,                   /*20: lea    -0x8(%rbp),%rsp */
0x5b,                                     /*24: pop    %rbx */
0x5d,                                     /*25: pop    %rbp */
0xc3,                                     /*26: retq */

};

static void op_return_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_return_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_return_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 5..8]], "b"=>[[1, 0, 10..13]]} */
static uint8_t op_break[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*4: mov    $0xab0000,%esi */
0xba, 0x00, 0x00, 0xbc, 0x00,             /*9: mov    $0xbc0000,%edx */
0xff, 0x93, 0x90, 0x00, 0x00, 0x00,       /*e: callq  *0x90(%rbx) */
0x48, 0x89, 0xdf,                         /*14: mov    %rbx,%rdi */
0x5b,                                     /*17: pop    %rbx */
0xc3,                                     /*18: retq */

};

static void op_break_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = a * 1 + 0;
  *((int32_t *)(op + 10)) = b * 1 + 0;
}

static void op_break_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_break_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 28..31]], "a"=>[[8, 0, 35..38], [1, 1, 321..324], [8, 8, 347..350], [8, 0, 396..399], [1, 0, 527..530]], "c"=>[[1, 0, 236..239], [1, 1, 352..355]]} */
static uint8_t op_tailcall[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x89, 0xfb,                         /*a: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x50,                   /*d: mov    0x50(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x18,                   /*11: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*15: mov    0x28(%rbx),%rcx */
0x44, 0x8b, 0xa1, 0x00, 0x04, 0xbc, 0x00, /*19: mov    0xbc0400(%rcx),%r12d */
0x4c, 0x8b, 0xb8, 0x00, 0x08, 0xab, 0x00, /*20: mov    0xab0800(%rax),%r15 */
0x4c, 0x89, 0xf8,                         /*27: mov    %r15,%rax */
0x48, 0xc1, 0xe8, 0x20,                   /*2a: shr    $0x20,%rax */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*2e: cmp    $0xfff00001,%eax */
0x72, 0x31,                               /*33: jb     66 <op_tailcall+0x66> */
0x4c, 0x89, 0xf9,                         /*35: mov    %r15,%rcx */
0x48, 0xc1, 0xe9, 0x2e,                   /*38: shr    $0x2e,%rcx */
0x83, 0xe1, 0x3f,                         /*3c: and    $0x3f,%ecx */
0x31, 0xc0,                               /*3f: xor    %eax,%eax */
0x83, 0xf9, 0x14,                         /*41: cmp    $0x14,%ecx */
0x7f, 0x26,                               /*44: jg     6c <op_tailcall+0x6c> */
0xff, 0xc9,                               /*46: dec    %ecx */
0x83, 0xf9, 0x07,                         /*48: cmp    $0x7,%ecx */
0x77, 0x24,                               /*4b: ja     71 <op_tailcall+0x71> */
0xff, 0x24, 0xcd, 0x00, 0x00, 0x00, 0x00, /*4d: jmpq   *0x0(,%rcx,8) */
0x45, 0x85, 0xff,                         /*54: test   %r15d,%r15d */
0x0f, 0x84, 0x6b, 0x02, 0x00, 0x00,       /*57: je     2c8 <op_tailcall+0x2c8> */
0x49, 0x8b, 0x86, 0x90, 0x00, 0x00, 0x00, /*5d: mov    0x90(%r14),%rax */
0xeb, 0x20,                               /*64: jmp    86 <op_tailcall+0x86> */
0x49, 0x8b, 0x46, 0x78,                   /*66: mov    0x78(%r14),%rax */
0xeb, 0x1a,                               /*6a: jmp    86 <op_tailcall+0x86> */
0x83, 0xf9, 0x15,                         /*6c: cmp    $0x15,%ecx */
0x74, 0x15,                               /*6f: je     86 <op_tailcall+0x86> */
0x48, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00,/*71: movabs $0x3fffffffffff,%rax */
0x4c, 0x21, 0xf8,                         /*7b: and    %r15,%rax */
0x48, 0x8b, 0x04, 0x85, 0x08, 0x00, 0x00, 0x00,/*7e: mov    0x8(,%rax,4),%rax */
0x48, 0x89, 0x04, 0x24,                   /*86: mov    %rax,(%rsp) */
0x48, 0x8b, 0x0b,                         /*8a: mov    (%rbx),%rcx */
0x48, 0x39, 0x41, 0x38,                   /*8d: cmp    %rax,0x38(%rcx) */
0x75, 0x08,                               /*91: jne    9b <op_tailcall+0x9b> */
0x31, 0xd2,                               /*93: xor    %edx,%edx */
0x44, 0x39, 0x61, 0x30,                   /*95: cmp    %r12d,0x30(%rcx) */
0x74, 0x33,                               /*99: je     ce <op_tailcall+0xce> */
0x48, 0x39, 0x41, 0x48,                   /*9b: cmp    %rax,0x48(%rcx) */
0x75, 0x0b,                               /*9f: jne    ac <op_tailcall+0xac> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*a1: mov    $0x1,%edx */
0x44, 0x39, 0x61, 0x40,                   /*a6: cmp    %r12d,0x40(%rcx) */
0x74, 0x22,                               /*aa: je     ce <op_tailcall+0xce> */
0x48, 0x39, 0x41, 0x58,                   /*ac: cmp    %rax,0x58(%rcx) */
0x75, 0x0b,                               /*b0: jne    bd <op_tailcall+0xbd> */
0xba, 0x02, 0x00, 0x00, 0x00,             /*b2: mov    $0x2,%edx */
0x44, 0x39, 0x61, 0x50,                   /*b7: cmp    %r12d,0x50(%rcx) */
0x74, 0x11,                               /*bb: je     ce <op_tailcall+0xce> */
0x48, 0x39, 0x41, 0x68,                   /*bd: cmp    %rax,0x68(%rcx) */
0x75, 0x15,                               /*c1: jne    d8 <op_tailcall+0xd8> */
0xba, 0x03, 0x00, 0x00, 0x00,             /*c3: mov    $0x3,%edx */
0x44, 0x39, 0x61, 0x60,                   /*c8: cmp    %r12d,0x60(%rcx) */
0x75, 0x0a,                               /*cc: jne    d8 <op_tailcall+0xd8> */
0x4c, 0x8b, 0xac, 0xd1, 0x90, 0x00, 0x00, 0x00,/*ce: mov    0x90(%rcx,%rdx,8),%r13 */
0xeb, 0x13,                               /*d6: jmp    eb <op_tailcall+0xeb> */
0x48, 0x8d, 0x34, 0x24,                   /*d8: lea    (%rsp),%rsi */
0x4c, 0x89, 0xf7,                         /*dc: mov    %r14,%rdi */
0x44, 0x89, 0xe2,                         /*df: mov    %r12d,%edx */
0xff, 0x93, 0xb0, 0x00, 0x00, 0x00,       /*e2: callq  *0xb0(%rbx) */
0x49, 0x89, 0xc5,                         /*e8: mov    %rax,%r13 */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*eb: mov    $0xcd0000,%eax */
0x4d, 0x85, 0xed,                         /*f0: test   %r13,%r13 */
0x75, 0x72,                               /*f3: jne    167 <op_tailcall+0x167> */
0x48, 0x8b, 0xb3, 0x80, 0x02, 0x00, 0x00, /*f5: mov    0x280(%rbx),%rsi */
0xba, 0x0e, 0x00, 0x00, 0x00,             /*fc: mov    $0xe,%edx */
0x4c, 0x89, 0xf7,                         /*101: mov    %r14,%rdi */
0xff, 0x93, 0x68, 0x02, 0x00, 0x00,       /*104: callq  *0x268(%rbx) */
0x89, 0xc5,                               /*10a: mov    %eax,%ebp */
0x48, 0x8d, 0x34, 0x24,                   /*10c: lea    (%rsp),%rsi */
0x4c, 0x89, 0xf7,                         /*110: mov    %r14,%rdi */
0x89, 0xea,                               /*113: mov    %ebp,%edx */
0xff, 0x93, 0xd0, 0x00, 0x00, 0x00,       /*115: callq  *0xd0(%rbx) */
0x49, 0x89, 0xc5,                         /*11b: mov    %rax,%r13 */
0x48, 0x8b, 0x43, 0x18,                   /*11e: mov    0x18(%rbx),%rax */
0xb9, 0x02, 0x00, 0x78, 0x01,             /*122: mov    $0x1780002,%ecx */
0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*127: nopw   0x0(%rax,%rax,1) */
0xf2, 0x0f, 0x10, 0x44, 0xc8, 0xf8,       /*130: movsd  -0x8(%rax,%rcx,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0xc8,             /*136: movsd  %xmm0,(%rax,%rcx,8) */
0x48, 0xff, 0xc9,                         /*13b: dec    %rcx */
0x48, 0x81, 0xf9, 0x01, 0x00, 0xab, 0x00, /*13e: cmp    $0xab0001,%rcx */
0x75, 0xe9,                               /*145: jne    130 <op_tailcall+0x130> */
0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf1, 0xff,/*147: movabs $0xfff1400000000000,%rax */
0x4c, 0x09, 0xe0,                         /*151: or     %r12,%rax */
0x48, 0x8b, 0x4b, 0x18,                   /*154: mov    0x18(%rbx),%rcx */
0x48, 0x89, 0x81, 0x08, 0x08, 0xab, 0x00, /*158: mov    %rax,0xab0808(%rcx) */
0xb8, 0x01, 0x00, 0xcd, 0x00,             /*15f: mov    $0xcd0001,%eax */
0x41, 0x89, 0xec,                         /*164: mov    %ebp,%r12d */
0x49, 0x8b, 0x4e, 0x18,                   /*167: mov    0x18(%r14),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*16b: mov    0x20(%rcx),%rcx */
0x44, 0x89, 0x21,                         /*16f: mov    %r12d,(%rcx) */
0x48, 0x8b, 0x14, 0x24,                   /*172: mov    (%rsp),%rdx */
0x48, 0x89, 0x51, 0x48,                   /*176: mov    %rdx,0x48(%rcx) */
0x89, 0x41, 0x40,                         /*17a: mov    %eax,0x40(%rcx) */
0x49, 0x8b, 0x56, 0x18,                   /*17d: mov    0x18(%r14),%rdx */
0x48, 0x8b, 0x52, 0x08,                   /*181: mov    0x8(%rdx),%rdx */
0x48, 0x8b, 0x7b, 0x18,                   /*185: mov    0x18(%rbx),%rdi */
0x48, 0x8d, 0xb7, 0x00, 0x08, 0xab, 0x00, /*189: lea    0xab0800(%rdi),%rsi */
0xff, 0xc0,                               /*190: inc    %eax */
0x48, 0x39, 0xf2,                         /*192: cmp    %rsi,%rdx */
0x76, 0x2f,                               /*195: jbe    1c6 <op_tailcall+0x1c6> */
0x48, 0x8d, 0xac, 0xc7, 0x00, 0x00, 0x58, 0x05,/*197: lea    0x5580000(%rdi,%rax,8),%rbp */
0x48, 0x39, 0xea,                         /*19f: cmp    %rbp,%rdx */
0x73, 0x22,                               /*1a2: jae    1c6 <op_tailcall+0x1c6> */
0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*1a4: data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0xf2, 0x0f, 0x10, 0x84, 0xc7, 0xf8, 0xff, 0x57, 0x05,/*1b0: movsd  0x557fff8(%rdi,%rax,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x44, 0xc2, 0xf8,       /*1b9: movsd  %xmm0,-0x8(%rdx,%rax,8) */
0x48, 0xff, 0xc8,                         /*1bf: dec    %rax */
0x75, 0xec,                               /*1c2: jne    1b0 <op_tailcall+0x1b0> */
0xeb, 0x1f,                               /*1c4: jmp    1e5 <op_tailcall+0x1e5> */
0x48, 0x39, 0xf2,                         /*1c6: cmp    %rsi,%rdx */
0x74, 0x1a,                               /*1c9: je     1e5 <op_tailcall+0x1e5> */
0x48, 0xf7, 0xd8,                         /*1cb: neg    %rax */
0x66, 0x90,                               /*1ce: xchg   %ax,%ax */
0xf2, 0x0f, 0x10, 0x06,                   /*1d0: movsd  (%rsi),%xmm0 */
0x48, 0x83, 0xc6, 0x08,                   /*1d4: add    $0x8,%rsi */
0xf2, 0x0f, 0x11, 0x02,                   /*1d8: movsd  %xmm0,(%rdx) */
0x48, 0x83, 0xc2, 0x08,                   /*1dc: add    $0x8,%rdx */
0x48, 0xff, 0xc0,                         /*1e0: inc    %rax */
0x75, 0xeb,                               /*1e3: jne    1d0 <op_tailcall+0x1d0> */
0x41, 0xf6, 0x45, 0x02, 0x04,             /*1e5: testb  $0x4,0x2(%r13) */
0x74, 0x34,                               /*1ea: je     220 <op_tailcall+0x220> */
0x49, 0x8b, 0x46, 0x18,                   /*1ec: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x68, 0x08,                   /*1f0: mov    0x8(%rax),%rbp */
0x4c, 0x89, 0xf7,                         /*1f4: mov    %r14,%rdi */
0x4c, 0x89, 0xfe,                         /*1f7: mov    %r15,%rsi */
0x41, 0xff, 0x55, 0x18,                   /*1fa: callq  *0x18(%r13) */
0x48, 0x89, 0x45, 0x00,                   /*1fe: mov    %rax,0x0(%rbp) */
0x8b, 0x73, 0x48,                         /*202: mov    0x48(%rbx),%esi */
0x4c, 0x89, 0xf7,                         /*205: mov    %r14,%rdi */
0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*208: callq  *0x110(%rbx) */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*20e: mov    $0xab0000,%esi */
0x31, 0xd2,                               /*213: xor    %edx,%edx */
0x48, 0x89, 0xdf,                         /*215: mov    %rbx,%rdi */
0xff, 0x93, 0x90, 0x00, 0x00, 0x00,       /*218: callq  *0x90(%rbx) */
0xeb, 0x69,                               /*21e: jmp    289 <op_tailcall+0x289> */
0x49, 0x8b, 0x45, 0x18,                   /*220: mov    0x18(%r13),%rax */
0x48, 0x89, 0x43, 0x08,                   /*224: mov    %rax,0x8(%rbx) */
0x48, 0x8b, 0x50, 0x10,                   /*228: mov    0x10(%rax),%rdx */
0x48, 0x89, 0x53, 0x20,                   /*22c: mov    %rdx,0x20(%rbx) */
0x48, 0x8b, 0x50, 0x18,                   /*230: mov    0x18(%rax),%rdx */
0x48, 0x89, 0x53, 0x28,                   /*234: mov    %rdx,0x28(%rbx) */
0x8b, 0x51, 0x40,                         /*238: mov    0x40(%rcx),%edx */
0x0f, 0xb7, 0x70, 0x02,                   /*23b: movzwl 0x2(%rax),%esi */
0x85, 0xd2,                               /*23f: test   %edx,%edx */
0x78, 0x05,                               /*241: js     248 <op_tailcall+0x248> */
0x83, 0xc2, 0x02,                         /*243: add    $0x2,%edx */
0xeb, 0x10,                               /*246: jmp    258 <op_tailcall+0x258> */
0x83, 0xfe, 0x03,                         /*248: cmp    $0x3,%esi */
0xb8, 0x03, 0x00, 0x00, 0x00,             /*24b: mov    $0x3,%eax */
0x0f, 0x42, 0xf0,                         /*250: cmovb  %eax,%esi */
0xba, 0x03, 0x00, 0x00, 0x00,             /*253: mov    $0x3,%edx */
0x4c, 0x89, 0xf7,                         /*258: mov    %r14,%rdi */
0xff, 0x93, 0x48, 0x01, 0x00, 0x00,       /*25b: callq  *0x148(%rbx) */
0x49, 0x8b, 0x46, 0x18,                   /*261: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*265: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x18,                   /*269: mov    %rax,0x18(%rbx) */
0x48, 0x8b, 0x43, 0x08,                   /*26d: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*271: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x10,                   /*275: mov    %rax,0x10(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*279: mov    0x50(%rbx),%rdi */
0x4c, 0x89, 0xee,                         /*27d: mov    %r13,%rsi */
0x48, 0x89, 0xda,                         /*280: mov    %rbx,%rdx */
0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*283: callq  *0x120(%rbx) */
0x48, 0x89, 0xdf,                         /*289: mov    %rbx,%rdi */
0x5b,                                     /*28c: pop    %rbx */
0x41, 0x5c,                               /*28d: pop    %r12 */
0x41, 0x5d,                               /*28f: pop    %r13 */
0x41, 0x5e,                               /*291: pop    %r14 */
0x41, 0x5f,                               /*293: pop    %r15 */
0x5d,                                     /*295: pop    %rbp */
0xe9, 0x00, 0x00, 0x00, 0x00,             /*296: jmpq   29b <op_tailcall+0x29b> */
0x49, 0x8b, 0x86, 0x88, 0x00, 0x00, 0x00, /*29b: mov    0x88(%r14),%rax */
0xe9, 0xdf, 0xfd, 0xff, 0xff,             /*2a2: jmpq   86 <op_tailcall+0x86> */
0x49, 0x8b, 0x86, 0x80, 0x00, 0x00, 0x00, /*2a7: mov    0x80(%r14),%rax */
0xe9, 0xd3, 0xfd, 0xff, 0xff,             /*2ae: jmpq   86 <op_tailcall+0x86> */
0x49, 0x8b, 0x86, 0xa0, 0x00, 0x00, 0x00, /*2b3: mov    0xa0(%r14),%rax */
0xe9, 0xc7, 0xfd, 0xff, 0xff,             /*2ba: jmpq   86 <op_tailcall+0x86> */
0x49, 0x8b, 0x46, 0x40,                   /*2bf: mov    0x40(%r14),%rax */
0xe9, 0xbe, 0xfd, 0xff, 0xff,             /*2c3: jmpq   86 <op_tailcall+0x86> */
0x49, 0x8b, 0x86, 0x98, 0x00, 0x00, 0x00, /*2c8: mov    0x98(%r14),%rax */
0xe9, 0xb2, 0xfd, 0xff, 0xff,             /*2cf: jmpq   86 <op_tailcall+0x86> */

};

static void op_tailcall_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 28)) = b * 4 + 0;
  *((int32_t *)(op + 35)) = a * 8 + 0;
  *((int32_t *)(op + 321)) = a * 1 + 1;
  *((int32_t *)(op + 347)) = a * 8 + 8;
  *((int32_t *)(op + 396)) = a * 8 + 0;
  *((int32_t *)(op + 527)) = a * 1 + 0;
  *((int32_t *)(op + 236)) = c * 1 + 0;
  *((int32_t *)(op + 352)) = c * 1 + 1;
}

static void op_tailcall_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_tailcall_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[1, 0, 14..17]], "a"=>[[8, 0, 191..194]]} */
static uint8_t op_blkpush[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x7e, 0x50,                   /*6: mov    0x50(%r14),%rdi */
0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0xbc, 0x00,/*a: movl   $0xbc0000,0x4(%rsp) */
0x44, 0x8b, 0x4c, 0x24, 0x04,             /*12: mov    0x4(%rsp),%r9d */
0x8b, 0x44, 0x24, 0x04,                   /*17: mov    0x4(%rsp),%eax */
0x44, 0x8b, 0x44, 0x24, 0x04,             /*1b: mov    0x4(%rsp),%r8d */
0x8b, 0x5c, 0x24, 0x04,                   /*20: mov    0x4(%rsp),%ebx */
0x83, 0xe3, 0x0f,                         /*24: and    $0xf,%ebx */
0x74, 0x56,                               /*27: je     7f <op_blkpush+0x7f> */
0x49, 0x8b, 0x4e, 0x50,                   /*29: mov    0x50(%r14),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*2d: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*31: mov    0x20(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*35: mov    0x8(%rcx),%rcx */
0x48, 0x8b, 0x71, 0x28,                   /*39: mov    0x28(%rcx),%rsi */
0x48, 0x85, 0xf6,                         /*3d: test   %rsi,%rsi */
0x0f, 0x94, 0xc1,                         /*40: sete   %cl */
0x83, 0xfb, 0x01,                         /*43: cmp    $0x1,%ebx */
0x74, 0x1b,                               /*46: je     63 <op_blkpush+0x63> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*48: mov    $0x1,%edx */
0x29, 0xda,                               /*4d: sub    %ebx,%edx */
0x90,                                     /*4f: nop */
0xf6, 0xc1, 0x01,                         /*50: test   $0x1,%cl */
0x75, 0x12,                               /*53: jne    67 <op_blkpush+0x67> */
0x48, 0x8b, 0x76, 0x08,                   /*55: mov    0x8(%rsi),%rsi */
0x48, 0x85, 0xf6,                         /*59: test   %rsi,%rsi */
0x0f, 0x94, 0xc1,                         /*5c: sete   %cl */
0xff, 0xc2,                               /*5f: inc    %edx */
0x75, 0xed,                               /*61: jne    50 <op_blkpush+0x50> */
0x84, 0xc9,                               /*63: test   %cl,%cl */
0x74, 0x21,                               /*65: je     88 <op_blkpush+0x88> */
0xbe, 0x02, 0x00, 0x00, 0x00,             /*67: mov    $0x2,%esi */
0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*6c: callq  *0x1a8(%r14) */
0x4c, 0x89, 0xf7,                         /*73: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xb0, 0x01, 0x00, 0x00, /*76: callq  *0x1b0(%r14) */
0xeb, 0x44,                               /*7d: jmp    c3 <op_blkpush+0xc3> */
0x49, 0x8d, 0x4e, 0x18,                   /*7f: lea    0x18(%r14),%rcx */
0x48, 0x89, 0xce,                         /*83: mov    %rcx,%rsi */
0xeb, 0x08,                               /*86: jmp    90 <op_blkpush+0x90> */
0x48, 0x83, 0xc6, 0x18,                   /*88: add    $0x18,%rsi */
0x49, 0x8d, 0x4e, 0x18,                   /*8c: lea    0x18(%r14),%rcx */
0x41, 0xc1, 0xe9, 0x0a,                   /*90: shr    $0xa,%r9d */
0x41, 0x83, 0xe1, 0x3f,                   /*94: and    $0x3f,%r9d */
0xc1, 0xe8, 0x09,                         /*98: shr    $0x9,%eax */
0x83, 0xe0, 0x01,                         /*9b: and    $0x1,%eax */
0x41, 0xc1, 0xe8, 0x04,                   /*9e: shr    $0x4,%r8d */
0x41, 0x83, 0xe0, 0x1f,                   /*a2: and    $0x1f,%r8d */
0x48, 0x8b, 0x16,                         /*a6: mov    (%rsi),%rdx */
0x48, 0x8b, 0x09,                         /*a9: mov    (%rcx),%rcx */
0x44, 0x01, 0xc8,                         /*ac: add    %r9d,%eax */
0x41, 0x8d, 0x44, 0x00, 0x01,             /*af: lea    0x1(%r8,%rax,1),%eax */
0x48, 0x98,                               /*b4: cltq */
0xf2, 0x0f, 0x10, 0x04, 0xc2,             /*b6: movsd  (%rdx,%rax,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x81, 0x00, 0x08, 0xab, 0x00,/*bb: movsd  %xmm0,0xab0800(%rcx) */
0x4c, 0x89, 0xf7,                         /*c3: mov    %r14,%rdi */
0x5b,                                     /*c6: pop    %rbx */
0x41, 0x5e,                               /*c7: pop    %r14 */

};

static void op_blkpush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = b * 1 + 0;
  *((int32_t *)(op + 191)) = a * 8 + 0;
}

static void op_blkpush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_blkpush_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 4, 18..21], [8, 12, 56..59], [8, 0, 113..116], [8, 8, 119..122], [8, 0, 161..164], [8, 8, 168..171], [8, 0, 185..188], [8, 8, 205..208], [8, 0, 213..216], [8, 0, 230..233], [8, 8, 238..241], [8, 0, 261..264], [8, 0, 278..281], [8, 8, 286..289], [8, 0, 294..297], [8, 4, 314..317], [8, 0, 324..327]]} */
static uint8_t op_add[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x49, 0x89, 0xff,                         /*5: mov    %rdi,%r15 */
0x49, 0x8b, 0x5f, 0x18,                   /*8: mov    0x18(%r15),%rbx */
0x4d, 0x8b, 0x77, 0x50,                   /*c: mov    0x50(%r15),%r14 */
0x8b, 0x83, 0x04, 0x08, 0xab, 0x00,       /*10: mov    0xab0804(%rbx),%eax */
0xb9, 0x00, 0x06, 0x00, 0x00,             /*16: mov    $0x600,%ecx */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*1b: cmp    $0xfff00001,%eax */
0x72, 0x14,                               /*20: jb     36 <op_add+0x36> */
0xc1, 0xe8, 0x06,                         /*22: shr    $0x6,%eax */
0x25, 0x00, 0x3f, 0x00, 0x00,             /*25: and    $0x3f00,%eax */
0x05, 0x00, 0xff, 0xff, 0x00,             /*2a: add    $0xffff00,%eax */
0x25, 0x00, 0xff, 0xff, 0x00,             /*2f: and    $0xffff00,%eax */
0x89, 0xc1,                               /*34: mov    %eax,%ecx */
0x8b, 0x93, 0x0c, 0x08, 0xab, 0x00,       /*36: mov    0xab080c(%rbx),%edx */
0xb8, 0x06, 0x00, 0x00, 0x00,             /*3c: mov    $0x6,%eax */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*41: cmp    $0xfff00001,%edx */
0x72, 0x0f,                               /*47: jb     58 <op_add+0x58> */
0xc1, 0xea, 0x0e,                         /*49: shr    $0xe,%edx */
0x83, 0xe2, 0x3f,                         /*4c: and    $0x3f,%edx */
0x81, 0xc2, 0xff, 0x00, 0x00, 0x00,       /*4f: add    $0xff,%edx */
0x0f, 0xb6, 0xc2,                         /*55: movzbl %dl,%eax */
0x09, 0xc8,                               /*58: or     %ecx,%eax */
0x3d, 0x0f, 0x10, 0x00, 0x00,             /*5a: cmp    $0x100f,%eax */
0x7f, 0x32,                               /*5f: jg     93 <op_add+0x93> */
0x3d, 0x02, 0x06, 0x00, 0x00,             /*61: cmp    $0x602,%eax */
0x7f, 0x5a,                               /*66: jg     c2 <op_add+0xc2> */
0x3d, 0x03, 0x03, 0x00, 0x00,             /*68: cmp    $0x303,%eax */
0x75, 0x6c,                               /*6d: jne    db <op_add+0xdb> */
0x8b, 0x83, 0x00, 0x08, 0xab, 0x00,       /*6f: mov    0xab0800(%rbx),%eax */
0x8b, 0x8b, 0x08, 0x08, 0xab, 0x00,       /*75: mov    0xab0808(%rbx),%ecx */
0x89, 0xc2,                               /*7b: mov    %eax,%edx */
0x01, 0xca,                               /*7d: add    %ecx,%edx */
0x0f, 0x81, 0xb3, 0x00, 0x00, 0x00,       /*7f: jno    138 <op_add+0x138> */
0xf2, 0x0f, 0x2a, 0xc8,                   /*85: cvtsi2sd %eax,%xmm1 */
0xf2, 0x0f, 0x2a, 0xc1,                   /*89: cvtsi2sd %ecx,%xmm0 */
0xf2, 0x0f, 0x58, 0xc1,                   /*8d: addsd  %xmm1,%xmm0 */
0xeb, 0x5f,                               /*91: jmp    f2 <op_add+0xf2> */
0x3d, 0x10, 0x10, 0x00, 0x00,             /*93: cmp    $0x1010,%eax */
0x0f, 0x85, 0x8e, 0x00, 0x00, 0x00,       /*98: jne    12c <op_add+0x12c> */
0x48, 0x8b, 0xb3, 0x00, 0x08, 0xab, 0x00, /*9e: mov    0xab0800(%rbx),%rsi */
0x48, 0x8b, 0x93, 0x08, 0x08, 0xab, 0x00, /*a5: mov    0xab0808(%rbx),%rdx */
0x4c, 0x89, 0xf7,                         /*ac: mov    %r14,%rdi */
0x41, 0xff, 0x97, 0x58, 0x01, 0x00, 0x00, /*af: callq  *0x158(%r15) */
0x48, 0x89, 0x83, 0x00, 0x08, 0xab, 0x00, /*b6: mov    %rax,0xab0800(%rbx) */
0xe9, 0x86, 0x00, 0x00, 0x00,             /*bd: jmpq   148 <op_add+0x148> */
0x3d, 0x03, 0x06, 0x00, 0x00,             /*c2: cmp    $0x603,%eax */
0x75, 0x42,                               /*c7: jne    10b <op_add+0x10b> */
0xf2, 0x0f, 0x2a, 0x83, 0x08, 0x08, 0xab, 0x00,/*c9: cvtsi2sdl 0xab0808(%rbx),%xmm0 */
0xf2, 0x0f, 0x58, 0x83, 0x00, 0x08, 0xab, 0x00,/*d1: addsd  0xab0800(%rbx),%xmm0 */
0xeb, 0x47,                               /*d9: jmp    122 <op_add+0x122> */
0x3d, 0x06, 0x03, 0x00, 0x00,             /*db: cmp    $0x306,%eax */
0x75, 0x4a,                               /*e0: jne    12c <op_add+0x12c> */
0xf2, 0x0f, 0x2a, 0x83, 0x00, 0x08, 0xab, 0x00,/*e2: cvtsi2sdl 0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x58, 0x83, 0x08, 0x08, 0xab, 0x00,/*ea: addsd  0xab0808(%rbx),%xmm0 */
0x66, 0x0f, 0x2e, 0xc0,                   /*f2: ucomisd %xmm0,%xmm0 */
0x7b, 0x2a,                               /*f6: jnp    122 <op_add+0x122> */
0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f,/*f8: movabs $0x7ff8000000000000,%rax */
0x48, 0x89, 0x83, 0x00, 0x08, 0xab, 0x00, /*102: mov    %rax,0xab0800(%rbx) */
0xeb, 0x3d,                               /*109: jmp    148 <op_add+0x148> */
0x3d, 0x06, 0x06, 0x00, 0x00,             /*10b: cmp    $0x606,%eax */
0x75, 0x1a,                               /*110: jne    12c <op_add+0x12c> */
0xf2, 0x0f, 0x10, 0x83, 0x00, 0x08, 0xab, 0x00,/*112: movsd  0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x58, 0x83, 0x08, 0x08, 0xab, 0x00,/*11a: addsd  0xab0808(%rbx),%xmm0 */
0xf2, 0x0f, 0x11, 0x83, 0x00, 0x08, 0xab, 0x00,/*122: movsd  %xmm0,0xab0800(%rbx) */
0xeb, 0x1c,                               /*12a: jmp    148 <op_add+0x148> */
0x4c, 0x89, 0xff,                         /*12c: mov    %r15,%rdi */
0x41, 0xff, 0x97, 0x40, 0x02, 0x00, 0x00, /*12f: callq  *0x240(%r15) */
0xeb, 0x1b,                               /*136: jmp    153 <op_add+0x153> */
0xc7, 0x83, 0x04, 0x08, 0xab, 0x00, 0x00, 0x00, 0xf1, 0xff,/*138: movl   $0xfff10000,0xab0804(%rbx) */
0x89, 0x93, 0x00, 0x08, 0xab, 0x00,       /*142: mov    %edx,0xab0800(%rbx) */
0x41, 0x8b, 0x47, 0x48,                   /*148: mov    0x48(%r15),%eax */
0x41, 0x89, 0x86, 0xdc, 0x00, 0x00, 0x00, /*14c: mov    %eax,0xdc(%r14) */
0x4c, 0x89, 0xff,                         /*153: mov    %r15,%rdi */
0x5b,                                     /*156: pop    %rbx */
0x41, 0x5e,                               /*157: pop    %r14 */
0x41, 0x5f,                               /*159: pop    %r15 */

};

static void op_add_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = a * 8 + 4;
  *((int32_t *)(op + 56)) = a * 8 + 12;
  *((int32_t *)(op + 113)) = a * 8 + 0;
  *((int32_t *)(op + 119)) = a * 8 + 8;
  *((int32_t *)(op + 161)) = a * 8 + 0;
  *((int32_t *)(op + 168)) = a * 8 + 8;
  *((int32_t *)(op + 185)) = a * 8 + 0;
  *((int32_t *)(op + 205)) = a * 8 + 8;
  *((int32_t *)(op + 213)) = a * 8 + 0;
  *((int32_t *)(op + 230)) = a * 8 + 0;
  *((int32_t *)(op + 238)) = a * 8 + 8;
  *((int32_t *)(op + 261)) = a * 8 + 0;
  *((int32_t *)(op + 278)) = a * 8 + 0;
  *((int32_t *)(op + 286)) = a * 8 + 8;
  *((int32_t *)(op + 294)) = a * 8 + 0;
  *((int32_t *)(op + 314)) = a * 8 + 4;
  *((int32_t *)(op + 324)) = a * 8 + 0;
}

static void op_add_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_add_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 4, 10..13], [8, 0, 37..40], [8, 0, 53..56], [8, 0, 73..76], [8, 0, 109..112], [8, 12, 117..120], [8, 8, 127..130], [1, 0, 141..144], [8, 4, 169..172], [8, 0, 179..182], [8, 0, 198..201]], "c"=>[[1, 0, 81..84], [1, 0, 131..134]], "b"=>[[1, 0, 146..149]]} */
static uint8_t op_addi[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x8b, 0x88, 0x04, 0x08, 0xab, 0x00,       /*8: mov    0xab0804(%rax),%ecx */
0x81, 0xf9, 0x01, 0x00, 0xf0, 0xff,       /*e: cmp    $0xfff00001,%ecx */
0x72, 0x0b,                               /*14: jb     21 <op_addi+0x21> */
0xc1, 0xe9, 0x0e,                         /*16: shr    $0xe,%ecx */
0x83, 0xe1, 0x3f,                         /*19: and    $0x3f,%ecx */
0x83, 0xf9, 0x07,                         /*1c: cmp    $0x7,%ecx */
0x75, 0x21,                               /*1f: jne    42 <op_addi+0x42> */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*21: movsd  0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*29: addsd  0x0(%rip),%xmm0        # 31 <op_addi+0x31> */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*31: movsd  %xmm0,0xab0800(%rax) */
0x48, 0x89, 0xdf,                         /*39: mov    %rbx,%rdi */
0x5b,                                     /*3c: pop    %rbx */
0xe9, 0x8d, 0x00, 0x00, 0x00,             /*3d: jmpq   cf <op_addi+0xcf> */
0x83, 0xf9, 0x04,                         /*42: cmp    $0x4,%ecx */
0x75, 0x2c,                               /*45: jne    73 <op_addi+0x73> */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*47: mov    0xab0800(%rax),%ecx */
0x89, 0xca,                               /*4d: mov    %ecx,%edx */
0x81, 0xc2, 0x00, 0x00, 0xcd, 0x00,       /*4f: add    $0xcd0000,%edx */
0x71, 0x50,                               /*55: jno    a7 <op_addi+0xa7> */
0xf2, 0x0f, 0x2a, 0xc1,                   /*57: cvtsi2sd %ecx,%xmm0 */
0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*5b: addsd  0x0(%rip),%xmm0        # 63 <op_addi+0x63> */
0x66, 0x0f, 0x2e, 0xc0,                   /*63: ucomisd %xmm0,%xmm0 */
0x7a, 0x50,                               /*67: jp     b9 <op_addi+0xb9> */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*69: movsd  %xmm0,0xab0800(%rax) */
0xeb, 0xc6,                               /*71: jmp    39 <op_addi+0x39> */
0xc7, 0x80, 0x0c, 0x08, 0xab, 0x00, 0x00, 0x00, 0xf1, 0xff,/*73: movl   $0xfff10000,0xab080c(%rax) */
0xc7, 0x80, 0x08, 0x08, 0xab, 0x00, 0x00, 0x00, 0xcd, 0x00,/*7d: movl   $0xcd0000,0xab0808(%rax) */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*87: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*8c: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*91: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x01, 0x00, 0x00, 0x00,       /*96: mov    $0x1,%r8d */
0x48, 0x89, 0xdf,                         /*9c: mov    %rbx,%rdi */
0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*9f: callq  *0x1e0(%rbx) */
0xeb, 0x92,                               /*a5: jmp    39 <op_addi+0x39> */
0xc7, 0x80, 0x04, 0x08, 0xab, 0x00, 0x00, 0x00, 0xf1, 0xff,/*a7: movl   $0xfff10000,0xab0804(%rax) */
0x89, 0x90, 0x00, 0x08, 0xab, 0x00,       /*b1: mov    %edx,0xab0800(%rax) */
0xeb, 0x80,                               /*b7: jmp    39 <op_addi+0x39> */
0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f,/*b9: movabs $0x7ff8000000000000,%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*c3: mov    %rcx,0xab0800(%rax) */
0xe9, 0x6a, 0xff, 0xff, 0xff,             /*ca: jmpq   39 <op_addi+0x39> */

};

static void op_addi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 8 + 4;
  *((int32_t *)(op + 37)) = a * 8 + 0;
  *((int32_t *)(op + 53)) = a * 8 + 0;
  *((int32_t *)(op + 73)) = a * 8 + 0;
  *((int32_t *)(op + 109)) = a * 8 + 0;
  *((int32_t *)(op + 117)) = a * 8 + 12;
  *((int32_t *)(op + 127)) = a * 8 + 8;
  *((int32_t *)(op + 141)) = a * 1 + 0;
  *((int32_t *)(op + 169)) = a * 8 + 4;
  *((int32_t *)(op + 179)) = a * 8 + 0;
  *((int32_t *)(op + 198)) = a * 8 + 0;
  *((int32_t *)(op + 81)) = c * 1 + 0;
  *((int32_t *)(op + 131)) = c * 1 + 0;
  *((int32_t *)(op + 146)) = b * 1 + 0;
}

static void op_addi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_addi_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 4, 10..13], [8, 12, 52..55], [8, 0, 105..108], [8, 8, 111..114], [8, 0, 151..154], [8, 0, 172..175], [8, 8, 180..183], [8, 0, 192..195], [8, 0, 210..213], [8, 8, 218..221], [8, 0, 232..235], [8, 0, 250..253], [8, 8, 258..261], [8, 0, 266..269], [8, 4, 285..288], [8, 0, 295..298], [8, 0, 314..317]]} */
static uint8_t op_sub[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x8b, 0x90, 0x04, 0x08, 0xab, 0x00,       /*8: mov    0xab0804(%rax),%edx */
0xb9, 0x00, 0x06, 0x00, 0x00,             /*e: mov    $0x600,%ecx */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*13: cmp    $0xfff00001,%edx */
0x72, 0x17,                               /*19: jb     32 <op_sub+0x32> */
0xc1, 0xea, 0x06,                         /*1b: shr    $0x6,%edx */
0x81, 0xe2, 0x00, 0x3f, 0x00, 0x00,       /*1e: and    $0x3f00,%edx */
0x81, 0xc2, 0x00, 0xff, 0xff, 0x00,       /*24: add    $0xffff00,%edx */
0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*2a: and    $0xffff00,%edx */
0x89, 0xd1,                               /*30: mov    %edx,%ecx */
0x8b, 0xb0, 0x0c, 0x08, 0xab, 0x00,       /*32: mov    0xab080c(%rax),%esi */
0xba, 0x06, 0x00, 0x00, 0x00,             /*38: mov    $0x6,%edx */
0x81, 0xfe, 0x01, 0x00, 0xf0, 0xff,       /*3d: cmp    $0xfff00001,%esi */
0x72, 0x10,                               /*43: jb     55 <op_sub+0x55> */
0xc1, 0xee, 0x0e,                         /*45: shr    $0xe,%esi */
0x83, 0xe6, 0x3f,                         /*48: and    $0x3f,%esi */
0x81, 0xc6, 0xff, 0x00, 0x00, 0x00,       /*4b: add    $0xff,%esi */
0x40, 0x0f, 0xb6, 0xd6,                   /*51: movzbl %sil,%edx */
0x09, 0xca,                               /*55: or     %ecx,%edx */
0x81, 0xfa, 0x02, 0x06, 0x00, 0x00,       /*57: cmp    $0x602,%edx */
0x7f, 0x41,                               /*5d: jg     a0 <op_sub+0xa0> */
0x81, 0xfa, 0x03, 0x03, 0x00, 0x00,       /*5f: cmp    $0x303,%edx */
0x75, 0x5f,                               /*65: jne    c6 <op_sub+0xc6> */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*67: mov    0xab0800(%rax),%ecx */
0x8b, 0x90, 0x08, 0x08, 0xab, 0x00,       /*6d: mov    0xab0808(%rax),%edx */
0x89, 0xce,                               /*73: mov    %ecx,%esi */
0x29, 0xd6,                               /*75: sub    %edx,%esi */
0x0f, 0x81, 0x9e, 0x00, 0x00, 0x00,       /*77: jno    11b <op_sub+0x11b> */
0xf2, 0x0f, 0x2a, 0xc1,                   /*7d: cvtsi2sd %ecx,%xmm0 */
0xf2, 0x0f, 0x2a, 0xca,                   /*81: cvtsi2sd %edx,%xmm1 */
0xf2, 0x0f, 0x5c, 0xc1,                   /*85: subsd  %xmm1,%xmm0 */
0x66, 0x0f, 0x2e, 0xc0,                   /*89: ucomisd %xmm0,%xmm0 */
0x0f, 0x8a, 0x9a, 0x00, 0x00, 0x00,       /*8d: jp     12d <op_sub+0x12d> */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*93: movsd  %xmm0,0xab0800(%rax) */
0xe9, 0x9e, 0x00, 0x00, 0x00,             /*9b: jmpq   13e <op_sub+0x13e> */
0x81, 0xfa, 0x03, 0x06, 0x00, 0x00,       /*a0: cmp    $0x603,%edx */
0x75, 0x46,                               /*a6: jne    ee <op_sub+0xee> */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*a8: movsd  0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x2a, 0x88, 0x08, 0x08, 0xab, 0x00,/*b0: cvtsi2sdl 0xab0808(%rax),%xmm1 */
0xf2, 0x0f, 0x5c, 0xc1,                   /*b8: subsd  %xmm1,%xmm0 */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*bc: movsd  %xmm0,0xab0800(%rax) */
0xeb, 0x78,                               /*c4: jmp    13e <op_sub+0x13e> */
0x81, 0xfa, 0x06, 0x03, 0x00, 0x00,       /*c6: cmp    $0x306,%edx */
0x75, 0x42,                               /*cc: jne    110 <op_sub+0x110> */
0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x08, 0xab, 0x00,/*ce: cvtsi2sdl 0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x5c, 0x80, 0x08, 0x08, 0xab, 0x00,/*d6: subsd  0xab0808(%rax),%xmm0 */
0x66, 0x0f, 0x2e, 0xc0,                   /*de: ucomisd %xmm0,%xmm0 */
0x7a, 0x49,                               /*e2: jp     12d <op_sub+0x12d> */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*e4: movsd  %xmm0,0xab0800(%rax) */
0xeb, 0x50,                               /*ec: jmp    13e <op_sub+0x13e> */
0x81, 0xfa, 0x06, 0x06, 0x00, 0x00,       /*ee: cmp    $0x606,%edx */
0x75, 0x1a,                               /*f4: jne    110 <op_sub+0x110> */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*f6: movsd  0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x5c, 0x80, 0x08, 0x08, 0xab, 0x00,/*fe: subsd  0xab0808(%rax),%xmm0 */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*106: movsd  %xmm0,0xab0800(%rax) */
0xeb, 0x2e,                               /*10e: jmp    13e <op_sub+0x13e> */
0x48, 0x89, 0xdf,                         /*110: mov    %rbx,%rdi */
0xff, 0x93, 0x40, 0x02, 0x00, 0x00,       /*113: callq  *0x240(%rbx) */
0xeb, 0x23,                               /*119: jmp    13e <op_sub+0x13e> */
0xc7, 0x80, 0x04, 0x08, 0xab, 0x00, 0x00, 0x00, 0xf1, 0xff,/*11b: movl   $0xfff10000,0xab0804(%rax) */
0x89, 0xb0, 0x00, 0x08, 0xab, 0x00,       /*125: mov    %esi,0xab0800(%rax) */
0xeb, 0x11,                               /*12b: jmp    13e <op_sub+0x13e> */
0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f,/*12d: movabs $0x7ff8000000000000,%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*137: mov    %rcx,0xab0800(%rax) */
0x48, 0x89, 0xdf,                         /*13e: mov    %rbx,%rdi */
0x5b,                                     /*141: pop    %rbx */

};

static void op_sub_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 8 + 4;
  *((int32_t *)(op + 52)) = a * 8 + 12;
  *((int32_t *)(op + 105)) = a * 8 + 0;
  *((int32_t *)(op + 111)) = a * 8 + 8;
  *((int32_t *)(op + 151)) = a * 8 + 0;
  *((int32_t *)(op + 172)) = a * 8 + 0;
  *((int32_t *)(op + 180)) = a * 8 + 8;
  *((int32_t *)(op + 192)) = a * 8 + 0;
  *((int32_t *)(op + 210)) = a * 8 + 0;
  *((int32_t *)(op + 218)) = a * 8 + 8;
  *((int32_t *)(op + 232)) = a * 8 + 0;
  *((int32_t *)(op + 250)) = a * 8 + 0;
  *((int32_t *)(op + 258)) = a * 8 + 8;
  *((int32_t *)(op + 266)) = a * 8 + 0;
  *((int32_t *)(op + 285)) = a * 8 + 4;
  *((int32_t *)(op + 295)) = a * 8 + 0;
  *((int32_t *)(op + 314)) = a * 8 + 0;
}

static void op_sub_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sub_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 4, 10..13], [8, 0, 37..40], [8, 0, 53..56], [8, 0, 73..76], [8, 0, 109..112], [8, 12, 117..120], [8, 8, 127..130], [1, 0, 141..144], [8, 4, 169..172], [8, 0, 179..182], [8, 0, 198..201]], "c"=>[[1, 0, 81..84], [1, 0, 131..134]], "b"=>[[1, 0, 146..149]]} */
static uint8_t op_subi[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x8b, 0x88, 0x04, 0x08, 0xab, 0x00,       /*8: mov    0xab0804(%rax),%ecx */
0x81, 0xf9, 0x01, 0x00, 0xf0, 0xff,       /*e: cmp    $0xfff00001,%ecx */
0x72, 0x0b,                               /*14: jb     21 <op_subi+0x21> */
0xc1, 0xe9, 0x0e,                         /*16: shr    $0xe,%ecx */
0x83, 0xe1, 0x3f,                         /*19: and    $0x3f,%ecx */
0x83, 0xf9, 0x07,                         /*1c: cmp    $0x7,%ecx */
0x75, 0x21,                               /*1f: jne    42 <op_subi+0x42> */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*21: movsd  0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*29: addsd  0x0(%rip),%xmm0        # 31 <op_subi+0x31> */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*31: movsd  %xmm0,0xab0800(%rax) */
0x48, 0x89, 0xdf,                         /*39: mov    %rbx,%rdi */
0x5b,                                     /*3c: pop    %rbx */
0xe9, 0x8d, 0x00, 0x00, 0x00,             /*3d: jmpq   cf <op_subi+0xcf> */
0x83, 0xf9, 0x04,                         /*42: cmp    $0x4,%ecx */
0x75, 0x2c,                               /*45: jne    73 <op_subi+0x73> */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*47: mov    0xab0800(%rax),%ecx */
0x89, 0xca,                               /*4d: mov    %ecx,%edx */
0x81, 0xea, 0x00, 0x00, 0xcd, 0x00,       /*4f: sub    $0xcd0000,%edx */
0x71, 0x50,                               /*55: jno    a7 <op_subi+0xa7> */
0xf2, 0x0f, 0x2a, 0xc1,                   /*57: cvtsi2sd %ecx,%xmm0 */
0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*5b: addsd  0x0(%rip),%xmm0        # 63 <op_subi+0x63> */
0x66, 0x0f, 0x2e, 0xc0,                   /*63: ucomisd %xmm0,%xmm0 */
0x7a, 0x50,                               /*67: jp     b9 <op_subi+0xb9> */
0xf2, 0x0f, 0x11, 0x80, 0x00, 0x08, 0xab, 0x00,/*69: movsd  %xmm0,0xab0800(%rax) */
0xeb, 0xc6,                               /*71: jmp    39 <op_subi+0x39> */
0xc7, 0x80, 0x0c, 0x08, 0xab, 0x00, 0x00, 0x00, 0xf1, 0xff,/*73: movl   $0xfff10000,0xab080c(%rax) */
0xc7, 0x80, 0x08, 0x08, 0xab, 0x00, 0x00, 0x00, 0xcd, 0x00,/*7d: movl   $0xcd0000,0xab0808(%rax) */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*87: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*8c: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*91: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x01, 0x00, 0x00, 0x00,       /*96: mov    $0x1,%r8d */
0x48, 0x89, 0xdf,                         /*9c: mov    %rbx,%rdi */
0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*9f: callq  *0x1e0(%rbx) */
0xeb, 0x92,                               /*a5: jmp    39 <op_subi+0x39> */
0xc7, 0x80, 0x04, 0x08, 0xab, 0x00, 0x00, 0x00, 0xf1, 0xff,/*a7: movl   $0xfff10000,0xab0804(%rax) */
0x89, 0x90, 0x00, 0x08, 0xab, 0x00,       /*b1: mov    %edx,0xab0800(%rax) */
0xeb, 0x80,                               /*b7: jmp    39 <op_subi+0x39> */
0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f,/*b9: movabs $0x7ff8000000000000,%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*c3: mov    %rcx,0xab0800(%rax) */
0xe9, 0x6a, 0xff, 0xff, 0xff,             /*ca: jmpq   39 <op_subi+0x39> */

};

static void op_subi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 8 + 4;
  *((int32_t *)(op + 37)) = a * 8 + 0;
  *((int32_t *)(op + 53)) = a * 8 + 0;
  *((int32_t *)(op + 73)) = a * 8 + 0;
  *((int32_t *)(op + 109)) = a * 8 + 0;
  *((int32_t *)(op + 117)) = a * 8 + 12;
  *((int32_t *)(op + 127)) = a * 8 + 8;
  *((int32_t *)(op + 141)) = a * 1 + 0;
  *((int32_t *)(op + 169)) = a * 8 + 4;
  *((int32_t *)(op + 179)) = a * 8 + 0;
  *((int32_t *)(op + 198)) = a * 8 + 0;
  *((int32_t *)(op + 81)) = c * 1 + 0;
  *((int32_t *)(op + 131)) = c * 1 + 0;
  *((int32_t *)(op + 146)) = b * 1 + 0;
}

static void op_subi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_subi_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 4, 16..19], [8, 12, 58..61], [8, 0, 111..114], [8, 8, 118..121], [8, 8, 192..195], [8, 0, 200..203], [8, 0, 208..211], [8, 0, 226..229], [8, 8, 234..237], [8, 0, 248..251], [8, 0, 266..269], [8, 8, 274..277], [8, 0, 282..285], [8, 0, 313..316], [8, 4, 332..335], [8, 0, 342..345]]} */
static uint8_t op_mul[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
0x49, 0x8b, 0x7e, 0x50,                   /*a: mov    0x50(%r14),%rdi */
0x8b, 0x8b, 0x04, 0x08, 0xab, 0x00,       /*e: mov    0xab0804(%rbx),%ecx */
0xb8, 0x00, 0x06, 0x00, 0x00,             /*14: mov    $0x600,%eax */
0x81, 0xf9, 0x01, 0x00, 0xf0, 0xff,       /*19: cmp    $0xfff00001,%ecx */
0x72, 0x17,                               /*1f: jb     38 <op_mul+0x38> */
0xc1, 0xe9, 0x06,                         /*21: shr    $0x6,%ecx */
0x81, 0xe1, 0x00, 0x3f, 0x00, 0x00,       /*24: and    $0x3f00,%ecx */
0x81, 0xc1, 0x00, 0xff, 0xff, 0x00,       /*2a: add    $0xffff00,%ecx */
0x81, 0xe1, 0x00, 0xff, 0xff, 0x00,       /*30: and    $0xffff00,%ecx */
0x89, 0xc8,                               /*36: mov    %ecx,%eax */
0x8b, 0x93, 0x0c, 0x08, 0xab, 0x00,       /*38: mov    0xab080c(%rbx),%edx */
0xb9, 0x06, 0x00, 0x00, 0x00,             /*3e: mov    $0x6,%ecx */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*43: cmp    $0xfff00001,%edx */
0x72, 0x0f,                               /*49: jb     5a <op_mul+0x5a> */
0xc1, 0xea, 0x0e,                         /*4b: shr    $0xe,%edx */
0x83, 0xe2, 0x3f,                         /*4e: and    $0x3f,%edx */
0x81, 0xc2, 0xff, 0x00, 0x00, 0x00,       /*51: add    $0xff,%edx */
0x0f, 0xb6, 0xca,                         /*57: movzbl %dl,%ecx */
0x09, 0xc1,                               /*5a: or     %eax,%ecx */
0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*5c: cmp    $0x602,%ecx */
0x7f, 0x50,                               /*62: jg     b4 <op_mul+0xb4> */
0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*64: cmp    $0x303,%ecx */
0x75, 0x6a,                               /*6a: jne    d6 <op_mul+0xd6> */
0x48, 0x8b, 0xb3, 0x00, 0x08, 0xab, 0x00, /*6c: mov    0xab0800(%rbx),%rsi */
0x48, 0x8b, 0x93, 0x08, 0x08, 0xab, 0x00, /*73: mov    0xab0808(%rbx),%rdx */
0x41, 0xff, 0x96, 0x50, 0x02, 0x00, 0x00, /*7a: callq  *0x250(%r14) */
0x48, 0x89, 0xc1,                         /*81: mov    %rax,%rcx */
0x48, 0xc1, 0xe9, 0x20,                   /*84: shr    $0x20,%rcx */
0x81, 0xf9, 0x01, 0x00, 0xf0, 0xff,       /*88: cmp    $0xfff00001,%ecx */
0x72, 0x13,                               /*8e: jb     a3 <op_mul+0xa3> */
0x48, 0x89, 0xc1,                         /*90: mov    %rax,%rcx */
0x48, 0xc1, 0xe9, 0x2e,                   /*93: shr    $0x2e,%rcx */
0x83, 0xe1, 0x3f,                         /*97: and    $0x3f,%ecx */
0x83, 0xf9, 0x07,                         /*9a: cmp    $0x7,%ecx */
0x0f, 0x85, 0xa2, 0x00, 0x00, 0x00,       /*9d: jne    145 <op_mul+0x145> */
0x66, 0x48, 0x0f, 0x6e, 0xc0,             /*a3: movq   %rax,%xmm0 */
0x66, 0x0f, 0x2e, 0xc0,                   /*a8: ucomisd %xmm0,%xmm0 */
0x0f, 0x8b, 0x84, 0x00, 0x00, 0x00,       /*ac: jnp    136 <op_mul+0x136> */
0xeb, 0x78,                               /*b2: jmp    12c <op_mul+0x12c> */
0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*b4: cmp    $0x603,%ecx */
0x75, 0x42,                               /*ba: jne    fe <op_mul+0xfe> */
0xf2, 0x0f, 0x2a, 0x83, 0x08, 0x08, 0xab, 0x00,/*bc: cvtsi2sdl 0xab0808(%rbx),%xmm0 */
0xf2, 0x0f, 0x59, 0x83, 0x00, 0x08, 0xab, 0x00,/*c4: mulsd  0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x11, 0x83, 0x00, 0x08, 0xab, 0x00,/*cc: movsd  %xmm0,0xab0800(%rbx) */
0xeb, 0x67,                               /*d4: jmp    13d <op_mul+0x13d> */
0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*d6: cmp    $0x306,%ecx */
0x75, 0x42,                               /*dc: jne    120 <op_mul+0x120> */
0xf2, 0x0f, 0x2a, 0x83, 0x00, 0x08, 0xab, 0x00,/*de: cvtsi2sdl 0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x59, 0x83, 0x08, 0x08, 0xab, 0x00,/*e6: mulsd  0xab0808(%rbx),%xmm0 */
0x66, 0x0f, 0x2e, 0xc0,                   /*ee: ucomisd %xmm0,%xmm0 */
0x7a, 0x38,                               /*f2: jp     12c <op_mul+0x12c> */
0xf2, 0x0f, 0x11, 0x83, 0x00, 0x08, 0xab, 0x00,/*f4: movsd  %xmm0,0xab0800(%rbx) */
0xeb, 0x3f,                               /*fc: jmp    13d <op_mul+0x13d> */
0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*fe: cmp    $0x606,%ecx */
0x75, 0x1a,                               /*104: jne    120 <op_mul+0x120> */
0xf2, 0x0f, 0x10, 0x83, 0x00, 0x08, 0xab, 0x00,/*106: movsd  0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x59, 0x83, 0x08, 0x08, 0xab, 0x00,/*10e: mulsd  0xab0808(%rbx),%xmm0 */
0xf2, 0x0f, 0x11, 0x83, 0x00, 0x08, 0xab, 0x00,/*116: movsd  %xmm0,0xab0800(%rbx) */
0xeb, 0x1d,                               /*11e: jmp    13d <op_mul+0x13d> */
0x4c, 0x89, 0xf7,                         /*120: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0x40, 0x02, 0x00, 0x00, /*123: callq  *0x240(%r14) */
0xeb, 0x11,                               /*12a: jmp    13d <op_mul+0x13d> */
0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f,/*12c: movabs $0x7ff8000000000000,%rax */
0x48, 0x89, 0x83, 0x00, 0x08, 0xab, 0x00, /*136: mov    %rax,0xab0800(%rbx) */
0x4c, 0x89, 0xf7,                         /*13d: mov    %r14,%rdi */
0x5b,                                     /*140: pop    %rbx */
0x41, 0x5e,                               /*141: pop    %r14 */
0xeb, 0x17,                               /*143: jmp    15c <op_mul+0x15c> */
0x83, 0xf9, 0x04,                         /*145: cmp    $0x4,%ecx */
0x75, 0xf3,                               /*148: jne    13d <op_mul+0x13d> */
0xc7, 0x83, 0x04, 0x08, 0xab, 0x00, 0x00, 0x00, 0xf1, 0xff,/*14a: movl   $0xfff10000,0xab0804(%rbx) */
0x89, 0x83, 0x00, 0x08, 0xab, 0x00,       /*154: mov    %eax,0xab0800(%rbx) */
0xeb, 0xe1,                               /*15a: jmp    13d <op_mul+0x13d> */

};

static void op_mul_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 16)) = a * 8 + 4;
  *((int32_t *)(op + 58)) = a * 8 + 12;
  *((int32_t *)(op + 111)) = a * 8 + 0;
  *((int32_t *)(op + 118)) = a * 8 + 8;
  *((int32_t *)(op + 192)) = a * 8 + 8;
  *((int32_t *)(op + 200)) = a * 8 + 0;
  *((int32_t *)(op + 208)) = a * 8 + 0;
  *((int32_t *)(op + 226)) = a * 8 + 0;
  *((int32_t *)(op + 234)) = a * 8 + 8;
  *((int32_t *)(op + 248)) = a * 8 + 0;
  *((int32_t *)(op + 266)) = a * 8 + 0;
  *((int32_t *)(op + 274)) = a * 8 + 8;
  *((int32_t *)(op + 282)) = a * 8 + 0;
  *((int32_t *)(op + 313)) = a * 8 + 0;
  *((int32_t *)(op + 332)) = a * 8 + 4;
  *((int32_t *)(op + 342)) = a * 8 + 0;
}

static void op_mul_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_mul_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 4, 12..15], [8, 12, 54..57], [8, 0, 108..111], [8, 8, 116..119], [8, 0, 138..141], [8, 8, 146..149], [8, 0, 172..175], [8, 8, 180..183], [8, 0, 203..206], [8, 0, 221..224], [8, 8, 229..232], [8, 0, 237..240], [8, 0, 245..248], [8, 0, 296..299]]} */
static uint8_t op_div[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
0x8b, 0x8b, 0x04, 0x08, 0xab, 0x00,       /*a: mov    0xab0804(%rbx),%ecx */
0xb8, 0x00, 0x06, 0x00, 0x00,             /*10: mov    $0x600,%eax */
0x81, 0xf9, 0x01, 0x00, 0xf0, 0xff,       /*15: cmp    $0xfff00001,%ecx */
0x72, 0x17,                               /*1b: jb     34 <op_div+0x34> */
0xc1, 0xe9, 0x06,                         /*1d: shr    $0x6,%ecx */
0x81, 0xe1, 0x00, 0x3f, 0x00, 0x00,       /*20: and    $0x3f00,%ecx */
0x81, 0xc1, 0x00, 0xff, 0xff, 0x00,       /*26: add    $0xffff00,%ecx */
0x81, 0xe1, 0x00, 0xff, 0xff, 0x00,       /*2c: and    $0xffff00,%ecx */
0x89, 0xc8,                               /*32: mov    %ecx,%eax */
0x8b, 0x93, 0x0c, 0x08, 0xab, 0x00,       /*34: mov    0xab080c(%rbx),%edx */
0xb9, 0x06, 0x00, 0x00, 0x00,             /*3a: mov    $0x6,%ecx */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*3f: cmp    $0xfff00001,%edx */
0x72, 0x0f,                               /*45: jb     56 <op_div+0x56> */
0xc1, 0xea, 0x0e,                         /*47: shr    $0xe,%edx */
0x83, 0xe2, 0x3f,                         /*4a: and    $0x3f,%edx */
0x81, 0xc2, 0xff, 0x00, 0x00, 0x00,       /*4d: add    $0xff,%edx */
0x0f, 0xb6, 0xca,                         /*53: movzbl %dl,%ecx */
0x09, 0xc1,                               /*56: or     %eax,%ecx */
0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*58: cmp    $0x602,%ecx */
0x7f, 0x1e,                               /*5e: jg     7e <op_div+0x7e> */
0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*60: cmp    $0x303,%ecx */
0x75, 0x34,                               /*66: jne    9c <op_div+0x9c> */
0xf2, 0x0f, 0x2a, 0x83, 0x00, 0x08, 0xab, 0x00,/*68: cvtsi2sdl 0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x2a, 0x8b, 0x08, 0x08, 0xab, 0x00,/*70: cvtsi2sdl 0xab0808(%rbx),%xmm1 */
0xf2, 0x0f, 0x5e, 0xc1,                   /*78: divsd  %xmm1,%xmm0 */
0xeb, 0x3a,                               /*7c: jmp    b8 <op_div+0xb8> */
0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*7e: cmp    $0x603,%ecx */
0x75, 0x4b,                               /*84: jne    d1 <op_div+0xd1> */
0xf2, 0x0f, 0x10, 0x83, 0x00, 0x08, 0xab, 0x00,/*86: movsd  0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x2a, 0x8b, 0x08, 0x08, 0xab, 0x00,/*8e: cvtsi2sdl 0xab0808(%rbx),%xmm1 */
0xf2, 0x0f, 0x5e, 0xc1,                   /*96: divsd  %xmm1,%xmm0 */
0xeb, 0x4d,                               /*9a: jmp    e9 <op_div+0xe9> */
0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*9c: cmp    $0x306,%ecx */
0x0f, 0x85, 0x86, 0x00, 0x00, 0x00,       /*a2: jne    12e <op_div+0x12e> */
0xf2, 0x0f, 0x2a, 0x83, 0x00, 0x08, 0xab, 0x00,/*a8: cvtsi2sdl 0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x5e, 0x83, 0x08, 0x08, 0xab, 0x00,/*b0: divsd  0xab0808(%rbx),%xmm0 */
0x66, 0x0f, 0x2e, 0xc0,                   /*b8: ucomisd %xmm0,%xmm0 */
0x7b, 0x2b,                               /*bc: jnp    e9 <op_div+0xe9> */
0x48, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f,/*be: movabs $0x7ff8000000000000,%rax */
0x48, 0x89, 0x83, 0x00, 0x08, 0xab, 0x00, /*c8: mov    %rax,0xab0800(%rbx) */
0xeb, 0x20,                               /*cf: jmp    f1 <op_div+0xf1> */
0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*d1: cmp    $0x606,%ecx */
0x75, 0x55,                               /*d7: jne    12e <op_div+0x12e> */
0xf2, 0x0f, 0x10, 0x83, 0x00, 0x08, 0xab, 0x00,/*d9: movsd  0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x5e, 0x83, 0x08, 0x08, 0xab, 0x00,/*e1: divsd  0xab0808(%rbx),%xmm0 */
0xf2, 0x0f, 0x11, 0x83, 0x00, 0x08, 0xab, 0x00,/*e9: movsd  %xmm0,0xab0800(%rbx) */
0xf2, 0x0f, 0x10, 0x83, 0x00, 0x08, 0xab, 0x00,/*f1: movsd  0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0x11, 0x04, 0x24,             /*f9: movsd  %xmm0,(%rsp) */
0x41, 0xff, 0x96, 0x40, 0x01, 0x00, 0x00, /*fe: callq  *0x140(%r14) */
0x85, 0xc0,                               /*105: test   %eax,%eax */
0x74, 0x2f,                               /*107: je     138 <op_div+0x138> */
0xf2, 0x0f, 0x10, 0x04, 0x24,             /*109: movsd  (%rsp),%xmm0 */
0x66, 0x0f, 0x2e, 0xc0,                   /*10e: ucomisd %xmm0,%xmm0 */
0x66, 0x48, 0x0f, 0x7e, 0xc0,             /*112: movq   %xmm0,%rax */
0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f,/*117: movabs $0x7ff8000000000000,%rcx */
0x48, 0x0f, 0x4b, 0xc8,                   /*121: cmovnp %rax,%rcx */
0x48, 0x89, 0x8b, 0x00, 0x08, 0xab, 0x00, /*125: mov    %rcx,0xab0800(%rbx) */
0xeb, 0x0a,                               /*12c: jmp    138 <op_div+0x138> */
0x4c, 0x89, 0xf7,                         /*12e: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0x40, 0x02, 0x00, 0x00, /*131: callq  *0x240(%r14) */
0x4c, 0x89, 0xf7,                         /*138: mov    %r14,%rdi */
0x5b,                                     /*13b: pop    %rbx */
0x41, 0x5e,                               /*13c: pop    %r14 */

};

static void op_div_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 12)) = a * 8 + 4;
  *((int32_t *)(op + 54)) = a * 8 + 12;
  *((int32_t *)(op + 108)) = a * 8 + 0;
  *((int32_t *)(op + 116)) = a * 8 + 8;
  *((int32_t *)(op + 138)) = a * 8 + 0;
  *((int32_t *)(op + 146)) = a * 8 + 8;
  *((int32_t *)(op + 172)) = a * 8 + 0;
  *((int32_t *)(op + 180)) = a * 8 + 8;
  *((int32_t *)(op + 203)) = a * 8 + 0;
  *((int32_t *)(op + 221)) = a * 8 + 0;
  *((int32_t *)(op + 229)) = a * 8 + 8;
  *((int32_t *)(op + 237)) = a * 8 + 0;
  *((int32_t *)(op + 245)) = a * 8 + 0;
  *((int32_t *)(op + 296)) = a * 8 + 0;
}

static void op_div_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_div_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 17..20], [8, 8, 24..27], [8, 4, 45..48], [8, 12, 87..90], [8, 0, 139..142], [8, 8, 145..148], [8, 8, 169..172], [8, 0, 177..180], [8, 0, 196..199], [8, 0, 214..217], [8, 8, 222..225], [8, 0, 252..255], [1, 0, 282..285]], "b"=>[[1, 0, 287..290]], "c"=>[[1, 0, 293..296]]} */
static uint8_t op_eq[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
0x49, 0x8b, 0x7e, 0x50,                   /*a: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0xb3, 0x00, 0x08, 0xab, 0x00, /*e: mov    0xab0800(%rbx),%rsi */
0x48, 0x8b, 0x93, 0x08, 0x08, 0xab, 0x00, /*15: mov    0xab0808(%rbx),%rdx */
0x41, 0xff, 0x96, 0xa8, 0x00, 0x00, 0x00, /*1c: callq  *0xa8(%r14) */
0x84, 0xc0,                               /*23: test   %al,%al */
0x0f, 0x85, 0xc4, 0x00, 0x00, 0x00,       /*25: jne    ef <op_eq+0xef> */
0x8b, 0x8b, 0x04, 0x08, 0xab, 0x00,       /*2b: mov    0xab0804(%rbx),%ecx */
0xb8, 0x00, 0x06, 0x00, 0x00,             /*31: mov    $0x600,%eax */
0x81, 0xf9, 0x01, 0x00, 0xf0, 0xff,       /*36: cmp    $0xfff00001,%ecx */
0x72, 0x17,                               /*3c: jb     55 <op_eq+0x55> */
0xc1, 0xe9, 0x06,                         /*3e: shr    $0x6,%ecx */
0x81, 0xe1, 0x00, 0x3f, 0x00, 0x00,       /*41: and    $0x3f00,%ecx */
0x81, 0xc1, 0x00, 0xff, 0xff, 0x00,       /*47: add    $0xffff00,%ecx */
0x81, 0xe1, 0x00, 0xff, 0xff, 0x00,       /*4d: and    $0xffff00,%ecx */
0x89, 0xc8,                               /*53: mov    %ecx,%eax */
0x8b, 0x93, 0x0c, 0x08, 0xab, 0x00,       /*55: mov    0xab080c(%rbx),%edx */
0xb9, 0x06, 0x00, 0x00, 0x00,             /*5b: mov    $0x6,%ecx */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*60: cmp    $0xfff00001,%edx */
0x72, 0x0f,                               /*66: jb     77 <op_eq+0x77> */
0xc1, 0xea, 0x0e,                         /*68: shr    $0xe,%edx */
0x83, 0xe2, 0x3f,                         /*6b: and    $0x3f,%edx */
0x81, 0xc2, 0xff, 0x00, 0x00, 0x00,       /*6e: add    $0xff,%edx */
0x0f, 0xb6, 0xca,                         /*74: movzbl %dl,%ecx */
0x09, 0xc1,                               /*77: or     %eax,%ecx */
0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*79: cmp    $0x602,%ecx */
0x7f, 0x1c,                               /*7f: jg     9d <op_eq+0x9d> */
0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*81: cmp    $0x303,%ecx */
0x75, 0x2f,                               /*87: jne    b8 <op_eq+0xb8> */
0x8b, 0x83, 0x00, 0x08, 0xab, 0x00,       /*89: mov    0xab0800(%rbx),%eax */
0x3b, 0x83, 0x08, 0x08, 0xab, 0x00,       /*8f: cmp    0xab0808(%rbx),%eax */
0x0f, 0x94, 0xc0,                         /*95: sete   %al */
0x0f, 0xb6, 0xc0,                         /*98: movzbl %al,%eax */
0xeb, 0x4e,                               /*9b: jmp    eb <op_eq+0xeb> */
0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*9d: cmp    $0x603,%ecx */
0x75, 0x25,                               /*a3: jne    ca <op_eq+0xca> */
0xf2, 0x0f, 0x2a, 0x83, 0x08, 0x08, 0xab, 0x00,/*a5: cvtsi2sdl 0xab0808(%rbx),%xmm0 */
0xf2, 0x0f, 0xc2, 0x83, 0x00, 0x08, 0xab, 0x00, 0x00,/*ad: cmpeqsd 0xab0800(%rbx),%xmm0 */
0xeb, 0x2b,                               /*b6: jmp    e3 <op_eq+0xe3> */
0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*b8: cmp    $0x306,%ecx */
0x75, 0x54,                               /*be: jne    114 <op_eq+0x114> */
0xf2, 0x0f, 0x2a, 0x83, 0x00, 0x08, 0xab, 0x00,/*c0: cvtsi2sdl 0xab0800(%rbx),%xmm0 */
0xeb, 0x10,                               /*c8: jmp    da <op_eq+0xda> */
0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*ca: cmp    $0x606,%ecx */
0x75, 0x42,                               /*d0: jne    114 <op_eq+0x114> */
0xf2, 0x0f, 0x10, 0x83, 0x00, 0x08, 0xab, 0x00,/*d2: movsd  0xab0800(%rbx),%xmm0 */
0xf2, 0x0f, 0xc2, 0x83, 0x08, 0x08, 0xab, 0x00, 0x00,/*da: cmpeqsd 0xab0808(%rbx),%xmm0 */
0x66, 0x48, 0x0f, 0x7e, 0xc0,             /*e3: movq   %xmm0,%rax */
0x83, 0xe0, 0x01,                         /*e8: and    $0x1,%eax */
0x85, 0xc0,                               /*eb: test   %eax,%eax */
0x74, 0x19,                               /*ed: je     108 <op_eq+0x108> */
0x48, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff,/*ef: movabs $0xfff0c00000000001,%rax */
0x48, 0x89, 0x83, 0x00, 0x08, 0xab, 0x00, /*f9: mov    %rax,0xab0800(%rbx) */
0x4c, 0x89, 0xf7,                         /*100: mov    %r14,%rdi */
0x5b,                                     /*103: pop    %rbx */
0x41, 0x5e,                               /*104: pop    %r14 */
0xeb, 0x2d,                               /*106: jmp    135 <op_eq+0x135> */
0x48, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0xff,/*108: movabs $0xfff0400000000001,%rax */
0xeb, 0xe5,                               /*112: jmp    f9 <op_eq+0xf9> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*114: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*119: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*11e: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*123: mov    $0xcd0000,%r8d */
0x4c, 0x89, 0xf7,                         /*129: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xe0, 0x01, 0x00, 0x00, /*12c: callq  *0x1e0(%r14) */
0xeb, 0xcb,                               /*133: jmp    100 <op_eq+0x100> */

};

static void op_eq_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 8 + 0;
  *((int32_t *)(op + 24)) = a * 8 + 8;
  *((int32_t *)(op + 45)) = a * 8 + 4;
  *((int32_t *)(op + 87)) = a * 8 + 12;
  *((int32_t *)(op + 139)) = a * 8 + 0;
  *((int32_t *)(op + 145)) = a * 8 + 8;
  *((int32_t *)(op + 169)) = a * 8 + 8;
  *((int32_t *)(op + 177)) = a * 8 + 0;
  *((int32_t *)(op + 196)) = a * 8 + 0;
  *((int32_t *)(op + 214)) = a * 8 + 0;
  *((int32_t *)(op + 222)) = a * 8 + 8;
  *((int32_t *)(op + 252)) = a * 8 + 0;
  *((int32_t *)(op + 282)) = a * 1 + 0;
  *((int32_t *)(op + 287)) = b * 1 + 0;
  *((int32_t *)(op + 293)) = c * 1 + 0;
}

static void op_eq_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_eq_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 4, 10..13], [8, 12, 52..55], [8, 0, 105..108], [8, 8, 111..114], [8, 8, 132..135], [8, 0, 150..153], [8, 8, 158..161], [8, 8, 183..186], [8, 0, 191..194], [8, 0, 230..233], [1, 0, 242..245]], "b"=>[[1, 0, 247..250]], "c"=>[[1, 0, 253..256]]} */
static uint8_t op_lt[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x8b, 0x90, 0x04, 0x08, 0xab, 0x00,       /*8: mov    0xab0804(%rax),%edx */
0xb9, 0x00, 0x06, 0x00, 0x00,             /*e: mov    $0x600,%ecx */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*13: cmp    $0xfff00001,%edx */
0x72, 0x17,                               /*19: jb     32 <op_lt+0x32> */
0xc1, 0xea, 0x06,                         /*1b: shr    $0x6,%edx */
0x81, 0xe2, 0x00, 0x3f, 0x00, 0x00,       /*1e: and    $0x3f00,%edx */
0x81, 0xc2, 0x00, 0xff, 0xff, 0x00,       /*24: add    $0xffff00,%edx */
0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*2a: and    $0xffff00,%edx */
0x89, 0xd1,                               /*30: mov    %edx,%ecx */
0x8b, 0xb0, 0x0c, 0x08, 0xab, 0x00,       /*32: mov    0xab080c(%rax),%esi */
0xba, 0x06, 0x00, 0x00, 0x00,             /*38: mov    $0x6,%edx */
0x81, 0xfe, 0x01, 0x00, 0xf0, 0xff,       /*3d: cmp    $0xfff00001,%esi */
0x72, 0x10,                               /*43: jb     55 <op_lt+0x55> */
0xc1, 0xee, 0x0e,                         /*45: shr    $0xe,%esi */
0x83, 0xe6, 0x3f,                         /*48: and    $0x3f,%esi */
0x81, 0xc6, 0xff, 0x00, 0x00, 0x00,       /*4b: add    $0xff,%esi */
0x40, 0x0f, 0xb6, 0xd6,                   /*51: movzbl %sil,%edx */
0x09, 0xca,                               /*55: or     %ecx,%edx */
0x81, 0xfa, 0x02, 0x06, 0x00, 0x00,       /*57: cmp    $0x602,%edx */
0x7f, 0x19,                               /*5d: jg     78 <op_lt+0x78> */
0x81, 0xfa, 0x03, 0x03, 0x00, 0x00,       /*5f: cmp    $0x303,%edx */
0x75, 0x23,                               /*65: jne    8a <op_lt+0x8a> */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*67: mov    0xab0800(%rax),%ecx */
0x3b, 0x88, 0x08, 0x08, 0xab, 0x00,       /*6d: cmp    0xab0808(%rax),%ecx */
0x0f, 0x9c, 0xc1,                         /*73: setl   %cl */
0xeb, 0x4e,                               /*76: jmp    c6 <op_lt+0xc6> */
0x81, 0xfa, 0x03, 0x06, 0x00, 0x00,       /*78: cmp    $0x603,%edx */
0x75, 0x2b,                               /*7e: jne    ab <op_lt+0xab> */
0xf2, 0x0f, 0x2a, 0x80, 0x08, 0x08, 0xab, 0x00,/*80: cvtsi2sdl 0xab0808(%rax),%xmm0 */
0xeb, 0x31,                               /*88: jmp    bb <op_lt+0xbb> */
0x81, 0xfa, 0x06, 0x03, 0x00, 0x00,       /*8a: cmp    $0x306,%edx */
0x75, 0x5a,                               /*90: jne    ec <op_lt+0xec> */
0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x08, 0xab, 0x00,/*92: cvtsi2sdl 0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x10, 0x88, 0x08, 0x08, 0xab, 0x00,/*9a: movsd  0xab0808(%rax),%xmm1 */
0x66, 0x0f, 0x2e, 0xc8,                   /*a2: ucomisd %xmm0,%xmm1 */
0x0f, 0x97, 0xc1,                         /*a6: seta   %cl */
0xeb, 0x1b,                               /*a9: jmp    c6 <op_lt+0xc6> */
0x81, 0xfa, 0x06, 0x06, 0x00, 0x00,       /*ab: cmp    $0x606,%edx */
0x75, 0x39,                               /*b1: jne    ec <op_lt+0xec> */
0xf2, 0x0f, 0x10, 0x80, 0x08, 0x08, 0xab, 0x00,/*b3: movsd  0xab0808(%rax),%xmm0 */
0x66, 0x0f, 0x2e, 0x80, 0x00, 0x08, 0xab, 0x00,/*bb: ucomisd 0xab0800(%rax),%xmm0 */
0x0f, 0x97, 0xc1,                         /*c3: seta   %cl */
0x0f, 0xb6, 0xc9,                         /*c6: movzbl %cl,%ecx */
0x85, 0xc9,                               /*c9: test   %ecx,%ecx */
0x74, 0x0c,                               /*cb: je     d9 <op_lt+0xd9> */
0x48, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff,/*cd: movabs $0xfff0c00000000001,%rcx */
0xeb, 0x0a,                               /*d7: jmp    e3 <op_lt+0xe3> */
0x48, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0xff,/*d9: movabs $0xfff0400000000001,%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*e3: mov    %rcx,0xab0800(%rax) */
0xeb, 0x1e,                               /*ea: jmp    10a <op_lt+0x10a> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*ec: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*f1: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*f6: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*fb: mov    $0xcd0000,%r8d */
0x48, 0x89, 0xdf,                         /*101: mov    %rbx,%rdi */
0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*104: callq  *0x1e0(%rbx) */
0x48, 0x89, 0xdf,                         /*10a: mov    %rbx,%rdi */
0x5b,                                     /*10d: pop    %rbx */

};

static void op_lt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 8 + 4;
  *((int32_t *)(op + 52)) = a * 8 + 12;
  *((int32_t *)(op + 105)) = a * 8 + 0;
  *((int32_t *)(op + 111)) = a * 8 + 8;
  *((int32_t *)(op + 132)) = a * 8 + 8;
  *((int32_t *)(op + 150)) = a * 8 + 0;
  *((int32_t *)(op + 158)) = a * 8 + 8;
  *((int32_t *)(op + 183)) = a * 8 + 8;
  *((int32_t *)(op + 191)) = a * 8 + 0;
  *((int32_t *)(op + 230)) = a * 8 + 0;
  *((int32_t *)(op + 242)) = a * 1 + 0;
  *((int32_t *)(op + 247)) = b * 1 + 0;
  *((int32_t *)(op + 253)) = c * 1 + 0;
}

static void op_lt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_lt_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 4, 10..13], [8, 12, 52..55], [8, 0, 105..108], [8, 8, 111..114], [8, 8, 132..135], [8, 0, 150..153], [8, 8, 158..161], [8, 8, 183..186], [8, 0, 191..194], [8, 0, 230..233], [1, 0, 242..245]], "b"=>[[1, 0, 247..250]], "c"=>[[1, 0, 253..256]]} */
static uint8_t op_le[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x8b, 0x90, 0x04, 0x08, 0xab, 0x00,       /*8: mov    0xab0804(%rax),%edx */
0xb9, 0x00, 0x06, 0x00, 0x00,             /*e: mov    $0x600,%ecx */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*13: cmp    $0xfff00001,%edx */
0x72, 0x17,                               /*19: jb     32 <op_le+0x32> */
0xc1, 0xea, 0x06,                         /*1b: shr    $0x6,%edx */
0x81, 0xe2, 0x00, 0x3f, 0x00, 0x00,       /*1e: and    $0x3f00,%edx */
0x81, 0xc2, 0x00, 0xff, 0xff, 0x00,       /*24: add    $0xffff00,%edx */
0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*2a: and    $0xffff00,%edx */
0x89, 0xd1,                               /*30: mov    %edx,%ecx */
0x8b, 0xb0, 0x0c, 0x08, 0xab, 0x00,       /*32: mov    0xab080c(%rax),%esi */
0xba, 0x06, 0x00, 0x00, 0x00,             /*38: mov    $0x6,%edx */
0x81, 0xfe, 0x01, 0x00, 0xf0, 0xff,       /*3d: cmp    $0xfff00001,%esi */
0x72, 0x10,                               /*43: jb     55 <op_le+0x55> */
0xc1, 0xee, 0x0e,                         /*45: shr    $0xe,%esi */
0x83, 0xe6, 0x3f,                         /*48: and    $0x3f,%esi */
0x81, 0xc6, 0xff, 0x00, 0x00, 0x00,       /*4b: add    $0xff,%esi */
0x40, 0x0f, 0xb6, 0xd6,                   /*51: movzbl %sil,%edx */
0x09, 0xca,                               /*55: or     %ecx,%edx */
0x81, 0xfa, 0x02, 0x06, 0x00, 0x00,       /*57: cmp    $0x602,%edx */
0x7f, 0x19,                               /*5d: jg     78 <op_le+0x78> */
0x81, 0xfa, 0x03, 0x03, 0x00, 0x00,       /*5f: cmp    $0x303,%edx */
0x75, 0x23,                               /*65: jne    8a <op_le+0x8a> */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*67: mov    0xab0800(%rax),%ecx */
0x3b, 0x88, 0x08, 0x08, 0xab, 0x00,       /*6d: cmp    0xab0808(%rax),%ecx */
0x0f, 0x9e, 0xc1,                         /*73: setle  %cl */
0xeb, 0x4e,                               /*76: jmp    c6 <op_le+0xc6> */
0x81, 0xfa, 0x03, 0x06, 0x00, 0x00,       /*78: cmp    $0x603,%edx */
0x75, 0x2b,                               /*7e: jne    ab <op_le+0xab> */
0xf2, 0x0f, 0x2a, 0x80, 0x08, 0x08, 0xab, 0x00,/*80: cvtsi2sdl 0xab0808(%rax),%xmm0 */
0xeb, 0x31,                               /*88: jmp    bb <op_le+0xbb> */
0x81, 0xfa, 0x06, 0x03, 0x00, 0x00,       /*8a: cmp    $0x306,%edx */
0x75, 0x5a,                               /*90: jne    ec <op_le+0xec> */
0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x08, 0xab, 0x00,/*92: cvtsi2sdl 0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x10, 0x88, 0x08, 0x08, 0xab, 0x00,/*9a: movsd  0xab0808(%rax),%xmm1 */
0x66, 0x0f, 0x2e, 0xc8,                   /*a2: ucomisd %xmm0,%xmm1 */
0x0f, 0x93, 0xc1,                         /*a6: setae  %cl */
0xeb, 0x1b,                               /*a9: jmp    c6 <op_le+0xc6> */
0x81, 0xfa, 0x06, 0x06, 0x00, 0x00,       /*ab: cmp    $0x606,%edx */
0x75, 0x39,                               /*b1: jne    ec <op_le+0xec> */
0xf2, 0x0f, 0x10, 0x80, 0x08, 0x08, 0xab, 0x00,/*b3: movsd  0xab0808(%rax),%xmm0 */
0x66, 0x0f, 0x2e, 0x80, 0x00, 0x08, 0xab, 0x00,/*bb: ucomisd 0xab0800(%rax),%xmm0 */
0x0f, 0x93, 0xc1,                         /*c3: setae  %cl */
0x0f, 0xb6, 0xc9,                         /*c6: movzbl %cl,%ecx */
0x85, 0xc9,                               /*c9: test   %ecx,%ecx */
0x74, 0x0c,                               /*cb: je     d9 <op_le+0xd9> */
0x48, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff,/*cd: movabs $0xfff0c00000000001,%rcx */
0xeb, 0x0a,                               /*d7: jmp    e3 <op_le+0xe3> */
0x48, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0xff,/*d9: movabs $0xfff0400000000001,%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*e3: mov    %rcx,0xab0800(%rax) */
0xeb, 0x1e,                               /*ea: jmp    10a <op_le+0x10a> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*ec: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*f1: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*f6: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*fb: mov    $0xcd0000,%r8d */
0x48, 0x89, 0xdf,                         /*101: mov    %rbx,%rdi */
0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*104: callq  *0x1e0(%rbx) */
0x48, 0x89, 0xdf,                         /*10a: mov    %rbx,%rdi */
0x5b,                                     /*10d: pop    %rbx */

};

static void op_le_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 8 + 4;
  *((int32_t *)(op + 52)) = a * 8 + 12;
  *((int32_t *)(op + 105)) = a * 8 + 0;
  *((int32_t *)(op + 111)) = a * 8 + 8;
  *((int32_t *)(op + 132)) = a * 8 + 8;
  *((int32_t *)(op + 150)) = a * 8 + 0;
  *((int32_t *)(op + 158)) = a * 8 + 8;
  *((int32_t *)(op + 183)) = a * 8 + 8;
  *((int32_t *)(op + 191)) = a * 8 + 0;
  *((int32_t *)(op + 230)) = a * 8 + 0;
  *((int32_t *)(op + 242)) = a * 1 + 0;
  *((int32_t *)(op + 247)) = b * 1 + 0;
  *((int32_t *)(op + 253)) = c * 1 + 0;
}

static void op_le_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_le_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 4, 10..13], [8, 12, 52..55], [8, 0, 105..108], [8, 8, 111..114], [8, 0, 132..135], [8, 8, 140..143], [8, 0, 165..168], [8, 0, 183..186], [8, 8, 191..194], [8, 0, 230..233], [1, 0, 242..245]], "b"=>[[1, 0, 247..250]], "c"=>[[1, 0, 253..256]]} */
static uint8_t op_gt[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x8b, 0x90, 0x04, 0x08, 0xab, 0x00,       /*8: mov    0xab0804(%rax),%edx */
0xb9, 0x00, 0x06, 0x00, 0x00,             /*e: mov    $0x600,%ecx */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*13: cmp    $0xfff00001,%edx */
0x72, 0x17,                               /*19: jb     32 <op_gt+0x32> */
0xc1, 0xea, 0x06,                         /*1b: shr    $0x6,%edx */
0x81, 0xe2, 0x00, 0x3f, 0x00, 0x00,       /*1e: and    $0x3f00,%edx */
0x81, 0xc2, 0x00, 0xff, 0xff, 0x00,       /*24: add    $0xffff00,%edx */
0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*2a: and    $0xffff00,%edx */
0x89, 0xd1,                               /*30: mov    %edx,%ecx */
0x8b, 0xb0, 0x0c, 0x08, 0xab, 0x00,       /*32: mov    0xab080c(%rax),%esi */
0xba, 0x06, 0x00, 0x00, 0x00,             /*38: mov    $0x6,%edx */
0x81, 0xfe, 0x01, 0x00, 0xf0, 0xff,       /*3d: cmp    $0xfff00001,%esi */
0x72, 0x10,                               /*43: jb     55 <op_gt+0x55> */
0xc1, 0xee, 0x0e,                         /*45: shr    $0xe,%esi */
0x83, 0xe6, 0x3f,                         /*48: and    $0x3f,%esi */
0x81, 0xc6, 0xff, 0x00, 0x00, 0x00,       /*4b: add    $0xff,%esi */
0x40, 0x0f, 0xb6, 0xd6,                   /*51: movzbl %sil,%edx */
0x09, 0xca,                               /*55: or     %ecx,%edx */
0x81, 0xfa, 0x02, 0x06, 0x00, 0x00,       /*57: cmp    $0x602,%edx */
0x7f, 0x19,                               /*5d: jg     78 <op_gt+0x78> */
0x81, 0xfa, 0x03, 0x03, 0x00, 0x00,       /*5f: cmp    $0x303,%edx */
0x75, 0x32,                               /*65: jne    99 <op_gt+0x99> */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*67: mov    0xab0800(%rax),%ecx */
0x3b, 0x88, 0x08, 0x08, 0xab, 0x00,       /*6d: cmp    0xab0808(%rax),%ecx */
0x0f, 0x9f, 0xc1,                         /*73: setg   %cl */
0xeb, 0x4e,                               /*76: jmp    c6 <op_gt+0xc6> */
0x81, 0xfa, 0x03, 0x06, 0x00, 0x00,       /*78: cmp    $0x603,%edx */
0x75, 0x2b,                               /*7e: jne    ab <op_gt+0xab> */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*80: movsd  0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x2a, 0x88, 0x08, 0x08, 0xab, 0x00,/*88: cvtsi2sdl 0xab0808(%rax),%xmm1 */
0x66, 0x0f, 0x2e, 0xc1,                   /*90: ucomisd %xmm1,%xmm0 */
0x0f, 0x97, 0xc1,                         /*94: seta   %cl */
0xeb, 0x2d,                               /*97: jmp    c6 <op_gt+0xc6> */
0x81, 0xfa, 0x06, 0x03, 0x00, 0x00,       /*99: cmp    $0x306,%edx */
0x75, 0x4b,                               /*9f: jne    ec <op_gt+0xec> */
0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x08, 0xab, 0x00,/*a1: cvtsi2sdl 0xab0800(%rax),%xmm0 */
0xeb, 0x10,                               /*a9: jmp    bb <op_gt+0xbb> */
0x81, 0xfa, 0x06, 0x06, 0x00, 0x00,       /*ab: cmp    $0x606,%edx */
0x75, 0x39,                               /*b1: jne    ec <op_gt+0xec> */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*b3: movsd  0xab0800(%rax),%xmm0 */
0x66, 0x0f, 0x2e, 0x80, 0x08, 0x08, 0xab, 0x00,/*bb: ucomisd 0xab0808(%rax),%xmm0 */
0x0f, 0x97, 0xc1,                         /*c3: seta   %cl */
0x0f, 0xb6, 0xc9,                         /*c6: movzbl %cl,%ecx */
0x85, 0xc9,                               /*c9: test   %ecx,%ecx */
0x74, 0x0c,                               /*cb: je     d9 <op_gt+0xd9> */
0x48, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff,/*cd: movabs $0xfff0c00000000001,%rcx */
0xeb, 0x0a,                               /*d7: jmp    e3 <op_gt+0xe3> */
0x48, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0xff,/*d9: movabs $0xfff0400000000001,%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*e3: mov    %rcx,0xab0800(%rax) */
0xeb, 0x1e,                               /*ea: jmp    10a <op_gt+0x10a> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*ec: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*f1: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*f6: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*fb: mov    $0xcd0000,%r8d */
0x48, 0x89, 0xdf,                         /*101: mov    %rbx,%rdi */
0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*104: callq  *0x1e0(%rbx) */
0x48, 0x89, 0xdf,                         /*10a: mov    %rbx,%rdi */
0x5b,                                     /*10d: pop    %rbx */

};

static void op_gt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 8 + 4;
  *((int32_t *)(op + 52)) = a * 8 + 12;
  *((int32_t *)(op + 105)) = a * 8 + 0;
  *((int32_t *)(op + 111)) = a * 8 + 8;
  *((int32_t *)(op + 132)) = a * 8 + 0;
  *((int32_t *)(op + 140)) = a * 8 + 8;
  *((int32_t *)(op + 165)) = a * 8 + 0;
  *((int32_t *)(op + 183)) = a * 8 + 0;
  *((int32_t *)(op + 191)) = a * 8 + 8;
  *((int32_t *)(op + 230)) = a * 8 + 0;
  *((int32_t *)(op + 242)) = a * 1 + 0;
  *((int32_t *)(op + 247)) = b * 1 + 0;
  *((int32_t *)(op + 253)) = c * 1 + 0;
}

static void op_gt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_gt_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 4, 10..13], [8, 12, 52..55], [8, 0, 105..108], [8, 8, 111..114], [8, 0, 132..135], [8, 8, 140..143], [8, 0, 165..168], [8, 0, 183..186], [8, 8, 191..194], [8, 0, 230..233], [1, 0, 242..245]], "b"=>[[1, 0, 247..250]], "c"=>[[1, 0, 253..256]]} */
static uint8_t op_ge[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x8b, 0x90, 0x04, 0x08, 0xab, 0x00,       /*8: mov    0xab0804(%rax),%edx */
0xb9, 0x00, 0x06, 0x00, 0x00,             /*e: mov    $0x600,%ecx */
0x81, 0xfa, 0x01, 0x00, 0xf0, 0xff,       /*13: cmp    $0xfff00001,%edx */
0x72, 0x17,                               /*19: jb     32 <op_ge+0x32> */
0xc1, 0xea, 0x06,                         /*1b: shr    $0x6,%edx */
0x81, 0xe2, 0x00, 0x3f, 0x00, 0x00,       /*1e: and    $0x3f00,%edx */
0x81, 0xc2, 0x00, 0xff, 0xff, 0x00,       /*24: add    $0xffff00,%edx */
0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*2a: and    $0xffff00,%edx */
0x89, 0xd1,                               /*30: mov    %edx,%ecx */
0x8b, 0xb0, 0x0c, 0x08, 0xab, 0x00,       /*32: mov    0xab080c(%rax),%esi */
0xba, 0x06, 0x00, 0x00, 0x00,             /*38: mov    $0x6,%edx */
0x81, 0xfe, 0x01, 0x00, 0xf0, 0xff,       /*3d: cmp    $0xfff00001,%esi */
0x72, 0x10,                               /*43: jb     55 <op_ge+0x55> */
0xc1, 0xee, 0x0e,                         /*45: shr    $0xe,%esi */
0x83, 0xe6, 0x3f,                         /*48: and    $0x3f,%esi */
0x81, 0xc6, 0xff, 0x00, 0x00, 0x00,       /*4b: add    $0xff,%esi */
0x40, 0x0f, 0xb6, 0xd6,                   /*51: movzbl %sil,%edx */
0x09, 0xca,                               /*55: or     %ecx,%edx */
0x81, 0xfa, 0x02, 0x06, 0x00, 0x00,       /*57: cmp    $0x602,%edx */
0x7f, 0x19,                               /*5d: jg     78 <op_ge+0x78> */
0x81, 0xfa, 0x03, 0x03, 0x00, 0x00,       /*5f: cmp    $0x303,%edx */
0x75, 0x32,                               /*65: jne    99 <op_ge+0x99> */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*67: mov    0xab0800(%rax),%ecx */
0x3b, 0x88, 0x08, 0x08, 0xab, 0x00,       /*6d: cmp    0xab0808(%rax),%ecx */
0x0f, 0x9d, 0xc1,                         /*73: setge  %cl */
0xeb, 0x4e,                               /*76: jmp    c6 <op_ge+0xc6> */
0x81, 0xfa, 0x03, 0x06, 0x00, 0x00,       /*78: cmp    $0x603,%edx */
0x75, 0x2b,                               /*7e: jne    ab <op_ge+0xab> */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*80: movsd  0xab0800(%rax),%xmm0 */
0xf2, 0x0f, 0x2a, 0x88, 0x08, 0x08, 0xab, 0x00,/*88: cvtsi2sdl 0xab0808(%rax),%xmm1 */
0x66, 0x0f, 0x2e, 0xc1,                   /*90: ucomisd %xmm1,%xmm0 */
0x0f, 0x93, 0xc1,                         /*94: setae  %cl */
0xeb, 0x2d,                               /*97: jmp    c6 <op_ge+0xc6> */
0x81, 0xfa, 0x06, 0x03, 0x00, 0x00,       /*99: cmp    $0x306,%edx */
0x75, 0x4b,                               /*9f: jne    ec <op_ge+0xec> */
0xf2, 0x0f, 0x2a, 0x80, 0x00, 0x08, 0xab, 0x00,/*a1: cvtsi2sdl 0xab0800(%rax),%xmm0 */
0xeb, 0x10,                               /*a9: jmp    bb <op_ge+0xbb> */
0x81, 0xfa, 0x06, 0x06, 0x00, 0x00,       /*ab: cmp    $0x606,%edx */
0x75, 0x39,                               /*b1: jne    ec <op_ge+0xec> */
0xf2, 0x0f, 0x10, 0x80, 0x00, 0x08, 0xab, 0x00,/*b3: movsd  0xab0800(%rax),%xmm0 */
0x66, 0x0f, 0x2e, 0x80, 0x08, 0x08, 0xab, 0x00,/*bb: ucomisd 0xab0808(%rax),%xmm0 */
0x0f, 0x93, 0xc1,                         /*c3: setae  %cl */
0x0f, 0xb6, 0xc9,                         /*c6: movzbl %cl,%ecx */
0x85, 0xc9,                               /*c9: test   %ecx,%ecx */
0x74, 0x0c,                               /*cb: je     d9 <op_ge+0xd9> */
0x48, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff,/*cd: movabs $0xfff0c00000000001,%rcx */
0xeb, 0x0a,                               /*d7: jmp    e3 <op_ge+0xe3> */
0x48, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0xff,/*d9: movabs $0xfff0400000000001,%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*e3: mov    %rcx,0xab0800(%rax) */
0xeb, 0x1e,                               /*ea: jmp    10a <op_ge+0x10a> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*ec: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*f1: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*f6: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*fb: mov    $0xcd0000,%r8d */
0x48, 0x89, 0xdf,                         /*101: mov    %rbx,%rdi */
0xff, 0x93, 0xe0, 0x01, 0x00, 0x00,       /*104: callq  *0x1e0(%rbx) */
0x48, 0x89, 0xdf,                         /*10a: mov    %rbx,%rdi */
0x5b,                                     /*10d: pop    %rbx */

};

static void op_ge_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 8 + 4;
  *((int32_t *)(op + 52)) = a * 8 + 12;
  *((int32_t *)(op + 105)) = a * 8 + 0;
  *((int32_t *)(op + 111)) = a * 8 + 8;
  *((int32_t *)(op + 132)) = a * 8 + 0;
  *((int32_t *)(op + 140)) = a * 8 + 8;
  *((int32_t *)(op + 165)) = a * 8 + 0;
  *((int32_t *)(op + 183)) = a * 8 + 0;
  *((int32_t *)(op + 191)) = a * 8 + 8;
  *((int32_t *)(op + 230)) = a * 8 + 0;
  *((int32_t *)(op + 242)) = a * 1 + 0;
  *((int32_t *)(op + 247)) = b * 1 + 0;
  *((int32_t *)(op + 253)) = c * 1 + 0;
}

static void op_ge_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_ge_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[8, 0, 17..20]], "c"=>[[1, 0, 22..25]], "a"=>[[8, 0, 35..38]]} */
static uint8_t op_array[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8d, 0x96, 0x00, 0x08, 0xbc, 0x00, /*e: lea    0xbc0800(%r14),%rdx */
0xbe, 0x00, 0x00, 0xcd, 0x00,             /*15: mov    $0xcd0000,%esi */
0xff, 0x93, 0x28, 0x02, 0x00, 0x00,       /*1a: callq  *0x228(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*20: mov    %rax,0xab0800(%r14) */
0x8b, 0x43, 0x48,                         /*27: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*2a: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*2e: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*34: mov    %rbx,%rdi */
0x5b,                                     /*37: pop    %rbx */
0x41, 0x5e,                               /*38: pop    %r14 */

};

static void op_array_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 8 + 0;
  *((int32_t *)(op + 22)) = c * 1 + 0;
  *((int32_t *)(op + 35)) = a * 8 + 0;
}

static void op_array_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_array_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[8, 0, 19..22]], "a"=>[[8, 0, 35..38]]} */
static uint8_t op_arycat[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
0x4c, 0x8b, 0x7b, 0x18,                   /*8: mov    0x18(%rbx),%r15 */
0x4c, 0x8b, 0x73, 0x50,                   /*c: mov    0x50(%rbx),%r14 */
0x49, 0x8b, 0xb7, 0x00, 0x08, 0xbc, 0x00, /*10: mov    0xbc0800(%r15),%rsi */
0x4c, 0x89, 0xf7,                         /*17: mov    %r14,%rdi */
0xff, 0x93, 0xf8, 0x00, 0x00, 0x00,       /*1a: callq  *0xf8(%rbx) */
0x49, 0x8b, 0xb7, 0x00, 0x08, 0xab, 0x00, /*20: mov    0xab0800(%r15),%rsi */
0x4c, 0x89, 0xf7,                         /*27: mov    %r14,%rdi */
0x48, 0x89, 0xc2,                         /*2a: mov    %rax,%rdx */
0xff, 0x93, 0x90, 0x01, 0x00, 0x00,       /*2d: callq  *0x190(%rbx) */
0x8b, 0x43, 0x48,                         /*33: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*36: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*3a: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*40: mov    %rbx,%rdi */
0x5b,                                     /*43: pop    %rbx */
0x41, 0x5e,                               /*44: pop    %r14 */
0x41, 0x5f,                               /*46: pop    %r15 */

};

static void op_arycat_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = b * 8 + 0;
  *((int32_t *)(op + 35)) = a * 8 + 0;
}

static void op_arycat_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_arycat_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18]], "b"=>[[8, 0, 22..25]]} */
static uint8_t op_arypush[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*8: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rsi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xbc, 0x00, /*13: mov    0xbc0800(%rax),%rdx */
0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*1a: callq  *0x248(%rbx) */
0x48, 0x89, 0xdf,                         /*20: mov    %rbx,%rdi */
0x5b,                                     /*23: pop    %rbx */

};

static void op_arypush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
  *((int32_t *)(op + 22)) = b * 8 + 0;
}

static void op_arypush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_arypush_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[8, 0, 13..16]], "c"=>[[1, 0, 48..51]], "a"=>[[8, 0, 61..64], [8, 4, 70..73], [8, 0, 84..87]]} */
static uint8_t op_aref[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x49, 0x8b, 0xb6, 0x00, 0x08, 0xbc, 0x00, /*a: mov    0xbc0800(%r14),%rsi */
0x48, 0x89, 0xf0,                         /*11: mov    %rsi,%rax */
0x48, 0xc1, 0xe8, 0x20,                   /*14: shr    $0x20,%rax */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*18: cmp    $0xfff00001,%eax */
0x72, 0x24,                               /*1d: jb     43 <op_aref+0x43> */
0x25, 0x00, 0xc0, 0x0f, 0x00,             /*1f: and    $0xfc000,%eax */
0x3d, 0x00, 0xc0, 0x03, 0x00,             /*24: cmp    $0x3c000,%eax */
0x75, 0x18,                               /*29: jne    43 <op_aref+0x43> */
0x48, 0x8b, 0x7b, 0x50,                   /*2b: mov    0x50(%rbx),%rdi */
0xba, 0x00, 0x00, 0xcd, 0x00,             /*2f: mov    $0xcd0000,%edx */
0xff, 0x93, 0x08, 0x02, 0x00, 0x00,       /*34: callq  *0x208(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*3a: mov    %rax,0xab0800(%r14) */
0xeb, 0x19,                               /*41: jmp    5c <op_aref+0x5c> */
0x41, 0xc7, 0x86, 0x04, 0x08, 0xab, 0x00, 0x00, 0x40, 0xf0, 0xff,/*43: movl   $0xfff04000,0xab0804(%r14) */
0x48, 0x8b, 0x43, 0x18,                   /*4e: mov    0x18(%rbx),%rax */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*52: movl   $0x0,0xab0800(%rax) */
0x48, 0x89, 0xdf,                         /*5c: mov    %rbx,%rdi */
0x5b,                                     /*5f: pop    %rbx */
0x41, 0x5e,                               /*60: pop    %r14 */

};

static void op_aref_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = b * 8 + 0;
  *((int32_t *)(op + 48)) = c * 1 + 0;
  *((int32_t *)(op + 61)) = a * 8 + 0;
  *((int32_t *)(op + 70)) = a * 8 + 4;
  *((int32_t *)(op + 84)) = a * 8 + 0;
}

static void op_aref_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_aref_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[8, 0, 15..18]], "a"=>[[8, 0, 22..25]], "c"=>[[1, 0, 27..30]]} */
static uint8_t op_aset[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*8: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*c: mov    0xbc0800(%rax),%rsi */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*13: mov    0xab0800(%rax),%rcx */
0xba, 0x00, 0x00, 0xcd, 0x00,             /*1a: mov    $0xcd0000,%edx */
0xff, 0x93, 0x38, 0x02, 0x00, 0x00,       /*1f: callq  *0x238(%rbx) */
0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
0x5b,                                     /*28: pop    %rbx */

};

static void op_aset_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = b * 8 + 0;
  *((int32_t *)(op + 22)) = a * 8 + 0;
  *((int32_t *)(op + 27)) = c * 1 + 0;
}

static void op_aset_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_aset_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 21..24], [8, 0, 128..131], [8, 0, 207..210], [8, 0, 285..288]], "b"=>[[8, 0, 114..117], [1, 1, 292..295]], "c"=>[[1, 0, 178..181], [1, 0, 259..262], [1, 0, 364..367]]} */
static uint8_t op_apost[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x89, 0xfd,                         /*a: mov    %rdi,%rbp */
0x4c, 0x8b, 0x65, 0x18,                   /*d: mov    0x18(%rbp),%r12 */
0x49, 0x8b, 0x84, 0x24, 0x00, 0x08, 0xab, 0x00,/*11: mov    0xab0800(%r12),%rax */
0x48, 0x89, 0xc1,                         /*19: mov    %rax,%rcx */
0x48, 0xc1, 0xe9, 0x20,                   /*1c: shr    $0x20,%rcx */
0x81, 0xf9, 0x01, 0x00, 0xf0, 0xff,       /*20: cmp    $0xfff00001,%ecx */
0x0f, 0x82, 0x91, 0x00, 0x00, 0x00,       /*26: jb     bd <op_apost+0xbd> */
0x81, 0xe1, 0x00, 0xc0, 0x0f, 0x00,       /*2c: and    $0xfc000,%ecx */
0x81, 0xf9, 0x00, 0xc0, 0x03, 0x00,       /*32: cmp    $0x3c000,%ecx */
0x0f, 0x85, 0x7f, 0x00, 0x00, 0x00,       /*38: jne    bd <op_apost+0xbd> */
0x48, 0xc1, 0xe0, 0x02,                   /*3e: shl    $0x2,%rax */
0x49, 0xbe, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*42: movabs $0xfffffffffffc,%r14 */
0x49, 0x21, 0xc6,                         /*4c: and    %rax,%r14 */
0x45, 0x8b, 0x7e, 0x18,                   /*4f: mov    0x18(%r14),%r15d */
0x48, 0x8b, 0x7d, 0x50,                   /*53: mov    0x50(%rbp),%rdi */
0x41, 0x81, 0xff, 0x01, 0x00, 0x89, 0x01, /*57: cmp    $0x1890001,%r15d */
0x0f, 0x8c, 0xaa, 0x00, 0x00, 0x00,       /*5e: jl     10e <op_apost+0x10e> */
0x41, 0x8d, 0xb7, 0x00, 0x00, 0x77, 0xfe, /*64: lea    -0x1890000(%r15),%esi */
0x49, 0x8b, 0x56, 0x28,                   /*6b: mov    0x28(%r14),%rdx */
0x48, 0x81, 0xc2, 0x00, 0x08, 0xbc, 0x00, /*6f: add    $0xbc0800,%rdx */
0xff, 0x95, 0x28, 0x02, 0x00, 0x00,       /*76: callq  *0x228(%rbp) */
0x49, 0x89, 0x84, 0x24, 0x00, 0x08, 0xab, 0x00,/*7c: mov    %rax,0xab0800(%r12) */
0x41, 0x81, 0xc7, 0x00, 0x00, 0x33, 0xff, /*84: add    $0xff330000,%r15d */
0x31, 0xc0,                               /*8b: xor    %eax,%eax */
0x0f, 0x1f, 0x00,                         /*8d: nopl   (%rax) */
0x48, 0x8b, 0x4d, 0x18,                   /*90: mov    0x18(%rbp),%rcx */
0x41, 0x8d, 0x14, 0x07,                   /*94: lea    (%r15,%rax,1),%edx */
0x48, 0x63, 0xd2,                         /*98: movslq %edx,%rdx */
0x49, 0x8b, 0x76, 0x28,                   /*9b: mov    0x28(%r14),%rsi */
0xf2, 0x0f, 0x10, 0x04, 0xd6,             /*9f: movsd  (%rsi,%rdx,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x84, 0xc1, 0x08, 0x00, 0x58, 0x05,/*a4: movsd  %xmm0,0x5580008(%rcx,%rax,8) */
0x48, 0xff, 0xc0,                         /*ad: inc    %rax */
0x48, 0x3d, 0x00, 0x00, 0xcd, 0x00,       /*b0: cmp    $0xcd0000,%rax */
0x75, 0xd8,                               /*b6: jne    90 <op_apost+0x90> */
0xe9, 0xe9, 0x00, 0x00, 0x00,             /*b8: jmpq   1a6 <op_apost+0x1a6> */
0x48, 0x8b, 0x7d, 0x50,                   /*bd: mov    0x50(%rbp),%rdi */
0x31, 0xdb,                               /*c1: xor    %ebx,%ebx */
0x31, 0xf6,                               /*c3: xor    %esi,%esi */
0xff, 0x95, 0xd8, 0x00, 0x00, 0x00,       /*c5: callq  *0xd8(%rbp) */
0x49, 0x89, 0x84, 0x24, 0x00, 0x08, 0xab, 0x00,/*cb: mov    %rax,0xab0800(%r12) */
0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*d3: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x45, 0x18,                   /*e0: mov    0x18(%rbp),%rax */
0xc7, 0x84, 0xd8, 0x0c, 0x00, 0x58, 0x05, 0x00, 0x40, 0xf0, 0xff,/*e4: movl   $0xfff04000,0x558000c(%rax,%rbx,8) */
0x48, 0x8b, 0x45, 0x18,                   /*ef: mov    0x18(%rbp),%rax */
0xc7, 0x84, 0xd8, 0x08, 0x00, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*f3: movl   $0x0,0x5580008(%rax,%rbx,8) */
0x48, 0xff, 0xc3,                         /*fe: inc    %rbx */
0x81, 0xfb, 0x00, 0x00, 0xcd, 0x00,       /*101: cmp    $0xcd0000,%ebx */
0x75, 0xd7,                               /*107: jne    e0 <op_apost+0xe0> */
0xe9, 0x98, 0x00, 0x00, 0x00,             /*109: jmpq   1a6 <op_apost+0x1a6> */
0x45, 0x31, 0xed,                         /*10e: xor    %r13d,%r13d */
0x31, 0xf6,                               /*111: xor    %esi,%esi */
0xff, 0x95, 0xd8, 0x00, 0x00, 0x00,       /*113: callq  *0xd8(%rbp) */
0x49, 0x89, 0x84, 0x24, 0x00, 0x08, 0xab, 0x00,/*119: mov    %rax,0xab0800(%r12) */
0x41, 0x81, 0xff, 0x01, 0x00, 0xbc, 0x00, /*121: cmp    $0xbc0001,%r15d */
0x7c, 0x41,                               /*128: jl     16b <op_apost+0x16b> */
0x45, 0x89, 0xfd,                         /*12a: mov    %r15d,%r13d */
0x41, 0x81, 0xc5, 0x00, 0x00, 0x44, 0xff, /*12d: add    $0xff440000,%r13d */
0x31, 0xc0,                               /*134: xor    %eax,%eax */
0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*136: nopw   %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x4d, 0x18,                   /*140: mov    0x18(%rbp),%rcx */
0x49, 0x8b, 0x56, 0x28,                   /*144: mov    0x28(%r14),%rdx */
0xf2, 0x0f, 0x10, 0x84, 0xc2, 0x00, 0x00, 0xe0, 0x05,/*148: movsd  0x5e00000(%rdx,%rax,8),%xmm0 */
0xf2, 0x0f, 0x11, 0x84, 0xc1, 0x08, 0x00, 0x58, 0x05,/*151: movsd  %xmm0,0x5580008(%rcx,%rax,8) */
0x48, 0xff, 0xc0,                         /*15a: inc    %rax */
0x41, 0x39, 0xc5,                         /*15d: cmp    %eax,%r13d */
0x75, 0xde,                               /*160: jne    140 <op_apost+0x140> */
0x41, 0x81, 0xfd, 0xff, 0xff, 0xcc, 0x00, /*162: cmp    $0xccffff,%r13d */
0x7f, 0x3b,                               /*169: jg     1a6 <op_apost+0x1a6> */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*16b: mov    $0xcd0000,%eax */
0x44, 0x29, 0xe8,                         /*170: sub    %r13d,%eax */
0x49, 0x63, 0xcd,                         /*173: movslq %r13d,%rcx */
0x48, 0xc1, 0xe1, 0x03,                   /*176: shl    $0x3,%rcx */
0x66, 0x0f, 0x1f, 0x44, 0x00, 0x00,       /*17a: nopw   0x0(%rax,%rax,1) */
0x48, 0x8b, 0x55, 0x18,                   /*180: mov    0x18(%rbp),%rdx */
0xc7, 0x84, 0x0a, 0x0c, 0x00, 0x58, 0x05, 0x00, 0x40, 0xf0, 0xff,/*184: movl   $0xfff04000,0x558000c(%rdx,%rcx,1) */
0x48, 0x8b, 0x55, 0x18,                   /*18f: mov    0x18(%rbp),%rdx */
0xc7, 0x84, 0x0a, 0x08, 0x00, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*193: movl   $0x0,0x5580008(%rdx,%rcx,1) */
0x48, 0x83, 0xc1, 0x08,                   /*19e: add    $0x8,%rcx */
0xff, 0xc8,                               /*1a2: dec    %eax */
0x75, 0xda,                               /*1a4: jne    180 <op_apost+0x180> */
0x8b, 0x45, 0x48,                         /*1a6: mov    0x48(%rbp),%eax */
0x48, 0x8b, 0x4d, 0x50,                   /*1a9: mov    0x50(%rbp),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*1ad: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xef,                         /*1b3: mov    %rbp,%rdi */
0x5b,                                     /*1b6: pop    %rbx */
0x41, 0x5c,                               /*1b7: pop    %r12 */
0x41, 0x5d,                               /*1b9: pop    %r13 */
0x41, 0x5e,                               /*1bb: pop    %r14 */
0x41, 0x5f,                               /*1bd: pop    %r15 */
0x5d,                                     /*1bf: pop    %rbp */

};

static void op_apost_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 128)) = a * 8 + 0;
  *((int32_t *)(op + 207)) = a * 8 + 0;
  *((int32_t *)(op + 285)) = a * 8 + 0;
  *((int32_t *)(op + 114)) = b * 8 + 0;
  *((int32_t *)(op + 292)) = b * 1 + 1;
  *((int32_t *)(op + 178)) = c * 1 + 0;
  *((int32_t *)(op + 259)) = c * 1 + 0;
  *((int32_t *)(op + 364)) = c * 1 + 0;
}

static void op_apost_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_apost_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[8, 0, 21..24]], "a"=>[[8, 0, 34..37]]} */
static uint8_t op_string[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*6: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x20,                   /*e: mov    0x20(%rbx),%rax */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*12: mov    0xbc0800(%rax),%rsi */
0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*19: callq  *0x1d8(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*1f: mov    %rax,0xab0800(%r14) */
0x8b, 0x43, 0x48,                         /*26: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*29: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*2d: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*33: mov    %rbx,%rdi */
0x5b,                                     /*36: pop    %rbx */
0x41, 0x5e,                               /*37: pop    %r14 */

};

static void op_string_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 8 + 0;
  *((int32_t *)(op + 34)) = a * 8 + 0;
}

static void op_string_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_string_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18]], "b"=>[[8, 0, 22..25]]} */
static uint8_t op_strcat[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*8: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rsi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xbc, 0x00, /*13: mov    0xbc0800(%rax),%rdx */
0xff, 0x93, 0xf8, 0x01, 0x00, 0x00,       /*1a: callq  *0x1f8(%rbx) */
0x48, 0x89, 0xdf,                         /*20: mov    %rbx,%rdi */
0x5b,                                     /*23: pop    %rbx */

};

static void op_strcat_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
  *((int32_t *)(op + 22)) = b * 8 + 0;
}

static void op_strcat_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_strcat_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[1, 0, 13..16]], "c"=>[[1, 0, 20..23]], "a"=>[[8, 0, 125..128]]} */
static uint8_t op_hash[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x53,                                     /*5: push   %rbx */
0x48, 0x89, 0xfb,                         /*6: mov    %rdi,%rbx */
0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0xbc, 0x00,/*9: movl   $0xbc0000,0x4(%rsp) */
0xc7, 0x04, 0x24, 0x00, 0x00, 0xcd, 0x00, /*11: movl   $0xcd0000,(%rsp) */
0x8b, 0x44, 0x24, 0x04,                   /*18: mov    0x4(%rsp),%eax */
0x8b, 0x0c, 0x24,                         /*1c: mov    (%rsp),%ecx */
0x44, 0x8d, 0x3c, 0x48,                   /*1f: lea    (%rax,%rcx,2),%r15d */
0x48, 0x8b, 0x7b, 0x50,                   /*23: mov    0x50(%rbx),%rdi */
0x8b, 0x34, 0x24,                         /*27: mov    (%rsp),%esi */
0xff, 0x93, 0x70, 0x01, 0x00, 0x00,       /*2a: callq  *0x170(%rbx) */
0x49, 0x89, 0xc6,                         /*30: mov    %rax,%r14 */
0xeb, 0x38,                               /*33: jmp    6d <op_hash+0x6d> */
0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*35: data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x7b, 0x50,                   /*40: mov    0x50(%rbx),%rdi */
0x48, 0x63, 0x44, 0x24, 0x04,             /*44: movslq 0x4(%rsp),%rax */
0x48, 0x8b, 0x4b, 0x18,                   /*49: mov    0x18(%rbx),%rcx */
0x48, 0x63, 0x74, 0x24, 0x04,             /*4d: movslq 0x4(%rsp),%rsi */
0x48, 0x8b, 0x6b, 0x18,                   /*52: mov    0x18(%rbx),%rbp */
0x48, 0x8b, 0x14, 0xc1,                   /*56: mov    (%rcx,%rax,8),%rdx */
0x48, 0x8b, 0x4c, 0xf5, 0x08,             /*5a: mov    0x8(%rbp,%rsi,8),%rcx */
0x4c, 0x89, 0xf6,                         /*5f: mov    %r14,%rsi */
0xff, 0x93, 0xa0, 0x01, 0x00, 0x00,       /*62: callq  *0x1a0(%rbx) */
0x83, 0x44, 0x24, 0x04, 0x02,             /*68: addl   $0x2,0x4(%rsp) */
0x8b, 0x44, 0x24, 0x04,                   /*6d: mov    0x4(%rsp),%eax */
0x44, 0x39, 0xf8,                         /*71: cmp    %r15d,%eax */
0x7c, 0xca,                               /*74: jl     40 <op_hash+0x40> */
0x48, 0x8b, 0x43, 0x18,                   /*76: mov    0x18(%rbx),%rax */
0x4c, 0x89, 0xb0, 0x00, 0x08, 0xab, 0x00, /*7a: mov    %r14,0xab0800(%rax) */
0x8b, 0x43, 0x48,                         /*81: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*84: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*88: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*8e: mov    %rbx,%rdi */
0x5b,                                     /*91: pop    %rbx */
0x41, 0x5e,                               /*92: pop    %r14 */
0x41, 0x5f,                               /*94: pop    %r15 */
0x5d,                                     /*96: pop    %rbp */

};

static void op_hash_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = b * 1 + 0;
  *((int32_t *)(op + 20)) = c * 1 + 0;
  *((int32_t *)(op + 125)) = a * 8 + 0;
}

static void op_hash_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_hash_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"c"=>[[1, 0, 5..8]], "b"=>[[8, 0, 26..29]], "a"=>[[8, 0, 91..94]]} */
static uint8_t op_lambda[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*4: mov    $0xcd0000,%eax */
0xa8, 0x02,                               /*9: test   $0x2,%al */
0x48, 0x8b, 0x43, 0x08,                   /*b: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*f: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x40, 0x20,                   /*13: mov    0x20(%rax),%rax */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*17: mov    0xbc0800(%rax),%rsi */
0x74, 0x05,                               /*1e: je     25 <op_lambda+0x25> */
0xff, 0x53, 0x78,                         /*20: callq  *0x78(%rbx) */
0xeb, 0x06,                               /*23: jmp    2b <op_lambda+0x2b> */
0xff, 0x93, 0x50, 0x01, 0x00, 0x00,       /*25: callq  *0x150(%rbx) */
0x48, 0x8b, 0x4b, 0x18,                   /*2b: mov    0x18(%rbx),%rcx */
0x8b, 0x10,                               /*2f: mov    (%rax),%edx */
0x0f, 0xb6, 0xf2,                         /*31: movzbl %dl,%esi */
0x83, 0xfe, 0x05,                         /*34: cmp    $0x5,%esi */
0x77, 0x05,                               /*37: ja     3e <op_lambda+0x3e> */
0x83, 0xfe, 0x01,                         /*39: cmp    $0x1,%esi */
0x75, 0x1a,                               /*3c: jne    58 <op_lambda+0x58> */
0xc1, 0xe2, 0x0e,                         /*3e: shl    $0xe,%edx */
0x81, 0xc2, 0x00, 0x40, 0x00, 0x00,       /*41: add    $0x4000,%edx */
0x81, 0xca, 0x00, 0x00, 0xf0, 0xff,       /*47: or     $0xfff00000,%edx */
0x48, 0xc1, 0xe2, 0x20,                   /*4d: shl    $0x20,%rdx */
0x48, 0xc1, 0xe8, 0x02,                   /*51: shr    $0x2,%rax */
0x48, 0x09, 0xd0,                         /*55: or     %rdx,%rax */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*58: mov    %rax,0xab0800(%rcx) */
0x8b, 0x43, 0x48,                         /*5f: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*62: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*66: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*6c: mov    %rbx,%rdi */
0x5b,                                     /*6f: pop    %rbx */

};

static void op_lambda_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = c * 1 + 0;
  *((int32_t *)(op + 26)) = b * 8 + 0;
  *((int32_t *)(op + 91)) = a * 8 + 0;
}

static void op_lambda_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_lambda_set_args(op, GETARG_A(c),GETARG_b(c),GETARG_c(c),op_idx);
}


/* args: {"b"=>[[8, 0, 17..20], [8, 8, 24..27]], "c"=>[[1, 0, 29..32]], "a"=>[[8, 0, 42..45]]} */
static uint8_t op_range[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8b, 0xb6, 0x00, 0x08, 0xbc, 0x00, /*e: mov    0xbc0800(%r14),%rsi */
0x49, 0x8b, 0x96, 0x08, 0x08, 0xbc, 0x00, /*15: mov    0xbc0808(%r14),%rdx */
0xb9, 0x00, 0x00, 0xcd, 0x00,             /*1c: mov    $0xcd0000,%ecx */
0xff, 0x93, 0x80, 0x01, 0x00, 0x00,       /*21: callq  *0x180(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*27: mov    %rax,0xab0800(%r14) */
0x8b, 0x43, 0x48,                         /*2e: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*31: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*35: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*3b: mov    %rbx,%rdi */
0x5b,                                     /*3e: pop    %rbx */
0x41, 0x5e,                               /*3f: pop    %r14 */

};

static void op_range_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 8 + 0;
  *((int32_t *)(op + 24)) = b * 8 + 8;
  *((int32_t *)(op + 29)) = c * 1 + 0;
  *((int32_t *)(op + 42)) = a * 8 + 0;
}

static void op_range_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_range_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 56..59]]} */
static uint8_t op_oclass[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x4f, 0x50,                   /*4: mov    0x50(%rdi),%rcx */
0x48, 0x8b, 0x49, 0x40,                   /*8: mov    0x40(%rcx),%rcx */
0x8b, 0x11,                               /*c: mov    (%rcx),%edx */
0x0f, 0xb6, 0xf2,                         /*e: movzbl %dl,%esi */
0x83, 0xfe, 0x05,                         /*11: cmp    $0x5,%esi */
0x77, 0x05,                               /*14: ja     1b <op_oclass+0x1b> */
0x83, 0xfe, 0x01,                         /*16: cmp    $0x1,%esi */
0x75, 0x1a,                               /*19: jne    35 <op_oclass+0x35> */
0xc1, 0xe2, 0x0e,                         /*1b: shl    $0xe,%edx */
0x81, 0xc2, 0x00, 0x40, 0x00, 0x00,       /*1e: add    $0x4000,%edx */
0x81, 0xca, 0x00, 0x00, 0xf0, 0xff,       /*24: or     $0xfff00000,%edx */
0x48, 0xc1, 0xe2, 0x20,                   /*2a: shl    $0x20,%rdx */
0x48, 0xc1, 0xe9, 0x02,                   /*2e: shr    $0x2,%rcx */
0x48, 0x09, 0xd1,                         /*32: or     %rdx,%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*35: mov    %rcx,0xab0800(%rax) */

};

static void op_oclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 56)) = a * 8 + 0;
}

static void op_oclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_oclass_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[4, 0, 14..17]], "a"=>[[8, 0, 21..24], [8, 8, 28..31], [8, 0, 174..177]]} */
static uint8_t op_class[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*8: mov    0x28(%rbx),%rcx */
0x8b, 0x89, 0x00, 0x04, 0xbc, 0x00,       /*c: mov    0xbc0400(%rcx),%ecx */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*12: mov    0xab0800(%rax),%rsi */
0x48, 0x8b, 0x90, 0x08, 0x08, 0xab, 0x00, /*19: mov    0xab0808(%rax),%rdx */
0x48, 0x8b, 0x7b, 0x50,                   /*20: mov    0x50(%rbx),%rdi */
0x85, 0xf6,                               /*24: test   %esi,%esi */
0x75, 0x50,                               /*26: jne    78 <op_class+0x78> */
0x48, 0x89, 0xf0,                         /*28: mov    %rsi,%rax */
0x48, 0xc1, 0xe8, 0x20,                   /*2b: shr    $0x20,%rax */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*2f: cmp    $0xfff00001,%eax */
0x72, 0x42,                               /*34: jb     78 <op_class+0x78> */
0x25, 0x00, 0xc0, 0x0f, 0x00,             /*36: and    $0xfc000,%eax */
0x3d, 0x00, 0x40, 0x00, 0x00,             /*3b: cmp    $0x4000,%eax */
0x75, 0x36,                               /*40: jne    78 <op_class+0x78> */
0x48, 0x8b, 0x47, 0x18,                   /*42: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*46: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x70, 0x48,                   /*4a: mov    0x48(%rax),%rsi */
0x8b, 0x06,                               /*4e: mov    (%rsi),%eax */
0x44, 0x0f, 0xb6, 0xc0,                   /*50: movzbl %al,%r8d */
0x41, 0x83, 0xf8, 0x05,                   /*54: cmp    $0x5,%r8d */
0x77, 0x06,                               /*58: ja     60 <op_class+0x60> */
0x41, 0x83, 0xf8, 0x01,                   /*5a: cmp    $0x1,%r8d */
0x75, 0x18,                               /*5e: jne    78 <op_class+0x78> */
0xc1, 0xe0, 0x0e,                         /*60: shl    $0xe,%eax */
0x05, 0x00, 0x40, 0x00, 0x00,             /*63: add    $0x4000,%eax */
0x0d, 0x00, 0x00, 0xf0, 0xff,             /*68: or     $0xfff00000,%eax */
0x48, 0xc1, 0xe0, 0x20,                   /*6d: shl    $0x20,%rax */
0x48, 0xc1, 0xee, 0x02,                   /*71: shr    $0x2,%rsi */
0x48, 0x09, 0xc6,                         /*75: or     %rax,%rsi */
0xff, 0x93, 0x88, 0x01, 0x00, 0x00,       /*78: callq  *0x188(%rbx) */
0x48, 0x8b, 0x4b, 0x18,                   /*7e: mov    0x18(%rbx),%rcx */
0x8b, 0x10,                               /*82: mov    (%rax),%edx */
0x0f, 0xb6, 0xf2,                         /*84: movzbl %dl,%esi */
0x83, 0xfe, 0x05,                         /*87: cmp    $0x5,%esi */
0x77, 0x05,                               /*8a: ja     91 <op_class+0x91> */
0x83, 0xfe, 0x01,                         /*8c: cmp    $0x1,%esi */
0x75, 0x1a,                               /*8f: jne    ab <op_class+0xab> */
0xc1, 0xe2, 0x0e,                         /*91: shl    $0xe,%edx */
0x81, 0xc2, 0x00, 0x40, 0x00, 0x00,       /*94: add    $0x4000,%edx */
0x81, 0xca, 0x00, 0x00, 0xf0, 0xff,       /*9a: or     $0xfff00000,%edx */
0x48, 0xc1, 0xe2, 0x20,                   /*a0: shl    $0x20,%rdx */
0x48, 0xc1, 0xe8, 0x02,                   /*a4: shr    $0x2,%rax */
0x48, 0x09, 0xd0,                         /*a8: or     %rdx,%rax */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*ab: mov    %rax,0xab0800(%rcx) */
0x8b, 0x43, 0x48,                         /*b2: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*b5: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*b9: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*bf: mov    %rbx,%rdi */
0x5b,                                     /*c2: pop    %rbx */

};

static void op_class_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = b * 4 + 0;
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 28)) = a * 8 + 8;
  *((int32_t *)(op + 174)) = a * 8 + 0;
}

static void op_class_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_class_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 14..17]], "a"=>[[8, 0, 21..24], [8, 0, 164..167]]} */
static uint8_t op_module[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*8: mov    0x28(%rbx),%rcx */
0x8b, 0x91, 0x00, 0x04, 0xbc, 0x00,       /*c: mov    0xbc0400(%rcx),%edx */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*12: mov    0xab0800(%rax),%rsi */
0x48, 0x8b, 0x7b, 0x50,                   /*19: mov    0x50(%rbx),%rdi */
0x85, 0xf6,                               /*1d: test   %esi,%esi */
0x75, 0x4d,                               /*1f: jne    6e <op_module+0x6e> */
0x48, 0x89, 0xf0,                         /*21: mov    %rsi,%rax */
0x48, 0xc1, 0xe8, 0x20,                   /*24: shr    $0x20,%rax */
0x3d, 0x01, 0x00, 0xf0, 0xff,             /*28: cmp    $0xfff00001,%eax */
0x72, 0x3f,                               /*2d: jb     6e <op_module+0x6e> */
0x25, 0x00, 0xc0, 0x0f, 0x00,             /*2f: and    $0xfc000,%eax */
0x3d, 0x00, 0x40, 0x00, 0x00,             /*34: cmp    $0x4000,%eax */
0x75, 0x33,                               /*39: jne    6e <op_module+0x6e> */
0x48, 0x8b, 0x47, 0x18,                   /*3b: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*3f: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x70, 0x48,                   /*43: mov    0x48(%rax),%rsi */
0x8b, 0x06,                               /*47: mov    (%rsi),%eax */
0x0f, 0xb6, 0xc8,                         /*49: movzbl %al,%ecx */
0x83, 0xf9, 0x05,                         /*4c: cmp    $0x5,%ecx */
0x77, 0x05,                               /*4f: ja     56 <op_module+0x56> */
0x83, 0xf9, 0x01,                         /*51: cmp    $0x1,%ecx */
0x75, 0x18,                               /*54: jne    6e <op_module+0x6e> */
0xc1, 0xe0, 0x0e,                         /*56: shl    $0xe,%eax */
0x05, 0x00, 0x40, 0x00, 0x00,             /*59: add    $0x4000,%eax */
0x0d, 0x00, 0x00, 0xf0, 0xff,             /*5e: or     $0xfff00000,%eax */
0x48, 0xc1, 0xe0, 0x20,                   /*63: shl    $0x20,%rax */
0x48, 0xc1, 0xee, 0x02,                   /*67: shr    $0x2,%rsi */
0x48, 0x09, 0xc6,                         /*6b: or     %rax,%rsi */
0xff, 0x93, 0xb8, 0x00, 0x00, 0x00,       /*6e: callq  *0xb8(%rbx) */
0x48, 0x8b, 0x4b, 0x18,                   /*74: mov    0x18(%rbx),%rcx */
0x8b, 0x10,                               /*78: mov    (%rax),%edx */
0x0f, 0xb6, 0xf2,                         /*7a: movzbl %dl,%esi */
0x83, 0xfe, 0x05,                         /*7d: cmp    $0x5,%esi */
0x77, 0x05,                               /*80: ja     87 <op_module+0x87> */
0x83, 0xfe, 0x01,                         /*82: cmp    $0x1,%esi */
0x75, 0x1a,                               /*85: jne    a1 <op_module+0xa1> */
0xc1, 0xe2, 0x0e,                         /*87: shl    $0xe,%edx */
0x81, 0xc2, 0x00, 0x40, 0x00, 0x00,       /*8a: add    $0x4000,%edx */
0x81, 0xca, 0x00, 0x00, 0xf0, 0xff,       /*90: or     $0xfff00000,%edx */
0x48, 0xc1, 0xe2, 0x20,                   /*96: shl    $0x20,%rdx */
0x48, 0xc1, 0xe8, 0x02,                   /*9a: shr    $0x2,%rax */
0x48, 0x09, 0xd0,                         /*9e: or     %rdx,%rax */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*a1: mov    %rax,0xab0800(%rcx) */
0x8b, 0x43, 0x48,                         /*a8: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*ab: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*af: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*b5: mov    %rbx,%rdi */
0x5b,                                     /*b8: pop    %rbx */

};

static void op_module_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = b * 4 + 0;
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 164)) = a * 8 + 0;
}

static void op_module_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_module_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 21..24], [1, 0, 50..53], [8, 0, 122..125]], "b"=>[[8, 0, 141..144]]} */
static uint8_t op_exec[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x41, 0x54,                               /*4: push   %r12 */
0x53,                                     /*6: push   %rbx */
0x48, 0x89, 0xfb,                         /*7: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*a: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*e: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0xb8, 0x00, 0x08, 0xab, 0x00, /*12: mov    0xab0800(%rax),%r15 */
0xff, 0x93, 0xe8, 0x00, 0x00, 0x00,       /*19: callq  *0xe8(%rbx) */
0x49, 0x89, 0xc6,                         /*1f: mov    %rax,%r14 */
0x48, 0x8b, 0x43, 0x10,                   /*22: mov    0x10(%rbx),%rax */
0x48, 0x83, 0xc0, 0x04,                   /*26: add    $0x4,%rax */
0x49, 0x89, 0x46, 0x30,                   /*2a: mov    %rax,0x30(%r14) */
0x41, 0xc7, 0x46, 0x44, 0x00, 0x00, 0xab, 0x00,/*2e: movl   $0xab0000,0x44(%r14) */
0x41, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, /*36: movl   $0x0,(%r14) */
0x48, 0x8b, 0x43, 0x50,                   /*3d: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*41: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*45: mov    0x8(%rax),%rax */
0x49, 0x89, 0x46, 0x10,                   /*49: mov    %rax,0x10(%r14) */
0x41, 0xc7, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00,/*4d: movl   $0x0,0x40(%r14) */
0x4a, 0x8d, 0x04, 0xbd, 0x00, 0x00, 0x00, 0x00,/*55: lea    0x0(,%r15,4),%rax */
0x48, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*5d: movabs $0xfffffffffffc,%rcx */
0x48, 0x21, 0xc1,                         /*67: and    %rax,%rcx */
0x49, 0x89, 0x4e, 0x48,                   /*6a: mov    %rcx,0x48(%r14) */
0x48, 0x8b, 0x43, 0x50,                   /*6e: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*72: mov    0x18(%rax),%rax */
0x48, 0x81, 0x40, 0x08, 0x00, 0x08, 0xab, 0x00,/*76: addq   $0xab0800,0x8(%rax) */
0x48, 0x8b, 0x43, 0x08,                   /*7e: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*82: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x40, 0x20,                   /*86: mov    0x20(%rax),%rax */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*8a: mov    0xbc0800(%rax),%rsi */
0xff, 0x93, 0x50, 0x01, 0x00, 0x00,       /*91: callq  *0x150(%rbx) */
0x49, 0x89, 0xc4,                         /*97: mov    %rax,%r12 */
0x49, 0x8b, 0x46, 0x48,                   /*9a: mov    0x48(%r14),%rax */
0x49, 0x89, 0x44, 0x24, 0x20,             /*9e: mov    %rax,0x20(%r12) */
0x4d, 0x89, 0x66, 0x08,                   /*a3: mov    %r12,0x8(%r14) */
0x41, 0xf6, 0x44, 0x24, 0x02, 0x04,       /*a7: testb  $0x4,0x2(%r12) */
0x74, 0x45,                               /*ad: je     f4 <op_exec+0xf4> */
0x41, 0xc7, 0x46, 0x18, 0x00, 0x00, 0x00, 0x00,/*af: movl   $0x0,0x18(%r14) */
0x48, 0x8b, 0x7b, 0x50,                   /*b7: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*bb: mov    0x18(%rdi),%rax */
0x4c, 0x8b, 0x70, 0x08,                   /*bf: mov    0x8(%rax),%r14 */
0x4c, 0x89, 0xfe,                         /*c3: mov    %r15,%rsi */
0x41, 0xff, 0x54, 0x24, 0x18,             /*c6: callq  *0x18(%r12) */
0x49, 0x89, 0x06,                         /*cb: mov    %rax,(%r14) */
0x48, 0x8b, 0x7b, 0x50,                   /*ce: mov    0x50(%rbx),%rdi */
0x8b, 0x73, 0x48,                         /*d2: mov    0x48(%rbx),%esi */
0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*d5: callq  *0x110(%rbx) */
0x48, 0x8b, 0x43, 0x50,                   /*db: mov    0x50(%rbx),%rax */
0x48, 0x83, 0x78, 0x28, 0x00,             /*df: cmpq   $0x0,0x28(%rax) */
0x74, 0x70,                               /*e4: je     156 <op_exec+0x156> */
0x48, 0x89, 0xdf,                         /*e6: mov    %rbx,%rdi */
0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*e9: callq  *0x1b0(%rbx) */
0xe9, 0x80, 0x00, 0x00, 0x00,             /*ef: jmpq   174 <op_exec+0x174> */
0x49, 0x8b, 0x44, 0x24, 0x18,             /*f4: mov    0x18(%r12),%rax */
0x48, 0x89, 0x43, 0x08,                   /*f9: mov    %rax,0x8(%rbx) */
0x48, 0x8b, 0x48, 0x10,                   /*fd: mov    0x10(%rax),%rcx */
0x48, 0x89, 0x4b, 0x20,                   /*101: mov    %rcx,0x20(%rbx) */
0x48, 0x8b, 0x48, 0x18,                   /*105: mov    0x18(%rax),%rcx */
0x48, 0x89, 0x4b, 0x28,                   /*109: mov    %rcx,0x28(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*10d: mov    0x50(%rbx),%rdi */
0x0f, 0xb7, 0x70, 0x02,                   /*111: movzwl 0x2(%rax),%esi */
0xba, 0x01, 0x00, 0x00, 0x00,             /*115: mov    $0x1,%edx */
0xff, 0x93, 0x48, 0x01, 0x00, 0x00,       /*11a: callq  *0x148(%rbx) */
0x48, 0x8b, 0x43, 0x08,                   /*120: mov    0x8(%rbx),%rax */
0x0f, 0xb7, 0x40, 0x02,                   /*124: movzwl 0x2(%rax),%eax */
0x41, 0x89, 0x46, 0x18,                   /*128: mov    %eax,0x18(%r14) */
0x48, 0x8b, 0x7b, 0x50,                   /*12c: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*130: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*134: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x18,                   /*138: mov    %rax,0x18(%rbx) */
0x48, 0x8b, 0x43, 0x08,                   /*13c: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*140: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x10,                   /*144: mov    %rax,0x10(%rbx) */
0x4c, 0x89, 0xe6,                         /*148: mov    %r12,%rsi */
0x48, 0x89, 0xda,                         /*14b: mov    %rbx,%rdx */
0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*14e: callq  *0x120(%rbx) */
0xeb, 0x1e,                               /*154: jmp    174 <op_exec+0x174> */
0x48, 0x8b, 0x40, 0x18,                   /*156: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x20,                   /*15a: mov    0x20(%rax),%rcx */
0x48, 0x8b, 0x49, 0x10,                   /*15e: mov    0x10(%rcx),%rcx */
0x48, 0x89, 0x48, 0x08,                   /*162: mov    %rcx,0x8(%rax) */
0x48, 0x89, 0x4b, 0x18,                   /*166: mov    %rcx,0x18(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*16a: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*16e: callq  *0x168(%rbx) */
0x48, 0x89, 0xdf,                         /*174: mov    %rbx,%rdi */
0x5b,                                     /*177: pop    %rbx */
0x41, 0x5c,                               /*178: pop    %r12 */
0x41, 0x5e,                               /*17a: pop    %r14 */
0x41, 0x5f,                               /*17c: pop    %r15 */

};

static void op_exec_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 50)) = a * 1 + 0;
  *((int32_t *)(op + 122)) = a * 8 + 0;
  *((int32_t *)(op + 141)) = b * 8 + 0;
}

static void op_exec_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_exec_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18], [8, 8, 22..25]], "b"=>[[4, 0, 49..52]]} */
static uint8_t op_method[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x53, 0x28,                   /*8: mov    0x28(%rbx),%rdx */
0x48, 0x8b, 0xb8, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rdi */
0x48, 0x8b, 0x88, 0x08, 0x08, 0xab, 0x00, /*13: mov    0xab0808(%rax),%rcx */
0x48, 0xc1, 0xe7, 0x02,                   /*1a: shl    $0x2,%rdi */
0x48, 0xbe, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*1e: movabs $0xfffffffffffc,%rsi */
0x48, 0x21, 0xfe,                         /*28: and    %rdi,%rsi */
0x48, 0x8b, 0x7b, 0x50,                   /*2b: mov    0x50(%rbx),%rdi */
0x8b, 0x92, 0x00, 0x04, 0xbc, 0x00,       /*2f: mov    0xbc0400(%rdx),%edx */
0xff, 0x93, 0xf0, 0x00, 0x00, 0x00,       /*35: callq  *0xf0(%rbx) */
0x8b, 0x43, 0x48,                         /*3b: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*3e: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*42: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*48: mov    %rbx,%rdi */
0x5b,                                     /*4b: pop    %rbx */

};

static void op_method_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
  *((int32_t *)(op + 22)) = a * 8 + 8;
  *((int32_t *)(op + 49)) = b * 4 + 0;
}

static void op_method_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_method_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[8, 0, 17..20]], "a"=>[[8, 0, 30..33]]} */
static uint8_t op_sclass[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8b, 0xb6, 0x00, 0x08, 0xbc, 0x00, /*e: mov    0xbc0800(%r14),%rsi */
0xff, 0x93, 0xc8, 0x00, 0x00, 0x00,       /*15: callq  *0xc8(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*1b: mov    %rax,0xab0800(%r14) */
0x8b, 0x43, 0x48,                         /*22: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*25: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*29: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*2f: mov    %rbx,%rdi */
0x5b,                                     /*32: pop    %rbx */
0x41, 0x5e,                               /*33: pop    %r14 */

};

static void op_sclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 8 + 0;
  *((int32_t *)(op + 30)) = a * 8 + 0;
}

static void op_sclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sclass_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 77..80]]} */
static uint8_t op_tclass[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x50,                   /*8: mov    0x50(%rbx),%r14 */
0x49, 0x8b, 0x46, 0x18,                   /*c: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*10: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x40, 0x48,                   /*14: mov    0x48(%rax),%rax */
0x48, 0x85, 0xc0,                         /*18: test   %rax,%rax */
0x74, 0x36,                               /*1b: je     53 <op_tclass+0x53> */
0x48, 0x8b, 0x4b, 0x18,                   /*1d: mov    0x18(%rbx),%rcx */
0x8b, 0x10,                               /*21: mov    (%rax),%edx */
0x0f, 0xb6, 0xf2,                         /*23: movzbl %dl,%esi */
0x83, 0xfe, 0x05,                         /*26: cmp    $0x5,%esi */
0x77, 0x05,                               /*29: ja     30 <op_tclass+0x30> */
0x83, 0xfe, 0x01,                         /*2b: cmp    $0x1,%esi */
0x75, 0x1a,                               /*2e: jne    4a <op_tclass+0x4a> */
0xc1, 0xe2, 0x0e,                         /*30: shl    $0xe,%edx */
0x81, 0xc2, 0x00, 0x40, 0x00, 0x00,       /*33: add    $0x4000,%edx */
0x81, 0xca, 0x00, 0x00, 0xf0, 0xff,       /*39: or     $0xfff00000,%edx */
0x48, 0xc1, 0xe2, 0x20,                   /*3f: shl    $0x20,%rdx */
0x48, 0xc1, 0xe8, 0x02,                   /*43: shr    $0x2,%rax */
0x48, 0x09, 0xd0,                         /*47: or     %rdx,%rax */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*4a: mov    %rax,0xab0800(%rcx) */
0xeb, 0x5c,                               /*51: jmp    af <op_tclass+0xaf> */
0x48, 0x8b, 0x83, 0x98, 0x01, 0x00, 0x00, /*53: mov    0x198(%rbx),%rax */
0x48, 0x8b, 0x30,                         /*5a: mov    (%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*5d: mov    %r14,%rdi */
0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*60: callq  *0x118(%rbx) */
0x49, 0x89, 0xc7,                         /*66: mov    %rax,%r15 */
0x48, 0x8b, 0xb3, 0xa0, 0x02, 0x00, 0x00, /*69: mov    0x2a0(%rbx),%rsi */
0xba, 0x19, 0x00, 0x00, 0x00,             /*70: mov    $0x19,%edx */
0x4c, 0x89, 0xf7,                         /*75: mov    %r14,%rdi */
0xff, 0x93, 0x80, 0x00, 0x00, 0x00,       /*78: callq  *0x80(%rbx) */
0x4c, 0x89, 0xf7,                         /*7e: mov    %r14,%rdi */
0x4c, 0x89, 0xfe,                         /*81: mov    %r15,%rsi */
0x48, 0x89, 0xc2,                         /*84: mov    %rax,%rdx */
0xff, 0x93, 0xc8, 0x01, 0x00, 0x00,       /*87: callq  *0x1c8(%rbx) */
0x48, 0xc1, 0xe0, 0x02,                   /*8d: shl    $0x2,%rax */
0x48, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*91: movabs $0xfffffffffffc,%rcx */
0x48, 0x21, 0xc1,                         /*9b: and    %rax,%rcx */
0x48, 0x8b, 0x43, 0x50,                   /*9e: mov    0x50(%rbx),%rax */
0x48, 0x89, 0x48, 0x28,                   /*a2: mov    %rcx,0x28(%rax) */
0x48, 0x89, 0xdf,                         /*a6: mov    %rbx,%rdi */
0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*a9: callq  *0x1b0(%rbx) */
0x48, 0x89, 0xdf,                         /*af: mov    %rbx,%rdi */
0x5b,                                     /*b2: pop    %rbx */
0x41, 0x5e,                               /*b3: pop    %r14 */
0x41, 0x5f,                               /*b5: pop    %r15 */

};

static void op_tclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 77)) = a * 8 + 0;
}

static void op_tclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_tclass_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 12..15]], "b"=>[[1, 0, 17..20]], "c"=>[[1, 0, 22..25]]} */
static uint8_t op_debug[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0xbb, 0xa8, 0x02, 0x00, 0x00, /*4: mov    0x2a8(%rbx),%rdi */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*b: mov    $0xab0000,%esi */
0xba, 0x00, 0x00, 0xbc, 0x00,             /*10: mov    $0xbc0000,%edx */
0xb9, 0x00, 0x00, 0xcd, 0x00,             /*15: mov    $0xcd0000,%ecx */
0x31, 0xc0,                               /*1a: xor    %eax,%eax */
0xff, 0x93, 0x78, 0x01, 0x00, 0x00,       /*1c: callq  *0x178(%rbx) */
0x48, 0x89, 0xdf,                         /*22: mov    %rbx,%rdi */
0x5b,                                     /*25: pop    %rbx */

};

static void op_debug_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 12)) = a * 1 + 0;
  *((int32_t *)(op + 17)) = b * 1 + 0;
  *((int32_t *)(op + 22)) = c * 1 + 0;
}

static void op_debug_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_debug_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_stop[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0xff, 0x93, 0xd0, 0x01, 0x00, 0x00,       /*4: callq  *0x1d0(%rbx) */
0x48, 0x89, 0xdf,                         /*a: mov    %rbx,%rdi */
0x5b,                                     /*d: pop    %rbx */

};

static void op_stop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_stop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_stop_set_args(op, 0,0,0,op_idx);
}


/* args: {"b"=>[[8, 0, 19..22]]} */
static uint8_t op_err[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x20,                   /*8: mov    0x20(%rbx),%rax */
0x4c, 0x8b, 0x73, 0x50,                   /*c: mov    0x50(%rbx),%r14 */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*10: mov    0xbc0800(%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*17: mov    %r14,%rdi */
0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*1a: callq  *0x1d8(%rbx) */
0x49, 0x89, 0xc7,                         /*20: mov    %rax,%r15 */
0x48, 0x8b, 0x83, 0x58, 0x02, 0x00, 0x00, /*23: mov    0x258(%rbx),%rax */
0x48, 0x8b, 0x30,                         /*2a: mov    (%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*2d: mov    %r14,%rdi */
0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*30: callq  *0x118(%rbx) */
0x4c, 0x89, 0xf7,                         /*36: mov    %r14,%rdi */
0x48, 0x89, 0xc6,                         /*39: mov    %rax,%rsi */
0x4c, 0x89, 0xfa,                         /*3c: mov    %r15,%rdx */
0xff, 0x93, 0xc8, 0x01, 0x00, 0x00,       /*3f: callq  *0x1c8(%rbx) */
0x48, 0xc1, 0xe0, 0x02,                   /*45: shl    $0x2,%rax */
0x48, 0xb9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,/*49: movabs $0xfffffffffffc,%rcx */
0x48, 0x21, 0xc1,                         /*53: and    %rax,%rcx */
0x48, 0x8b, 0x43, 0x50,                   /*56: mov    0x50(%rbx),%rax */
0x48, 0x89, 0x48, 0x28,                   /*5a: mov    %rcx,0x28(%rax) */
0x48, 0x89, 0xdf,                         /*5e: mov    %rbx,%rdi */
0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*61: callq  *0x1b0(%rbx) */
0x48, 0x89, 0xdf,                         /*67: mov    %rbx,%rdi */
0x5b,                                     /*6a: pop    %rbx */
0x41, 0x5e,                               /*6b: pop    %r14 */
0x41, 0x5f,                               /*6d: pop    %r15 */

};

static void op_err_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = b * 8 + 0;
}

static void op_err_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_err_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}

typedef void (*jit_args_func_t)(uint8_t *op, mrb_code c, uint32_t op_idx);
static jit_args_func_t arg_funcs[78];
uint8_t* ops[78];
static char *op_names[78];

static size_t op_sizes[] = {
  sizeof(op_nop), /* 0 */
  sizeof(op_move), /* 20 */
  sizeof(op_loadl), /* 24 */
  sizeof(op_loadi), /* 28 */
  sizeof(op_loadsym), /* 34 */
  sizeof(op_loadnil), /* 28 */
  sizeof(op_loadself), /* 16 */
  sizeof(op_loadt), /* 28 */
  sizeof(op_loadf), /* 28 */
  sizeof(op_getglobal), /* 43 */
  sizeof(op_setglobal), /* 39 */
  sizeof(op_getspecial), /* 38 */
  sizeof(op_setspecial), /* 34 */
  sizeof(op_getiv), /* 43 */
  sizeof(op_setiv), /* 39 */
  sizeof(op_getcv), /* 83 */
  sizeof(op_setcv), /* 39 */
  sizeof(op_getconst), /* 91 */
  sizeof(op_setconst), /* 39 */
  sizeof(op_getmcnst), /* 102 */
  sizeof(op_setmcnst), /* 46 */
  sizeof(op_getupvar), /* 111 */
  sizeof(op_setupvar), /* 97 */
  sizeof(op_jmp), /* 0 */
  sizeof(op_jmpif), /* 48 */
  sizeof(op_jmpnot), /* 48 */
  sizeof(op_onerr), /* 146 */
  sizeof(op_rescue), /* 118 */
  sizeof(op_poperr), /* 35 */
  sizeof(op_raise), /* 50 */
  sizeof(op_epush), /* 166 */
  sizeof(op_epop), /* 86 */
  sizeof(op_send), /* 112 */
  sizeof(op_sendb), /* 57 */
  sizeof(op_fsend), /* 0 */
  sizeof(op_call), /* 459 */
  sizeof(op_super), /* 672 */
  sizeof(op_argary), /* 752 */
  sizeof(op_enter), /* 1698 */
  sizeof(op_enter_method_m), /* 438 */
  sizeof(op_karg), /* 0 */
  sizeof(op_kdict), /* 0 */
  sizeof(op_return), /* 39 */
  sizeof(op_break), /* 25 */
  sizeof(op_tailcall), /* 724 */
  sizeof(op_blkpush), /* 201 */
  sizeof(op_add), /* 347 */
  sizeof(op_addi), /* 207 */
  sizeof(op_sub), /* 322 */
  sizeof(op_subi), /* 207 */
  sizeof(op_mul), /* 348 */
  sizeof(op_div), /* 318 */
  sizeof(op_eq), /* 309 */
  sizeof(op_lt), /* 270 */
  sizeof(op_le), /* 270 */
  sizeof(op_gt), /* 270 */
  sizeof(op_ge), /* 270 */
  sizeof(op_array), /* 58 */
  sizeof(op_arycat), /* 72 */
  sizeof(op_arypush), /* 36 */
  sizeof(op_aref), /* 98 */
  sizeof(op_aset), /* 41 */
  sizeof(op_apost), /* 448 */
  sizeof(op_string), /* 57 */
  sizeof(op_strcat), /* 36 */
  sizeof(op_hash), /* 151 */
  sizeof(op_lambda), /* 112 */
  sizeof(op_range), /* 65 */
  sizeof(op_oclass), /* 60 */
  sizeof(op_class), /* 195 */
  sizeof(op_module), /* 185 */
  sizeof(op_exec), /* 382 */
  sizeof(op_method), /* 76 */
  sizeof(op_sclass), /* 53 */
  sizeof(op_tclass), /* 183 */
  sizeof(op_debug), /* 38 */
  sizeof(op_stop), /* 14 */
  sizeof(op_err), /* 111 */

};

extern void init_symtbl();
void init_ops() {
  static int init = 0;
  if(init == 0) {
    init = 1;
    init_symtbl();
    ops[0] = op_nop;
    op_names[0] = "op_nop";
    arg_funcs[0] = op_nop_set_args_from_code;
    ops[1] = op_move;
    op_names[1] = "op_move";
    arg_funcs[1] = op_move_set_args_from_code;
    ops[2] = op_loadl;
    op_names[2] = "op_loadl";
    arg_funcs[2] = op_loadl_set_args_from_code;
    ops[3] = op_loadi;
    op_names[3] = "op_loadi";
    arg_funcs[3] = op_loadi_set_args_from_code;
    ops[4] = op_loadsym;
    op_names[4] = "op_loadsym";
    arg_funcs[4] = op_loadsym_set_args_from_code;
    ops[5] = op_loadnil;
    op_names[5] = "op_loadnil";
    arg_funcs[5] = op_loadnil_set_args_from_code;
    ops[6] = op_loadself;
    op_names[6] = "op_loadself";
    arg_funcs[6] = op_loadself_set_args_from_code;
    ops[7] = op_loadt;
    op_names[7] = "op_loadt";
    arg_funcs[7] = op_loadt_set_args_from_code;
    ops[8] = op_loadf;
    op_names[8] = "op_loadf";
    arg_funcs[8] = op_loadf_set_args_from_code;
    ops[9] = op_getglobal;
    op_names[9] = "op_getglobal";
    arg_funcs[9] = op_getglobal_set_args_from_code;
    ops[10] = op_setglobal;
    op_names[10] = "op_setglobal";
    arg_funcs[10] = op_setglobal_set_args_from_code;
    ops[11] = op_getspecial;
    op_names[11] = "op_getspecial";
    arg_funcs[11] = op_getspecial_set_args_from_code;
    ops[12] = op_setspecial;
    op_names[12] = "op_setspecial";
    arg_funcs[12] = op_setspecial_set_args_from_code;
    ops[13] = op_getiv;
    op_names[13] = "op_getiv";
    arg_funcs[13] = op_getiv_set_args_from_code;
    ops[14] = op_setiv;
    op_names[14] = "op_setiv";
    arg_funcs[14] = op_setiv_set_args_from_code;
    ops[15] = op_getcv;
    op_names[15] = "op_getcv";
    arg_funcs[15] = op_getcv_set_args_from_code;
    ops[16] = op_setcv;
    op_names[16] = "op_setcv";
    arg_funcs[16] = op_setcv_set_args_from_code;
    ops[17] = op_getconst;
    op_names[17] = "op_getconst";
    arg_funcs[17] = op_getconst_set_args_from_code;
    ops[18] = op_setconst;
    op_names[18] = "op_setconst";
    arg_funcs[18] = op_setconst_set_args_from_code;
    ops[19] = op_getmcnst;
    op_names[19] = "op_getmcnst";
    arg_funcs[19] = op_getmcnst_set_args_from_code;
    ops[20] = op_setmcnst;
    op_names[20] = "op_setmcnst";
    arg_funcs[20] = op_setmcnst_set_args_from_code;
    ops[21] = op_getupvar;
    op_names[21] = "op_getupvar";
    arg_funcs[21] = op_getupvar_set_args_from_code;
    ops[22] = op_setupvar;
    op_names[22] = "op_setupvar";
    arg_funcs[22] = op_setupvar_set_args_from_code;
    ops[23] = op_jmp;
    op_names[23] = "op_jmp";
    arg_funcs[23] = op_jmp_set_args_from_code;
    ops[24] = op_jmpif;
    op_names[24] = "op_jmpif";
    arg_funcs[24] = op_jmpif_set_args_from_code;
    ops[25] = op_jmpnot;
    op_names[25] = "op_jmpnot";
    arg_funcs[25] = op_jmpnot_set_args_from_code;
    ops[26] = op_onerr;
    op_names[26] = "op_onerr";
    arg_funcs[26] = op_onerr_set_args_from_code;
    ops[27] = op_rescue;
    op_names[27] = "op_rescue";
    arg_funcs[27] = op_rescue_set_args_from_code;
    ops[28] = op_poperr;
    op_names[28] = "op_poperr";
    arg_funcs[28] = op_poperr_set_args_from_code;
    ops[29] = op_raise;
    op_names[29] = "op_raise";
    arg_funcs[29] = op_raise_set_args_from_code;
    ops[30] = op_epush;
    op_names[30] = "op_epush";
    arg_funcs[30] = op_epush_set_args_from_code;
    ops[31] = op_epop;
    op_names[31] = "op_epop";
    arg_funcs[31] = op_epop_set_args_from_code;
    ops[32] = op_send;
    op_names[32] = "op_send";
    arg_funcs[32] = op_send_set_args_from_code;
    ops[33] = op_sendb;
    op_names[33] = "op_sendb";
    arg_funcs[33] = op_sendb_set_args_from_code;
    ops[34] = op_fsend;
    op_names[34] = "op_fsend";
    arg_funcs[34] = op_fsend_set_args_from_code;
    ops[35] = op_call;
    op_names[35] = "op_call";
    arg_funcs[35] = op_call_set_args_from_code;
    ops[36] = op_super;
    op_names[36] = "op_super";
    arg_funcs[36] = op_super_set_args_from_code;
    ops[37] = op_argary;
    op_names[37] = "op_argary";
    arg_funcs[37] = op_argary_set_args_from_code;
    ops[38] = op_enter;
    op_names[38] = "op_enter";
    arg_funcs[38] = op_enter_set_args_from_code;
    ops[39] = op_enter_method_m;
    op_names[39] = "op_enter_method_m";
    arg_funcs[39] = op_enter_method_m_set_args_from_code;
    ops[40] = op_karg;
    op_names[40] = "op_karg";
    arg_funcs[40] = op_karg_set_args_from_code;
    ops[41] = op_kdict;
    op_names[41] = "op_kdict";
    arg_funcs[41] = op_kdict_set_args_from_code;
    ops[42] = op_return;
    op_names[42] = "op_return";
    arg_funcs[42] = op_return_set_args_from_code;
    ops[43] = op_break;
    op_names[43] = "op_break";
    arg_funcs[43] = op_break_set_args_from_code;
    ops[44] = op_tailcall;
    op_names[44] = "op_tailcall";
    arg_funcs[44] = op_tailcall_set_args_from_code;
    ops[45] = op_blkpush;
    op_names[45] = "op_blkpush";
    arg_funcs[45] = op_blkpush_set_args_from_code;
    ops[46] = op_add;
    op_names[46] = "op_add";
    arg_funcs[46] = op_add_set_args_from_code;
    ops[47] = op_addi;
    op_names[47] = "op_addi";
    arg_funcs[47] = op_addi_set_args_from_code;
    ops[48] = op_sub;
    op_names[48] = "op_sub";
    arg_funcs[48] = op_sub_set_args_from_code;
    ops[49] = op_subi;
    op_names[49] = "op_subi";
    arg_funcs[49] = op_subi_set_args_from_code;
    ops[50] = op_mul;
    op_names[50] = "op_mul";
    arg_funcs[50] = op_mul_set_args_from_code;
    ops[51] = op_div;
    op_names[51] = "op_div";
    arg_funcs[51] = op_div_set_args_from_code;
    ops[52] = op_eq;
    op_names[52] = "op_eq";
    arg_funcs[52] = op_eq_set_args_from_code;
    ops[53] = op_lt;
    op_names[53] = "op_lt";
    arg_funcs[53] = op_lt_set_args_from_code;
    ops[54] = op_le;
    op_names[54] = "op_le";
    arg_funcs[54] = op_le_set_args_from_code;
    ops[55] = op_gt;
    op_names[55] = "op_gt";
    arg_funcs[55] = op_gt_set_args_from_code;
    ops[56] = op_ge;
    op_names[56] = "op_ge";
    arg_funcs[56] = op_ge_set_args_from_code;
    ops[57] = op_array;
    op_names[57] = "op_array";
    arg_funcs[57] = op_array_set_args_from_code;
    ops[58] = op_arycat;
    op_names[58] = "op_arycat";
    arg_funcs[58] = op_arycat_set_args_from_code;
    ops[59] = op_arypush;
    op_names[59] = "op_arypush";
    arg_funcs[59] = op_arypush_set_args_from_code;
    ops[60] = op_aref;
    op_names[60] = "op_aref";
    arg_funcs[60] = op_aref_set_args_from_code;
    ops[61] = op_aset;
    op_names[61] = "op_aset";
    arg_funcs[61] = op_aset_set_args_from_code;
    ops[62] = op_apost;
    op_names[62] = "op_apost";
    arg_funcs[62] = op_apost_set_args_from_code;
    ops[63] = op_string;
    op_names[63] = "op_string";
    arg_funcs[63] = op_string_set_args_from_code;
    ops[64] = op_strcat;
    op_names[64] = "op_strcat";
    arg_funcs[64] = op_strcat_set_args_from_code;
    ops[65] = op_hash;
    op_names[65] = "op_hash";
    arg_funcs[65] = op_hash_set_args_from_code;
    ops[66] = op_lambda;
    op_names[66] = "op_lambda";
    arg_funcs[66] = op_lambda_set_args_from_code;
    ops[67] = op_range;
    op_names[67] = "op_range";
    arg_funcs[67] = op_range_set_args_from_code;
    ops[68] = op_oclass;
    op_names[68] = "op_oclass";
    arg_funcs[68] = op_oclass_set_args_from_code;
    ops[69] = op_class;
    op_names[69] = "op_class";
    arg_funcs[69] = op_class_set_args_from_code;
    ops[70] = op_module;
    op_names[70] = "op_module";
    arg_funcs[70] = op_module_set_args_from_code;
    ops[71] = op_exec;
    op_names[71] = "op_exec";
    arg_funcs[71] = op_exec_set_args_from_code;
    ops[72] = op_method;
    op_names[72] = "op_method";
    arg_funcs[72] = op_method_set_args_from_code;
    ops[73] = op_sclass;
    op_names[73] = "op_sclass";
    arg_funcs[73] = op_sclass_set_args_from_code;
    ops[74] = op_tclass;
    op_names[74] = "op_tclass";
    arg_funcs[74] = op_tclass_set_args_from_code;
    ops[75] = op_debug;
    op_names[75] = "op_debug";
    arg_funcs[75] = op_debug_set_args_from_code;
    ops[76] = op_stop;
    op_names[76] = "op_stop";
    arg_funcs[76] = op_stop_set_args_from_code;
    ops[77] = op_err;
    op_names[77] = "op_err";
    arg_funcs[77] = op_err_set_args_from_code;
  }
}

uint8_t *jit_return(uint8_t *b) {
  *b++ = 0xc3;
  return b;
}
uint8_t *jit_jump(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 235;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *b++ = 233;
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
uint8_t *jit_jump_if(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 116;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *((uint16_t *)(b)) = (uint16_t) -31729;
    b += sizeof(uint16_t);
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
uint8_t *jit_jump_not(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 117;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *((uint16_t *)(b)) = (uint16_t) -31473;
    b += sizeof(uint16_t);
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
