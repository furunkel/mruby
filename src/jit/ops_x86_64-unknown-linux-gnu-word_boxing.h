
/* args: {} */
static uint8_t op_nop[] = {

};

static void op_nop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_nop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_nop_set_args(op, 0,0,0,op_idx);
}


/* args: {"b"=>[[8, 0, 7..10]], "a"=>[[8, 0, 14..17]]} */
static uint8_t op_move[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xbc, 0x00, /*4: mov    0xbc0800(%rax),%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*b: mov    %rcx,0xab0800(%rax) */

};

static void op_move_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = b * 8 + 0;
  *((int32_t *)(op + 14)) = a * 8 + 0;
}

static void op_move_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_move_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[8, 0, 11..14]], "a"=>[[8, 0, 18..21]]} */
static uint8_t op_loadl[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x4f, 0x20,                   /*4: mov    0x20(%rdi),%rcx */
0x48, 0x8b, 0x89, 0x00, 0x08, 0xbc, 0x00, /*8: mov    0xbc0800(%rcx),%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*f: mov    %rcx,0xab0800(%rax) */

};

static void op_loadl_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 11)) = b * 8 + 0;
  *((int32_t *)(op + 18)) = a * 8 + 0;
}

static void op_loadl_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadl_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 7..10], [8, 0, 21..24], [8, 0, 36..39], [8, 0, 46..49]]} */
static uint8_t op_loadi[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4: movq   $0x0,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*f: mov    0x18(%rdi),%rax */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*13: mov    0xab0800(%rax),%ecx */
0x83, 0xe1, 0x01,                         /*19: and    $0x1,%ecx */
0x81, 0xc9, 0x00, 0x00, 0x78, 0x01,       /*1c: or     $0x1780000,%ecx */
0x89, 0x88, 0x00, 0x08, 0xab, 0x00,       /*22: mov    %ecx,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*28: mov    0x18(%rdi),%rax */
0x83, 0x88, 0x00, 0x08, 0xab, 0x00, 0x01, /*2c: orl    $0x1,0xab0800(%rax) */

};

static void op_loadi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 0;
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 36)) = a * 8 + 0;
  *((int32_t *)(op + 46)) = a * 8 + 0;
}

static void op_loadi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadi_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 7..10], [8, 4, 31..34], [8, 0, 41..44]], "b"=>[[4, 0, 25..28]]} */
static uint8_t op_loadsym[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4: movq   $0x0,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*f: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x4f, 0x28,                   /*13: mov    0x28(%rdi),%rcx */
0x8b, 0x89, 0x00, 0x04, 0xbc, 0x00,       /*17: mov    0xbc0400(%rcx),%ecx */
0x89, 0x88, 0x04, 0x08, 0xab, 0x00,       /*1d: mov    %ecx,0xab0804(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*23: mov    0x18(%rdi),%rax */
0xc6, 0x80, 0x00, 0x08, 0xab, 0x00, 0x0e, /*27: movb   $0xe,0xab0800(%rax) */

};

static void op_loadsym_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 0;
  *((int32_t *)(op + 31)) = a * 8 + 4;
  *((int32_t *)(op + 41)) = a * 8 + 0;
  *((int32_t *)(op + 25)) = b * 4 + 0;
}

static void op_loadsym_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadsym_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 7..10], [8, 0, 21..24], [8, 0, 33..36]]} */
static uint8_t op_loadnil[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4: movq   $0x0,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*f: mov    0x18(%rdi),%rax */
0x83, 0xa0, 0x00, 0x08, 0xab, 0x00, 0x01, /*13: andl   $0x1,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*1a: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*1e: movq   $0x0,0xab0800(%rax) */

};

static void op_loadnil_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 0;
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 33)) = a * 8 + 0;
}

static void op_loadnil_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadnil_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 10..13]]} */
static uint8_t op_loadself[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x08,                         /*4: mov    (%rax),%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*7: mov    %rcx,0xab0800(%rax) */

};

static void op_loadself_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 10)) = a * 8 + 0;
}

static void op_loadself_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadself_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 7..10], [8, 0, 21..24], [8, 0, 33..36], [8, 0, 44..47]]} */
static uint8_t op_loadt[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4: movq   $0x0,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*f: mov    0x18(%rdi),%rax */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*13: mov    0xab0800(%rax),%ecx */
0x83, 0xe1, 0x01,                         /*19: and    $0x1,%ecx */
0x83, 0xc9, 0x02,                         /*1c: or     $0x2,%ecx */
0x89, 0x88, 0x00, 0x08, 0xab, 0x00,       /*1f: mov    %ecx,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*25: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*29: movq   $0x4,0xab0800(%rax) */

};

static void op_loadt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 0;
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 33)) = a * 8 + 0;
  *((int32_t *)(op + 44)) = a * 8 + 0;
}

static void op_loadt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadt_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 7..10], [8, 0, 21..24], [8, 0, 33..36], [8, 0, 44..47]]} */
static uint8_t op_loadf[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4: movq   $0x0,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*f: mov    0x18(%rdi),%rax */
0x8b, 0x88, 0x00, 0x08, 0xab, 0x00,       /*13: mov    0xab0800(%rax),%ecx */
0x83, 0xe1, 0x01,                         /*19: and    $0x1,%ecx */
0x83, 0xc9, 0x02,                         /*1c: or     $0x2,%ecx */
0x89, 0x88, 0x00, 0x08, 0xab, 0x00,       /*1f: mov    %ecx,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*25: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*29: movq   $0x2,0xab0800(%rax) */

};

static void op_loadf_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 0;
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 33)) = a * 8 + 0;
  *((int32_t *)(op + 44)) = a * 8 + 0;
}

static void op_loadf_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_loadf_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[4, 0, 20..23]], "a"=>[[8, 0, 33..36]]} */
static uint8_t op_getglobal[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*6: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x28,                   /*e: mov    0x28(%rbx),%rax */
0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*12: mov    0xbc0400(%rax),%esi */
0xff, 0x93, 0xb8, 0x01, 0x00, 0x00,       /*18: callq  *0x1b8(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*1e: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
0x5b,                                     /*28: pop    %rbx */
0x41, 0x5e,                               /*29: pop    %r14 */

};

static void op_getglobal_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 20)) = b * 4 + 0;
  *((int32_t *)(op + 33)) = a * 8 + 0;
}

static void op_getglobal_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getglobal_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28]]} */
static uint8_t op_setglobal[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rdx */
0xff, 0x93, 0x90, 0x00, 0x00, 0x00,       /*1d: callq  *0x90(%rbx) */
0x48, 0x89, 0xdf,                         /*23: mov    %rbx,%rdi */
0x5b,                                     /*26: pop    %rbx */

};

static void op_setglobal_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
}

static void op_setglobal_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setglobal_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[1, 0, 15..18]], "a"=>[[8, 0, 28..31]]} */
static uint8_t op_getspecial[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0xbe, 0x00, 0x00, 0xbc, 0x00,             /*e: mov    $0xbc0000,%esi */
0xff, 0x93, 0x28, 0x02, 0x00, 0x00,       /*13: callq  *0x228(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*19: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*20: mov    %rbx,%rdi */
0x5b,                                     /*23: pop    %rbx */
0x41, 0x5e,                               /*24: pop    %r14 */

};

static void op_getspecial_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = b * 1 + 0;
  *((int32_t *)(op + 28)) = a * 8 + 0;
}

static void op_getspecial_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getspecial_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18]], "b"=>[[1, 0, 20..23]]} */
static uint8_t op_setspecial[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*8: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rdx */
0xbe, 0x00, 0x00, 0xbc, 0x00,             /*13: mov    $0xbc0000,%esi */
0xff, 0x93, 0x30, 0x01, 0x00, 0x00,       /*18: callq  *0x130(%rbx) */
0x48, 0x89, 0xdf,                         /*1e: mov    %rbx,%rdi */
0x5b,                                     /*21: pop    %rbx */

};

static void op_setspecial_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
  *((int32_t *)(op + 20)) = b * 1 + 0;
}

static void op_setspecial_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setspecial_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 20..23]], "a"=>[[8, 0, 33..36]]} */
static uint8_t op_getiv[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*6: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x28,                   /*e: mov    0x28(%rbx),%rax */
0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*12: mov    0xbc0400(%rax),%esi */
0xff, 0x93, 0xb8, 0x00, 0x00, 0x00,       /*18: callq  *0xb8(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*1e: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
0x5b,                                     /*28: pop    %rbx */
0x41, 0x5e,                               /*29: pop    %r14 */

};

static void op_getiv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 20)) = b * 4 + 0;
  *((int32_t *)(op + 33)) = a * 8 + 0;
}

static void op_getiv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getiv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28]]} */
static uint8_t op_setiv[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rdx */
0xff, 0x93, 0xe8, 0x01, 0x00, 0x00,       /*1d: callq  *0x1e8(%rbx) */
0x48, 0x89, 0xdf,                         /*23: mov    %rbx,%rdi */
0x5b,                                     /*26: pop    %rbx */

};

static void op_setiv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
}

static void op_setiv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setiv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 40..43]], "a"=>[[8, 0, 53..56]]} */
static uint8_t op_getcv[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x10,                   /*6: mov    0x10(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*a: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*e: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*12: mov    0x20(%rcx),%rcx */
0x48, 0x89, 0x41, 0x38,                   /*16: mov    %rax,0x38(%rcx) */
0x48, 0x8b, 0x7b, 0x50,                   /*1a: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0x73, 0x18,                   /*1e: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x28,                   /*22: mov    0x28(%rbx),%rax */
0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*26: mov    0xbc0400(%rax),%esi */
0xff, 0x93, 0xd8, 0x00, 0x00, 0x00,       /*2c: callq  *0xd8(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*32: mov    %rax,0xab0800(%r14) */
0x48, 0x8b, 0x43, 0x50,                   /*39: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*3d: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*41: mov    0x20(%rax),%rax */
0x48, 0xc7, 0x40, 0x38, 0x00, 0x00, 0x00, 0x00,/*45: movq   $0x0,0x38(%rax) */
0x48, 0x89, 0xdf,                         /*4d: mov    %rbx,%rdi */
0x5b,                                     /*50: pop    %rbx */
0x41, 0x5e,                               /*51: pop    %r14 */

};

static void op_getcv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 40)) = b * 4 + 0;
  *((int32_t *)(op + 53)) = a * 8 + 0;
}

static void op_getcv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getcv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28]]} */
static uint8_t op_setcv[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rdx */
0xff, 0x93, 0x08, 0x02, 0x00, 0x00,       /*1d: callq  *0x208(%rbx) */
0x48, 0x89, 0xdf,                         /*23: mov    %rbx,%rdi */
0x5b,                                     /*26: pop    %rbx */

};

static void op_setcv_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
}

static void op_setcv_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setcv_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 34..37]], "a"=>[[8, 0, 83..86]]} */
static uint8_t op_getconst[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x10,                   /*4: mov    0x10(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*8: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*c: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*10: mov    0x20(%rcx),%rcx */
0x48, 0x89, 0x41, 0x38,                   /*14: mov    %rax,0x38(%rcx) */
0x48, 0x8b, 0x43, 0x28,                   /*18: mov    0x28(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*1c: mov    0x50(%rbx),%rdi */
0x8b, 0xb0, 0x00, 0x04, 0xbc, 0x00,       /*20: mov    0xbc0400(%rax),%esi */
0xff, 0x93, 0x98, 0x00, 0x00, 0x00,       /*26: callq  *0x98(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*2c: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*30: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*34: mov    0x20(%rcx),%rcx */
0x48, 0xc7, 0x41, 0x38, 0x00, 0x00, 0x00, 0x00,/*38: movq   $0x0,0x38(%rcx) */
0x48, 0x8b, 0x4b, 0x50,                   /*40: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*44: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*48: mov    0x8(%rcx),%rcx */
0x48, 0x89, 0x4b, 0x18,                   /*4c: mov    %rcx,0x18(%rbx) */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*50: mov    %rax,0xab0800(%rcx) */
0x48, 0x89, 0xdf,                         /*57: mov    %rbx,%rdi */
0x5b,                                     /*5a: pop    %rbx */

};

static void op_getconst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 34)) = b * 4 + 0;
  *((int32_t *)(op + 83)) = a * 8 + 0;
}

static void op_getconst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getconst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28]]} */
static uint8_t op_setconst[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0xb1, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%esi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rdx */
0xff, 0x93, 0xb0, 0x01, 0x00, 0x00,       /*1d: callq  *0x1b0(%rbx) */
0x48, 0x89, 0xdf,                         /*23: mov    %rbx,%rdi */
0x5b,                                     /*26: pop    %rbx */

};

static void op_setconst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
}

static void op_setconst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setconst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 38..41]], "a"=>[[8, 0, 45..48], [8, 0, 94..97]]} */
static uint8_t op_getmcnst[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x10,                   /*4: mov    0x10(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*8: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*c: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*10: mov    0x20(%rcx),%rcx */
0x48, 0x89, 0x41, 0x38,                   /*14: mov    %rax,0x38(%rcx) */
0x48, 0x8b, 0x7b, 0x50,                   /*18: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*1c: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*20: mov    0x28(%rbx),%rcx */
0x8b, 0x91, 0x00, 0x04, 0xbc, 0x00,       /*24: mov    0xbc0400(%rcx),%edx */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*2a: mov    0xab0800(%rax),%rsi */
0xff, 0x93, 0x10, 0x02, 0x00, 0x00,       /*31: callq  *0x210(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*37: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*3b: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*3f: mov    0x20(%rcx),%rcx */
0x48, 0xc7, 0x41, 0x38, 0x00, 0x00, 0x00, 0x00,/*43: movq   $0x0,0x38(%rcx) */
0x48, 0x8b, 0x4b, 0x50,                   /*4b: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*4f: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*53: mov    0x8(%rcx),%rcx */
0x48, 0x89, 0x4b, 0x18,                   /*57: mov    %rcx,0x18(%rbx) */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*5b: mov    %rax,0xab0800(%rcx) */
0x48, 0x89, 0xdf,                         /*62: mov    %rbx,%rdi */
0x5b,                                     /*65: pop    %rbx */

};

static void op_getmcnst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 38)) = b * 4 + 0;
  *((int32_t *)(op + 45)) = a * 8 + 0;
  *((int32_t *)(op + 94)) = a * 8 + 0;
}

static void op_getmcnst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getmcnst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28], [8, 8, 32..35]]} */
static uint8_t op_setmcnst[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0x91, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%edx */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rcx */
0x48, 0x8b, 0xb0, 0x08, 0x08, 0xab, 0x00, /*1d: mov    0xab0808(%rax),%rsi */
0xff, 0x93, 0x00, 0x01, 0x00, 0x00,       /*24: callq  *0x100(%rbx) */
0x48, 0x89, 0xdf,                         /*2a: mov    %rbx,%rdi */
0x5b,                                     /*2d: pop    %rbx */

};

static void op_setmcnst_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
  *((int32_t *)(op + 32)) = a * 8 + 8;
}

static void op_setmcnst_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setmcnst_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"c"=>[[1, 0, 11..14]], "a"=>[[8, 0, 78..81], [8, 0, 102..105]], "b"=>[[8, 0, 95..98]]} */
static uint8_t op_getupvar[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*a: mov    $0xcd0000,%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*f: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*13: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*17: mov    0x20(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*1b: mov    0x8(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x28,                   /*1f: mov    0x28(%rcx),%rcx */
0xeb, 0x11,                               /*23: jmp    36 <op_getupvar+0x36> */
0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*25: data16 nopw %cs:0x0(%rax,%rax,1) */
0xff, 0xc8,                               /*30: dec    %eax */
0x48, 0x8b, 0x49, 0x08,                   /*32: mov    0x8(%rcx),%rcx */
0x48, 0x85, 0xc9,                         /*36: test   %rcx,%rcx */
0x0f, 0x94, 0xc2,                         /*39: sete   %dl */
0x85, 0xc0,                               /*3c: test   %eax,%eax */
0x74, 0x07,                               /*3e: je     47 <op_getupvar+0x47> */
0xf6, 0xc2, 0x01,                         /*40: test   $0x1,%dl */
0x74, 0xeb,                               /*43: je     30 <op_getupvar+0x30> */
0xeb, 0x04,                               /*45: jmp    4b <op_getupvar+0x4b> */
0x84, 0xd2,                               /*47: test   %dl,%dl */
0x74, 0x0d,                               /*49: je     58 <op_getupvar+0x58> */
0x49, 0xc7, 0x86, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4b: movq   $0x0,0xab0800(%r14) */
0xeb, 0x12,                               /*56: jmp    6a <op_getupvar+0x6a> */
0x48, 0x8b, 0x41, 0x18,                   /*58: mov    0x18(%rcx),%rax */
0x48, 0x8b, 0x80, 0x00, 0x08, 0xbc, 0x00, /*5c: mov    0xbc0800(%rax),%rax */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*63: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*6a: mov    %rbx,%rdi */
0x5b,                                     /*6d: pop    %rbx */
0x41, 0x5e,                               /*6e: pop    %r14 */

};

static void op_getupvar_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 11)) = c * 1 + 0;
  *((int32_t *)(op + 78)) = a * 8 + 0;
  *((int32_t *)(op + 102)) = a * 8 + 0;
  *((int32_t *)(op + 95)) = b * 8 + 0;
}

static void op_getupvar_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_getupvar_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"c"=>[[1, 0, 5..8]], "a"=>[[8, 0, 70..73]], "b"=>[[8, 0, 77..80]]} */
static uint8_t op_setupvar[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*4: mov    $0xcd0000,%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*9: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*d: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*11: mov    0x20(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*15: mov    0x8(%rcx),%rcx */
0x48, 0x8b, 0x71, 0x28,                   /*19: mov    0x28(%rcx),%rsi */
0xeb, 0x07,                               /*1d: jmp    26 <op_setupvar+0x26> */
0x90,                                     /*1f: nop */
0xff, 0xc8,                               /*20: dec    %eax */
0x48, 0x8b, 0x76, 0x08,                   /*22: mov    0x8(%rsi),%rsi */
0x48, 0x85, 0xf6,                         /*26: test   %rsi,%rsi */
0x0f, 0x94, 0xc1,                         /*29: sete   %cl */
0x85, 0xc0,                               /*2c: test   %eax,%eax */
0x74, 0x07,                               /*2e: je     37 <op_setupvar+0x37> */
0xf6, 0xc1, 0x01,                         /*30: test   $0x1,%cl */
0x74, 0xeb,                               /*33: je     20 <op_setupvar+0x20> */
0xeb, 0x24,                               /*35: jmp    5b <op_setupvar+0x5b> */
0x84, 0xc9,                               /*37: test   %cl,%cl */
0x75, 0x20,                               /*39: jne    5b <op_setupvar+0x5b> */
0x48, 0x8b, 0x43, 0x18,                   /*3b: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4e, 0x18,                   /*3f: mov    0x18(%rsi),%rcx */
0x48, 0x8b, 0x80, 0x00, 0x08, 0xab, 0x00, /*43: mov    0xab0800(%rax),%rax */
0x48, 0x89, 0x81, 0x00, 0x08, 0xbc, 0x00, /*4a: mov    %rax,0xbc0800(%rcx) */
0x48, 0x8b, 0x7b, 0x50,                   /*51: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0xf8, 0x00, 0x00, 0x00,       /*55: callq  *0xf8(%rbx) */
0x48, 0x89, 0xdf,                         /*5b: mov    %rbx,%rdi */
0x5b,                                     /*5e: pop    %rbx */

};

static void op_setupvar_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = c * 1 + 0;
  *((int32_t *)(op + 70)) = a * 8 + 0;
  *((int32_t *)(op + 77)) = b * 8 + 0;
}

static void op_setupvar_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_setupvar_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_jmp[] = {

};

static void op_jmp_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_jmp_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmp_set_args(op, 0,GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 7..10]]} */
static uint8_t op_jmpif[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x80, 0x00, 0x08, 0xab, 0x00, /*4: mov    0xab0800(%rax),%rax */
0x48, 0x83, 0xc8, 0x02,                   /*b: or     $0x2,%rax */
0x48, 0x83, 0xf8, 0x02,                   /*f: cmp    $0x2,%rax */

};

static void op_jmpif_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 0;
}

static void op_jmpif_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmpif_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 7..10]]} */
static uint8_t op_jmpnot[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x80, 0x00, 0x08, 0xab, 0x00, /*4: mov    0xab0800(%rax),%rax */
0x48, 0x83, 0xc8, 0x02,                   /*b: or     $0x2,%rax */
0x48, 0x83, 0xf8, 0x02,                   /*f: cmp    $0x2,%rax */

};

static void op_jmpnot_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 0;
}

static void op_jmpnot_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_jmpnot_set_args(op, GETARG_A(c),GETARG_sBx(c),0,op_idx);
}


/* args: {"op_idx"=>[[4, 0, 93..96]]} */
static uint8_t op_onerr[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x50,                   /*4: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x48, 0x18,                   /*8: mov    0x18(%rax),%rcx */
0x8b, 0x51, 0x40,                         /*c: mov    0x40(%rcx),%edx */
0x48, 0x8b, 0x71, 0x20,                   /*f: mov    0x20(%rcx),%rsi */
0x3b, 0x56, 0x1c,                         /*13: cmp    0x1c(%rsi),%edx */
0x7f, 0x3a,                               /*16: jg     52 <op_onerr+0x52> */
0x8d, 0x04, 0x12,                         /*18: lea    (%rdx,%rdx,1),%eax */
0x85, 0xd2,                               /*1b: test   %edx,%edx */
0xba, 0x10, 0x00, 0x00, 0x00,             /*1d: mov    $0x10,%edx */
0x0f, 0x45, 0xd0,                         /*22: cmovne %eax,%edx */
0x89, 0x51, 0x40,                         /*25: mov    %edx,0x40(%rcx) */
0x48, 0x8b, 0x7b, 0x50,                   /*28: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*2c: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x70, 0x38,                   /*30: mov    0x38(%rax),%rsi */
0x48, 0x63, 0x50, 0x40,                   /*34: movslq 0x40(%rax),%rdx */
0x48, 0xc1, 0xe2, 0x03,                   /*38: shl    $0x3,%rdx */
0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*3c: callq  *0x120(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*42: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*46: mov    0x18(%rcx),%rcx */
0x48, 0x89, 0x41, 0x38,                   /*4a: mov    %rax,0x38(%rcx) */
0x48, 0x8b, 0x43, 0x50,                   /*4e: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x08,                   /*52: mov    0x8(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*56: mov    0x8(%rcx),%rcx */
0x48, 0x8d, 0x91, 0x00, 0x04, 0xde, 0x00, /*5a: lea    0xde0400(%rcx),%rdx */
0x48, 0x89, 0x53, 0x10,                   /*61: mov    %rdx,0x10(%rbx) */
0x48, 0x81, 0xc1, 0x00, 0x00, 0x68, 0x06, /*65: add    $0x6680000,%rcx */
0x48, 0x8b, 0x40, 0x18,                   /*6c: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*70: mov    0x20(%rax),%rax */
0x48, 0x63, 0x50, 0x1c,                   /*74: movslq 0x1c(%rax),%rdx */
0x8d, 0x72, 0x01,                         /*78: lea    0x1(%rdx),%esi */
0x89, 0x70, 0x1c,                         /*7b: mov    %esi,0x1c(%rax) */
0x48, 0x8b, 0x43, 0x50,                   /*7e: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*82: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x38,                   /*86: mov    0x38(%rax),%rax */
0x48, 0x89, 0x0c, 0xd0,                   /*8a: mov    %rcx,(%rax,%rdx,8) */
0x48, 0x89, 0xdf,                         /*8e: mov    %rbx,%rdi */
0x5b,                                     /*91: pop    %rbx */

};

static void op_onerr_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 93)) = op_idx * 4 + 0;
}

static void op_onerr_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_onerr_set_args(op, 0,GETARG_sBx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 7..10], [8, 0, 30..33], [8, 0, 81..84], [8, 0, 94..97], [8, 0, 114..117], [8, 0, 130..133], [8, 0, 143..146], [8, 0, 157..160]]} */
static uint8_t op_rescue[] = {
0x48, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*4: movq   $0x0,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x18,                   /*f: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x4f, 0x50,                   /*13: mov    0x50(%rdi),%rcx */
0x48, 0x8b, 0x49, 0x28,                   /*17: mov    0x28(%rcx),%rcx */
0x48, 0x89, 0x88, 0x00, 0x08, 0xab, 0x00, /*1b: mov    %rcx,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x50,                   /*22: mov    0x50(%rdi),%rax */
0x48, 0x8b, 0x48, 0x28,                   /*26: mov    0x28(%rax),%rcx */
0x8b, 0x01,                               /*2a: mov    (%rcx),%eax */
0x0f, 0xb6, 0xf0,                         /*2c: movzbl %al,%esi */
0x0f, 0xb6, 0xd0,                         /*2f: movzbl %al,%edx */
0x83, 0xfe, 0x05,                         /*32: cmp    $0x5,%esi */
0x77, 0x20,                               /*35: ja     57 <op_rescue+0x57> */
0xff, 0x24, 0xd5, 0x00, 0x00, 0x00, 0x00, /*37: jmpq   *0x0(,%rdx,8) */
0x48, 0x85, 0xc9,                         /*3e: test   %rcx,%rcx */
0x0f, 0x95, 0xc0,                         /*41: setne  %al */
0x0f, 0xb6, 0xc0,                         /*44: movzbl %al,%eax */
0x48, 0x01, 0xc0,                         /*47: add    %rax,%rax */
0x48, 0x8b, 0x4f, 0x18,                   /*4a: mov    0x18(%rdi),%rcx */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*4e: mov    %rax,0xab0800(%rcx) */
0xeb, 0x4e,                               /*55: jmp    a5 <op_rescue+0xa5> */
0x48, 0x8b, 0x4f, 0x18,                   /*57: mov    0x18(%rdi),%rcx */
0x48, 0x8b, 0x89, 0x00, 0x08, 0xab, 0x00, /*5b: mov    0xab0800(%rcx),%rcx */
0x48, 0x85, 0xc9,                         /*62: test   %rcx,%rcx */
0x74, 0x3e,                               /*65: je     a5 <op_rescue+0xa5> */
0x88, 0x01,                               /*67: mov    %al,(%rcx) */
0xeb, 0x3a,                               /*69: jmp    a5 <op_rescue+0xa5> */
0x48, 0x8b, 0x47, 0x18,                   /*6b: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*6f: movq   $0x4,0xab0800(%rax) */
0xeb, 0x29,                               /*7a: jmp    a5 <op_rescue+0xa5> */
0x48, 0x8b, 0x47, 0x18,                   /*7c: mov    0x18(%rdi),%rax */
0x83, 0x88, 0x00, 0x08, 0xab, 0x00, 0x01, /*80: orl    $0x1,0xab0800(%rax) */
0xeb, 0x1c,                               /*87: jmp    a5 <op_rescue+0xa5> */
0x48, 0x8b, 0x47, 0x18,                   /*89: mov    0x18(%rdi),%rax */
0xc6, 0x80, 0x00, 0x08, 0xab, 0x00, 0x0e, /*8d: movb   $0xe,0xab0800(%rax) */
0xeb, 0x0f,                               /*94: jmp    a5 <op_rescue+0xa5> */
0x48, 0x8b, 0x47, 0x18,                   /*96: mov    0x18(%rdi),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x06, 0x00, 0x00, 0x00,/*9a: movq   $0x6,0xab0800(%rax) */
0x48, 0x8b, 0x47, 0x50,                   /*a5: mov    0x50(%rdi),%rax */
0x48, 0xc7, 0x40, 0x28, 0x00, 0x00, 0x00, 0x00,/*a9: movq   $0x0,0x28(%rax) */

};

static void op_rescue_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 7)) = a * 8 + 0;
  *((int32_t *)(op + 30)) = a * 8 + 0;
  *((int32_t *)(op + 81)) = a * 8 + 0;
  *((int32_t *)(op + 94)) = a * 8 + 0;
  *((int32_t *)(op + 114)) = a * 8 + 0;
  *((int32_t *)(op + 130)) = a * 8 + 0;
  *((int32_t *)(op + 143)) = a * 8 + 0;
  *((int32_t *)(op + 157)) = a * 8 + 0;
}

static void op_rescue_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_rescue_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {} */
static uint8_t op_poperr[] = {
0xb8, 0x00, 0x00, 0x55, 0xff,             /*0: mov    $0xff550000,%eax */
0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*5: data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x4f, 0x50,                   /*10: mov    0x50(%rdi),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*14: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*18: mov    0x20(%rcx),%rcx */
0xff, 0x49, 0x1c,                         /*1c: decl   0x1c(%rcx) */
0xff, 0xc0,                               /*1f: inc    %eax */
0x75, 0xed,                               /*21: jne    10 <op_poperr+0x10> */

};

static void op_poperr_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_poperr_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_poperr_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18]]} */
static uint8_t op_raise[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*8: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x80, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rax */
0x48, 0x89, 0x41, 0x28,                   /*13: mov    %rax,0x28(%rcx) */
0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*17: callq  *0x1a8(%rbx) */
0x48, 0x89, 0xdf,                         /*1d: mov    %rbx,%rdi */
0x5b,                                     /*20: pop    %rbx */

};

static void op_raise_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
}

static void op_raise_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_raise_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[8, 0, 21..24]]} */
static uint8_t op_epush[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x08,                   /*6: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x40, 0x20,                   /*e: mov    0x20(%rax),%rax */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*12: mov    0xbc0800(%rax),%rsi */
0xff, 0x53, 0x78,                         /*19: callq  *0x78(%rbx) */
0x49, 0x89, 0xc6,                         /*1c: mov    %rax,%r14 */
0x48, 0x8b, 0x43, 0x50,                   /*1f: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*23: mov    0x18(%rax),%rax */
0x8b, 0x70, 0x50,                         /*27: mov    0x50(%rax),%esi */
0x48, 0x8b, 0x48, 0x20,                   /*2a: mov    0x20(%rax),%rcx */
0x8b, 0x51, 0x20,                         /*2e: mov    0x20(%rcx),%edx */
0x39, 0xd6,                               /*31: cmp    %edx,%esi */
0x7f, 0x45,                               /*33: jg     7a <op_epush+0x7a> */
0x8d, 0x0c, 0x36,                         /*35: lea    (%rsi,%rsi,1),%ecx */
0x85, 0xf6,                               /*38: test   %esi,%esi */
0xba, 0x10, 0x00, 0x00, 0x00,             /*3a: mov    $0x10,%edx */
0x0f, 0x45, 0xd1,                         /*3f: cmovne %ecx,%edx */
0x89, 0x50, 0x50,                         /*42: mov    %edx,0x50(%rax) */
0x48, 0x8b, 0x7b, 0x50,                   /*45: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*49: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x70, 0x48,                   /*4d: mov    0x48(%rax),%rsi */
0x48, 0x63, 0x50, 0x50,                   /*51: movslq 0x50(%rax),%rdx */
0x48, 0xc1, 0xe2, 0x03,                   /*55: shl    $0x3,%rdx */
0xff, 0x93, 0x20, 0x01, 0x00, 0x00,       /*59: callq  *0x120(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*5f: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*63: mov    0x18(%rcx),%rcx */
0x48, 0x89, 0x41, 0x48,                   /*67: mov    %rax,0x48(%rcx) */
0x48, 0x8b, 0x43, 0x50,                   /*6b: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*6f: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x20,                   /*73: mov    0x20(%rax),%rcx */
0x8b, 0x51, 0x20,                         /*77: mov    0x20(%rcx),%edx */
0x8d, 0x42, 0x01,                         /*7a: lea    0x1(%rdx),%eax */
0x89, 0x41, 0x20,                         /*7d: mov    %eax,0x20(%rcx) */
0x48, 0x63, 0xc2,                         /*80: movslq %edx,%rax */
0x48, 0x8b, 0x4b, 0x50,                   /*83: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*87: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x48,                   /*8b: mov    0x48(%rcx),%rcx */
0x4c, 0x89, 0x34, 0xc1,                   /*8f: mov    %r14,(%rcx,%rax,8) */
0x8b, 0x43, 0x48,                         /*93: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*96: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*9a: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*a0: mov    %rbx,%rdi */
0x5b,                                     /*a3: pop    %rbx */
0x41, 0x5e,                               /*a4: pop    %r14 */

};

static void op_epush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 8 + 0;
}

static void op_epush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_epush_set_args(op, 0,GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[1, 0, 71..74]]} */
static uint8_t op_epop[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x53,                                     /*5: push   %rbx */
0x49, 0x89, 0xff,                         /*6: mov    %rdi,%r15 */
0x49, 0x8b, 0x47, 0x50,                   /*9: mov    0x50(%r15),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*d: mov    0x18(%rax),%rax */
0x4c, 0x8b, 0x70, 0x20,                   /*11: mov    0x20(%rax),%r14 */
0x41, 0x8b, 0x6e, 0x20,                   /*15: mov    0x20(%r14),%ebp */
0x31, 0xdb,                               /*19: xor    %ebx,%ebx */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*1b: nopl   0x0(%rax,%rax,1) */
0x41, 0x3b, 0x6e, 0xc8,                   /*20: cmp    -0x38(%r14),%ebp */
0x7e, 0x27,                               /*24: jle    4d <op_epop+0x4d> */
0x49, 0x8b, 0x7f, 0x50,                   /*26: mov    0x50(%r15),%rdi */
0xff, 0xcd,                               /*2a: dec    %ebp */
0x89, 0xee,                               /*2c: mov    %ebp,%esi */
0x41, 0xff, 0x97, 0xf8, 0x01, 0x00, 0x00, /*2e: callq  *0x1f8(%r15) */
0x41, 0x8b, 0x47, 0x48,                   /*35: mov    0x48(%r15),%eax */
0x49, 0x8b, 0x4f, 0x50,                   /*39: mov    0x50(%r15),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*3d: mov    %eax,0xdc(%rcx) */
0xff, 0xc3,                               /*43: inc    %ebx */
0x81, 0xfb, 0x00, 0x00, 0xab, 0x00,       /*45: cmp    $0xab0000,%ebx */
0x7c, 0xd3,                               /*4b: jl     20 <op_epop+0x20> */
0x4c, 0x89, 0xff,                         /*4d: mov    %r15,%rdi */
0x5b,                                     /*50: pop    %rbx */
0x41, 0x5e,                               /*51: pop    %r14 */
0x41, 0x5f,                               /*53: pop    %r15 */
0x5d,                                     /*55: pop    %rbp */

};

static void op_epop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 71)) = a * 1 + 0;
}

static void op_epop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_epop_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 15..18]], "op_idx"=>[[4, 0, 36..39]], "b"=>[[1, 0, 54..57]], "c"=>[[1, 0, 60..63]]} */
static uint8_t op_send[] = {
0x55,                                     /*0: push   %rbp */
0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
0x41, 0x56,                               /*4: push   %r14 */
0x53,                                     /*6: push   %rbx */
0x48, 0x83, 0xe4, 0xf0,                   /*7: and    $0xfffffffffffffff0,%rsp */
0x48, 0x89, 0xfb,                         /*b: mov    %rdi,%rbx */
0xb8, 0x00, 0x00, 0xab, 0x00,             /*e: mov    $0xab0000,%eax */
0x48, 0x8b, 0x4b, 0x08,                   /*13: mov    0x8(%rbx),%rcx */
0x48, 0x8b, 0x53, 0x50,                   /*17: mov    0x50(%rbx),%rdx */
0x48, 0x8b, 0x52, 0x18,                   /*1b: mov    0x18(%rdx),%rdx */
0x4c, 0x8b, 0x72, 0x20,                   /*1f: mov    0x20(%rdx),%r14 */
0xba, 0x00, 0x04, 0xde, 0x00,             /*23: mov    $0xde0400,%edx */
0x48, 0x03, 0x51, 0x08,                   /*28: add    0x8(%rcx),%rdx */
0x48, 0x89, 0x53, 0x10,                   /*2c: mov    %rdx,0x10(%rbx) */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*30: mov    $0x20,%esi */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*35: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*3a: mov    $0xcd0000,%r8d */
0x48, 0x89, 0xdf,                         /*40: mov    %rbx,%rdi */
0x89, 0xc2,                               /*43: mov    %eax,%edx */
0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*45: callq  *0x1d8(%rbx) */
0x48, 0x8b, 0x43, 0x50,                   /*4b: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*4f: mov    0x18(%rax),%rax */
0x4c, 0x39, 0x70, 0x20,                   /*53: cmp    %r14,0x20(%rax) */
0x73, 0x0c,                               /*57: jae    65 <op_send+0x65> */
0x48, 0x89, 0xdf,                         /*59: mov    %rbx,%rdi */
0x48, 0x8d, 0x65, 0xf0,                   /*5c: lea    -0x10(%rbp),%rsp */
0x5b,                                     /*60: pop    %rbx */
0x41, 0x5e,                               /*61: pop    %r14 */
0x5d,                                     /*63: pop    %rbp */
0xc3,                                     /*64: retq */
0x48, 0x89, 0xdf,                         /*65: mov    %rbx,%rdi */
0x48, 0x8d, 0x65, 0xf0,                   /*68: lea    -0x10(%rbp),%rsp */
0x5b,                                     /*6c: pop    %rbx */
0x41, 0x5e,                               /*6d: pop    %r14 */
0x5d,                                     /*6f: pop    %rbp */

};

static void op_send_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 1 + 0;
  *((int32_t *)(op + 36)) = op_idx * 4 + 0;
  *((int32_t *)(op + 54)) = b * 1 + 0;
  *((int32_t *)(op + 60)) = c * 1 + 0;
}

static void op_send_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_send_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[1, 0, 17..20]], "b"=>[[1, 0, 27..30]], "c"=>[[1, 0, 33..36]]} */
static uint8_t op_sendb[] = {
0x55,                                     /*0: push   %rbp */
0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
0x53,                                     /*4: push   %rbx */
0x48, 0x83, 0xe4, 0xf0,                   /*5: and    $0xfffffffffffffff0,%rsp */
0x48, 0x83, 0xec, 0x10,                   /*9: sub    $0x10,%rsp */
0x48, 0x89, 0xfb,                         /*d: mov    %rdi,%rbx */
0xb8, 0x00, 0x00, 0xab, 0x00,             /*10: mov    $0xab0000,%eax */
0xbe, 0x21, 0x00, 0x00, 0x00,             /*15: mov    $0x21,%esi */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*1a: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*1f: mov    $0xcd0000,%r8d */
0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
0x89, 0xc2,                               /*28: mov    %eax,%edx */
0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*2a: callq  *0x1d8(%rbx) */
0x48, 0x89, 0xdf,                         /*30: mov    %rbx,%rdi */
0x48, 0x8d, 0x65, 0xf8,                   /*33: lea    -0x8(%rbp),%rsp */
0x5b,                                     /*37: pop    %rbx */
0x5d,                                     /*38: pop    %rbp */

};

static void op_sendb_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
  *((int32_t *)(op + 27)) = b * 1 + 0;
  *((int32_t *)(op + 33)) = c * 1 + 0;
}

static void op_sendb_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sendb_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_fsend[] = {

};

static void op_fsend_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_fsend_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_fsend_set_args(op, 0,0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 325..328]]} */
static uint8_t op_call[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x46, 0x50,                   /*6: mov    0x50(%r14),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*a: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x08,                   /*e: mov    0x8(%rax),%rcx */
0x48, 0x8b, 0x40, 0x20,                   /*12: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x19,                         /*16: mov    (%rcx),%rbx */
0x48, 0x8b, 0x4b, 0x20,                   /*19: mov    0x20(%rbx),%rcx */
0x48, 0x89, 0x48, 0x48,                   /*1d: mov    %rcx,0x48(%rax) */
0x48, 0x89, 0x58, 0x08,                   /*21: mov    %rbx,0x8(%rax) */
0x48, 0x8b, 0x4b, 0x28,                   /*25: mov    0x28(%rbx),%rcx */
0x48, 0x85, 0xc9,                         /*29: test   %rcx,%rcx */
0x74, 0x24,                               /*2c: je     52 <op_call+0x52> */
0x8b, 0x51, 0x20,                         /*2e: mov    0x20(%rcx),%edx */
0x85, 0xd2,                               /*31: test   %edx,%edx */
0x74, 0x06,                               /*33: je     3b <op_call+0x3b> */
0x89, 0x10,                               /*35: mov    %edx,(%rax) */
0x48, 0x8b, 0x4b, 0x28,                   /*37: mov    0x28(%rbx),%rcx */
0x48, 0x83, 0x79, 0x18, 0x00,             /*3b: cmpq   $0x0,0x18(%rcx) */
0x75, 0x10,                               /*40: jne    52 <op_call+0x52> */
0x49, 0x8b, 0x56, 0x50,                   /*42: mov    0x50(%r14),%rdx */
0x48, 0x8b, 0x52, 0x18,                   /*46: mov    0x18(%rdx),%rdx */
0x48, 0x8b, 0x52, 0x08,                   /*4a: mov    0x8(%rdx),%rdx */
0x48, 0x89, 0x51, 0x18,                   /*4e: mov    %rdx,0x18(%rcx) */
0xf6, 0x43, 0x02, 0x04,                   /*52: testb  $0x4,0x2(%rbx) */
0x74, 0x36,                               /*56: je     8e <op_call+0x8e> */
0x49, 0x8b, 0x7e, 0x50,                   /*58: mov    0x50(%r14),%rdi */
0x48, 0x89, 0xde,                         /*5c: mov    %rbx,%rsi */
0xff, 0x53, 0x18,                         /*5f: callq  *0x18(%rbx) */
0x48, 0x89, 0xc3,                         /*62: mov    %rax,%rbx */
0x49, 0x8b, 0x7e, 0x50,                   /*65: mov    0x50(%r14),%rdi */
0x41, 0x8b, 0x76, 0x48,                   /*69: mov    0x48(%r14),%esi */
0x41, 0xff, 0x96, 0x08, 0x01, 0x00, 0x00, /*6d: callq  *0x108(%r14) */
0x49, 0x8b, 0x46, 0x50,                   /*74: mov    0x50(%r14),%rax */
0x48, 0x83, 0x78, 0x28, 0x00,             /*78: cmpq   $0x0,0x28(%rax) */
0x74, 0x59,                               /*7d: je     d8 <op_call+0xd8> */
0x4c, 0x89, 0xf7,                         /*7f: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*82: callq  *0x1a8(%r14) */
0xe9, 0x1b, 0x01, 0x00, 0x00,             /*89: jmpq   1a9 <op_call+0x1a9> */
0x49, 0x89, 0x1e,                         /*8e: mov    %rbx,(%r14) */
0x48, 0x8b, 0x4b, 0x18,                   /*91: mov    0x18(%rbx),%rcx */
0x49, 0x89, 0x4e, 0x08,                   /*95: mov    %rcx,0x8(%r14) */
0x48, 0x85, 0xc9,                         /*99: test   %rcx,%rcx */
0x0f, 0x84, 0x8f, 0x00, 0x00, 0x00,       /*9c: je     131 <op_call+0x131> */
0x48, 0x8b, 0x51, 0x10,                   /*a2: mov    0x10(%rcx),%rdx */
0x49, 0x89, 0x56, 0x20,                   /*a6: mov    %rdx,0x20(%r14) */
0x48, 0x8b, 0x51, 0x18,                   /*aa: mov    0x18(%rcx),%rdx */
0x49, 0x89, 0x56, 0x28,                   /*ae: mov    %rdx,0x28(%r14) */
0x0f, 0xb7, 0x49, 0x02,                   /*b2: movzwl 0x2(%rcx),%ecx */
0x89, 0x48, 0x18,                         /*b6: mov    %ecx,0x18(%rax) */
0x8b, 0x50, 0x40,                         /*b9: mov    0x40(%rax),%edx */
0x49, 0x8b, 0x46, 0x08,                   /*bc: mov    0x8(%r14),%rax */
0x49, 0x8b, 0x7e, 0x50,                   /*c0: mov    0x50(%r14),%rdi */
0x0f, 0xb7, 0x70, 0x02,                   /*c4: movzwl 0x2(%rax),%esi */
0x85, 0xd2,                               /*c8: test   %edx,%edx */
0x0f, 0x88, 0x87, 0x00, 0x00, 0x00,       /*ca: js     157 <op_call+0x157> */
0x83, 0xc2, 0x02,                         /*d0: add    $0x2,%edx */
0xe9, 0x8f, 0x00, 0x00, 0x00,             /*d3: jmpq   167 <op_call+0x167> */
0x48, 0x8b, 0x40, 0x18,                   /*d8: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x20,                   /*dc: mov    0x20(%rax),%rcx */
0x48, 0x8b, 0x51, 0x10,                   /*e0: mov    0x10(%rcx),%rdx */
0x48, 0x89, 0x50, 0x08,                   /*e4: mov    %rdx,0x8(%rax) */
0x49, 0x89, 0x56, 0x18,                   /*e8: mov    %rdx,0x18(%r14) */
0x48, 0x63, 0x41, 0x44,                   /*ec: movslq 0x44(%rcx),%rax */
0x48, 0x89, 0x1c, 0xc2,                   /*f0: mov    %rbx,(%rdx,%rax,8) */
0x48, 0x8b, 0x41, 0x30,                   /*f4: mov    0x30(%rcx),%rax */
0x49, 0x89, 0x46, 0x10,                   /*f8: mov    %rax,0x10(%r14) */
0x49, 0x8b, 0x7e, 0x50,                   /*fc: mov    0x50(%r14),%rdi */
0x41, 0xff, 0x96, 0x58, 0x01, 0x00, 0x00, /*100: callq  *0x158(%r14) */
0x49, 0x8b, 0x46, 0x50,                   /*107: mov    0x50(%r14),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*10b: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*10f: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*113: mov    0x8(%rax),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*117: mov    0x18(%rax),%rax */
0x49, 0x89, 0x46, 0x08,                   /*11b: mov    %rax,0x8(%r14) */
0x48, 0x8b, 0x48, 0x10,                   /*11f: mov    0x10(%rax),%rcx */
0x49, 0x89, 0x4e, 0x20,                   /*123: mov    %rcx,0x20(%r14) */
0x48, 0x8b, 0x40, 0x18,                   /*127: mov    0x18(%rax),%rax */
0x49, 0x89, 0x46, 0x28,                   /*12b: mov    %rax,0x28(%r14) */
0xeb, 0x78,                               /*12f: jmp    1a9 <op_call+0x1a9> */
0x49, 0x8b, 0x46, 0x50,                   /*131: mov    0x50(%r14),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*135: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*139: mov    0x8(%rax),%rax */
0x48, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, /*13d: movq   $0x0,(%rax) */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*144: mov    $0xab0000,%esi */
0x31, 0xd2,                               /*149: xor    %edx,%edx */
0x4c, 0x89, 0xf7,                         /*14b: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0x88, 0x00, 0x00, 0x00, /*14e: callq  *0x88(%r14) */
0xeb, 0x52,                               /*155: jmp    1a9 <op_call+0x1a9> */
0x83, 0xfe, 0x03,                         /*157: cmp    $0x3,%esi */
0xb8, 0x03, 0x00, 0x00, 0x00,             /*15a: mov    $0x3,%eax */
0x0f, 0x42, 0xf0,                         /*15f: cmovb  %eax,%esi */
0xba, 0x03, 0x00, 0x00, 0x00,             /*162: mov    $0x3,%edx */
0x41, 0xff, 0x96, 0x38, 0x01, 0x00, 0x00, /*167: callq  *0x138(%r14) */
0x49, 0x8b, 0x46, 0x50,                   /*16e: mov    0x50(%r14),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*172: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*176: mov    0x8(%rax),%rax */
0x49, 0x89, 0x46, 0x18,                   /*17a: mov    %rax,0x18(%r14) */
0x48, 0x8b, 0x4b, 0x28,                   /*17e: mov    0x28(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*182: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x09,                         /*186: mov    (%rcx),%rcx */
0x48, 0x89, 0x08,                         /*189: mov    %rcx,(%rax) */
0x49, 0x8b, 0x46, 0x08,                   /*18c: mov    0x8(%r14),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*190: mov    0x8(%rax),%rax */
0x49, 0x89, 0x46, 0x10,                   /*194: mov    %rax,0x10(%r14) */
0x49, 0x8b, 0x36,                         /*198: mov    (%r14),%rsi */
0x49, 0x8b, 0x7e, 0x50,                   /*19b: mov    0x50(%r14),%rdi */
0x4c, 0x89, 0xf2,                         /*19f: mov    %r14,%rdx */
0x41, 0xff, 0x96, 0x18, 0x01, 0x00, 0x00, /*1a2: callq  *0x118(%r14) */
0x4c, 0x89, 0xf7,                         /*1a9: mov    %r14,%rdi */
0x5b,                                     /*1ac: pop    %rbx */
0x41, 0x5e,                               /*1ad: pop    %r14 */

};

static void op_call_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 325)) = a * 1 + 0;
}

static void op_call_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_call_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"c"=>[[1, 0, 216..219], [1, 1, 350..353]], "a"=>[[1, 1, 303..306], [8, 8, 316..319], [8, 12, 334..337], [8, 8, 344..347], [8, 0, 422..425], [1, 0, 518..521]]} */
static uint8_t op_super[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x89, 0xfb,                         /*a: mov    %rdi,%rbx */
0x48, 0x8b, 0x6b, 0x50,                   /*d: mov    0x50(%rbx),%rbp */
0x48, 0x8b, 0x45, 0x18,                   /*11: mov    0x18(%rbp),%rax */
0x4c, 0x8b, 0x68, 0x20,                   /*15: mov    0x20(%rax),%r13 */
0x45, 0x8b, 0x65, 0x00,                   /*19: mov    0x0(%r13),%r12d */
0x45, 0x85, 0xe4,                         /*1d: test   %r12d,%r12d */
0x74, 0x61,                               /*20: je     83 <op_super+0x83> */
0x48, 0x8b, 0x43, 0x18,                   /*22: mov    0x18(%rbx),%rax */
0x4c, 0x8b, 0x30,                         /*26: mov    (%rax),%r14 */
0x49, 0x8b, 0x45, 0x48,                   /*29: mov    0x48(%r13),%rax */
0x48, 0x8b, 0x48, 0x28,                   /*2d: mov    0x28(%rax),%rcx */
0x48, 0x89, 0x0c, 0x24,                   /*31: mov    %rcx,(%rsp) */
0x48, 0x8b, 0x03,                         /*35: mov    (%rbx),%rax */
0x48, 0x39, 0x48, 0x38,                   /*38: cmp    %rcx,0x38(%rax) */
0x75, 0x08,                               /*3c: jne    46 <op_super+0x46> */
0x31, 0xd2,                               /*3e: xor    %edx,%edx */
0x44, 0x39, 0x60, 0x30,                   /*40: cmp    %r12d,0x30(%rax) */
0x74, 0x33,                               /*44: je     79 <op_super+0x79> */
0x48, 0x39, 0x48, 0x48,                   /*46: cmp    %rcx,0x48(%rax) */
0x75, 0x0b,                               /*4a: jne    57 <op_super+0x57> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*4c: mov    $0x1,%edx */
0x44, 0x39, 0x60, 0x40,                   /*51: cmp    %r12d,0x40(%rax) */
0x74, 0x22,                               /*55: je     79 <op_super+0x79> */
0x48, 0x39, 0x48, 0x58,                   /*57: cmp    %rcx,0x58(%rax) */
0x75, 0x0b,                               /*5b: jne    68 <op_super+0x68> */
0xba, 0x02, 0x00, 0x00, 0x00,             /*5d: mov    $0x2,%edx */
0x44, 0x39, 0x60, 0x50,                   /*62: cmp    %r12d,0x50(%rax) */
0x74, 0x11,                               /*66: je     79 <op_super+0x79> */
0x48, 0x39, 0x48, 0x68,                   /*68: cmp    %rcx,0x68(%rax) */
0x75, 0x56,                               /*6c: jne    c4 <op_super+0xc4> */
0xba, 0x03, 0x00, 0x00, 0x00,             /*6e: mov    $0x3,%edx */
0x44, 0x39, 0x60, 0x60,                   /*73: cmp    %r12d,0x60(%rax) */
0x75, 0x4b,                               /*77: jne    c4 <op_super+0xc4> */
0x4c, 0x8b, 0xbc, 0xd0, 0x90, 0x00, 0x00, 0x00,/*79: mov    0x90(%rax,%rdx,8),%r15 */
0xeb, 0x54,                               /*81: jmp    d7 <op_super+0xd7> */
0x48, 0x8b, 0x43, 0x70,                   /*83: mov    0x70(%rbx),%rax */
0x48, 0x8b, 0x30,                         /*87: mov    (%rax),%rsi */
0x48, 0x89, 0xef,                         /*8a: mov    %rbp,%rdi */
0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*8d: callq  *0x110(%rbx) */
0x49, 0x89, 0xc6,                         /*93: mov    %rax,%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*96: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb3, 0x68, 0x02, 0x00, 0x00, /*9a: mov    0x268(%rbx),%rsi */
0xba, 0x1e, 0x00, 0x00, 0x00,             /*a1: mov    $0x1e,%edx */
0xff, 0x93, 0x80, 0x00, 0x00, 0x00,       /*a6: callq  *0x80(%rbx) */
0x48, 0x89, 0xef,                         /*ac: mov    %rbp,%rdi */
0x4c, 0x89, 0xf6,                         /*af: mov    %r14,%rsi */
0x48, 0x89, 0xc2,                         /*b2: mov    %rax,%rdx */
0xff, 0x93, 0xc0, 0x01, 0x00, 0x00,       /*b5: callq  *0x1c0(%rbx) */
0x48, 0x89, 0x45, 0x28,                   /*bb: mov    %rax,0x28(%rbp) */
0xe9, 0x31, 0x01, 0x00, 0x00,             /*bf: jmpq   1f5 <op_super+0x1f5> */
0x48, 0x8d, 0x34, 0x24,                   /*c4: lea    (%rsp),%rsi */
0x48, 0x89, 0xef,                         /*c8: mov    %rbp,%rdi */
0x44, 0x89, 0xe2,                         /*cb: mov    %r12d,%edx */
0xff, 0x93, 0xa8, 0x00, 0x00, 0x00,       /*ce: callq  *0xa8(%rbx) */
0x49, 0x89, 0xc7,                         /*d4: mov    %rax,%r15 */
0xbd, 0x00, 0x00, 0xcd, 0x00,             /*d7: mov    $0xcd0000,%ebp */
0x4d, 0x85, 0xff,                         /*dc: test   %r15,%r15 */
0x0f, 0x85, 0x7d, 0x00, 0x00, 0x00,       /*df: jne    162 <op_super+0x162> */
0x48, 0x8b, 0x7b, 0x50,                   /*e5: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb3, 0x70, 0x02, 0x00, 0x00, /*e9: mov    0x270(%rbx),%rsi */
0xba, 0x0e, 0x00, 0x00, 0x00,             /*f0: mov    $0xe,%edx */
0xff, 0x93, 0x60, 0x02, 0x00, 0x00,       /*f5: callq  *0x260(%rbx) */
0x41, 0x89, 0xc4,                         /*fb: mov    %eax,%r12d */
0x48, 0x8b, 0x7b, 0x50,                   /*fe: mov    0x50(%rbx),%rdi */
0x48, 0x8d, 0x34, 0x24,                   /*102: lea    (%rsp),%rsi */
0x44, 0x89, 0xe2,                         /*106: mov    %r12d,%edx */
0xff, 0x93, 0xc8, 0x00, 0x00, 0x00,       /*109: callq  *0xc8(%rbx) */
0x49, 0x89, 0xc7,                         /*10f: mov    %rax,%r15 */
0x48, 0x8b, 0x43, 0x18,                   /*112: mov    0x18(%rbx),%rax */
0xb9, 0x02, 0x00, 0x78, 0x01,             /*116: mov    $0x1780002,%ecx */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*11b: nopl   0x0(%rax,%rax,1) */
0x48, 0x8b, 0x54, 0xc8, 0xf8,             /*120: mov    -0x8(%rax,%rcx,8),%rdx */
0x48, 0x89, 0x14, 0xc8,                   /*125: mov    %rdx,(%rax,%rcx,8) */
0x48, 0xff, 0xc9,                         /*129: dec    %rcx */
0x48, 0x81, 0xf9, 0x01, 0x00, 0xab, 0x00, /*12c: cmp    $0xab0001,%rcx */
0x75, 0xeb,                               /*133: jne    120 <op_super+0x120> */
0x48, 0x8b, 0x43, 0x18,                   /*135: mov    0x18(%rbx),%rax */
0x48, 0xc7, 0x80, 0x08, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*139: movq   $0x0,0xab0808(%rax) */
0x41, 0x8b, 0x45, 0x00,                   /*144: mov    0x0(%r13),%eax */
0x48, 0x8b, 0x4b, 0x18,                   /*148: mov    0x18(%rbx),%rcx */
0x89, 0x81, 0x0c, 0x08, 0xab, 0x00,       /*14c: mov    %eax,0xab080c(%rcx) */
0x48, 0x8b, 0x43, 0x18,                   /*152: mov    0x18(%rbx),%rax */
0xc6, 0x80, 0x08, 0x08, 0xab, 0x00, 0x0e, /*156: movb   $0xe,0xab0808(%rax) */
0xbd, 0x01, 0x00, 0xcd, 0x00,             /*15d: mov    $0xcd0001,%ebp */
0x48, 0x8b, 0x7b, 0x50,                   /*162: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0xe0, 0x00, 0x00, 0x00,       /*166: callq  *0xe0(%rbx) */
0x44, 0x89, 0x20,                         /*16c: mov    %r12d,(%rax) */
0x4c, 0x89, 0x78, 0x08,                   /*16f: mov    %r15,0x8(%rax) */
0x48, 0x8b, 0x4b, 0x50,                   /*173: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*177: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*17b: mov    0x8(%rcx),%rcx */
0x48, 0x89, 0x48, 0x10,                   /*17f: mov    %rcx,0x10(%rax) */
0x89, 0x68, 0x40,                         /*183: mov    %ebp,0x40(%rax) */
0x48, 0x8b, 0x0c, 0x24,                   /*186: mov    (%rsp),%rcx */
0x48, 0x89, 0x48, 0x48,                   /*18a: mov    %rcx,0x48(%rax) */
0x48, 0x8b, 0x4b, 0x10,                   /*18e: mov    0x10(%rbx),%rcx */
0x48, 0x83, 0xc1, 0x04,                   /*192: add    $0x4,%rcx */
0x48, 0x89, 0x48, 0x30,                   /*196: mov    %rcx,0x30(%rax) */
0x48, 0x8b, 0x4b, 0x50,                   /*19a: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*19e: mov    0x18(%rcx),%rcx */
0x48, 0x81, 0x41, 0x08, 0x00, 0x08, 0xab, 0x00,/*1a2: addq   $0xab0800,0x8(%rcx) */
0x48, 0x8b, 0x4b, 0x50,                   /*1aa: mov    0x50(%rbx),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*1ae: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*1b2: mov    0x8(%rcx),%rcx */
0x4c, 0x89, 0x31,                         /*1b6: mov    %r14,(%rcx) */
0x41, 0xf6, 0x47, 0x02, 0x04,             /*1b9: testb  $0x4,0x2(%r15) */
0x74, 0x43,                               /*1be: je     203 <op_super+0x203> */
0x83, 0xcd, 0x02,                         /*1c0: or     $0x2,%ebp */
0x89, 0x68, 0x18,                         /*1c3: mov    %ebp,0x18(%rax) */
0x48, 0x8b, 0x7b, 0x50,                   /*1c6: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*1ca: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x68, 0x08,                   /*1ce: mov    0x8(%rax),%rbp */
0x4c, 0x89, 0xf6,                         /*1d2: mov    %r14,%rsi */
0x41, 0xff, 0x57, 0x18,                   /*1d5: callq  *0x18(%r15) */
0x48, 0x89, 0x45, 0x00,                   /*1d9: mov    %rax,0x0(%rbp) */
0x48, 0x8b, 0x7b, 0x50,                   /*1dd: mov    0x50(%rbx),%rdi */
0x8b, 0x73, 0x48,                         /*1e1: mov    0x48(%rbx),%esi */
0xff, 0x93, 0x08, 0x01, 0x00, 0x00,       /*1e4: callq  *0x108(%rbx) */
0x48, 0x8b, 0x43, 0x50,                   /*1ea: mov    0x50(%rbx),%rax */
0x48, 0x83, 0x78, 0x28, 0x00,             /*1ee: cmpq   $0x0,0x28(%rax) */
0x74, 0x7a,                               /*1f3: je     26f <op_super+0x26f> */
0x48, 0x89, 0xdf,                         /*1f5: mov    %rbx,%rdi */
0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*1f8: callq  *0x1a8(%rbx) */
0xe9, 0x8a, 0x00, 0x00, 0x00,             /*1fe: jmpq   28d <op_super+0x28d> */
0xc7, 0x40, 0x44, 0x00, 0x00, 0xab, 0x00, /*203: movl   $0xab0000,0x44(%rax) */
0x4c, 0x89, 0x78, 0x08,                   /*20a: mov    %r15,0x8(%rax) */
0x49, 0x8b, 0x4f, 0x18,                   /*20e: mov    0x18(%r15),%rcx */
0x48, 0x89, 0x4b, 0x08,                   /*212: mov    %rcx,0x8(%rbx) */
0x48, 0x8b, 0x51, 0x10,                   /*216: mov    0x10(%rcx),%rdx */
0x48, 0x89, 0x53, 0x20,                   /*21a: mov    %rdx,0x20(%rbx) */
0x48, 0x8b, 0x51, 0x18,                   /*21e: mov    0x18(%rcx),%rdx */
0x48, 0x89, 0x53, 0x28,                   /*222: mov    %rdx,0x28(%rbx) */
0x0f, 0xb7, 0x49, 0x02,                   /*226: movzwl 0x2(%rcx),%ecx */
0x89, 0x48, 0x18,                         /*22a: mov    %ecx,0x18(%rax) */
0x48, 0x8b, 0x4b, 0x08,                   /*22d: mov    0x8(%rbx),%rcx */
0x48, 0x8b, 0x7b, 0x50,                   /*231: mov    0x50(%rbx),%rdi */
0x0f, 0xb7, 0x71, 0x02,                   /*235: movzwl 0x2(%rcx),%esi */
0x8b, 0x50, 0x40,                         /*239: mov    0x40(%rax),%edx */
0x83, 0xc2, 0x02,                         /*23c: add    $0x2,%edx */
0xff, 0x93, 0x38, 0x01, 0x00, 0x00,       /*23f: callq  *0x138(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*245: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*249: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*24d: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x18,                   /*251: mov    %rax,0x18(%rbx) */
0x48, 0x8b, 0x43, 0x08,                   /*255: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*259: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x10,                   /*25d: mov    %rax,0x10(%rbx) */
0x4c, 0x89, 0xfe,                         /*261: mov    %r15,%rsi */
0x48, 0x89, 0xda,                         /*264: mov    %rbx,%rdx */
0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*267: callq  *0x118(%rbx) */
0xeb, 0x1e,                               /*26d: jmp    28d <op_super+0x28d> */
0x48, 0x8b, 0x40, 0x18,                   /*26f: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x20,                   /*273: mov    0x20(%rax),%rcx */
0x48, 0x8b, 0x49, 0x10,                   /*277: mov    0x10(%rcx),%rcx */
0x48, 0x89, 0x48, 0x08,                   /*27b: mov    %rcx,0x8(%rax) */
0x48, 0x89, 0x4b, 0x18,                   /*27f: mov    %rcx,0x18(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*283: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0x58, 0x01, 0x00, 0x00,       /*287: callq  *0x158(%rbx) */
0x48, 0x89, 0xdf,                         /*28d: mov    %rbx,%rdi */
0x5b,                                     /*290: pop    %rbx */
0x41, 0x5c,                               /*291: pop    %r12 */
0x41, 0x5d,                               /*293: pop    %r13 */
0x41, 0x5e,                               /*295: pop    %r14 */
0x41, 0x5f,                               /*297: pop    %r15 */
0x5d,                                     /*299: pop    %rbp */

};

static void op_super_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 216)) = c * 1 + 0;
  *((int32_t *)(op + 350)) = c * 1 + 1;
  *((int32_t *)(op + 303)) = a * 1 + 1;
  *((int32_t *)(op + 316)) = a * 8 + 8;
  *((int32_t *)(op + 334)) = a * 8 + 12;
  *((int32_t *)(op + 344)) = a * 8 + 8;
  *((int32_t *)(op + 422)) = a * 8 + 0;
  *((int32_t *)(op + 518)) = a * 1 + 0;
}

static void op_super_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_super_set_args(op, GETARG_A(c),0,GETARG_C(c),op_idx);
}


/* args: {"b"=>[[1, 0, 21..24]], "a"=>[[8, 0, 391..394], [8, 0, 451..454], [8, 0, 463..466], [8, 8, 679..682]]} */
static uint8_t op_argary[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x83, 0xec, 0x38,                   /*a: sub    $0x38,%rsp */
0x49, 0x89, 0xfc,                         /*e: mov    %rdi,%r12 */
0xc7, 0x44, 0x24, 0x34, 0x00, 0x00, 0xbc, 0x00,/*11: movl   $0xbc0000,0x34(%rsp) */
0x44, 0x8b, 0x6c, 0x24, 0x34,             /*19: mov    0x34(%rsp),%r13d */
0x44, 0x8b, 0x7c, 0x24, 0x34,             /*1e: mov    0x34(%rsp),%r15d */
0x8b, 0x5c, 0x24, 0x34,                   /*23: mov    0x34(%rsp),%ebx */
0x8b, 0x74, 0x24, 0x34,                   /*27: mov    0x34(%rsp),%esi */
0x83, 0xe6, 0x0f,                         /*2b: and    $0xf,%esi */
0x0f, 0x84, 0x98, 0x00, 0x00, 0x00,       /*2e: je     cc <op_argary+0xcc> */
0x49, 0x8b, 0x6c, 0x24, 0x50,             /*34: mov    0x50(%r12),%rbp */
0x48, 0x8b, 0x45, 0x18,                   /*39: mov    0x18(%rbp),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*3d: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*41: mov    0x8(%rax),%rax */
0x48, 0x8b, 0x40, 0x28,                   /*45: mov    0x28(%rax),%rax */
0x48, 0x85, 0xc0,                         /*49: test   %rax,%rax */
0x0f, 0x94, 0xc1,                         /*4c: sete   %cl */
0x83, 0xfe, 0x01,                         /*4f: cmp    $0x1,%esi */
0x74, 0x1f,                               /*52: je     73 <op_argary+0x73> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*54: mov    $0x1,%edx */
0x29, 0xf2,                               /*59: sub    %esi,%edx */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*5b: nopl   0x0(%rax,%rax,1) */
0xf6, 0xc1, 0x01,                         /*60: test   $0x1,%cl */
0x75, 0x12,                               /*63: jne    77 <op_argary+0x77> */
0x48, 0x8b, 0x40, 0x08,                   /*65: mov    0x8(%rax),%rax */
0x48, 0x85, 0xc0,                         /*69: test   %rax,%rax */
0x0f, 0x94, 0xc1,                         /*6c: sete   %cl */
0xff, 0xc2,                               /*6f: inc    %edx */
0x75, 0xed,                               /*71: jne    60 <op_argary+0x60> */
0x84, 0xc9,                               /*73: test   %cl,%cl */
0x74, 0x5c,                               /*75: je     d3 <op_argary+0xd3> */
0x49, 0x8b, 0x44, 0x24, 0x70,             /*77: mov    0x70(%r12),%rax */
0x48, 0x8b, 0x30,                         /*7c: mov    (%rax),%rsi */
0x48, 0x89, 0xef,                         /*7f: mov    %rbp,%rdi */
0x41, 0xff, 0x94, 0x24, 0x10, 0x01, 0x00, 0x00,/*82: callq  *0x110(%r12) */
0x49, 0x89, 0xc6,                         /*8a: mov    %rax,%r14 */
0x49, 0x8b, 0x7c, 0x24, 0x50,             /*8d: mov    0x50(%r12),%rdi */
0x49, 0x8b, 0xb4, 0x24, 0x68, 0x02, 0x00, 0x00,/*92: mov    0x268(%r12),%rsi */
0xba, 0x1e, 0x00, 0x00, 0x00,             /*9a: mov    $0x1e,%edx */
0x41, 0xff, 0x94, 0x24, 0x80, 0x00, 0x00, 0x00,/*9f: callq  *0x80(%r12) */
0x48, 0x89, 0xef,                         /*a7: mov    %rbp,%rdi */
0x4c, 0x89, 0xf6,                         /*aa: mov    %r14,%rsi */
0x48, 0x89, 0xc2,                         /*ad: mov    %rax,%rdx */
0x41, 0xff, 0x94, 0x24, 0xc0, 0x01, 0x00, 0x00,/*b0: callq  *0x1c0(%r12) */
0x48, 0x89, 0x45, 0x28,                   /*b8: mov    %rax,0x28(%rbp) */
0x4c, 0x89, 0xe7,                         /*bc: mov    %r12,%rdi */
0x41, 0xff, 0x94, 0x24, 0xa8, 0x01, 0x00, 0x00,/*bf: callq  *0x1a8(%r12) */
0xe9, 0xef, 0x01, 0x00, 0x00,             /*c7: jmpq   2bb <op_argary+0x2bb> */
0x49, 0x8d, 0x44, 0x24, 0x18,             /*cc: lea    0x18(%r12),%rax */
0xeb, 0x04,                               /*d1: jmp    d7 <op_argary+0xd7> */
0x48, 0x83, 0xc0, 0x18,                   /*d3: add    $0x18,%rax */
0x41, 0xc1, 0xed, 0x0a,                   /*d7: shr    $0xa,%r13d */
0x45, 0x89, 0xee,                         /*db: mov    %r13d,%r14d */
0x41, 0x83, 0xe6, 0x3f,                   /*de: and    $0x3f,%r14d */
0x41, 0xc1, 0xef, 0x09,                   /*e2: shr    $0x9,%r15d */
0x41, 0x83, 0xe7, 0x01,                   /*e6: and    $0x1,%r15d */
0xc1, 0xeb, 0x04,                         /*ea: shr    $0x4,%ebx */
0x41, 0x89, 0xd8,                         /*ed: mov    %ebx,%r8d */
0x41, 0x83, 0xe0, 0x1f,                   /*f0: and    $0x1f,%r8d */
0x48, 0x8b, 0x08,                         /*f4: mov    (%rax),%rcx */
0x48, 0x8d, 0x69, 0x08,                   /*f7: lea    0x8(%rcx),%rbp */
0x45, 0x85, 0xff,                         /*fb: test   %r15d,%r15d */
0x74, 0x5f,                               /*fe: je     15f <op_argary+0x15f> */
0x44, 0x89, 0x7c, 0x24, 0x30,             /*100: mov    %r15d,0x30(%rsp) */
0x44, 0x89, 0xf0,                         /*105: mov    %r14d,%eax */
0x48, 0x89, 0x44, 0x24, 0x18,             /*108: mov    %rax,0x18(%rsp) */
0x48, 0x8b, 0x44, 0xc1, 0x08,             /*10d: mov    0x8(%rcx,%rax,8),%rax */
0x48, 0x89, 0x4c, 0x24, 0x28,             /*112: mov    %rcx,0x28(%rsp) */
0x48, 0x83, 0xf8, 0x07,                   /*117: cmp    $0x7,%rax */
0x73, 0x15,                               /*11b: jae    132 <op_argary+0x132> */
0x0f, 0xb6, 0xc8,                         /*11d: movzbl %al,%ecx */
0x45, 0x31, 0xff,                         /*120: xor    %r15d,%r15d */
0xba, 0x55, 0x00, 0x00, 0x00,             /*123: mov    $0x55,%edx */
0x0f, 0xa3, 0xca,                         /*128: bt     %ecx,%edx */
0xb9, 0x00, 0x00, 0x00, 0x00,             /*12b: mov    $0x0,%ecx */
0x72, 0x60,                               /*130: jb     192 <op_argary+0x192> */
0x45, 0x31, 0xff,                         /*132: xor    %r15d,%r15d */
0xa8, 0x01,                               /*135: test   $0x1,%al */
0x75, 0x57,                               /*137: jne    190 <op_argary+0x190> */
0x0f, 0xb6, 0xc8,                         /*139: movzbl %al,%ecx */
0x83, 0xf9, 0x0e,                         /*13c: cmp    $0xe,%ecx */
0xb9, 0x00, 0x00, 0x00, 0x00,             /*13f: mov    $0x0,%ecx */
0x74, 0x4c,                               /*144: je     192 <op_argary+0x192> */
0x45, 0x31, 0xff,                         /*146: xor    %r15d,%r15d */
0x0f, 0xb6, 0x08,                         /*149: movzbl (%rax),%ecx */
0x83, 0xf9, 0x0e,                         /*14c: cmp    $0xe,%ecx */
0xb9, 0x00, 0x00, 0x00, 0x00,             /*14f: mov    $0x0,%ecx */
0x75, 0x3c,                               /*154: jne    192 <op_argary+0x192> */
0x4c, 0x8b, 0x78, 0x28,                   /*156: mov    0x28(%rax),%r15 */
0x8b, 0x48, 0x18,                         /*15a: mov    0x18(%rax),%ecx */
0xeb, 0x33,                               /*15d: jmp    192 <op_argary+0x192> */
0x4d, 0x8b, 0x6c, 0x24, 0x18,             /*15f: mov    0x18(%r12),%r13 */
0x49, 0x8b, 0x7c, 0x24, 0x50,             /*164: mov    0x50(%r12),%rdi */
0x43, 0x8d, 0x34, 0x30,                   /*169: lea    (%r8,%r14,1),%esi */
0x48, 0x89, 0xea,                         /*16d: mov    %rbp,%rdx */
0x48, 0x89, 0xcd,                         /*170: mov    %rcx,%rbp */
0x4c, 0x89, 0xc3,                         /*173: mov    %r8,%rbx */
0x41, 0xff, 0x94, 0x24, 0x20, 0x02, 0x00, 0x00,/*176: callq  *0x220(%r12) */
0x48, 0x89, 0xdf,                         /*17e: mov    %rbx,%rdi */
0x49, 0x89, 0xe8,                         /*181: mov    %rbp,%r8 */
0x49, 0x89, 0x85, 0x00, 0x08, 0xab, 0x00, /*184: mov    %rax,0xab0800(%r13) */
0xe9, 0x00, 0x01, 0x00, 0x00,             /*18b: jmpq   290 <op_argary+0x290> */
0x31, 0xc9,                               /*190: xor    %ecx,%ecx */
0x48, 0x89, 0x4c, 0x24, 0x08,             /*192: mov    %rcx,0x8(%rsp) */
0x49, 0x8b, 0x44, 0x24, 0x18,             /*197: mov    0x18(%r12),%rax */
0x48, 0x89, 0x04, 0x24,                   /*19c: mov    %rax,(%rsp) */
0x49, 0x8b, 0x7c, 0x24, 0x50,             /*1a0: mov    0x50(%r12),%rdi */
0x43, 0x8d, 0x34, 0x30,                   /*1a5: lea    (%r8,%r14,1),%esi */
0x4c, 0x89, 0x44, 0x24, 0x20,             /*1a9: mov    %r8,0x20(%rsp) */
0x01, 0xce,                               /*1ae: add    %ecx,%esi */
0x89, 0x74, 0x24, 0x14,                   /*1b0: mov    %esi,0x14(%rsp) */
0x41, 0xff, 0x94, 0x24, 0xd0, 0x00, 0x00, 0x00,/*1b4: callq  *0xd0(%r12) */
0x48, 0x8b, 0x0c, 0x24,                   /*1bc: mov    (%rsp),%rcx */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*1c0: mov    %rax,0xab0800(%rcx) */
0x49, 0x8b, 0x44, 0x24, 0x18,             /*1c7: mov    0x18(%r12),%rax */
0x4c, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*1cc: mov    0xab0800(%rax),%r9 */
0x45, 0x85, 0xf6,                         /*1d3: test   %r14d,%r14d */
0x4c, 0x8b, 0x44, 0x24, 0x28,             /*1d6: mov    0x28(%rsp),%r8 */
0x74, 0x2f,                               /*1db: je     20c <op_argary+0x20c> */
0x49, 0x8b, 0x49, 0x28,                   /*1dd: mov    0x28(%r9),%rcx */
0x49, 0x83, 0xe5, 0x3f,                   /*1e1: and    $0x3f,%r13 */
0x49, 0xf7, 0xdd,                         /*1e5: neg    %r13 */
0x4c, 0x89, 0xc2,                         /*1e8: mov    %r8,%rdx */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*1eb: nopl   0x0(%rax,%rax,1) */
0x48, 0x89, 0xee,                         /*1f0: mov    %rbp,%rsi */
0x48, 0x83, 0xc2, 0x10,                   /*1f3: add    $0x10,%rdx */
0x48, 0x8b, 0x3e,                         /*1f7: mov    (%rsi),%rdi */
0x48, 0x89, 0x39,                         /*1fa: mov    %rdi,(%rcx) */
0x48, 0x83, 0xc1, 0x08,                   /*1fd: add    $0x8,%rcx */
0x49, 0xff, 0xc5,                         /*201: inc    %r13 */
0x48, 0x89, 0xd5,                         /*204: mov    %rdx,%rbp */
0x48, 0x89, 0xf2,                         /*207: mov    %rsi,%rdx */
0x75, 0xe4,                               /*20a: jne    1f0 <op_argary+0x1f0> */
0x48, 0x8b, 0x44, 0x24, 0x08,             /*20c: mov    0x8(%rsp),%rax */
0x85, 0xc0,                               /*211: test   %eax,%eax */
0x48, 0x8b, 0x6c, 0x24, 0x18,             /*213: mov    0x18(%rsp),%rbp */
0x7e, 0x29,                               /*218: jle    243 <op_argary+0x243> */
0x48, 0x8d, 0x0c, 0xed, 0x00, 0x00, 0x00, 0x00,/*21a: lea    0x0(,%rbp,8),%rcx */
0x49, 0x03, 0x49, 0x28,                   /*222: add    0x28(%r9),%rcx */
0x48, 0x63, 0xd0,                         /*226: movslq %eax,%rdx */
0x48, 0xf7, 0xda,                         /*229: neg    %rdx */
0x0f, 0x1f, 0x40, 0x00,                   /*22c: nopl   0x0(%rax) */
0x49, 0x8b, 0x37,                         /*230: mov    (%r15),%rsi */
0x49, 0x83, 0xc7, 0x08,                   /*233: add    $0x8,%r15 */
0x48, 0x89, 0x31,                         /*237: mov    %rsi,(%rcx) */
0x48, 0x83, 0xc1, 0x08,                   /*23a: add    $0x8,%rcx */
0x48, 0xff, 0xc2,                         /*23e: inc    %rdx */
0x75, 0xed,                               /*241: jne    230 <op_argary+0x230> */
0x48, 0x8b, 0x7c, 0x24, 0x20,             /*243: mov    0x20(%rsp),%rdi */
0x85, 0xff,                               /*248: test   %edi,%edi */
0x74, 0x37,                               /*24a: je     283 <op_argary+0x283> */
0x49, 0x8d, 0x4c, 0xe8, 0x10,             /*24c: lea    0x10(%r8,%rbp,8),%rcx */
0x48, 0x63, 0xd0,                         /*251: movslq %eax,%rdx */
0x48, 0x01, 0xea,                         /*254: add    %rbp,%rdx */
0x48, 0xc1, 0xe2, 0x03,                   /*257: shl    $0x3,%rdx */
0x49, 0x03, 0x51, 0x28,                   /*25b: add    0x28(%r9),%rdx */
0x48, 0x83, 0xe3, 0x1f,                   /*25f: and    $0x1f,%rbx */
0x48, 0xf7, 0xdb,                         /*263: neg    %rbx */
0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*266: nopw   %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x31,                         /*270: mov    (%rcx),%rsi */
0x48, 0x83, 0xc1, 0x08,                   /*273: add    $0x8,%rcx */
0x48, 0x89, 0x32,                         /*277: mov    %rsi,(%rdx) */
0x48, 0x83, 0xc2, 0x08,                   /*27a: add    $0x8,%rdx */
0x48, 0xff, 0xc3,                         /*27e: inc    %rbx */
0x75, 0xed,                               /*281: jne    270 <op_argary+0x270> */
0x8b, 0x4c, 0x24, 0x14,                   /*283: mov    0x14(%rsp),%ecx */
0x41, 0x89, 0x49, 0x18,                   /*287: mov    %ecx,0x18(%r9) */
0x44, 0x8b, 0x7c, 0x24, 0x30,             /*28b: mov    0x30(%rsp),%r15d */
0x49, 0x8b, 0x44, 0x24, 0x18,             /*290: mov    0x18(%r12),%rax */
0x45, 0x01, 0xfe,                         /*295: add    %r15d,%r14d */
0x42, 0x8d, 0x4c, 0x37, 0x01,             /*298: lea    0x1(%rdi,%r14,1),%ecx */
0x48, 0x63, 0xc9,                         /*29d: movslq %ecx,%rcx */
0x49, 0x8b, 0x0c, 0xc8,                   /*2a0: mov    (%r8,%rcx,8),%rcx */
0x48, 0x89, 0x88, 0x08, 0x08, 0xab, 0x00, /*2a4: mov    %rcx,0xab0808(%rax) */
0x41, 0x8b, 0x44, 0x24, 0x48,             /*2ab: mov    0x48(%r12),%eax */
0x49, 0x8b, 0x4c, 0x24, 0x50,             /*2b0: mov    0x50(%r12),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*2b5: mov    %eax,0xdc(%rcx) */
0x4c, 0x89, 0xe7,                         /*2bb: mov    %r12,%rdi */
0x48, 0x83, 0xc4, 0x38,                   /*2be: add    $0x38,%rsp */
0x5b,                                     /*2c2: pop    %rbx */
0x41, 0x5c,                               /*2c3: pop    %r12 */
0x41, 0x5d,                               /*2c5: pop    %r13 */
0x41, 0x5e,                               /*2c7: pop    %r14 */
0x41, 0x5f,                               /*2c9: pop    %r15 */
0x5d,                                     /*2cb: pop    %rbp */

};

static void op_argary_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 1 + 0;
  *((int32_t *)(op + 391)) = a * 8 + 0;
  *((int32_t *)(op + 451)) = a * 8 + 0;
  *((int32_t *)(op + 463)) = a * 8 + 0;
  *((int32_t *)(op + 679)) = a * 8 + 8;
}

static void op_argary_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_argary_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[1, 0, 18..21]]} */
static uint8_t op_enter[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x83, 0xec, 0x58,                   /*a: sub    $0x58,%rsp */
0x48, 0x89, 0xfd,                         /*e: mov    %rdi,%rbp */
0xb8, 0x00, 0x00, 0xab, 0x00,             /*11: mov    $0xab0000,%eax */
0x41, 0x89, 0xc0,                         /*16: mov    %eax,%r8d */
0x44, 0x89, 0xc2,                         /*19: mov    %r8d,%edx */
0xc1, 0xea, 0x12,                         /*1c: shr    $0x12,%edx */
0x83, 0xe2, 0x1f,                         /*1f: and    $0x1f,%edx */
0x48, 0x89, 0x54, 0x24, 0x40,             /*22: mov    %rdx,0x40(%rsp) */
0x44, 0x89, 0xc1,                         /*27: mov    %r8d,%ecx */
0xc1, 0xe9, 0x0d,                         /*2a: shr    $0xd,%ecx */
0x83, 0xe1, 0x1f,                         /*2d: and    $0x1f,%ecx */
0x48, 0x89, 0x4c, 0x24, 0x30,             /*30: mov    %rcx,0x30(%rsp) */
0x44, 0x89, 0xc3,                         /*35: mov    %r8d,%ebx */
0xc1, 0xeb, 0x0c,                         /*38: shr    $0xc,%ebx */
0x83, 0xe3, 0x01,                         /*3b: and    $0x1,%ebx */
0x45, 0x89, 0xc7,                         /*3e: mov    %r8d,%r15d */
0x41, 0xc1, 0xef, 0x07,                   /*41: shr    $0x7,%r15d */
0x4c, 0x8b, 0x75, 0x18,                   /*45: mov    0x18(%rbp),%r14 */
0x48, 0x8b, 0x7d, 0x50,                   /*49: mov    0x50(%rbp),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*4d: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*51: mov    0x20(%rax),%rax */
0x48, 0x63, 0x70, 0x40,                   /*55: movslq 0x40(%rax),%rsi */
0x48, 0x89, 0x74, 0x24, 0x20,             /*59: mov    %rsi,0x20(%rsp) */
0x8d, 0x04, 0x0a,                         /*5e: lea    (%rdx,%rcx,1),%eax */
0x48, 0x89, 0x44, 0x24, 0x48,             /*61: mov    %rax,0x48(%rsp) */
0x48, 0x85, 0xf6,                         /*66: test   %rsi,%rsi */
0x48, 0x8d, 0x46, 0x01,                   /*69: lea    0x1(%rsi),%rax */
0xb9, 0x02, 0x00, 0x00, 0x00,             /*6d: mov    $0x2,%ecx */
0x48, 0x0f, 0x49, 0xc8,                   /*72: cmovns %rax,%rcx */
0x49, 0x8d, 0x04, 0xce,                   /*76: lea    (%r14,%rcx,8),%rax */
0x48, 0x89, 0x44, 0x24, 0x50,             /*7a: mov    %rax,0x50(%rsp) */
0x49, 0x8b, 0x34, 0xce,                   /*7f: mov    (%r14,%rcx,8),%rsi */
0x48, 0x83, 0xfe, 0x06,                   /*83: cmp    $0x6,%rsi */
0x77, 0x07,                               /*87: ja     90 <op_enter+0x90> */
0xff, 0x24, 0xf5, 0x00, 0x00, 0x00, 0x00, /*89: jmpq   *0x0(,%rsi,8) */
0x40, 0xf6, 0xc6, 0x01,                   /*90: test   $0x1,%sil */
0x75, 0x11,                               /*94: jne    a7 <op_enter+0xa7> */
0x40, 0x0f, 0xb6, 0xc6,                   /*96: movzbl %sil,%eax */
0x83, 0xf8, 0x0e,                         /*9a: cmp    $0xe,%eax */
0x74, 0x08,                               /*9d: je     a7 <op_enter+0xa7> */
0x0f, 0xb6, 0x06,                         /*9f: movzbl (%rsi),%eax */
0x83, 0xf8, 0x0d,                         /*a2: cmp    $0xd,%eax */
0x74, 0x27,                               /*a5: je     ce <op_enter+0xce> */
0x48, 0x8b, 0x8d, 0x78, 0x02, 0x00, 0x00, /*a7: mov    0x278(%rbp),%rcx */
0x45, 0x89, 0xc4,                         /*ae: mov    %r8d,%r12d */
0x4c, 0x8b, 0x85, 0x80, 0x02, 0x00, 0x00, /*b1: mov    0x280(%rbp),%r8 */
0xba, 0x0d, 0x00, 0x00, 0x00,             /*b8: mov    $0xd,%edx */
0xff, 0x95, 0x28, 0x01, 0x00, 0x00,       /*bd: callq  *0x128(%rbp) */
0x45, 0x89, 0xe0,                         /*c3: mov    %r12d,%r8d */
0x48, 0x8b, 0x4c, 0x24, 0x50,             /*c6: mov    0x50(%rsp),%rcx */
0x48, 0x89, 0x01,                         /*cb: mov    %rax,(%rcx) */
0x45, 0x89, 0xfc,                         /*ce: mov    %r15d,%r12d */
0x41, 0x83, 0xe4, 0x1f,                   /*d1: and    $0x1f,%r12d */
0x48, 0x8b, 0x44, 0x24, 0x48,             /*d5: mov    0x48(%rsp),%rax */
0x44, 0x8d, 0x2c, 0x18,                   /*da: lea    (%rax,%rbx,1),%r13d */
0x48, 0x89, 0x5c, 0x24, 0x28,             /*de: mov    %rbx,0x28(%rsp) */
0x49, 0x83, 0xc6, 0x08,                   /*e3: add    $0x8,%r14 */
0x4c, 0x89, 0x74, 0x24, 0x38,             /*e7: mov    %r14,0x38(%rsp) */
0x48, 0x89, 0xeb,                         /*ec: mov    %rbp,%rbx */
0x48, 0x8b, 0xbb, 0x88, 0x02, 0x00, 0x00, /*ef: mov    0x288(%rbx),%rdi */
0x31, 0xc0,                               /*f6: xor    %eax,%eax */
0x48, 0x8b, 0x74, 0x24, 0x50,             /*f8: mov    0x50(%rsp),%rsi */
0x44, 0x89, 0xc2,                         /*fd: mov    %r8d,%edx */
0x4c, 0x89, 0xf5,                         /*100: mov    %r14,%rbp */
0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*103: callq  *0x168(%rbx) */
0x4c, 0x8b, 0x54, 0x24, 0x20,             /*109: mov    0x20(%rsp),%r10 */
0x49, 0x89, 0xde,                         /*10e: mov    %rbx,%r14 */
0x45, 0x85, 0xd2,                         /*111: test   %r10d,%r10d */
0x48, 0x89, 0xeb,                         /*114: mov    %rbp,%rbx */
0x79, 0x1d,                               /*117: jns    136 <op_enter+0x136> */
0x49, 0x8b, 0x46, 0x18,                   /*119: mov    0x18(%r14),%rax */
0x49, 0x8b, 0x7e, 0x50,                   /*11d: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0x70, 0x08,                   /*121: mov    0x8(%rax),%rsi */
0x48, 0x8b, 0x5e, 0x28,                   /*125: mov    0x28(%rsi),%rbx */
0x8b, 0x6e, 0x18,                         /*129: mov    0x18(%rsi),%ebp */
0x41, 0xff, 0x96, 0xe0, 0x01, 0x00, 0x00, /*12c: callq  *0x1e0(%r14) */
0x49, 0x89, 0xea,                         /*133: mov    %rbp,%r10 */
0x43, 0x8d, 0x6c, 0x25, 0x00,             /*136: lea    0x0(%r13,%r12,1),%ebp */
0x49, 0x8b, 0x7e, 0x50,                   /*13b: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*13f: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*143: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x48, 0x08,                   /*147: mov    0x8(%rax),%rcx */
0x48, 0x85, 0xc9,                         /*14b: test   %rcx,%rcx */
0x4d, 0x89, 0xe9,                         /*14e: mov    %r13,%r9 */
0x74, 0x41,                               /*151: je     194 <op_enter+0x194> */
0xf6, 0x41, 0x02, 0x08,                   /*153: testb  $0x8,0x2(%rcx) */
0x74, 0x3b,                               /*157: je     194 <op_enter+0x194> */
0x45, 0x85, 0xd2,                         /*159: test   %r10d,%r10d */
0x0f, 0x88, 0x92, 0x00, 0x00, 0x00,       /*15c: js     1f4 <op_enter+0x1f4> */
0x48, 0x8b, 0x4c, 0x24, 0x40,             /*162: mov    0x40(%rsp),%rcx */
0x42, 0x8d, 0x34, 0x21,                   /*167: lea    (%rcx,%r12,1),%esi */
0x41, 0x39, 0xf2,                         /*16b: cmp    %esi,%r10d */
0x7c, 0x0e,                               /*16e: jl     17e <op_enter+0x17e> */
0x48, 0x8b, 0x4c, 0x24, 0x28,             /*170: mov    0x28(%rsp),%rcx */
0x85, 0xc9,                               /*175: test   %ecx,%ecx */
0x75, 0x7b,                               /*177: jne    1f4 <op_enter+0x1f4> */
0x41, 0x39, 0xea,                         /*179: cmp    %ebp,%r10d */
0x7e, 0x76,                               /*17c: jle    1f4 <op_enter+0x1f4> */
0x41, 0xff, 0x96, 0x58, 0x02, 0x00, 0x00, /*17e: callq  *0x258(%r14) */
0x4c, 0x89, 0xf7,                         /*185: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*188: callq  *0x1a8(%r14) */
0xe9, 0x75, 0x04, 0x00, 0x00,             /*18f: jmpq   609 <op_enter+0x609> */
0x83, 0xfd, 0x02,                         /*194: cmp    $0x2,%ebp */
0x7c, 0x5b,                               /*197: jl     1f4 <op_enter+0x1f4> */
0x41, 0x83, 0xfa, 0x01,                   /*199: cmp    $0x1,%r10d */
0x75, 0x55,                               /*19d: jne    1f4 <op_enter+0x1f4> */
0x48, 0x8b, 0x33,                         /*19f: mov    (%rbx),%rsi */
0x41, 0xba, 0x01, 0x00, 0x00, 0x00,       /*1a2: mov    $0x1,%r10d */
0x48, 0x83, 0xfe, 0x06,                   /*1a8: cmp    $0x6,%rsi */
0x77, 0x0b,                               /*1ac: ja     1b9 <op_enter+0x1b9> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*1ae: mov    $0x55,%ecx */
0x48, 0x0f, 0xa3, 0xf1,                   /*1b3: bt     %rsi,%rcx */
0x72, 0x3b,                               /*1b7: jb     1f4 <op_enter+0x1f4> */
0x40, 0xf6, 0xc6, 0x01,                   /*1b9: test   $0x1,%sil */
0x75, 0x35,                               /*1bd: jne    1f4 <op_enter+0x1f4> */
0x40, 0x0f, 0xb6, 0xce,                   /*1bf: movzbl %sil,%ecx */
0x83, 0xf9, 0x0e,                         /*1c3: cmp    $0xe,%ecx */
0x74, 0x2c,                               /*1c6: je     1f4 <op_enter+0x1f4> */
0x4d, 0x89, 0xcd,                         /*1c8: mov    %r9,%r13 */
0x0f, 0xb6, 0x0e,                         /*1cb: movzbl (%rsi),%ecx */
0x83, 0xf9, 0x0e,                         /*1ce: cmp    $0xe,%ecx */
0x75, 0x1e,                               /*1d1: jne    1f1 <op_enter+0x1f1> */
0x41, 0xff, 0x96, 0xe0, 0x01, 0x00, 0x00, /*1d3: callq  *0x1e0(%r14) */
0x48, 0x8b, 0x03,                         /*1da: mov    (%rbx),%rax */
0x44, 0x8b, 0x50, 0x18,                   /*1dd: mov    0x18(%rax),%r10d */
0x48, 0x8b, 0x58, 0x28,                   /*1e1: mov    0x28(%rax),%rbx */
0x49, 0x8b, 0x46, 0x50,                   /*1e5: mov    0x50(%r14),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*1e9: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*1ed: mov    0x20(%rax),%rax */
0x4d, 0x89, 0xe9,                         /*1f1: mov    %r13,%r9 */
0x89, 0x68, 0x40,                         /*1f4: mov    %ebp,0x40(%rax) */
0x41, 0x39, 0xea,                         /*1f7: cmp    %ebp,%r10d */
0x0f, 0x8d, 0xb3, 0x00, 0x00, 0x00,       /*1fa: jge    2b3 <op_enter+0x2b3> */
0x48, 0x8b, 0x44, 0x24, 0x40,             /*200: mov    0x40(%rsp),%rax */
0x46, 0x8d, 0x2c, 0x20,                   /*205: lea    (%rax,%r12,1),%r13d */
0x45, 0x39, 0xea,                         /*209: cmp    %r13d,%r10d */
0x44, 0x89, 0xe0,                         /*20c: mov    %r12d,%eax */
0x7d, 0x0f,                               /*20f: jge    220 <op_enter+0x220> */
0x31, 0xc9,                               /*211: xor    %ecx,%ecx */
0x44, 0x89, 0xd0,                         /*213: mov    %r10d,%eax */
0x48, 0x8b, 0x54, 0x24, 0x40,             /*216: mov    0x40(%rsp),%rdx */
0x29, 0xd0,                               /*21b: sub    %edx,%eax */
0x0f, 0x4e, 0xc1,                         /*21d: cmovle %ecx,%eax */
0xff, 0xc5,                               /*220: inc    %ebp */
0x49, 0x8b, 0x4e, 0x18,                   /*222: mov    0x18(%r14),%rcx */
0x48, 0x8b, 0x54, 0x24, 0x50,             /*226: mov    0x50(%rsp),%rdx */
0x48, 0x8b, 0x12,                         /*22b: mov    (%rdx),%rdx */
0x48, 0x89, 0x14, 0xe9,                   /*22e: mov    %rdx,(%rcx,%rbp,8) */
0x41, 0x8d, 0x4a, 0x01,                   /*232: lea    0x1(%r10),%ecx */
0x48, 0x63, 0xc9,                         /*236: movslq %ecx,%rcx */
0x49, 0x8b, 0x56, 0x18,                   /*239: mov    0x18(%r14),%rdx */
0x48, 0xc7, 0x04, 0xca, 0x00, 0x00, 0x00, 0x00,/*23d: movq   $0x0,(%rdx,%rcx,8) */
0x49, 0x8b, 0x56, 0x18,                   /*245: mov    0x18(%r14),%rdx */
0x83, 0x24, 0xca, 0x01,                   /*249: andl   $0x1,(%rdx,%rcx,8) */
0x49, 0x8b, 0x56, 0x18,                   /*24d: mov    0x18(%r14),%rdx */
0x48, 0xc7, 0x04, 0xca, 0x00, 0x00, 0x00, 0x00,/*251: movq   $0x0,(%rdx,%rcx,8) */
0x48, 0x39, 0x5c, 0x24, 0x38,             /*259: cmp    %rbx,0x38(%rsp) */
0x0f, 0x84, 0xf8, 0x00, 0x00, 0x00,       /*25e: je     35c <op_enter+0x35c> */
0x49, 0x8b, 0x4e, 0x18,                   /*264: mov    0x18(%r14),%rcx */
0x48, 0x8d, 0x69, 0x08,                   /*268: lea    0x8(%rcx),%rbp */
0x48, 0x39, 0xdd,                         /*26c: cmp    %rbx,%rbp */
0x0f, 0x86, 0xae, 0x00, 0x00, 0x00,       /*26f: jbe    323 <op_enter+0x323> */
0x44, 0x89, 0xd6,                         /*275: mov    %r10d,%esi */
0x29, 0xc6,                               /*278: sub    %eax,%esi */
0x48, 0x63, 0xf6,                         /*27a: movslq %esi,%rsi */
0x48, 0x8d, 0x3c, 0xf3,                   /*27d: lea    (%rbx,%rsi,8),%rdi */
0x48, 0x39, 0xfd,                         /*281: cmp    %rdi,%rbp */
0x0f, 0x83, 0x99, 0x00, 0x00, 0x00,       /*284: jae    323 <op_enter+0x323> */
0x41, 0x39, 0xc2,                         /*28a: cmp    %eax,%r10d */
0x0f, 0x84, 0xc9, 0x00, 0x00, 0x00,       /*28d: je     35c <op_enter+0x35c> */
0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*293: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x54, 0xf3, 0xf8,             /*2a0: mov    -0x8(%rbx,%rsi,8),%rdx */
0x48, 0x89, 0x14, 0xf1,                   /*2a5: mov    %rdx,(%rcx,%rsi,8) */
0x48, 0xff, 0xce,                         /*2a9: dec    %rsi */
0x75, 0xf2,                               /*2ac: jne    2a0 <op_enter+0x2a0> */
0xe9, 0xa9, 0x00, 0x00, 0x00,             /*2ae: jmpq   35c <op_enter+0x35c> */
0x4c, 0x89, 0x4c, 0x24, 0x20,             /*2b3: mov    %r9,0x20(%rsp) */
0x48, 0x39, 0x5c, 0x24, 0x38,             /*2b8: cmp    %rbx,0x38(%rsp) */
0x0f, 0x84, 0x49, 0x01, 0x00, 0x00,       /*2bd: je     40c <op_enter+0x40c> */
0x8d, 0x45, 0x01,                         /*2c3: lea    0x1(%rbp),%eax */
0x49, 0x8b, 0x4e, 0x18,                   /*2c6: mov    0x18(%r14),%rcx */
0x48, 0x8b, 0x54, 0x24, 0x50,             /*2ca: mov    0x50(%rsp),%rdx */
0x48, 0x8b, 0x12,                         /*2cf: mov    (%rdx),%rdx */
0x48, 0x89, 0x14, 0xc1,                   /*2d2: mov    %rdx,(%rcx,%rax,8) */
0x49, 0x8b, 0x46, 0x18,                   /*2d6: mov    0x18(%r14),%rax */
0x48, 0x8d, 0x48, 0x08,                   /*2da: lea    0x8(%rax),%rcx */
0x48, 0x8b, 0x54, 0x24, 0x48,             /*2de: mov    0x48(%rsp),%rdx */
0x89, 0xd2,                               /*2e3: mov    %edx,%edx */
0x48, 0x39, 0xd9,                         /*2e5: cmp    %rbx,%rcx */
0x0f, 0x86, 0xe4, 0x00, 0x00, 0x00,       /*2e8: jbe    3d2 <op_enter+0x3d2> */
0x48, 0x8d, 0x34, 0xd3,                   /*2ee: lea    (%rbx,%rdx,8),%rsi */
0x48, 0x39, 0xf1,                         /*2f2: cmp    %rsi,%rcx */
0x0f, 0x83, 0xd7, 0x00, 0x00, 0x00,       /*2f5: jae    3d2 <op_enter+0x3d2> */
0x48, 0x8b, 0x4c, 0x24, 0x48,             /*2fb: mov    0x48(%rsp),%rcx */
0x85, 0xc9,                               /*300: test   %ecx,%ecx */
0x0f, 0x84, 0x04, 0x01, 0x00, 0x00,       /*302: je     40c <op_enter+0x40c> */
0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*308: nopl   0x0(%rax,%rax,1) */
0x48, 0x8b, 0x4c, 0xd3, 0xf8,             /*310: mov    -0x8(%rbx,%rdx,8),%rcx */
0x48, 0x89, 0x0c, 0xd0,                   /*315: mov    %rcx,(%rax,%rdx,8) */
0x48, 0xff, 0xca,                         /*319: dec    %rdx */
0x75, 0xf2,                               /*31c: jne    310 <op_enter+0x310> */
0xe9, 0xe9, 0x00, 0x00, 0x00,             /*31e: jmpq   40c <op_enter+0x40c> */
0x48, 0x39, 0xdd,                         /*323: cmp    %rbx,%rbp */
0x74, 0x34,                               /*326: je     35c <op_enter+0x35c> */
0x44, 0x89, 0xd6,                         /*328: mov    %r10d,%esi */
0x29, 0xc6,                               /*32b: sub    %eax,%esi */
0x74, 0x2d,                               /*32d: je     35c <op_enter+0x35c> */
0x48, 0x63, 0xf6,                         /*32f: movslq %esi,%rsi */
0x48, 0xf7, 0xde,                         /*332: neg    %rsi */
0x48, 0x89, 0xdf,                         /*335: mov    %rbx,%rdi */
0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*338: nopl   0x0(%rax,%rax,1) */
0x48, 0x89, 0xea,                         /*340: mov    %rbp,%rdx */
0x48, 0x83, 0xc1, 0x10,                   /*343: add    $0x10,%rcx */
0x48, 0x8b, 0x2f,                         /*347: mov    (%rdi),%rbp */
0x48, 0x83, 0xc7, 0x08,                   /*34a: add    $0x8,%rdi */
0x48, 0x89, 0x2a,                         /*34e: mov    %rbp,(%rdx) */
0x48, 0xff, 0xc6,                         /*351: inc    %rsi */
0x48, 0x89, 0xcd,                         /*354: mov    %rcx,%rbp */
0x48, 0x89, 0xd1,                         /*357: mov    %rdx,%rcx */
0x75, 0xe4,                               /*35a: jne    340 <op_enter+0x340> */
0x85, 0xc0,                               /*35c: test   %eax,%eax */
0x0f, 0x84, 0xdf, 0x01, 0x00, 0x00,       /*35e: je     543 <op_enter+0x543> */
0x41, 0xff, 0xc1,                         /*364: inc    %r9d */
0x4d, 0x8b, 0x46, 0x18,                   /*367: mov    0x18(%r14),%r8 */
0x4b, 0x8d, 0x0c, 0xc8,                   /*36b: lea    (%r8,%r9,8),%rcx */
0x44, 0x89, 0xd2,                         /*36f: mov    %r10d,%edx */
0x29, 0xc2,                               /*372: sub    %eax,%edx */
0x48, 0x63, 0xea,                         /*374: movslq %edx,%rbp */
0x48, 0x8d, 0x14, 0xeb,                   /*377: lea    (%rbx,%rbp,8),%rdx */
0x48, 0x39, 0xd1,                         /*37b: cmp    %rdx,%rcx */
0x0f, 0x86, 0x9e, 0x01, 0x00, 0x00,       /*37e: jbe    522 <op_enter+0x522> */
0x48, 0x63, 0xf0,                         /*384: movslq %eax,%rsi */
0x48, 0x8d, 0x7c, 0x35, 0x00,             /*387: lea    0x0(%rbp,%rsi,1),%rdi */
0x48, 0x8d, 0x3c, 0xfb,                   /*38c: lea    (%rbx,%rdi,8),%rdi */
0x48, 0x39, 0xf9,                         /*390: cmp    %rdi,%rcx */
0x0f, 0x83, 0x89, 0x01, 0x00, 0x00,       /*393: jae    522 <op_enter+0x522> */
0x48, 0x8b, 0x44, 0x24, 0x48,             /*399: mov    0x48(%rsp),%rax */
0x48, 0x8b, 0x4c, 0x24, 0x28,             /*39e: mov    0x28(%rsp),%rcx */
0x8d, 0x44, 0x01, 0x01,                   /*3a3: lea    0x1(%rcx,%rax,1),%eax */
0x49, 0x8d, 0x44, 0xc0, 0xf8,             /*3a7: lea    -0x8(%r8,%rax,8),%rax */
0x48, 0x8d, 0x4c, 0xeb, 0xf8,             /*3ac: lea    -0x8(%rbx,%rbp,8),%rcx */
0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*3b1: data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x14, 0xf1,                   /*3c0: mov    (%rcx,%rsi,8),%rdx */
0x48, 0x89, 0x14, 0xf0,                   /*3c4: mov    %rdx,(%rax,%rsi,8) */
0x48, 0xff, 0xce,                         /*3c8: dec    %rsi */
0x75, 0xf3,                               /*3cb: jne    3c0 <op_enter+0x3c0> */
0xe9, 0x71, 0x01, 0x00, 0x00,             /*3cd: jmpq   543 <op_enter+0x543> */
0x48, 0x39, 0xd9,                         /*3d2: cmp    %rbx,%rcx */
0x74, 0x35,                               /*3d5: je     40c <op_enter+0x40c> */
0x48, 0x8b, 0x54, 0x24, 0x48,             /*3d7: mov    0x48(%rsp),%rdx */
0x85, 0xd2,                               /*3dc: test   %edx,%edx */
0x74, 0x2c,                               /*3de: je     40c <op_enter+0x40c> */
0x48, 0x8b, 0x54, 0x24, 0x48,             /*3e0: mov    0x48(%rsp),%rdx */
0x48, 0xf7, 0xda,                         /*3e5: neg    %rdx */
0x48, 0x89, 0xde,                         /*3e8: mov    %rbx,%rsi */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*3eb: nopl   0x0(%rax,%rax,1) */
0x48, 0x89, 0xcf,                         /*3f0: mov    %rcx,%rdi */
0x48, 0x83, 0xc0, 0x10,                   /*3f3: add    $0x10,%rax */
0x48, 0x8b, 0x0e,                         /*3f7: mov    (%rsi),%rcx */
0x48, 0x83, 0xc6, 0x08,                   /*3fa: add    $0x8,%rsi */
0x48, 0x89, 0x0f,                         /*3fe: mov    %rcx,(%rdi) */
0x48, 0xff, 0xc2,                         /*401: inc    %rdx */
0x48, 0x89, 0xc1,                         /*404: mov    %rax,%rcx */
0x48, 0x89, 0xf8,                         /*407: mov    %rdi,%rax */
0x75, 0xe4,                               /*40a: jne    3f0 <op_enter+0x3f0> */
0x45, 0x31, 0xed,                         /*40c: xor    %r13d,%r13d */
0x48, 0x8b, 0x44, 0x24, 0x28,             /*40f: mov    0x28(%rsp),%rax */
0x85, 0xc0,                               /*414: test   %eax,%eax */
0x74, 0x6a,                               /*416: je     482 <op_enter+0x482> */
0x48, 0x8b, 0x44, 0x24, 0x48,             /*418: mov    0x48(%rsp),%rax */
0x48, 0x89, 0xc1,                         /*41d: mov    %rax,%rcx */
0x42, 0x8d, 0x04, 0x21,                   /*420: lea    (%rcx,%r12,1),%eax */
0x45, 0x89, 0xd5,                         /*424: mov    %r10d,%r13d */
0x41, 0x29, 0xc5,                         /*427: sub    %eax,%r13d */
0x8d, 0x41, 0x01,                         /*42a: lea    0x1(%rcx),%eax */
0x48, 0x89, 0x44, 0x24, 0x10,             /*42d: mov    %rax,0x10(%rsp) */
0x49, 0x8b, 0x46, 0x18,                   /*432: mov    0x18(%r14),%rax */
0x48, 0x89, 0x44, 0x24, 0x08,             /*436: mov    %rax,0x8(%rsp) */
0x49, 0x8b, 0x7e, 0x50,                   /*43b: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0x44, 0x24, 0x40,             /*43f: mov    0x40(%rsp),%rax */
0x89, 0xc0,                               /*444: mov    %eax,%eax */
0x48, 0x8b, 0x4c, 0x24, 0x30,             /*446: mov    0x30(%rsp),%rcx */
0x89, 0xc9,                               /*44b: mov    %ecx,%ecx */
0x48, 0x01, 0xc1,                         /*44d: add    %rax,%rcx */
0x48, 0x8d, 0x14, 0xcb,                   /*450: lea    (%rbx,%rcx,8),%rdx */
0x44, 0x89, 0xee,                         /*454: mov    %r13d,%esi */
0x4c, 0x89, 0x64, 0x24, 0x18,             /*457: mov    %r12,0x18(%rsp) */
0x49, 0x89, 0xec,                         /*45c: mov    %rbp,%r12 */
0x4c, 0x89, 0xd5,                         /*45f: mov    %r10,%rbp */
0x41, 0xff, 0x96, 0x20, 0x02, 0x00, 0x00, /*462: callq  *0x220(%r14) */
0x49, 0x89, 0xea,                         /*469: mov    %rbp,%r10 */
0x4c, 0x89, 0xe5,                         /*46c: mov    %r12,%rbp */
0x4c, 0x8b, 0x64, 0x24, 0x18,             /*46f: mov    0x18(%rsp),%r12 */
0x48, 0x8b, 0x4c, 0x24, 0x10,             /*474: mov    0x10(%rsp),%rcx */
0x48, 0x8b, 0x54, 0x24, 0x08,             /*479: mov    0x8(%rsp),%rdx */
0x48, 0x89, 0x04, 0xca,                   /*47e: mov    %rax,(%rdx,%rcx,8) */
0x45, 0x85, 0xe4,                         /*482: test   %r12d,%r12d */
0x0f, 0x84, 0x38, 0x01, 0x00, 0x00,       /*485: je     5c3 <op_enter+0x5c3> */
0x45, 0x29, 0xe2,                         /*48b: sub    %r12d,%r10d */
0x48, 0x8b, 0x44, 0x24, 0x40,             /*48e: mov    0x40(%rsp),%rax */
0x41, 0x39, 0xc2,                         /*493: cmp    %eax,%r10d */
0x0f, 0x8e, 0x27, 0x01, 0x00, 0x00,       /*496: jle    5c3 <op_enter+0x5c3> */
0x48, 0x8b, 0x44, 0x24, 0x20,             /*49c: mov    0x20(%rsp),%rax */
0xff, 0xc0,                               /*4a1: inc    %eax */
0x49, 0x8b, 0x76, 0x18,                   /*4a3: mov    0x18(%r14),%rsi */
0x48, 0x8d, 0x04, 0xc6,                   /*4a7: lea    (%rsi,%rax,8),%rax */
0x48, 0x8b, 0x4c, 0x24, 0x48,             /*4ab: mov    0x48(%rsp),%rcx */
0x41, 0x8d, 0x4c, 0x0d, 0x00,             /*4b0: lea    0x0(%r13,%rcx,1),%ecx */
0x48, 0x63, 0xf9,                         /*4b5: movslq %ecx,%rdi */
0x48, 0x8d, 0x0c, 0xfb,                   /*4b8: lea    (%rbx,%rdi,8),%rcx */
0x44, 0x89, 0xe2,                         /*4bc: mov    %r12d,%edx */
0x48, 0x39, 0xc8,                         /*4bf: cmp    %rcx,%rax */
0x0f, 0x86, 0xda, 0x00, 0x00, 0x00,       /*4c2: jbe    5a2 <op_enter+0x5a2> */
0x48, 0x01, 0xd7,                         /*4c8: add    %rdx,%rdi */
0x48, 0x8d, 0x3c, 0xfb,                   /*4cb: lea    (%rbx,%rdi,8),%rdi */
0x48, 0x39, 0xf8,                         /*4cf: cmp    %rdi,%rax */
0x0f, 0x83, 0xca, 0x00, 0x00, 0x00,       /*4d2: jae    5a2 <op_enter+0x5a2> */
0x48, 0x8b, 0x44, 0x24, 0x48,             /*4d8: mov    0x48(%rsp),%rax */
0x48, 0x8b, 0x4c, 0x24, 0x28,             /*4dd: mov    0x28(%rsp),%rcx */
0x8d, 0x44, 0x01, 0x01,                   /*4e2: lea    0x1(%rcx,%rax,1),%eax */
0x48, 0x8d, 0x44, 0xc6, 0xf8,             /*4e6: lea    -0x8(%rsi,%rax,8),%rax */
0x48, 0x8b, 0x4c, 0x24, 0x40,             /*4eb: mov    0x40(%rsp),%rcx */
0x41, 0x01, 0xcd,                         /*4f0: add    %ecx,%r13d */
0x48, 0x8b, 0x4c, 0x24, 0x30,             /*4f3: mov    0x30(%rsp),%rcx */
0x41, 0x01, 0xcd,                         /*4f8: add    %ecx,%r13d */
0x49, 0x63, 0xcd,                         /*4fb: movslq %r13d,%rcx */
0x48, 0x8d, 0x4c, 0xcb, 0xf8,             /*4fe: lea    -0x8(%rbx,%rcx,8),%rcx */
0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*503: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x34, 0xd1,                   /*510: mov    (%rcx,%rdx,8),%rsi */
0x48, 0x89, 0x34, 0xd0,                   /*514: mov    %rsi,(%rax,%rdx,8) */
0x48, 0xff, 0xca,                         /*518: dec    %rdx */
0x75, 0xf3,                               /*51b: jne    510 <op_enter+0x510> */
0xe9, 0xa1, 0x00, 0x00, 0x00,             /*51d: jmpq   5c3 <op_enter+0x5c3> */
0x48, 0x39, 0xd1,                         /*522: cmp    %rdx,%rcx */
0x74, 0x1c,                               /*525: je     543 <op_enter+0x543> */
0x48, 0x98,                               /*527: cltq */
0x48, 0xf7, 0xd8,                         /*529: neg    %rax */
0x0f, 0x1f, 0x40, 0x00,                   /*52c: nopl   0x0(%rax) */
0x48, 0x8b, 0x32,                         /*530: mov    (%rdx),%rsi */
0x48, 0x83, 0xc2, 0x08,                   /*533: add    $0x8,%rdx */
0x48, 0x89, 0x31,                         /*537: mov    %rsi,(%rcx) */
0x48, 0x83, 0xc1, 0x08,                   /*53a: add    $0x8,%rcx */
0x48, 0xff, 0xc0,                         /*53e: inc    %rax */
0x75, 0xed,                               /*541: jne    530 <op_enter+0x530> */
0x48, 0x8b, 0x44, 0x24, 0x28,             /*543: mov    0x28(%rsp),%rax */
0x85, 0xc0,                               /*548: test   %eax,%eax */
0x74, 0x22,                               /*54a: je     56e <op_enter+0x56e> */
0x48, 0x8b, 0x6c, 0x24, 0x48,             /*54c: mov    0x48(%rsp),%rbp */
0xff, 0xc5,                               /*551: inc    %ebp */
0x4d, 0x8b, 0x7e, 0x18,                   /*553: mov    0x18(%r14),%r15 */
0x49, 0x8b, 0x7e, 0x50,                   /*557: mov    0x50(%r14),%rdi */
0x31, 0xf6,                               /*55b: xor    %esi,%esi */
0x4c, 0x89, 0xd3,                         /*55d: mov    %r10,%rbx */
0x41, 0xff, 0x96, 0xd0, 0x00, 0x00, 0x00, /*560: callq  *0xd0(%r14) */
0x49, 0x89, 0xda,                         /*567: mov    %rbx,%r10 */
0x49, 0x89, 0x04, 0xef,                   /*56a: mov    %rax,(%r15,%rbp,8) */
0x48, 0x8b, 0x44, 0x24, 0x30,             /*56e: mov    0x30(%rsp),%rax */
0x85, 0xc0,                               /*573: test   %eax,%eax */
0x49, 0x8b, 0x46, 0x08,                   /*575: mov    0x8(%r14),%rax */
0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*579: mov    0x98(%rax),%rcx */
0x74, 0x76,                               /*580: je     5f8 <op_enter+0x5f8> */
0x45, 0x39, 0xea,                         /*582: cmp    %r13d,%r10d */
0x7c, 0x71,                               /*585: jl     5f8 <op_enter+0x5f8> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*587: mov    $0x1,%edx */
0x48, 0x8b, 0x74, 0x24, 0x40,             /*58c: mov    0x40(%rsp),%rsi */
0x29, 0xf2,                               /*591: sub    %esi,%edx */
0x44, 0x29, 0xe2,                         /*593: sub    %r12d,%edx */
0x44, 0x01, 0xd2,                         /*596: add    %r10d,%edx */
0x48, 0x63, 0xd2,                         /*599: movslq %edx,%rdx */
0x48, 0x8d, 0x0c, 0x91,                   /*59c: lea    (%rcx,%rdx,4),%rcx */
0xeb, 0x5a,                               /*5a0: jmp    5fc <op_enter+0x5fc> */
0x48, 0x39, 0xc8,                         /*5a2: cmp    %rcx,%rax */
0x74, 0x1c,                               /*5a5: je     5c3 <op_enter+0x5c3> */
0x49, 0x83, 0xe7, 0x1f,                   /*5a7: and    $0x1f,%r15 */
0x49, 0xf7, 0xdf,                         /*5ab: neg    %r15 */
0x66, 0x90,                               /*5ae: xchg   %ax,%ax */
0x48, 0x8b, 0x11,                         /*5b0: mov    (%rcx),%rdx */
0x48, 0x83, 0xc1, 0x08,                   /*5b3: add    $0x8,%rcx */
0x48, 0x89, 0x10,                         /*5b7: mov    %rdx,(%rax) */
0x48, 0x83, 0xc0, 0x08,                   /*5ba: add    $0x8,%rax */
0x49, 0xff, 0xc7,                         /*5be: inc    %r15 */
0x75, 0xed,                               /*5c1: jne    5b0 <op_enter+0x5b0> */
0x48, 0x39, 0x5c, 0x24, 0x38,             /*5c3: cmp    %rbx,0x38(%rsp) */
0x75, 0x12,                               /*5c8: jne    5dc <op_enter+0x5dc> */
0xff, 0xc5,                               /*5ca: inc    %ebp */
0x49, 0x8b, 0x46, 0x18,                   /*5cc: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x4c, 0x24, 0x50,             /*5d0: mov    0x50(%rsp),%rcx */
0x48, 0x8b, 0x09,                         /*5d5: mov    (%rcx),%rcx */
0x48, 0x89, 0x0c, 0xe8,                   /*5d8: mov    %rcx,(%rax,%rbp,8) */
0x48, 0x8b, 0x54, 0x24, 0x30,             /*5dc: mov    0x30(%rsp),%rdx */
0x85, 0xd2,                               /*5e1: test   %edx,%edx */
0x49, 0x8b, 0x46, 0x08,                   /*5e3: mov    0x8(%r14),%rax */
0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*5e7: mov    0x98(%rax),%rcx */
0x74, 0x08,                               /*5ee: je     5f8 <op_enter+0x5f8> */
0xff, 0xc2,                               /*5f0: inc    %edx */
0x48, 0x8d, 0x0c, 0x91,                   /*5f2: lea    (%rcx,%rdx,4),%rcx */
0xeb, 0x04,                               /*5f6: jmp    5fc <op_enter+0x5fc> */
0x48, 0x83, 0xc1, 0x04,                   /*5f8: add    $0x4,%rcx */
0x0f, 0xb7, 0x31,                         /*5fc: movzwl (%rcx),%esi */
0x48, 0x03, 0xb0, 0xa0, 0x00, 0x00, 0x00, /*5ff: add    0xa0(%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*606: mov    %r14,%rdi */
0x4c, 0x89, 0xf7,                         /*609: mov    %r14,%rdi */
0x48, 0x81, 0xc4, 0xc8, 0x00, 0x00, 0x00, /*60c: add    $0xc8,%rsp */
0x5b,                                     /*613: pop    %rbx */
0x41, 0x5c,                               /*614: pop    %r12 */
0x41, 0x5d,                               /*616: pop    %r13 */
0x41, 0x5e,                               /*618: pop    %r14 */
0x41, 0x5f,                               /*61a: pop    %r15 */
0x5d,                                     /*61c: pop    %rbp */
0xff, 0xe6,                               /*61d: jmpq   *%rsi */
0x90,                                     /*61f: nop */

};

static void op_enter_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = a * 1 + 0;
}

static void op_enter_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_enter_set_args(op, GETARG_Ax(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 14..17]]} */
static uint8_t op_enter_method_m[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x49, 0x89, 0xfe,                         /*a: mov    %rdi,%r14 */
0xb8, 0x00, 0x00, 0xab, 0x00,             /*d: mov    $0xab0000,%eax */
0x89, 0xc3,                               /*12: mov    %eax,%ebx */
0x4d, 0x8b, 0x66, 0x18,                   /*14: mov    0x18(%r14),%r12 */
0x49, 0x8b, 0x7e, 0x50,                   /*18: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*1c: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*20: mov    0x20(%rax),%rax */
0x48, 0x63, 0x68, 0x40,                   /*24: movslq 0x40(%rax),%rbp */
0x48, 0x8d, 0x45, 0x01,                   /*28: lea    0x1(%rbp),%rax */
0x48, 0x85, 0xed,                         /*2c: test   %rbp,%rbp */
0x41, 0xbd, 0x02, 0x00, 0x00, 0x00,       /*2f: mov    $0x2,%r13d */
0x4c, 0x0f, 0x49, 0xe8,                   /*35: cmovns %rax,%r13 */
0x4b, 0x8b, 0x34, 0xec,                   /*39: mov    (%r12,%r13,8),%rsi */
0x48, 0x85, 0xf6,                         /*3d: test   %rsi,%rsi */
0x74, 0x3d,                               /*40: je     7f <op_enter_method_m+0x7f> */
0x48, 0x83, 0xfe, 0x07,                   /*42: cmp    $0x7,%rsi */
0x73, 0x13,                               /*46: jae    5b <op_enter_method_m+0x5b> */
0xb8, 0x55, 0x00, 0x00, 0x00,             /*48: mov    $0x55,%eax */
0x0f, 0xa3, 0xf0,                         /*4d: bt     %esi,%eax */
0x73, 0x09,                               /*50: jae    5b <op_enter_method_m+0x5b> */
0x8b, 0x04, 0xb5, 0x00, 0x00, 0x00, 0x00, /*52: mov    0x0(,%rsi,4),%eax */
0xeb, 0x1c,                               /*59: jmp    77 <op_enter_method_m+0x77> */
0xb8, 0x03, 0x00, 0x00, 0x00,             /*5b: mov    $0x3,%eax */
0x40, 0xf6, 0xc6, 0x01,                   /*60: test   $0x1,%sil */
0x75, 0x11,                               /*64: jne    77 <op_enter_method_m+0x77> */
0x40, 0x0f, 0xb6, 0xce,                   /*66: movzbl %sil,%ecx */
0xb8, 0x04, 0x00, 0x00, 0x00,             /*6a: mov    $0x4,%eax */
0x83, 0xf9, 0x0e,                         /*6f: cmp    $0xe,%ecx */
0x74, 0x03,                               /*72: je     77 <op_enter_method_m+0x77> */
0x0f, 0xb6, 0x06,                         /*74: movzbl (%rsi),%eax */
0x83, 0xf8, 0x0d,                         /*77: cmp    $0xd,%eax */
0x0f, 0x95, 0xc0,                         /*7a: setne  %al */
0xeb, 0x02,                               /*7d: jmp    81 <op_enter_method_m+0x81> */
0x31, 0xc0,                               /*7f: xor    %eax,%eax */
0xc1, 0xeb, 0x12,                         /*81: shr    $0x12,%ebx */
0x84, 0xc0,                               /*84: test   %al,%al */
0x74, 0x1e,                               /*86: je     a6 <op_enter_method_m+0xa6> */
0x49, 0x8b, 0x8e, 0x78, 0x02, 0x00, 0x00, /*88: mov    0x278(%r14),%rcx */
0x4d, 0x8b, 0x86, 0x80, 0x02, 0x00, 0x00, /*8f: mov    0x280(%r14),%r8 */
0xba, 0x0d, 0x00, 0x00, 0x00,             /*96: mov    $0xd,%edx */
0x41, 0xff, 0x96, 0x28, 0x01, 0x00, 0x00, /*9b: callq  *0x128(%r14) */
0x4b, 0x89, 0x04, 0xec,                   /*a2: mov    %rax,(%r12,%r13,8) */
0x41, 0x89, 0xdf,                         /*a6: mov    %ebx,%r15d */
0x41, 0x83, 0xe7, 0x1f,                   /*a9: and    $0x1f,%r15d */
0x4c, 0x89, 0x24, 0x24,                   /*ad: mov    %r12,(%rsp) */
0x4d, 0x8d, 0x64, 0x24, 0x08,             /*b1: lea    0x8(%r12),%r12 */
0x85, 0xed,                               /*b6: test   %ebp,%ebp */
0x78, 0x25,                               /*b8: js     df <op_enter_method_m+0xdf> */
0x44, 0x39, 0xfd,                         /*ba: cmp    %r15d,%ebp */
0x4c, 0x89, 0xe5,                         /*bd: mov    %r12,%rbp */
0x7d, 0x34,                               /*c0: jge    f6 <op_enter_method_m+0xf6> */
0x49, 0x8b, 0x7e, 0x50,                   /*c2: mov    0x50(%r14),%rdi */
0x44, 0x89, 0xfe,                         /*c6: mov    %r15d,%esi */
0x41, 0xff, 0x96, 0x58, 0x02, 0x00, 0x00, /*c9: callq  *0x258(%r14) */
0x4c, 0x89, 0xf7,                         /*d0: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*d3: callq  *0x1a8(%r14) */
0xe9, 0xc7, 0x00, 0x00, 0x00,             /*da: jmpq   1a6 <op_enter_method_m+0x1a6> */
0x49, 0x8b, 0x46, 0x18,                   /*df: mov    0x18(%r14),%rax */
0x49, 0x8b, 0x7e, 0x50,                   /*e3: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0x70, 0x08,                   /*e7: mov    0x8(%rax),%rsi */
0x48, 0x8b, 0x6e, 0x28,                   /*eb: mov    0x28(%rsi),%rbp */
0x41, 0xff, 0x96, 0xe0, 0x01, 0x00, 0x00, /*ef: callq  *0x1e0(%r14) */
0x49, 0x8b, 0x46, 0x50,                   /*f6: mov    0x50(%r14),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*fa: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*fe: mov    0x20(%rax),%rax */
0x44, 0x89, 0x78, 0x40,                   /*102: mov    %r15d,0x40(%rax) */
0x41, 0x8d, 0x47, 0x01,                   /*106: lea    0x1(%r15),%eax */
0x49, 0x8b, 0x4e, 0x18,                   /*10a: mov    0x18(%r14),%rcx */
0x48, 0x8b, 0x14, 0x24,                   /*10e: mov    (%rsp),%rdx */
0x4a, 0x8b, 0x14, 0xea,                   /*112: mov    (%rdx,%r13,8),%rdx */
0x48, 0x89, 0x14, 0xc1,                   /*116: mov    %rdx,(%rcx,%rax,8) */
0x49, 0x39, 0xec,                         /*11a: cmp    %rbp,%r12 */
0x74, 0x6e,                               /*11d: je     18d <op_enter_method_m+0x18d> */
0x49, 0x8b, 0x46, 0x18,                   /*11f: mov    0x18(%r14),%rax */
0x48, 0x8d, 0x48, 0x08,                   /*123: lea    0x8(%rax),%rcx */
0x44, 0x89, 0xfa,                         /*127: mov    %r15d,%edx */
0x48, 0x39, 0xe9,                         /*12a: cmp    %rbp,%rcx */
0x76, 0x21,                               /*12d: jbe    150 <op_enter_method_m+0x150> */
0x48, 0x8d, 0x74, 0xd5, 0x00,             /*12f: lea    0x0(%rbp,%rdx,8),%rsi */
0x48, 0x39, 0xf1,                         /*134: cmp    %rsi,%rcx */
0x73, 0x17,                               /*137: jae    150 <op_enter_method_m+0x150> */
0x45, 0x85, 0xff,                         /*139: test   %r15d,%r15d */
0x74, 0x4f,                               /*13c: je     18d <op_enter_method_m+0x18d> */
0x66, 0x90,                               /*13e: xchg   %ax,%ax */
0x48, 0x8b, 0x4c, 0xd5, 0xf8,             /*140: mov    -0x8(%rbp,%rdx,8),%rcx */
0x48, 0x89, 0x0c, 0xd0,                   /*145: mov    %rcx,(%rax,%rdx,8) */
0x48, 0xff, 0xca,                         /*149: dec    %rdx */
0x75, 0xf2,                               /*14c: jne    140 <op_enter_method_m+0x140> */
0xeb, 0x3d,                               /*14e: jmp    18d <op_enter_method_m+0x18d> */
0x48, 0x39, 0xe9,                         /*150: cmp    %rbp,%rcx */
0x74, 0x38,                               /*153: je     18d <op_enter_method_m+0x18d> */
0x45, 0x85, 0xff,                         /*155: test   %r15d,%r15d */
0x74, 0x33,                               /*158: je     18d <op_enter_method_m+0x18d> */
0x48, 0x83, 0xe3, 0x1f,                   /*15a: and    $0x1f,%rbx */
0x48, 0xf7, 0xdb,                         /*15e: neg    %rbx */
0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*161: data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x89, 0xca,                         /*170: mov    %rcx,%rdx */
0x48, 0x83, 0xc0, 0x10,                   /*173: add    $0x10,%rax */
0x48, 0x8b, 0x4d, 0x00,                   /*177: mov    0x0(%rbp),%rcx */
0x48, 0x83, 0xc5, 0x08,                   /*17b: add    $0x8,%rbp */
0x48, 0x89, 0x0a,                         /*17f: mov    %rcx,(%rdx) */
0x48, 0xff, 0xc3,                         /*182: inc    %rbx */
0x48, 0x89, 0xc1,                         /*185: mov    %rax,%rcx */
0x48, 0x89, 0xd0,                         /*188: mov    %rdx,%rax */
0x75, 0xe3,                               /*18b: jne    170 <op_enter_method_m+0x170> */
0x49, 0x8b, 0x46, 0x08,                   /*18d: mov    0x8(%r14),%rax */
0x48, 0x8b, 0x88, 0x98, 0x00, 0x00, 0x00, /*191: mov    0x98(%rax),%rcx */
0x0f, 0xb7, 0x71, 0x04,                   /*198: movzwl 0x4(%rcx),%esi */
0x48, 0x03, 0xb0, 0xa0, 0x00, 0x00, 0x00, /*19c: add    0xa0(%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*1a3: mov    %r14,%rdi */
0x4c, 0x89, 0xf7,                         /*1a6: mov    %r14,%rdi */
0x5b,                                     /*1a9: pop    %rbx */
0x41, 0x5c,                               /*1aa: pop    %r12 */
0x41, 0x5d,                               /*1ac: pop    %r13 */
0x41, 0x5e,                               /*1ae: pop    %r14 */
0x41, 0x5f,                               /*1b0: pop    %r15 */
0x5d,                                     /*1b2: pop    %rbp */
0xff, 0xe6,                               /*1b3: jmpq   *%rsi */

};

static void op_enter_method_m_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = a * 1 + 0;
}

static void op_enter_method_m_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_enter_method_m_set_args(op, GETARG_Ax(c),0,0,op_idx);
}


/* args: {} */
static uint8_t op_karg[] = {

};

static void op_karg_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_karg_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_karg_set_args(op, 0,0,0,op_idx);
}


/* args: {} */
static uint8_t op_kdict[] = {

};

static void op_kdict_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_kdict_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_kdict_set_args(op, 0,0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 17..20]]} */
static uint8_t op_return[] = {
0x55,                                     /*0: push   %rbp */
0x48, 0x89, 0xe5,                         /*1: mov    %rsp,%rbp */
0x53,                                     /*4: push   %rbx */
0x48, 0x83, 0xe4, 0xf0,                   /*5: and    $0xfffffffffffffff0,%rsp */
0x48, 0x83, 0xec, 0x10,                   /*9: sub    $0x10,%rsp */
0x48, 0x89, 0xfb,                         /*d: mov    %rdi,%rbx */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*10: mov    $0xab0000,%esi */
0x31, 0xd2,                               /*15: xor    %edx,%edx */
0xff, 0x93, 0x88, 0x00, 0x00, 0x00,       /*17: callq  *0x88(%rbx) */
0x48, 0x89, 0xdf,                         /*1d: mov    %rbx,%rdi */
0x48, 0x8d, 0x65, 0xf8,                   /*20: lea    -0x8(%rbp),%rsp */
0x5b,                                     /*24: pop    %rbx */
0x5d,                                     /*25: pop    %rbp */
0xc3,                                     /*26: retq */

};

static void op_return_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 1 + 0;
}

static void op_return_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_return_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 5..8]], "b"=>[[1, 0, 10..13]]} */
static uint8_t op_break[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*4: mov    $0xab0000,%esi */
0xba, 0x00, 0x00, 0xbc, 0x00,             /*9: mov    $0xbc0000,%edx */
0xff, 0x93, 0x88, 0x00, 0x00, 0x00,       /*e: callq  *0x88(%rbx) */
0x48, 0x89, 0xdf,                         /*14: mov    %rbx,%rdi */
0x5b,                                     /*17: pop    %rbx */
0xc3,                                     /*18: retq */

};

static void op_break_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = a * 1 + 0;
  *((int32_t *)(op + 10)) = b * 1 + 0;
}

static void op_break_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_break_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 28..31]], "a"=>[[8, 0, 35..38], [1, 1, 351..354], [8, 8, 364..367], [8, 0, 410..413], [1, 0, 541..544]], "c"=>[[1, 0, 253..256], [1, 1, 369..372]]} */
static uint8_t op_tailcall[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x89, 0xfb,                         /*a: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x50,                   /*d: mov    0x50(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x18,                   /*11: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*15: mov    0x28(%rbx),%rcx */
0x44, 0x8b, 0xa1, 0x00, 0x04, 0xbc, 0x00, /*19: mov    0xbc0400(%rcx),%r12d */
0x4c, 0x8b, 0xb8, 0x00, 0x08, 0xab, 0x00, /*20: mov    0xab0800(%rax),%r15 */
0x49, 0x83, 0xff, 0x06,                   /*27: cmp    $0x6,%r15 */
0x77, 0x08,                               /*2b: ja     35 <op_tailcall+0x35> */
0x42, 0xff, 0x24, 0xfd, 0x00, 0x00, 0x00, 0x00,/*2d: jmpq   *0x0(,%r15,8) */
0x41, 0xf6, 0xc7, 0x01,                   /*35: test   $0x1,%r15b */
0x75, 0x2f,                               /*39: jne    6a <op_tailcall+0x6a> */
0x41, 0x0f, 0xb6, 0xc7,                   /*3b: movzbl %r15b,%eax */
0x83, 0xf8, 0x0e,                         /*3f: cmp    $0xe,%eax */
0x74, 0x2f,                               /*42: je     73 <op_tailcall+0x73> */
0x41, 0x0f, 0xb6, 0x0f,                   /*44: movzbl (%r15),%ecx */
0x31, 0xc0,                               /*48: xor    %eax,%eax */
0x83, 0xf9, 0x13,                         /*4a: cmp    $0x13,%ecx */
0x7f, 0x3f,                               /*4d: jg     8e <op_tailcall+0x8e> */
0x83, 0xf9, 0x07,                         /*4f: cmp    $0x7,%ecx */
0x77, 0x3f,                               /*52: ja     93 <op_tailcall+0x93> */
0xff, 0x24, 0xcd, 0x00, 0x00, 0x00, 0x00, /*54: jmpq   *0x0(,%rcx,8) */
0x41, 0x83, 0xff, 0x02,                   /*5b: cmp    $0x2,%r15d */
0x72, 0x24,                               /*5f: jb     85 <op_tailcall+0x85> */
0x49, 0x8b, 0x86, 0x90, 0x00, 0x00, 0x00, /*61: mov    0x90(%r14),%rax */
0xeb, 0x2d,                               /*68: jmp    97 <op_tailcall+0x97> */
0x49, 0x8b, 0x86, 0x80, 0x00, 0x00, 0x00, /*6a: mov    0x80(%r14),%rax */
0xeb, 0x24,                               /*71: jmp    97 <op_tailcall+0x97> */
0x49, 0x8b, 0x86, 0xa0, 0x00, 0x00, 0x00, /*73: mov    0xa0(%r14),%rax */
0xeb, 0x1b,                               /*7a: jmp    97 <op_tailcall+0x97> */
0x49, 0x8b, 0x86, 0x88, 0x00, 0x00, 0x00, /*7c: mov    0x88(%r14),%rax */
0xeb, 0x12,                               /*83: jmp    97 <op_tailcall+0x97> */
0x49, 0x8b, 0x86, 0x98, 0x00, 0x00, 0x00, /*85: mov    0x98(%r14),%rax */
0xeb, 0x09,                               /*8c: jmp    97 <op_tailcall+0x97> */
0x83, 0xf9, 0x14,                         /*8e: cmp    $0x14,%ecx */
0x74, 0x04,                               /*91: je     97 <op_tailcall+0x97> */
0x49, 0x8b, 0x47, 0x08,                   /*93: mov    0x8(%r15),%rax */
0x48, 0x89, 0x04, 0x24,                   /*97: mov    %rax,(%rsp) */
0x48, 0x8b, 0x0b,                         /*9b: mov    (%rbx),%rcx */
0x48, 0x39, 0x41, 0x38,                   /*9e: cmp    %rax,0x38(%rcx) */
0x75, 0x08,                               /*a2: jne    ac <op_tailcall+0xac> */
0x31, 0xd2,                               /*a4: xor    %edx,%edx */
0x44, 0x39, 0x61, 0x30,                   /*a6: cmp    %r12d,0x30(%rcx) */
0x74, 0x33,                               /*aa: je     df <op_tailcall+0xdf> */
0x48, 0x39, 0x41, 0x48,                   /*ac: cmp    %rax,0x48(%rcx) */
0x75, 0x0b,                               /*b0: jne    bd <op_tailcall+0xbd> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*b2: mov    $0x1,%edx */
0x44, 0x39, 0x61, 0x40,                   /*b7: cmp    %r12d,0x40(%rcx) */
0x74, 0x22,                               /*bb: je     df <op_tailcall+0xdf> */
0x48, 0x39, 0x41, 0x58,                   /*bd: cmp    %rax,0x58(%rcx) */
0x75, 0x0b,                               /*c1: jne    ce <op_tailcall+0xce> */
0xba, 0x02, 0x00, 0x00, 0x00,             /*c3: mov    $0x2,%edx */
0x44, 0x39, 0x61, 0x50,                   /*c8: cmp    %r12d,0x50(%rcx) */
0x74, 0x11,                               /*cc: je     df <op_tailcall+0xdf> */
0x48, 0x39, 0x41, 0x68,                   /*ce: cmp    %rax,0x68(%rcx) */
0x75, 0x15,                               /*d2: jne    e9 <op_tailcall+0xe9> */
0xba, 0x03, 0x00, 0x00, 0x00,             /*d4: mov    $0x3,%edx */
0x44, 0x39, 0x61, 0x60,                   /*d9: cmp    %r12d,0x60(%rcx) */
0x75, 0x0a,                               /*dd: jne    e9 <op_tailcall+0xe9> */
0x4c, 0x8b, 0xac, 0xd1, 0x90, 0x00, 0x00, 0x00,/*df: mov    0x90(%rcx,%rdx,8),%r13 */
0xeb, 0x13,                               /*e7: jmp    fc <op_tailcall+0xfc> */
0x48, 0x8d, 0x34, 0x24,                   /*e9: lea    (%rsp),%rsi */
0x4c, 0x89, 0xf7,                         /*ed: mov    %r14,%rdi */
0x44, 0x89, 0xe2,                         /*f0: mov    %r12d,%edx */
0xff, 0x93, 0xa8, 0x00, 0x00, 0x00,       /*f3: callq  *0xa8(%rbx) */
0x49, 0x89, 0xc5,                         /*f9: mov    %rax,%r13 */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*fc: mov    $0xcd0000,%eax */
0x4d, 0x85, 0xed,                         /*101: test   %r13,%r13 */
0x75, 0x6f,                               /*104: jne    175 <op_tailcall+0x175> */
0x49, 0xc1, 0xe4, 0x20,                   /*106: shl    $0x20,%r12 */
0x4c, 0x89, 0xe5,                         /*10a: mov    %r12,%rbp */
0x48, 0x83, 0xcd, 0x0e,                   /*10d: or     $0xe,%rbp */
0x48, 0x8b, 0xb3, 0x70, 0x02, 0x00, 0x00, /*111: mov    0x270(%rbx),%rsi */
0xba, 0x0e, 0x00, 0x00, 0x00,             /*118: mov    $0xe,%edx */
0x4c, 0x89, 0xf7,                         /*11d: mov    %r14,%rdi */
0xff, 0x93, 0x60, 0x02, 0x00, 0x00,       /*120: callq  *0x260(%rbx) */
0x41, 0x89, 0xc4,                         /*126: mov    %eax,%r12d */
0x48, 0x8d, 0x34, 0x24,                   /*129: lea    (%rsp),%rsi */
0x4c, 0x89, 0xf7,                         /*12d: mov    %r14,%rdi */
0x44, 0x89, 0xe2,                         /*130: mov    %r12d,%edx */
0xff, 0x93, 0xc8, 0x00, 0x00, 0x00,       /*133: callq  *0xc8(%rbx) */
0x49, 0x89, 0xc5,                         /*139: mov    %rax,%r13 */
0x48, 0x8b, 0x43, 0x18,                   /*13c: mov    0x18(%rbx),%rax */
0xb9, 0x02, 0x00, 0x78, 0x01,             /*140: mov    $0x1780002,%ecx */
0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*145: data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x54, 0xc8, 0xf8,             /*150: mov    -0x8(%rax,%rcx,8),%rdx */
0x48, 0x89, 0x14, 0xc8,                   /*155: mov    %rdx,(%rax,%rcx,8) */
0x48, 0xff, 0xc9,                         /*159: dec    %rcx */
0x48, 0x81, 0xf9, 0x01, 0x00, 0xab, 0x00, /*15c: cmp    $0xab0001,%rcx */
0x75, 0xeb,                               /*163: jne    150 <op_tailcall+0x150> */
0x48, 0x8b, 0x43, 0x18,                   /*165: mov    0x18(%rbx),%rax */
0x48, 0x89, 0xa8, 0x08, 0x08, 0xab, 0x00, /*169: mov    %rbp,0xab0808(%rax) */
0xb8, 0x01, 0x00, 0xcd, 0x00,             /*170: mov    $0xcd0001,%eax */
0x49, 0x8b, 0x4e, 0x18,                   /*175: mov    0x18(%r14),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*179: mov    0x20(%rcx),%rcx */
0x44, 0x89, 0x21,                         /*17d: mov    %r12d,(%rcx) */
0x48, 0x8b, 0x14, 0x24,                   /*180: mov    (%rsp),%rdx */
0x48, 0x89, 0x51, 0x48,                   /*184: mov    %rdx,0x48(%rcx) */
0x89, 0x41, 0x40,                         /*188: mov    %eax,0x40(%rcx) */
0x49, 0x8b, 0x56, 0x18,                   /*18b: mov    0x18(%r14),%rdx */
0x48, 0x8b, 0x52, 0x08,                   /*18f: mov    0x8(%rdx),%rdx */
0x48, 0x8b, 0x7b, 0x18,                   /*193: mov    0x18(%rbx),%rdi */
0x48, 0x8d, 0xb7, 0x00, 0x08, 0xab, 0x00, /*197: lea    0xab0800(%rdi),%rsi */
0xff, 0xc0,                               /*19e: inc    %eax */
0x48, 0x39, 0xf2,                         /*1a0: cmp    %rsi,%rdx */
0x76, 0x2f,                               /*1a3: jbe    1d4 <op_tailcall+0x1d4> */
0x48, 0x8d, 0xac, 0xc7, 0x00, 0x00, 0x58, 0x05,/*1a5: lea    0x5580000(%rdi,%rax,8),%rbp */
0x48, 0x39, 0xea,                         /*1ad: cmp    %rbp,%rdx */
0x73, 0x22,                               /*1b0: jae    1d4 <op_tailcall+0x1d4> */
0x66, 0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*1b2: data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0xb4, 0xc7, 0xf8, 0xff, 0x57, 0x05,/*1c0: mov    0x557fff8(%rdi,%rax,8),%rsi */
0x48, 0x89, 0x74, 0xc2, 0xf8,             /*1c8: mov    %rsi,-0x8(%rdx,%rax,8) */
0x48, 0xff, 0xc8,                         /*1cd: dec    %rax */
0x75, 0xee,                               /*1d0: jne    1c0 <op_tailcall+0x1c0> */
0xeb, 0x1f,                               /*1d2: jmp    1f3 <op_tailcall+0x1f3> */
0x48, 0x39, 0xf2,                         /*1d4: cmp    %rsi,%rdx */
0x74, 0x1a,                               /*1d7: je     1f3 <op_tailcall+0x1f3> */
0x48, 0xf7, 0xd8,                         /*1d9: neg    %rax */
0x0f, 0x1f, 0x40, 0x00,                   /*1dc: nopl   0x0(%rax) */
0x48, 0x8b, 0x3e,                         /*1e0: mov    (%rsi),%rdi */
0x48, 0x83, 0xc6, 0x08,                   /*1e3: add    $0x8,%rsi */
0x48, 0x89, 0x3a,                         /*1e7: mov    %rdi,(%rdx) */
0x48, 0x83, 0xc2, 0x08,                   /*1ea: add    $0x8,%rdx */
0x48, 0xff, 0xc0,                         /*1ee: inc    %rax */
0x75, 0xed,                               /*1f1: jne    1e0 <op_tailcall+0x1e0> */
0x41, 0xf6, 0x45, 0x02, 0x04,             /*1f3: testb  $0x4,0x2(%r13) */
0x74, 0x34,                               /*1f8: je     22e <op_tailcall+0x22e> */
0x49, 0x8b, 0x46, 0x18,                   /*1fa: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x68, 0x08,                   /*1fe: mov    0x8(%rax),%rbp */
0x4c, 0x89, 0xf7,                         /*202: mov    %r14,%rdi */
0x4c, 0x89, 0xfe,                         /*205: mov    %r15,%rsi */
0x41, 0xff, 0x55, 0x18,                   /*208: callq  *0x18(%r13) */
0x48, 0x89, 0x45, 0x00,                   /*20c: mov    %rax,0x0(%rbp) */
0x8b, 0x73, 0x48,                         /*210: mov    0x48(%rbx),%esi */
0x4c, 0x89, 0xf7,                         /*213: mov    %r14,%rdi */
0xff, 0x93, 0x08, 0x01, 0x00, 0x00,       /*216: callq  *0x108(%rbx) */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*21c: mov    $0xab0000,%esi */
0x31, 0xd2,                               /*221: xor    %edx,%edx */
0x48, 0x89, 0xdf,                         /*223: mov    %rbx,%rdi */
0xff, 0x93, 0x88, 0x00, 0x00, 0x00,       /*226: callq  *0x88(%rbx) */
0xeb, 0x69,                               /*22c: jmp    297 <op_tailcall+0x297> */
0x49, 0x8b, 0x45, 0x18,                   /*22e: mov    0x18(%r13),%rax */
0x48, 0x89, 0x43, 0x08,                   /*232: mov    %rax,0x8(%rbx) */
0x48, 0x8b, 0x50, 0x10,                   /*236: mov    0x10(%rax),%rdx */
0x48, 0x89, 0x53, 0x20,                   /*23a: mov    %rdx,0x20(%rbx) */
0x48, 0x8b, 0x50, 0x18,                   /*23e: mov    0x18(%rax),%rdx */
0x48, 0x89, 0x53, 0x28,                   /*242: mov    %rdx,0x28(%rbx) */
0x8b, 0x51, 0x40,                         /*246: mov    0x40(%rcx),%edx */
0x0f, 0xb7, 0x70, 0x02,                   /*249: movzwl 0x2(%rax),%esi */
0x85, 0xd2,                               /*24d: test   %edx,%edx */
0x78, 0x05,                               /*24f: js     256 <op_tailcall+0x256> */
0x83, 0xc2, 0x02,                         /*251: add    $0x2,%edx */
0xeb, 0x10,                               /*254: jmp    266 <op_tailcall+0x266> */
0x83, 0xfe, 0x03,                         /*256: cmp    $0x3,%esi */
0xb8, 0x03, 0x00, 0x00, 0x00,             /*259: mov    $0x3,%eax */
0x0f, 0x42, 0xf0,                         /*25e: cmovb  %eax,%esi */
0xba, 0x03, 0x00, 0x00, 0x00,             /*261: mov    $0x3,%edx */
0x4c, 0x89, 0xf7,                         /*266: mov    %r14,%rdi */
0xff, 0x93, 0x38, 0x01, 0x00, 0x00,       /*269: callq  *0x138(%rbx) */
0x49, 0x8b, 0x46, 0x18,                   /*26f: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*273: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x18,                   /*277: mov    %rax,0x18(%rbx) */
0x48, 0x8b, 0x43, 0x08,                   /*27b: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*27f: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x10,                   /*283: mov    %rax,0x10(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*287: mov    0x50(%rbx),%rdi */
0x4c, 0x89, 0xee,                         /*28b: mov    %r13,%rsi */
0x48, 0x89, 0xda,                         /*28e: mov    %rbx,%rdx */
0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*291: callq  *0x118(%rbx) */
0x48, 0x89, 0xdf,                         /*297: mov    %rbx,%rdi */
0x5b,                                     /*29a: pop    %rbx */
0x41, 0x5c,                               /*29b: pop    %r12 */
0x41, 0x5d,                               /*29d: pop    %r13 */
0x41, 0x5e,                               /*29f: pop    %r14 */
0x41, 0x5f,                               /*2a1: pop    %r15 */
0x5d,                                     /*2a3: pop    %rbp */
0xeb, 0x12,                               /*2a4: jmp    2b8 <next> */
0x49, 0x8b, 0x46, 0x78,                   /*2a6: mov    0x78(%r14),%rax */
0xe9, 0xe8, 0xfd, 0xff, 0xff,             /*2aa: jmpq   97 <op_tailcall+0x97> */
0x49, 0x8b, 0x46, 0x40,                   /*2af: mov    0x40(%r14),%rax */
0xe9, 0xdf, 0xfd, 0xff, 0xff,             /*2b3: jmpq   97 <op_tailcall+0x97> */

};

static void op_tailcall_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 28)) = b * 4 + 0;
  *((int32_t *)(op + 35)) = a * 8 + 0;
  *((int32_t *)(op + 351)) = a * 1 + 1;
  *((int32_t *)(op + 364)) = a * 8 + 8;
  *((int32_t *)(op + 410)) = a * 8 + 0;
  *((int32_t *)(op + 541)) = a * 1 + 0;
  *((int32_t *)(op + 253)) = c * 1 + 0;
  *((int32_t *)(op + 369)) = c * 1 + 1;
}

static void op_tailcall_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_tailcall_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[1, 0, 14..17]], "a"=>[[8, 0, 189..192]]} */
static uint8_t op_blkpush[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x7e, 0x50,                   /*6: mov    0x50(%r14),%rdi */
0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0xbc, 0x00,/*a: movl   $0xbc0000,0x4(%rsp) */
0x44, 0x8b, 0x4c, 0x24, 0x04,             /*12: mov    0x4(%rsp),%r9d */
0x8b, 0x44, 0x24, 0x04,                   /*17: mov    0x4(%rsp),%eax */
0x44, 0x8b, 0x44, 0x24, 0x04,             /*1b: mov    0x4(%rsp),%r8d */
0x8b, 0x5c, 0x24, 0x04,                   /*20: mov    0x4(%rsp),%ebx */
0x83, 0xe3, 0x0f,                         /*24: and    $0xf,%ebx */
0x74, 0x56,                               /*27: je     7f <op_blkpush+0x7f> */
0x49, 0x8b, 0x4e, 0x50,                   /*29: mov    0x50(%r14),%rcx */
0x48, 0x8b, 0x49, 0x18,                   /*2d: mov    0x18(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x20,                   /*31: mov    0x20(%rcx),%rcx */
0x48, 0x8b, 0x49, 0x08,                   /*35: mov    0x8(%rcx),%rcx */
0x48, 0x8b, 0x71, 0x28,                   /*39: mov    0x28(%rcx),%rsi */
0x48, 0x85, 0xf6,                         /*3d: test   %rsi,%rsi */
0x0f, 0x94, 0xc1,                         /*40: sete   %cl */
0x83, 0xfb, 0x01,                         /*43: cmp    $0x1,%ebx */
0x74, 0x1b,                               /*46: je     63 <op_blkpush+0x63> */
0xba, 0x01, 0x00, 0x00, 0x00,             /*48: mov    $0x1,%edx */
0x29, 0xda,                               /*4d: sub    %ebx,%edx */
0x90,                                     /*4f: nop */
0xf6, 0xc1, 0x01,                         /*50: test   $0x1,%cl */
0x75, 0x12,                               /*53: jne    67 <op_blkpush+0x67> */
0x48, 0x8b, 0x76, 0x08,                   /*55: mov    0x8(%rsi),%rsi */
0x48, 0x85, 0xf6,                         /*59: test   %rsi,%rsi */
0x0f, 0x94, 0xc1,                         /*5c: sete   %cl */
0xff, 0xc2,                               /*5f: inc    %edx */
0x75, 0xed,                               /*61: jne    50 <op_blkpush+0x50> */
0x84, 0xc9,                               /*63: test   %cl,%cl */
0x74, 0x21,                               /*65: je     88 <op_blkpush+0x88> */
0xbe, 0x02, 0x00, 0x00, 0x00,             /*67: mov    $0x2,%esi */
0x41, 0xff, 0x96, 0xa0, 0x01, 0x00, 0x00, /*6c: callq  *0x1a0(%r14) */
0x4c, 0x89, 0xf7,                         /*73: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xa8, 0x01, 0x00, 0x00, /*76: callq  *0x1a8(%r14) */
0xeb, 0x42,                               /*7d: jmp    c1 <op_blkpush+0xc1> */
0x49, 0x8d, 0x4e, 0x18,                   /*7f: lea    0x18(%r14),%rcx */
0x48, 0x89, 0xce,                         /*83: mov    %rcx,%rsi */
0xeb, 0x08,                               /*86: jmp    90 <op_blkpush+0x90> */
0x48, 0x83, 0xc6, 0x18,                   /*88: add    $0x18,%rsi */
0x49, 0x8d, 0x4e, 0x18,                   /*8c: lea    0x18(%r14),%rcx */
0x41, 0xc1, 0xe9, 0x0a,                   /*90: shr    $0xa,%r9d */
0x41, 0x83, 0xe1, 0x3f,                   /*94: and    $0x3f,%r9d */
0xc1, 0xe8, 0x09,                         /*98: shr    $0x9,%eax */
0x83, 0xe0, 0x01,                         /*9b: and    $0x1,%eax */
0x41, 0xc1, 0xe8, 0x04,                   /*9e: shr    $0x4,%r8d */
0x41, 0x83, 0xe0, 0x1f,                   /*a2: and    $0x1f,%r8d */
0x48, 0x8b, 0x16,                         /*a6: mov    (%rsi),%rdx */
0x48, 0x8b, 0x09,                         /*a9: mov    (%rcx),%rcx */
0x44, 0x01, 0xc8,                         /*ac: add    %r9d,%eax */
0x41, 0x8d, 0x44, 0x00, 0x01,             /*af: lea    0x1(%r8,%rax,1),%eax */
0x48, 0x98,                               /*b4: cltq */
0x48, 0x8b, 0x04, 0xc2,                   /*b6: mov    (%rdx,%rax,8),%rax */
0x48, 0x89, 0x81, 0x00, 0x08, 0xab, 0x00, /*ba: mov    %rax,0xab0800(%rcx) */
0x4c, 0x89, 0xf7,                         /*c1: mov    %r14,%rdi */
0x5b,                                     /*c4: pop    %rbx */
0x41, 0x5e,                               /*c5: pop    %r14 */

};

static void op_blkpush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = b * 1 + 0;
  *((int32_t *)(op + 189)) = a * 8 + 0;
}

static void op_blkpush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_blkpush_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 19..22], [8, 8, 87..90], [8, 0, 189..192], [8, 0, 204..207], [8, 0, 230..233], [8, 0, 325..328]]} */
static uint8_t op_add[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
0x4c, 0x8b, 0x7b, 0x18,                   /*8: mov    0x18(%rbx),%r15 */
0x4c, 0x8b, 0x73, 0x50,                   /*c: mov    0x50(%rbx),%r14 */
0x49, 0x8b, 0xb7, 0x00, 0x08, 0xab, 0x00, /*10: mov    0xab0800(%r15),%rsi */
0x48, 0x83, 0xfe, 0x07,                   /*17: cmp    $0x7,%rsi */
0x73, 0x13,                               /*1b: jae    30 <op_add+0x30> */
0xb8, 0x55, 0x00, 0x00, 0x00,             /*1d: mov    $0x55,%eax */
0x0f, 0xa3, 0xf0,                         /*22: bt     %esi,%eax */
0x73, 0x09,                               /*25: jae    30 <op_add+0x30> */
0x8b, 0x04, 0xb5, 0x00, 0x00, 0x00, 0x00, /*27: mov    0x0(,%rsi,4),%eax */
0xeb, 0x1c,                               /*2e: jmp    4c <op_add+0x4c> */
0xb8, 0x03, 0x00, 0x00, 0x00,             /*30: mov    $0x3,%eax */
0x40, 0xf6, 0xc6, 0x01,                   /*35: test   $0x1,%sil */
0x75, 0x11,                               /*39: jne    4c <op_add+0x4c> */
0x40, 0x0f, 0xb6, 0xce,                   /*3b: movzbl %sil,%ecx */
0xb8, 0x04, 0x00, 0x00, 0x00,             /*3f: mov    $0x4,%eax */
0x83, 0xf9, 0x0e,                         /*44: cmp    $0xe,%ecx */
0x74, 0x03,                               /*47: je     4c <op_add+0x4c> */
0x0f, 0xb6, 0x06,                         /*49: movzbl (%rsi),%eax */
0xc1, 0xe0, 0x08,                         /*4c: shl    $0x8,%eax */
0x25, 0x00, 0xff, 0xff, 0x00,             /*4f: and    $0xffff00,%eax */
0x49, 0x8b, 0x97, 0x08, 0x08, 0xab, 0x00, /*54: mov    0xab0808(%r15),%rdx */
0x48, 0x83, 0xfa, 0x07,                   /*5b: cmp    $0x7,%rdx */
0x73, 0x13,                               /*5f: jae    74 <op_add+0x74> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*61: mov    $0x55,%ecx */
0x0f, 0xa3, 0xd1,                         /*66: bt     %edx,%ecx */
0x73, 0x09,                               /*69: jae    74 <op_add+0x74> */
0x8b, 0x0c, 0x95, 0x00, 0x00, 0x00, 0x00, /*6b: mov    0x0(,%rdx,4),%ecx */
0xeb, 0x1a,                               /*72: jmp    8e <op_add+0x8e> */
0xb9, 0x03, 0x00, 0x00, 0x00,             /*74: mov    $0x3,%ecx */
0xf6, 0xc2, 0x01,                         /*79: test   $0x1,%dl */
0x75, 0x10,                               /*7c: jne    8e <op_add+0x8e> */
0x0f, 0xb6, 0xfa,                         /*7e: movzbl %dl,%edi */
0xb9, 0x04, 0x00, 0x00, 0x00,             /*81: mov    $0x4,%ecx */
0x83, 0xff, 0x0e,                         /*86: cmp    $0xe,%edi */
0x74, 0x03,                               /*89: je     8e <op_add+0x8e> */
0x0f, 0xb6, 0x0a,                         /*8b: movzbl (%rdx),%ecx */
0x0f, 0xb6, 0xc9,                         /*8e: movzbl %cl,%ecx */
0x09, 0xc1,                               /*91: or     %eax,%ecx */
0x81, 0xf9, 0x0f, 0x10, 0x00, 0x00,       /*93: cmp    $0x100f,%ecx */
0x7f, 0x37,                               /*99: jg     d2 <op_add+0xd2> */
0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*9b: cmp    $0x602,%ecx */
0x7f, 0x49,                               /*a1: jg     ec <op_add+0xec> */
0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*a3: cmp    $0x303,%ecx */
0x75, 0x56,                               /*a9: jne    101 <op_add+0x101> */
0xd1, 0xfe,                               /*ab: sar    %esi */
0xd1, 0xfa,                               /*ad: sar    %edx */
0x01, 0xf2,                               /*af: add    %esi,%edx */
0x89, 0xd0,                               /*b1: mov    %edx,%eax */
0x05, 0x00, 0x00, 0x00, 0x40,             /*b3: add    $0x40000000,%eax */
0x78, 0x7b,                               /*b8: js     135 <op_add+0x135> */
0x49, 0xc7, 0x87, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*ba: movq   $0x0,0xab0800(%r15) */
0x8d, 0x44, 0x12, 0x01,                   /*c5: lea    0x1(%rdx,%rdx,1),%eax */
0x41, 0x89, 0x87, 0x00, 0x08, 0xab, 0x00, /*c9: mov    %eax,0xab0800(%r15) */
0xeb, 0x77,                               /*d0: jmp    149 <op_add+0x149> */
0x81, 0xf9, 0x10, 0x10, 0x00, 0x00,       /*d2: cmp    $0x1010,%ecx */
0x75, 0x50,                               /*d8: jne    12a <op_add+0x12a> */
0x4c, 0x89, 0xf7,                         /*da: mov    %r14,%rdi */
0xff, 0x93, 0x48, 0x01, 0x00, 0x00,       /*dd: callq  *0x148(%rbx) */
0x49, 0x89, 0x87, 0x00, 0x08, 0xab, 0x00, /*e3: mov    %rax,0xab0800(%r15) */
0xeb, 0x5d,                               /*ea: jmp    149 <op_add+0x149> */
0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*ec: cmp    $0x603,%ecx */
0x75, 0x22,                               /*f2: jne    116 <op_add+0x116> */
0xd1, 0xfa,                               /*f4: sar    %edx */
0xf2, 0x0f, 0x2a, 0xc2,                   /*f6: cvtsi2sd %edx,%xmm0 */
0xf2, 0x0f, 0x58, 0x46, 0x18,             /*fa: addsd  0x18(%rsi),%xmm0 */
0xeb, 0x38,                               /*ff: jmp    139 <op_add+0x139> */
0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*101: cmp    $0x306,%ecx */
0x75, 0x21,                               /*107: jne    12a <op_add+0x12a> */
0xd1, 0xfe,                               /*109: sar    %esi */
0xf2, 0x0f, 0x2a, 0xc6,                   /*10b: cvtsi2sd %esi,%xmm0 */
0xf2, 0x0f, 0x58, 0x42, 0x18,             /*10f: addsd  0x18(%rdx),%xmm0 */
0xeb, 0x23,                               /*114: jmp    139 <op_add+0x139> */
0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*116: cmp    $0x606,%ecx */
0x75, 0x0c,                               /*11c: jne    12a <op_add+0x12a> */
0xf2, 0x0f, 0x10, 0x46, 0x18,             /*11e: movsd  0x18(%rsi),%xmm0 */
0xf2, 0x0f, 0x58, 0x42, 0x18,             /*123: addsd  0x18(%rdx),%xmm0 */
0xeb, 0x0f,                               /*128: jmp    139 <op_add+0x139> */
0x48, 0x89, 0xdf,                         /*12a: mov    %rbx,%rdi */
0xff, 0x93, 0x38, 0x02, 0x00, 0x00,       /*12d: callq  *0x238(%rbx) */
0xeb, 0x1e,                               /*133: jmp    153 <op_add+0x153> */
0xf2, 0x0f, 0x2a, 0xc2,                   /*135: cvtsi2sd %edx,%xmm0 */
0x4c, 0x89, 0xf7,                         /*139: mov    %r14,%rdi */
0xff, 0x93, 0x50, 0x01, 0x00, 0x00,       /*13c: callq  *0x150(%rbx) */
0x49, 0x89, 0x87, 0x00, 0x08, 0xab, 0x00, /*142: mov    %rax,0xab0800(%r15) */
0x8b, 0x43, 0x48,                         /*149: mov    0x48(%rbx),%eax */
0x41, 0x89, 0x86, 0xdc, 0x00, 0x00, 0x00, /*14c: mov    %eax,0xdc(%r14) */
0x48, 0x89, 0xdf,                         /*153: mov    %rbx,%rdi */
0x5b,                                     /*156: pop    %rbx */
0x41, 0x5e,                               /*157: pop    %r14 */
0x41, 0x5f,                               /*159: pop    %r15 */

};

static void op_add_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = a * 8 + 0;
  *((int32_t *)(op + 87)) = a * 8 + 8;
  *((int32_t *)(op + 189)) = a * 8 + 0;
  *((int32_t *)(op + 204)) = a * 8 + 0;
  *((int32_t *)(op + 230)) = a * 8 + 0;
  *((int32_t *)(op + 325)) = a * 8 + 0;
}

static void op_add_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_add_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 17..20], [8, 0, 93..96], [8, 0, 111..114], [8, 8, 120..123], [8, 8, 131..134], [1, 0, 145..148], [8, 0, 189..192]], "c"=>[[1, 0, 84..87], [1, 0, 172..175]], "b"=>[[1, 0, 150..153]]} */
static uint8_t op_addi[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8b, 0x86, 0x00, 0x08, 0xab, 0x00, /*e: mov    0xab0800(%r14),%rax */
0x48, 0x83, 0xf8, 0x06,                   /*15: cmp    $0x6,%rax */
0x77, 0x0b,                               /*19: ja     26 <op_addi+0x26> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*1b: mov    $0x55,%ecx */
0x48, 0x0f, 0xa3, 0xc1,                   /*20: bt     %rax,%rcx */
0x72, 0x4f,                               /*24: jb     75 <op_addi+0x75> */
0xa8, 0x01,                               /*26: test   $0x1,%al */
0x75, 0x24,                               /*28: jne    4e <op_addi+0x4e> */
0x0f, 0xb6, 0xc8,                         /*2a: movzbl %al,%ecx */
0x83, 0xf9, 0x0e,                         /*2d: cmp    $0xe,%ecx */
0x74, 0x43,                               /*30: je     75 <op_addi+0x75> */
0x0f, 0xb6, 0x08,                         /*32: movzbl (%rax),%ecx */
0x83, 0xf9, 0x06,                         /*35: cmp    $0x6,%ecx */
0x75, 0x0f,                               /*38: jne    49 <op_addi+0x49> */
0xf2, 0x0f, 0x10, 0x40, 0x18,             /*3a: movsd  0x18(%rax),%xmm0 */
0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*3f: addsd  0x0(%rip),%xmm0        # 47 <op_addi+0x47> */
0xeb, 0x6b,                               /*47: jmp    b4 <op_addi+0xb4> */
0x83, 0xf9, 0x03,                         /*49: cmp    $0x3,%ecx */
0x75, 0x27,                               /*4c: jne    75 <op_addi+0x75> */
0xd1, 0xf8,                               /*4e: sar    %eax */
0x89, 0xc1,                               /*50: mov    %eax,%ecx */
0x81, 0xc1, 0x00, 0x00, 0xcd, 0x40,       /*52: add    $0x40cd0000,%ecx */
0x78, 0x51,                               /*58: js     ab <op_addi+0xab> */
0x49, 0xc7, 0x86, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*5a: movq   $0x0,0xab0800(%r14) */
0x8d, 0x84, 0x00, 0x01, 0x00, 0x9a, 0x01, /*65: lea    0x19a0001(%rax,%rax,1),%eax */
0x41, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*6c: mov    %eax,0xab0800(%r14) */
0xeb, 0x4c,                               /*73: jmp    c1 <op_addi+0xc1> */
0x49, 0xc7, 0x86, 0x08, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*75: movq   $0x0,0xab0808(%r14) */
0x41, 0xc7, 0x86, 0x08, 0x08, 0xab, 0x00, 0x01, 0x00, 0x9a, 0x01,/*80: movl   $0x19a0001,0xab0808(%r14) */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*8b: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*90: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*95: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x01, 0x00, 0x00, 0x00,       /*9a: mov    $0x1,%r8d */
0x48, 0x89, 0xdf,                         /*a0: mov    %rbx,%rdi */
0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*a3: callq  *0x1d8(%rbx) */
0xeb, 0x16,                               /*a9: jmp    c1 <op_addi+0xc1> */
0x05, 0x00, 0x00, 0xcd, 0x00,             /*ab: add    $0xcd0000,%eax */
0xf2, 0x0f, 0x2a, 0xc0,                   /*b0: cvtsi2sd %eax,%xmm0 */
0xff, 0x93, 0x50, 0x01, 0x00, 0x00,       /*b4: callq  *0x150(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*ba: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*c1: mov    %rbx,%rdi */
0x5b,                                     /*c4: pop    %rbx */
0x41, 0x5e,                               /*c5: pop    %r14 */

};

static void op_addi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 8 + 0;
  *((int32_t *)(op + 93)) = a * 8 + 0;
  *((int32_t *)(op + 111)) = a * 8 + 0;
  *((int32_t *)(op + 120)) = a * 8 + 8;
  *((int32_t *)(op + 131)) = a * 8 + 8;
  *((int32_t *)(op + 145)) = a * 1 + 0;
  *((int32_t *)(op + 189)) = a * 8 + 0;
  *((int32_t *)(op + 84)) = c * 1 + 0;
  *((int32_t *)(op + 172)) = c * 1 + 0;
  *((int32_t *)(op + 150)) = b * 1 + 0;
}

static void op_addi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_addi_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 17..20], [8, 8, 83..86], [8, 0, 183..186], [8, 0, 198..201], [8, 0, 294..297]]} */
static uint8_t op_sub[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8b, 0x86, 0x00, 0x08, 0xab, 0x00, /*e: mov    0xab0800(%r14),%rax */
0x48, 0x83, 0xf8, 0x07,                   /*15: cmp    $0x7,%rax */
0x73, 0x13,                               /*19: jae    2e <op_sub+0x2e> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*1b: mov    $0x55,%ecx */
0x0f, 0xa3, 0xc1,                         /*20: bt     %eax,%ecx */
0x73, 0x09,                               /*23: jae    2e <op_sub+0x2e> */
0x8b, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00, /*25: mov    0x0(,%rax,4),%edx */
0xeb, 0x19,                               /*2c: jmp    47 <op_sub+0x47> */
0xba, 0x03, 0x00, 0x00, 0x00,             /*2e: mov    $0x3,%edx */
0xa8, 0x01,                               /*33: test   $0x1,%al */
0x75, 0x10,                               /*35: jne    47 <op_sub+0x47> */
0x0f, 0xb6, 0xc8,                         /*37: movzbl %al,%ecx */
0xba, 0x04, 0x00, 0x00, 0x00,             /*3a: mov    $0x4,%edx */
0x83, 0xf9, 0x0e,                         /*3f: cmp    $0xe,%ecx */
0x74, 0x03,                               /*42: je     47 <op_sub+0x47> */
0x0f, 0xb6, 0x10,                         /*44: movzbl (%rax),%edx */
0xc1, 0xe2, 0x08,                         /*47: shl    $0x8,%edx */
0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*4a: and    $0xffff00,%edx */
0x49, 0x8b, 0x8e, 0x08, 0x08, 0xab, 0x00, /*50: mov    0xab0808(%r14),%rcx */
0x48, 0x83, 0xf9, 0x07,                   /*57: cmp    $0x7,%rcx */
0x73, 0x13,                               /*5b: jae    70 <op_sub+0x70> */
0xbe, 0x55, 0x00, 0x00, 0x00,             /*5d: mov    $0x55,%esi */
0x0f, 0xa3, 0xce,                         /*62: bt     %ecx,%esi */
0x73, 0x09,                               /*65: jae    70 <op_sub+0x70> */
0x8b, 0x34, 0x8d, 0x00, 0x00, 0x00, 0x00, /*67: mov    0x0(,%rcx,4),%esi */
0xeb, 0x1c,                               /*6e: jmp    8c <op_sub+0x8c> */
0xbe, 0x03, 0x00, 0x00, 0x00,             /*70: mov    $0x3,%esi */
0xf6, 0xc1, 0x01,                         /*75: test   $0x1,%cl */
0x75, 0x12,                               /*78: jne    8c <op_sub+0x8c> */
0x44, 0x0f, 0xb6, 0xc1,                   /*7a: movzbl %cl,%r8d */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*7e: mov    $0x4,%esi */
0x41, 0x83, 0xf8, 0x0e,                   /*83: cmp    $0xe,%r8d */
0x74, 0x03,                               /*87: je     8c <op_sub+0x8c> */
0x0f, 0xb6, 0x31,                         /*89: movzbl (%rcx),%esi */
0x40, 0x0f, 0xb6, 0xf6,                   /*8c: movzbl %sil,%esi */
0x09, 0xd6,                               /*90: or     %edx,%esi */
0x81, 0xfe, 0x02, 0x06, 0x00, 0x00,       /*92: cmp    $0x602,%esi */
0x7f, 0x32,                               /*98: jg     cc <op_sub+0xcc> */
0x81, 0xfe, 0x03, 0x03, 0x00, 0x00,       /*9a: cmp    $0x303,%esi */
0x75, 0x3b,                               /*a0: jne    dd <op_sub+0xdd> */
0xd1, 0xf8,                               /*a2: sar    %eax */
0xd1, 0xf9,                               /*a4: sar    %ecx */
0x89, 0xc2,                               /*a6: mov    %eax,%edx */
0x29, 0xca,                               /*a8: sub    %ecx,%edx */
0x89, 0xd6,                               /*aa: mov    %edx,%esi */
0x81, 0xc6, 0x00, 0x00, 0x00, 0x40,       /*ac: add    $0x40000000,%esi */
0x78, 0x5d,                               /*b2: js     111 <op_sub+0x111> */
0x49, 0xc7, 0x86, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*b4: movq   $0x0,0xab0800(%r14) */
0x8d, 0x44, 0x12, 0x01,                   /*bf: lea    0x1(%rdx,%rdx,1),%eax */
0x41, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*c3: mov    %eax,0xab0800(%r14) */
0xeb, 0x5e,                               /*ca: jmp    12a <op_sub+0x12a> */
0x81, 0xfe, 0x03, 0x06, 0x00, 0x00,       /*cc: cmp    $0x603,%esi */
0x75, 0x1e,                               /*d2: jne    f2 <op_sub+0xf2> */
0xf2, 0x0f, 0x10, 0x40, 0x18,             /*d4: movsd  0x18(%rax),%xmm0 */
0xd1, 0xf9,                               /*d9: sar    %ecx */
0xeb, 0x38,                               /*db: jmp    115 <op_sub+0x115> */
0x81, 0xfe, 0x06, 0x03, 0x00, 0x00,       /*dd: cmp    $0x306,%esi */
0x75, 0x21,                               /*e3: jne    106 <op_sub+0x106> */
0xd1, 0xf8,                               /*e5: sar    %eax */
0xf2, 0x0f, 0x2a, 0xc0,                   /*e7: cvtsi2sd %eax,%xmm0 */
0xf2, 0x0f, 0x5c, 0x41, 0x18,             /*eb: subsd  0x18(%rcx),%xmm0 */
0xeb, 0x2b,                               /*f0: jmp    11d <op_sub+0x11d> */
0x81, 0xfe, 0x06, 0x06, 0x00, 0x00,       /*f2: cmp    $0x606,%esi */
0x75, 0x0c,                               /*f8: jne    106 <op_sub+0x106> */
0xf2, 0x0f, 0x10, 0x40, 0x18,             /*fa: movsd  0x18(%rax),%xmm0 */
0xf2, 0x0f, 0x5c, 0x41, 0x18,             /*ff: subsd  0x18(%rcx),%xmm0 */
0xeb, 0x17,                               /*104: jmp    11d <op_sub+0x11d> */
0x48, 0x89, 0xdf,                         /*106: mov    %rbx,%rdi */
0xff, 0x93, 0x38, 0x02, 0x00, 0x00,       /*109: callq  *0x238(%rbx) */
0xeb, 0x19,                               /*10f: jmp    12a <op_sub+0x12a> */
0xf2, 0x0f, 0x2a, 0xc0,                   /*111: cvtsi2sd %eax,%xmm0 */
0xf2, 0x0f, 0x2a, 0xc9,                   /*115: cvtsi2sd %ecx,%xmm1 */
0xf2, 0x0f, 0x5c, 0xc1,                   /*119: subsd  %xmm1,%xmm0 */
0xff, 0x93, 0x50, 0x01, 0x00, 0x00,       /*11d: callq  *0x150(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*123: mov    %rax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*12a: mov    %rbx,%rdi */
0x5b,                                     /*12d: pop    %rbx */
0x41, 0x5e,                               /*12e: pop    %r14 */

};

static void op_sub_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 8 + 0;
  *((int32_t *)(op + 83)) = a * 8 + 8;
  *((int32_t *)(op + 183)) = a * 8 + 0;
  *((int32_t *)(op + 198)) = a * 8 + 0;
  *((int32_t *)(op + 294)) = a * 8 + 0;
}

static void op_sub_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sub_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 17..20], [8, 0, 105..108], [8, 8, 114..117], [8, 8, 125..128], [1, 0, 139..142], [8, 0, 168..171], [8, 0, 186..189]], "b"=>[[1, 0, 144..147]]} */
static uint8_t op_subi[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8b, 0x86, 0x00, 0x08, 0xab, 0x00, /*e: mov    0xab0800(%r14),%rax */
0x48, 0x83, 0xf8, 0x06,                   /*15: cmp    $0x6,%rax */
0x77, 0x0b,                               /*19: ja     26 <op_subi+0x26> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*1b: mov    $0x55,%ecx */
0x48, 0x0f, 0xa3, 0xc1,                   /*20: bt     %rax,%rcx */
0x72, 0x49,                               /*24: jb     6f <op_subi+0x6f> */
0xa8, 0x01,                               /*26: test   $0x1,%al */
0x75, 0x24,                               /*28: jne    4e <op_subi+0x4e> */
0x0f, 0xb6, 0xc8,                         /*2a: movzbl %al,%ecx */
0x83, 0xf9, 0x0e,                         /*2d: cmp    $0xe,%ecx */
0x74, 0x3d,                               /*30: je     6f <op_subi+0x6f> */
0x0f, 0xb6, 0x08,                         /*32: movzbl (%rax),%ecx */
0x83, 0xf9, 0x06,                         /*35: cmp    $0x6,%ecx */
0x75, 0x0f,                               /*38: jne    49 <op_subi+0x49> */
0xf2, 0x0f, 0x10, 0x40, 0x18,             /*3a: movsd  0x18(%rax),%xmm0 */
0xf2, 0x0f, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*3f: addsd  0x0(%rip),%xmm0        # 47 <op_subi+0x47> */
0xeb, 0x17,                               /*47: jmp    60 <op_subi+0x60> */
0x83, 0xf9, 0x03,                         /*49: cmp    $0x3,%ecx */
0x75, 0x21,                               /*4c: jne    6f <op_subi+0x6f> */
0xd1, 0xf8,                               /*4e: sar    %eax */
0x3d, 0xff, 0xff, 0xcc, 0xc0,             /*50: cmp    $0xc0ccffff,%eax */
0x7f, 0x4e,                               /*55: jg     a5 <op_subi+0xa5> */
0x05, 0x00, 0x00, 0x33, 0xff,             /*57: add    $0xff330000,%eax */
0xf2, 0x0f, 0x2a, 0xc0,                   /*5c: cvtsi2sd %eax,%xmm0 */
0xff, 0x93, 0x50, 0x01, 0x00, 0x00,       /*60: callq  *0x150(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*66: mov    %rax,0xab0800(%r14) */
0xeb, 0x4f,                               /*6d: jmp    be <op_subi+0xbe> */
0x49, 0xc7, 0x86, 0x08, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*6f: movq   $0x0,0xab0808(%r14) */
0x41, 0xc7, 0x86, 0x08, 0x08, 0xab, 0x00, 0x01, 0x00, 0x9a, 0x01,/*7a: movl   $0x19a0001,0xab0808(%r14) */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*85: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*8a: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*8f: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x01, 0x00, 0x00, 0x00,       /*94: mov    $0x1,%r8d */
0x48, 0x89, 0xdf,                         /*9a: mov    %rbx,%rdi */
0xff, 0x93, 0xd8, 0x01, 0x00, 0x00,       /*9d: callq  *0x1d8(%rbx) */
0xeb, 0x19,                               /*a3: jmp    be <op_subi+0xbe> */
0x49, 0xc7, 0x86, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*a5: movq   $0x0,0xab0800(%r14) */
0x8d, 0x84, 0x00, 0x01, 0x00, 0x66, 0xfe, /*b0: lea    -0x199ffff(%rax,%rax,1),%eax */
0x41, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*b7: mov    %eax,0xab0800(%r14) */
0x48, 0x89, 0xdf,                         /*be: mov    %rbx,%rdi */
0x5b,                                     /*c1: pop    %rbx */
0x41, 0x5e,                               /*c2: pop    %r14 */

};

static void op_subi_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 8 + 0;
  *((int32_t *)(op + 105)) = a * 8 + 0;
  *((int32_t *)(op + 114)) = a * 8 + 8;
  *((int32_t *)(op + 125)) = a * 8 + 8;
  *((int32_t *)(op + 139)) = a * 1 + 0;
  *((int32_t *)(op + 168)) = a * 8 + 0;
  *((int32_t *)(op + 186)) = a * 8 + 0;
  *((int32_t *)(op + 144)) = b * 1 + 0;
}

static void op_subi_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_subi_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 19..22], [8, 8, 87..90], [8, 0, 296..299], [8, 0, 321..324], [8, 0, 335..338]]} */
static uint8_t op_mul[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
0x4c, 0x8b, 0x7b, 0x18,                   /*8: mov    0x18(%rbx),%r15 */
0x4c, 0x8b, 0x73, 0x50,                   /*c: mov    0x50(%rbx),%r14 */
0x49, 0x8b, 0xb7, 0x00, 0x08, 0xab, 0x00, /*10: mov    0xab0800(%r15),%rsi */
0x48, 0x83, 0xfe, 0x07,                   /*17: cmp    $0x7,%rsi */
0x73, 0x13,                               /*1b: jae    30 <op_mul+0x30> */
0xb8, 0x55, 0x00, 0x00, 0x00,             /*1d: mov    $0x55,%eax */
0x0f, 0xa3, 0xf0,                         /*22: bt     %esi,%eax */
0x73, 0x09,                               /*25: jae    30 <op_mul+0x30> */
0x8b, 0x04, 0xb5, 0x00, 0x00, 0x00, 0x00, /*27: mov    0x0(,%rsi,4),%eax */
0xeb, 0x1c,                               /*2e: jmp    4c <op_mul+0x4c> */
0xb8, 0x03, 0x00, 0x00, 0x00,             /*30: mov    $0x3,%eax */
0x40, 0xf6, 0xc6, 0x01,                   /*35: test   $0x1,%sil */
0x75, 0x11,                               /*39: jne    4c <op_mul+0x4c> */
0x40, 0x0f, 0xb6, 0xce,                   /*3b: movzbl %sil,%ecx */
0xb8, 0x04, 0x00, 0x00, 0x00,             /*3f: mov    $0x4,%eax */
0x83, 0xf9, 0x0e,                         /*44: cmp    $0xe,%ecx */
0x74, 0x03,                               /*47: je     4c <op_mul+0x4c> */
0x0f, 0xb6, 0x06,                         /*49: movzbl (%rsi),%eax */
0xc1, 0xe0, 0x08,                         /*4c: shl    $0x8,%eax */
0x25, 0x00, 0xff, 0xff, 0x00,             /*4f: and    $0xffff00,%eax */
0x49, 0x8b, 0x97, 0x08, 0x08, 0xab, 0x00, /*54: mov    0xab0808(%r15),%rdx */
0x48, 0x83, 0xfa, 0x07,                   /*5b: cmp    $0x7,%rdx */
0x73, 0x13,                               /*5f: jae    74 <op_mul+0x74> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*61: mov    $0x55,%ecx */
0x0f, 0xa3, 0xd1,                         /*66: bt     %edx,%ecx */
0x73, 0x09,                               /*69: jae    74 <op_mul+0x74> */
0x8b, 0x0c, 0x95, 0x00, 0x00, 0x00, 0x00, /*6b: mov    0x0(,%rdx,4),%ecx */
0xeb, 0x1a,                               /*72: jmp    8e <op_mul+0x8e> */
0xb9, 0x03, 0x00, 0x00, 0x00,             /*74: mov    $0x3,%ecx */
0xf6, 0xc2, 0x01,                         /*79: test   $0x1,%dl */
0x75, 0x10,                               /*7c: jne    8e <op_mul+0x8e> */
0x0f, 0xb6, 0xfa,                         /*7e: movzbl %dl,%edi */
0xb9, 0x04, 0x00, 0x00, 0x00,             /*81: mov    $0x4,%ecx */
0x83, 0xff, 0x0e,                         /*86: cmp    $0xe,%edi */
0x74, 0x03,                               /*89: je     8e <op_mul+0x8e> */
0x0f, 0xb6, 0x0a,                         /*8b: movzbl (%rdx),%ecx */
0x0f, 0xb6, 0xc9,                         /*8e: movzbl %cl,%ecx */
0x09, 0xc1,                               /*91: or     %eax,%ecx */
0x81, 0xf9, 0x02, 0x06, 0x00, 0x00,       /*93: cmp    $0x602,%ecx */
0x7f, 0x45,                               /*99: jg     e0 <op_mul+0xe0> */
0x81, 0xf9, 0x03, 0x03, 0x00, 0x00,       /*9b: cmp    $0x303,%ecx */
0x75, 0x52,                               /*a1: jne    f5 <op_mul+0xf5> */
0x4c, 0x89, 0xf7,                         /*a3: mov    %r14,%rdi */
0xff, 0x93, 0x48, 0x02, 0x00, 0x00,       /*a6: callq  *0x248(%rbx) */
0x48, 0x83, 0xf8, 0x06,                   /*ac: cmp    $0x6,%rax */
0x77, 0x0f,                               /*b0: ja     c1 <op_mul+0xc1> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*b2: mov    $0x55,%ecx */
0x48, 0x0f, 0xa3, 0xc1,                   /*b7: bt     %rax,%rcx */
0x0f, 0x82, 0x92, 0x00, 0x00, 0x00,       /*bb: jb     153 <op_mul+0x153> */
0xa8, 0x01,                               /*c1: test   $0x1,%al */
0x75, 0x79,                               /*c3: jne    13e <op_mul+0x13e> */
0x0f, 0xb6, 0xc8,                         /*c5: movzbl %al,%ecx */
0x83, 0xf9, 0x0e,                         /*c8: cmp    $0xe,%ecx */
0x0f, 0x84, 0x82, 0x00, 0x00, 0x00,       /*cb: je     153 <op_mul+0x153> */
0x0f, 0xb6, 0x08,                         /*d1: movzbl (%rax),%ecx */
0x83, 0xf9, 0x06,                         /*d4: cmp    $0x6,%ecx */
0x75, 0x60,                               /*d7: jne    139 <op_mul+0x139> */
0xf2, 0x0f, 0x10, 0x40, 0x18,             /*d9: movsd  0x18(%rax),%xmm0 */
0xeb, 0x3c,                               /*de: jmp    11c <op_mul+0x11c> */
0x81, 0xf9, 0x03, 0x06, 0x00, 0x00,       /*e0: cmp    $0x603,%ecx */
0x75, 0x22,                               /*e6: jne    10a <op_mul+0x10a> */
0xd1, 0xfa,                               /*e8: sar    %edx */
0xf2, 0x0f, 0x2a, 0xc2,                   /*ea: cvtsi2sd %edx,%xmm0 */
0xf2, 0x0f, 0x59, 0x46, 0x18,             /*ee: mulsd  0x18(%rsi),%xmm0 */
0xeb, 0x27,                               /*f3: jmp    11c <op_mul+0x11c> */
0x81, 0xf9, 0x06, 0x03, 0x00, 0x00,       /*f5: cmp    $0x306,%ecx */
0x75, 0x31,                               /*fb: jne    12e <op_mul+0x12e> */
0xd1, 0xfe,                               /*fd: sar    %esi */
0xf2, 0x0f, 0x2a, 0xc6,                   /*ff: cvtsi2sd %esi,%xmm0 */
0xf2, 0x0f, 0x59, 0x42, 0x18,             /*103: mulsd  0x18(%rdx),%xmm0 */
0xeb, 0x12,                               /*108: jmp    11c <op_mul+0x11c> */
0x81, 0xf9, 0x06, 0x06, 0x00, 0x00,       /*10a: cmp    $0x606,%ecx */
0x75, 0x1c,                               /*110: jne    12e <op_mul+0x12e> */
0xf2, 0x0f, 0x10, 0x46, 0x18,             /*112: movsd  0x18(%rsi),%xmm0 */
0xf2, 0x0f, 0x59, 0x42, 0x18,             /*117: mulsd  0x18(%rdx),%xmm0 */
0x4c, 0x89, 0xf7,                         /*11c: mov    %r14,%rdi */
0xff, 0x93, 0x50, 0x01, 0x00, 0x00,       /*11f: callq  *0x150(%rbx) */
0x49, 0x89, 0x87, 0x00, 0x08, 0xab, 0x00, /*125: mov    %rax,0xab0800(%r15) */
0xeb, 0x25,                               /*12c: jmp    153 <op_mul+0x153> */
0x48, 0x89, 0xdf,                         /*12e: mov    %rbx,%rdi */
0xff, 0x93, 0x38, 0x02, 0x00, 0x00,       /*131: callq  *0x238(%rbx) */
0xeb, 0x1a,                               /*137: jmp    153 <op_mul+0x153> */
0x83, 0xf9, 0x03,                         /*139: cmp    $0x3,%ecx */
0x75, 0x15,                               /*13c: jne    153 <op_mul+0x153> */
0x49, 0xc7, 0x87, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*13e: movq   $0x0,0xab0800(%r15) */
0x83, 0xc8, 0x01,                         /*149: or     $0x1,%eax */
0x41, 0x89, 0x87, 0x00, 0x08, 0xab, 0x00, /*14c: mov    %eax,0xab0800(%r15) */
0x48, 0x89, 0xdf,                         /*153: mov    %rbx,%rdi */
0x5b,                                     /*156: pop    %rbx */
0x41, 0x5e,                               /*157: pop    %r14 */
0x41, 0x5f,                               /*159: pop    %r15 */

};

static void op_mul_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = a * 8 + 0;
  *((int32_t *)(op + 87)) = a * 8 + 8;
  *((int32_t *)(op + 296)) = a * 8 + 0;
  *((int32_t *)(op + 321)) = a * 8 + 0;
  *((int32_t *)(op + 335)) = a * 8 + 0;
}

static void op_mul_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_mul_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 17..20], [8, 8, 83..86], [8, 0, 245..248]]} */
static uint8_t op_div[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8b, 0x86, 0x00, 0x08, 0xab, 0x00, /*e: mov    0xab0800(%r14),%rax */
0x48, 0x83, 0xf8, 0x07,                   /*15: cmp    $0x7,%rax */
0x73, 0x13,                               /*19: jae    2e <op_div+0x2e> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*1b: mov    $0x55,%ecx */
0x0f, 0xa3, 0xc1,                         /*20: bt     %eax,%ecx */
0x73, 0x09,                               /*23: jae    2e <op_div+0x2e> */
0x8b, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00, /*25: mov    0x0(,%rax,4),%edx */
0xeb, 0x19,                               /*2c: jmp    47 <op_div+0x47> */
0xba, 0x03, 0x00, 0x00, 0x00,             /*2e: mov    $0x3,%edx */
0xa8, 0x01,                               /*33: test   $0x1,%al */
0x75, 0x10,                               /*35: jne    47 <op_div+0x47> */
0x0f, 0xb6, 0xc8,                         /*37: movzbl %al,%ecx */
0xba, 0x04, 0x00, 0x00, 0x00,             /*3a: mov    $0x4,%edx */
0x83, 0xf9, 0x0e,                         /*3f: cmp    $0xe,%ecx */
0x74, 0x03,                               /*42: je     47 <op_div+0x47> */
0x0f, 0xb6, 0x10,                         /*44: movzbl (%rax),%edx */
0xc1, 0xe2, 0x08,                         /*47: shl    $0x8,%edx */
0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*4a: and    $0xffff00,%edx */
0x49, 0x8b, 0x8e, 0x08, 0x08, 0xab, 0x00, /*50: mov    0xab0808(%r14),%rcx */
0x48, 0x83, 0xf9, 0x07,                   /*57: cmp    $0x7,%rcx */
0x73, 0x13,                               /*5b: jae    70 <op_div+0x70> */
0xbe, 0x55, 0x00, 0x00, 0x00,             /*5d: mov    $0x55,%esi */
0x0f, 0xa3, 0xce,                         /*62: bt     %ecx,%esi */
0x73, 0x09,                               /*65: jae    70 <op_div+0x70> */
0x8b, 0x34, 0x8d, 0x00, 0x00, 0x00, 0x00, /*67: mov    0x0(,%rcx,4),%esi */
0xeb, 0x1c,                               /*6e: jmp    8c <op_div+0x8c> */
0xbe, 0x03, 0x00, 0x00, 0x00,             /*70: mov    $0x3,%esi */
0xf6, 0xc1, 0x01,                         /*75: test   $0x1,%cl */
0x75, 0x12,                               /*78: jne    8c <op_div+0x8c> */
0x44, 0x0f, 0xb6, 0xc1,                   /*7a: movzbl %cl,%r8d */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*7e: mov    $0x4,%esi */
0x41, 0x83, 0xf8, 0x0e,                   /*83: cmp    $0xe,%r8d */
0x74, 0x03,                               /*87: je     8c <op_div+0x8c> */
0x0f, 0xb6, 0x31,                         /*89: movzbl (%rcx),%esi */
0x40, 0x0f, 0xb6, 0xf6,                   /*8c: movzbl %sil,%esi */
0x09, 0xd6,                               /*90: or     %edx,%esi */
0x81, 0xfe, 0x02, 0x06, 0x00, 0x00,       /*92: cmp    $0x602,%esi */
0x7f, 0x12,                               /*98: jg     ac <op_div+0xac> */
0x81, 0xfe, 0x03, 0x03, 0x00, 0x00,       /*9a: cmp    $0x303,%esi */
0x75, 0x23,                               /*a0: jne    c5 <op_div+0xc5> */
0xd1, 0xf8,                               /*a2: sar    %eax */
0xd1, 0xf9,                               /*a4: sar    %ecx */
0xf2, 0x0f, 0x2a, 0xc0,                   /*a6: cvtsi2sd %eax,%xmm0 */
0xeb, 0x0f,                               /*aa: jmp    bb <op_div+0xbb> */
0x81, 0xfe, 0x03, 0x06, 0x00, 0x00,       /*ac: cmp    $0x603,%esi */
0x75, 0x26,                               /*b2: jne    da <op_div+0xda> */
0xf2, 0x0f, 0x10, 0x40, 0x18,             /*b4: movsd  0x18(%rax),%xmm0 */
0xd1, 0xf9,                               /*b9: sar    %ecx */
0xf2, 0x0f, 0x2a, 0xc9,                   /*bb: cvtsi2sd %ecx,%xmm1 */
0xf2, 0x0f, 0x5e, 0xc1,                   /*bf: divsd  %xmm1,%xmm0 */
0xeb, 0x27,                               /*c3: jmp    ec <op_div+0xec> */
0x81, 0xfe, 0x06, 0x03, 0x00, 0x00,       /*c5: cmp    $0x306,%esi */
0x75, 0x2e,                               /*cb: jne    fb <op_div+0xfb> */
0xd1, 0xf8,                               /*cd: sar    %eax */
0xf2, 0x0f, 0x2a, 0xc0,                   /*cf: cvtsi2sd %eax,%xmm0 */
0xf2, 0x0f, 0x5e, 0x41, 0x18,             /*d3: divsd  0x18(%rcx),%xmm0 */
0xeb, 0x12,                               /*d8: jmp    ec <op_div+0xec> */
0x81, 0xfe, 0x06, 0x06, 0x00, 0x00,       /*da: cmp    $0x606,%esi */
0x75, 0x19,                               /*e0: jne    fb <op_div+0xfb> */
0xf2, 0x0f, 0x10, 0x40, 0x18,             /*e2: movsd  0x18(%rax),%xmm0 */
0xf2, 0x0f, 0x5e, 0x41, 0x18,             /*e7: divsd  0x18(%rcx),%xmm0 */
0xff, 0x93, 0x50, 0x01, 0x00, 0x00,       /*ec: callq  *0x150(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*f2: mov    %rax,0xab0800(%r14) */
0xeb, 0x09,                               /*f9: jmp    104 <op_div+0x104> */
0x48, 0x89, 0xdf,                         /*fb: mov    %rbx,%rdi */
0xff, 0x93, 0x38, 0x02, 0x00, 0x00,       /*fe: callq  *0x238(%rbx) */
0x48, 0x89, 0xdf,                         /*104: mov    %rbx,%rdi */
0x5b,                                     /*107: pop    %rbx */
0x41, 0x5e,                               /*108: pop    %r14 */

};

static void op_div_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 8 + 0;
  *((int32_t *)(op + 83)) = a * 8 + 8;
  *((int32_t *)(op + 245)) = a * 8 + 0;
}

static void op_div_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_div_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[8, 0, 17..20], [8, 8, 24..27], [8, 0, 42..45], [8, 0, 58..61], [8, 8, 124..127], [8, 0, 285..288], [8, 0, 295..298], [8, 0, 308..311], [8, 0, 321..324], [1, 0, 337..340]], "b"=>[[1, 0, 342..345]], "c"=>[[1, 0, 348..351]]} */
static uint8_t op_eq[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x5e, 0x18,                   /*6: mov    0x18(%r14),%rbx */
0x49, 0x8b, 0x7e, 0x50,                   /*a: mov    0x50(%r14),%rdi */
0x48, 0x8b, 0xb3, 0x00, 0x08, 0xab, 0x00, /*e: mov    0xab0800(%rbx),%rsi */
0x48, 0x8b, 0x93, 0x08, 0x08, 0xab, 0x00, /*15: mov    0xab0808(%rbx),%rdx */
0x41, 0xff, 0x96, 0xa0, 0x00, 0x00, 0x00, /*1c: callq  *0xa0(%r14) */
0x84, 0xc0,                               /*23: test   %al,%al */
0x74, 0x10,                               /*25: je     37 <op_eq+0x37> */
0x48, 0xc7, 0x83, 0x00, 0x08, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*27: movq   $0x4,0xab0800(%rbx) */
0xe9, 0x33, 0x01, 0x00, 0x00,             /*32: jmpq   16a <op_eq+0x16a> */
0x48, 0x8b, 0x83, 0x00, 0x08, 0xab, 0x00, /*37: mov    0xab0800(%rbx),%rax */
0x48, 0x83, 0xf8, 0x07,                   /*3e: cmp    $0x7,%rax */
0x73, 0x13,                               /*42: jae    57 <op_eq+0x57> */
0xb9, 0x55, 0x00, 0x00, 0x00,             /*44: mov    $0x55,%ecx */
0x0f, 0xa3, 0xc1,                         /*49: bt     %eax,%ecx */
0x73, 0x09,                               /*4c: jae    57 <op_eq+0x57> */
0x8b, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00, /*4e: mov    0x0(,%rax,4),%edx */
0xeb, 0x19,                               /*55: jmp    70 <op_eq+0x70> */
0xba, 0x03, 0x00, 0x00, 0x00,             /*57: mov    $0x3,%edx */
0xa8, 0x01,                               /*5c: test   $0x1,%al */
0x75, 0x10,                               /*5e: jne    70 <op_eq+0x70> */
0x0f, 0xb6, 0xc8,                         /*60: movzbl %al,%ecx */
0xba, 0x04, 0x00, 0x00, 0x00,             /*63: mov    $0x4,%edx */
0x83, 0xf9, 0x0e,                         /*68: cmp    $0xe,%ecx */
0x74, 0x03,                               /*6b: je     70 <op_eq+0x70> */
0x0f, 0xb6, 0x10,                         /*6d: movzbl (%rax),%edx */
0xc1, 0xe2, 0x08,                         /*70: shl    $0x8,%edx */
0x81, 0xe2, 0x00, 0xff, 0xff, 0x00,       /*73: and    $0xffff00,%edx */
0x48, 0x8b, 0x8b, 0x08, 0x08, 0xab, 0x00, /*79: mov    0xab0808(%rbx),%rcx */
0x48, 0x83, 0xf9, 0x07,                   /*80: cmp    $0x7,%rcx */
0x73, 0x13,                               /*84: jae    99 <op_eq+0x99> */
0xbe, 0x55, 0x00, 0x00, 0x00,             /*86: mov    $0x55,%esi */
0x0f, 0xa3, 0xce,                         /*8b: bt     %ecx,%esi */
0x73, 0x09,                               /*8e: jae    99 <op_eq+0x99> */
0x8b, 0x34, 0x8d, 0x00, 0x00, 0x00, 0x00, /*90: mov    0x0(,%rcx,4),%esi */
0xeb, 0x1a,                               /*97: jmp    b3 <op_eq+0xb3> */
0xbe, 0x03, 0x00, 0x00, 0x00,             /*99: mov    $0x3,%esi */
0xf6, 0xc1, 0x01,                         /*9e: test   $0x1,%cl */
0x75, 0x10,                               /*a1: jne    b3 <op_eq+0xb3> */
0x0f, 0xb6, 0xf9,                         /*a3: movzbl %cl,%edi */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*a6: mov    $0x4,%esi */
0x83, 0xff, 0x0e,                         /*ab: cmp    $0xe,%edi */
0x74, 0x03,                               /*ae: je     b3 <op_eq+0xb3> */
0x0f, 0xb6, 0x31,                         /*b0: movzbl (%rcx),%esi */
0x40, 0x0f, 0xb6, 0xf6,                   /*b3: movzbl %sil,%esi */
0x09, 0xd6,                               /*b7: or     %edx,%esi */
0x81, 0xfe, 0x02, 0x06, 0x00, 0x00,       /*b9: cmp    $0x602,%esi */
0x7f, 0x11,                               /*bf: jg     d2 <op_eq+0xd2> */
0x81, 0xfe, 0x03, 0x03, 0x00, 0x00,       /*c1: cmp    $0x303,%esi */
0x75, 0x24,                               /*c7: jne    ed <op_eq+0xed> */
0x31, 0xc1,                               /*c9: xor    %eax,%ecx */
0x83, 0xf9, 0x02,                         /*cb: cmp    $0x2,%ecx */
0x19, 0xc0,                               /*ce: sbb    %eax,%eax */
0xeb, 0x43,                               /*d0: jmp    115 <op_eq+0x115> */
0x81, 0xfe, 0x03, 0x06, 0x00, 0x00,       /*d2: cmp    $0x603,%esi */
0x75, 0x23,                               /*d8: jne    fd <op_eq+0xfd> */
0xd1, 0xf9,                               /*da: sar    %ecx */
0xf2, 0x0f, 0x2a, 0xc1,                   /*dc: cvtsi2sd %ecx,%xmm0 */
0xf2, 0x0f, 0xc2, 0x40, 0x18, 0x00,       /*e0: cmpeqsd 0x18(%rax),%xmm0 */
0x66, 0x48, 0x0f, 0x7e, 0xc0,             /*e6: movq   %xmm0,%rax */
0xeb, 0x28,                               /*eb: jmp    115 <op_eq+0x115> */
0x81, 0xfe, 0x06, 0x03, 0x00, 0x00,       /*ed: cmp    $0x306,%esi */
0x75, 0x56,                               /*f3: jne    14b <op_eq+0x14b> */
0xd1, 0xf8,                               /*f5: sar    %eax */
0xf2, 0x0f, 0x2a, 0xc0,                   /*f7: cvtsi2sd %eax,%xmm0 */
0xeb, 0x0d,                               /*fb: jmp    10a <op_eq+0x10a> */
0x81, 0xfe, 0x06, 0x06, 0x00, 0x00,       /*fd: cmp    $0x606,%esi */
0x75, 0x46,                               /*103: jne    14b <op_eq+0x14b> */
0xf2, 0x0f, 0x10, 0x40, 0x18,             /*105: movsd  0x18(%rax),%xmm0 */
0xf2, 0x0f, 0xc2, 0x41, 0x18, 0x00,       /*10a: cmpeqsd 0x18(%rcx),%xmm0 */
0x66, 0x48, 0x0f, 0x7e, 0xc0,             /*110: movq   %xmm0,%rax */
0x83, 0xe0, 0x01,                         /*115: and    $0x1,%eax */
0x85, 0xc0,                               /*118: test   %eax,%eax */
0x48, 0xc7, 0x83, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*11a: movq   $0x0,0xab0800(%rbx) */
0xc7, 0x83, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*125: movl   $0x2,0xab0800(%rbx) */
0x74, 0x0d,                               /*12f: je     13e <op_eq+0x13e> */
0x48, 0xc7, 0x83, 0x00, 0x08, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*131: movq   $0x4,0xab0800(%rbx) */
0xeb, 0x2c,                               /*13c: jmp    16a <op_eq+0x16a> */
0x48, 0xc7, 0x83, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*13e: movq   $0x2,0xab0800(%rbx) */
0xeb, 0x1f,                               /*149: jmp    16a <op_eq+0x16a> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*14b: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*150: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*155: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*15a: mov    $0xcd0000,%r8d */
0x4c, 0x89, 0xf7,                         /*160: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xd8, 0x01, 0x00, 0x00, /*163: callq  *0x1d8(%r14) */
0x4c, 0x89, 0xf7,                         /*16a: mov    %r14,%rdi */
0x5b,                                     /*16d: pop    %rbx */
0x41, 0x5e,                               /*16e: pop    %r14 */

};

static void op_eq_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = a * 8 + 0;
  *((int32_t *)(op + 24)) = a * 8 + 8;
  *((int32_t *)(op + 42)) = a * 8 + 0;
  *((int32_t *)(op + 58)) = a * 8 + 0;
  *((int32_t *)(op + 124)) = a * 8 + 8;
  *((int32_t *)(op + 285)) = a * 8 + 0;
  *((int32_t *)(op + 295)) = a * 8 + 0;
  *((int32_t *)(op + 308)) = a * 8 + 0;
  *((int32_t *)(op + 321)) = a * 8 + 0;
  *((int32_t *)(op + 337)) = a * 1 + 0;
  *((int32_t *)(op + 342)) = b * 1 + 0;
  *((int32_t *)(op + 348)) = c * 1 + 0;
}

static void op_eq_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_eq_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 13..16], [8, 8, 80..83], [8, 0, 241..244], [8, 0, 251..254], [8, 0, 264..267], [8, 0, 277..280], [1, 0, 293..296]], "b"=>[[1, 0, 298..301]], "c"=>[[1, 0, 304..307]]} */
static uint8_t op_lt[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x46, 0x18,                   /*6: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*a: mov    0xab0800(%rax),%rcx */
0x48, 0x83, 0xf9, 0x07,                   /*11: cmp    $0x7,%rcx */
0x73, 0x13,                               /*15: jae    2a <op_lt+0x2a> */
0xba, 0x55, 0x00, 0x00, 0x00,             /*17: mov    $0x55,%edx */
0x0f, 0xa3, 0xca,                         /*1c: bt     %ecx,%edx */
0x73, 0x09,                               /*1f: jae    2a <op_lt+0x2a> */
0x8b, 0x34, 0x8d, 0x00, 0x00, 0x00, 0x00, /*21: mov    0x0(,%rcx,4),%esi */
0xeb, 0x1a,                               /*28: jmp    44 <op_lt+0x44> */
0xbe, 0x03, 0x00, 0x00, 0x00,             /*2a: mov    $0x3,%esi */
0xf6, 0xc1, 0x01,                         /*2f: test   $0x1,%cl */
0x75, 0x10,                               /*32: jne    44 <op_lt+0x44> */
0x0f, 0xb6, 0xd1,                         /*34: movzbl %cl,%edx */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*37: mov    $0x4,%esi */
0x83, 0xfa, 0x0e,                         /*3c: cmp    $0xe,%edx */
0x74, 0x03,                               /*3f: je     44 <op_lt+0x44> */
0x0f, 0xb6, 0x31,                         /*41: movzbl (%rcx),%esi */
0xc1, 0xe6, 0x08,                         /*44: shl    $0x8,%esi */
0x81, 0xe6, 0x00, 0xff, 0xff, 0x00,       /*47: and    $0xffff00,%esi */
0x48, 0x8b, 0x90, 0x08, 0x08, 0xab, 0x00, /*4d: mov    0xab0808(%rax),%rdx */
0x48, 0x83, 0xfa, 0x07,                   /*54: cmp    $0x7,%rdx */
0x73, 0x13,                               /*58: jae    6d <op_lt+0x6d> */
0xbf, 0x55, 0x00, 0x00, 0x00,             /*5a: mov    $0x55,%edi */
0x0f, 0xa3, 0xd7,                         /*5f: bt     %edx,%edi */
0x73, 0x09,                               /*62: jae    6d <op_lt+0x6d> */
0x8b, 0x3c, 0x95, 0x00, 0x00, 0x00, 0x00, /*64: mov    0x0(,%rdx,4),%edi */
0xeb, 0x1a,                               /*6b: jmp    87 <op_lt+0x87> */
0xbf, 0x03, 0x00, 0x00, 0x00,             /*6d: mov    $0x3,%edi */
0xf6, 0xc2, 0x01,                         /*72: test   $0x1,%dl */
0x75, 0x10,                               /*75: jne    87 <op_lt+0x87> */
0x0f, 0xb6, 0xda,                         /*77: movzbl %dl,%ebx */
0xbf, 0x04, 0x00, 0x00, 0x00,             /*7a: mov    $0x4,%edi */
0x83, 0xfb, 0x0e,                         /*7f: cmp    $0xe,%ebx */
0x74, 0x03,                               /*82: je     87 <op_lt+0x87> */
0x0f, 0xb6, 0x3a,                         /*84: movzbl (%rdx),%edi */
0x40, 0x0f, 0xb6, 0xff,                   /*87: movzbl %dil,%edi */
0x09, 0xf7,                               /*8b: or     %esi,%edi */
0x81, 0xff, 0x02, 0x06, 0x00, 0x00,       /*8d: cmp    $0x602,%edi */
0x7f, 0x13,                               /*93: jg     a8 <op_lt+0xa8> */
0x81, 0xff, 0x03, 0x03, 0x00, 0x00,       /*95: cmp    $0x303,%edi */
0x75, 0x1b,                               /*9b: jne    b8 <op_lt+0xb8> */
0xd1, 0xf9,                               /*9d: sar    %ecx */
0xd1, 0xfa,                               /*9f: sar    %edx */
0x39, 0xd1,                               /*a1: cmp    %edx,%ecx */
0x0f, 0x9c, 0xc1,                         /*a3: setl   %cl */
0xeb, 0x41,                               /*a6: jmp    e9 <op_lt+0xe9> */
0x81, 0xff, 0x03, 0x06, 0x00, 0x00,       /*a8: cmp    $0x603,%edi */
0x75, 0x24,                               /*ae: jne    d4 <op_lt+0xd4> */
0xd1, 0xfa,                               /*b0: sar    %edx */
0xf2, 0x0f, 0x2a, 0xc2,                   /*b2: cvtsi2sd %edx,%xmm0 */
0xeb, 0x29,                               /*b6: jmp    e1 <op_lt+0xe1> */
0x81, 0xff, 0x06, 0x03, 0x00, 0x00,       /*b8: cmp    $0x306,%edi */
0x75, 0x5f,                               /*be: jne    11f <op_lt+0x11f> */
0xd1, 0xf9,                               /*c0: sar    %ecx */
0xf2, 0x0f, 0x2a, 0xc1,                   /*c2: cvtsi2sd %ecx,%xmm0 */
0xf2, 0x0f, 0x10, 0x4a, 0x18,             /*c6: movsd  0x18(%rdx),%xmm1 */
0x66, 0x0f, 0x2e, 0xc8,                   /*cb: ucomisd %xmm0,%xmm1 */
0x0f, 0x97, 0xc1,                         /*cf: seta   %cl */
0xeb, 0x15,                               /*d2: jmp    e9 <op_lt+0xe9> */
0x81, 0xff, 0x06, 0x06, 0x00, 0x00,       /*d4: cmp    $0x606,%edi */
0x75, 0x43,                               /*da: jne    11f <op_lt+0x11f> */
0xf2, 0x0f, 0x10, 0x42, 0x18,             /*dc: movsd  0x18(%rdx),%xmm0 */
0x66, 0x0f, 0x2e, 0x41, 0x18,             /*e1: ucomisd 0x18(%rcx),%xmm0 */
0x0f, 0x97, 0xc1,                         /*e6: seta   %cl */
0x0f, 0xb6, 0xc9,                         /*e9: movzbl %cl,%ecx */
0x85, 0xc9,                               /*ec: test   %ecx,%ecx */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*ee: movq   $0x0,0xab0800(%rax) */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*f9: movl   $0x2,0xab0800(%rax) */
0x74, 0x0d,                               /*103: je     112 <op_lt+0x112> */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*105: movq   $0x4,0xab0800(%rax) */
0xeb, 0x2c,                               /*110: jmp    13e <op_lt+0x13e> */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*112: movq   $0x2,0xab0800(%rax) */
0xeb, 0x1f,                               /*11d: jmp    13e <op_lt+0x13e> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*11f: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*124: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*129: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*12e: mov    $0xcd0000,%r8d */
0x4c, 0x89, 0xf7,                         /*134: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xd8, 0x01, 0x00, 0x00, /*137: callq  *0x1d8(%r14) */
0x4c, 0x89, 0xf7,                         /*13e: mov    %r14,%rdi */
0x5b,                                     /*141: pop    %rbx */
0x41, 0x5e,                               /*142: pop    %r14 */

};

static void op_lt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = a * 8 + 0;
  *((int32_t *)(op + 80)) = a * 8 + 8;
  *((int32_t *)(op + 241)) = a * 8 + 0;
  *((int32_t *)(op + 251)) = a * 8 + 0;
  *((int32_t *)(op + 264)) = a * 8 + 0;
  *((int32_t *)(op + 277)) = a * 8 + 0;
  *((int32_t *)(op + 293)) = a * 1 + 0;
  *((int32_t *)(op + 298)) = b * 1 + 0;
  *((int32_t *)(op + 304)) = c * 1 + 0;
}

static void op_lt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_lt_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 13..16], [8, 8, 80..83], [8, 0, 241..244], [8, 0, 251..254], [8, 0, 264..267], [8, 0, 277..280], [1, 0, 293..296]], "b"=>[[1, 0, 298..301]], "c"=>[[1, 0, 304..307]]} */
static uint8_t op_le[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x46, 0x18,                   /*6: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*a: mov    0xab0800(%rax),%rcx */
0x48, 0x83, 0xf9, 0x07,                   /*11: cmp    $0x7,%rcx */
0x73, 0x13,                               /*15: jae    2a <op_le+0x2a> */
0xba, 0x55, 0x00, 0x00, 0x00,             /*17: mov    $0x55,%edx */
0x0f, 0xa3, 0xca,                         /*1c: bt     %ecx,%edx */
0x73, 0x09,                               /*1f: jae    2a <op_le+0x2a> */
0x8b, 0x34, 0x8d, 0x00, 0x00, 0x00, 0x00, /*21: mov    0x0(,%rcx,4),%esi */
0xeb, 0x1a,                               /*28: jmp    44 <op_le+0x44> */
0xbe, 0x03, 0x00, 0x00, 0x00,             /*2a: mov    $0x3,%esi */
0xf6, 0xc1, 0x01,                         /*2f: test   $0x1,%cl */
0x75, 0x10,                               /*32: jne    44 <op_le+0x44> */
0x0f, 0xb6, 0xd1,                         /*34: movzbl %cl,%edx */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*37: mov    $0x4,%esi */
0x83, 0xfa, 0x0e,                         /*3c: cmp    $0xe,%edx */
0x74, 0x03,                               /*3f: je     44 <op_le+0x44> */
0x0f, 0xb6, 0x31,                         /*41: movzbl (%rcx),%esi */
0xc1, 0xe6, 0x08,                         /*44: shl    $0x8,%esi */
0x81, 0xe6, 0x00, 0xff, 0xff, 0x00,       /*47: and    $0xffff00,%esi */
0x48, 0x8b, 0x90, 0x08, 0x08, 0xab, 0x00, /*4d: mov    0xab0808(%rax),%rdx */
0x48, 0x83, 0xfa, 0x07,                   /*54: cmp    $0x7,%rdx */
0x73, 0x13,                               /*58: jae    6d <op_le+0x6d> */
0xbf, 0x55, 0x00, 0x00, 0x00,             /*5a: mov    $0x55,%edi */
0x0f, 0xa3, 0xd7,                         /*5f: bt     %edx,%edi */
0x73, 0x09,                               /*62: jae    6d <op_le+0x6d> */
0x8b, 0x3c, 0x95, 0x00, 0x00, 0x00, 0x00, /*64: mov    0x0(,%rdx,4),%edi */
0xeb, 0x1a,                               /*6b: jmp    87 <op_le+0x87> */
0xbf, 0x03, 0x00, 0x00, 0x00,             /*6d: mov    $0x3,%edi */
0xf6, 0xc2, 0x01,                         /*72: test   $0x1,%dl */
0x75, 0x10,                               /*75: jne    87 <op_le+0x87> */
0x0f, 0xb6, 0xda,                         /*77: movzbl %dl,%ebx */
0xbf, 0x04, 0x00, 0x00, 0x00,             /*7a: mov    $0x4,%edi */
0x83, 0xfb, 0x0e,                         /*7f: cmp    $0xe,%ebx */
0x74, 0x03,                               /*82: je     87 <op_le+0x87> */
0x0f, 0xb6, 0x3a,                         /*84: movzbl (%rdx),%edi */
0x40, 0x0f, 0xb6, 0xff,                   /*87: movzbl %dil,%edi */
0x09, 0xf7,                               /*8b: or     %esi,%edi */
0x81, 0xff, 0x02, 0x06, 0x00, 0x00,       /*8d: cmp    $0x602,%edi */
0x7f, 0x13,                               /*93: jg     a8 <op_le+0xa8> */
0x81, 0xff, 0x03, 0x03, 0x00, 0x00,       /*95: cmp    $0x303,%edi */
0x75, 0x1b,                               /*9b: jne    b8 <op_le+0xb8> */
0xd1, 0xf9,                               /*9d: sar    %ecx */
0xd1, 0xfa,                               /*9f: sar    %edx */
0x39, 0xd1,                               /*a1: cmp    %edx,%ecx */
0x0f, 0x9e, 0xc1,                         /*a3: setle  %cl */
0xeb, 0x41,                               /*a6: jmp    e9 <op_le+0xe9> */
0x81, 0xff, 0x03, 0x06, 0x00, 0x00,       /*a8: cmp    $0x603,%edi */
0x75, 0x24,                               /*ae: jne    d4 <op_le+0xd4> */
0xd1, 0xfa,                               /*b0: sar    %edx */
0xf2, 0x0f, 0x2a, 0xc2,                   /*b2: cvtsi2sd %edx,%xmm0 */
0xeb, 0x29,                               /*b6: jmp    e1 <op_le+0xe1> */
0x81, 0xff, 0x06, 0x03, 0x00, 0x00,       /*b8: cmp    $0x306,%edi */
0x75, 0x5f,                               /*be: jne    11f <op_le+0x11f> */
0xd1, 0xf9,                               /*c0: sar    %ecx */
0xf2, 0x0f, 0x2a, 0xc1,                   /*c2: cvtsi2sd %ecx,%xmm0 */
0xf2, 0x0f, 0x10, 0x4a, 0x18,             /*c6: movsd  0x18(%rdx),%xmm1 */
0x66, 0x0f, 0x2e, 0xc8,                   /*cb: ucomisd %xmm0,%xmm1 */
0x0f, 0x93, 0xc1,                         /*cf: setae  %cl */
0xeb, 0x15,                               /*d2: jmp    e9 <op_le+0xe9> */
0x81, 0xff, 0x06, 0x06, 0x00, 0x00,       /*d4: cmp    $0x606,%edi */
0x75, 0x43,                               /*da: jne    11f <op_le+0x11f> */
0xf2, 0x0f, 0x10, 0x42, 0x18,             /*dc: movsd  0x18(%rdx),%xmm0 */
0x66, 0x0f, 0x2e, 0x41, 0x18,             /*e1: ucomisd 0x18(%rcx),%xmm0 */
0x0f, 0x93, 0xc1,                         /*e6: setae  %cl */
0x0f, 0xb6, 0xc9,                         /*e9: movzbl %cl,%ecx */
0x85, 0xc9,                               /*ec: test   %ecx,%ecx */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*ee: movq   $0x0,0xab0800(%rax) */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*f9: movl   $0x2,0xab0800(%rax) */
0x74, 0x0d,                               /*103: je     112 <op_le+0x112> */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*105: movq   $0x4,0xab0800(%rax) */
0xeb, 0x2c,                               /*110: jmp    13e <op_le+0x13e> */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*112: movq   $0x2,0xab0800(%rax) */
0xeb, 0x1f,                               /*11d: jmp    13e <op_le+0x13e> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*11f: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*124: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*129: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*12e: mov    $0xcd0000,%r8d */
0x4c, 0x89, 0xf7,                         /*134: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xd8, 0x01, 0x00, 0x00, /*137: callq  *0x1d8(%r14) */
0x4c, 0x89, 0xf7,                         /*13e: mov    %r14,%rdi */
0x5b,                                     /*141: pop    %rbx */
0x41, 0x5e,                               /*142: pop    %r14 */

};

static void op_le_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = a * 8 + 0;
  *((int32_t *)(op + 80)) = a * 8 + 8;
  *((int32_t *)(op + 241)) = a * 8 + 0;
  *((int32_t *)(op + 251)) = a * 8 + 0;
  *((int32_t *)(op + 264)) = a * 8 + 0;
  *((int32_t *)(op + 277)) = a * 8 + 0;
  *((int32_t *)(op + 293)) = a * 1 + 0;
  *((int32_t *)(op + 298)) = b * 1 + 0;
  *((int32_t *)(op + 304)) = c * 1 + 0;
}

static void op_le_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_le_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 13..16], [8, 8, 80..83], [8, 0, 241..244], [8, 0, 251..254], [8, 0, 264..267], [8, 0, 277..280], [1, 0, 293..296]], "b"=>[[1, 0, 298..301]], "c"=>[[1, 0, 304..307]]} */
static uint8_t op_gt[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x46, 0x18,                   /*6: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*a: mov    0xab0800(%rax),%rcx */
0x48, 0x83, 0xf9, 0x07,                   /*11: cmp    $0x7,%rcx */
0x73, 0x13,                               /*15: jae    2a <op_gt+0x2a> */
0xba, 0x55, 0x00, 0x00, 0x00,             /*17: mov    $0x55,%edx */
0x0f, 0xa3, 0xca,                         /*1c: bt     %ecx,%edx */
0x73, 0x09,                               /*1f: jae    2a <op_gt+0x2a> */
0x8b, 0x34, 0x8d, 0x00, 0x00, 0x00, 0x00, /*21: mov    0x0(,%rcx,4),%esi */
0xeb, 0x1a,                               /*28: jmp    44 <op_gt+0x44> */
0xbe, 0x03, 0x00, 0x00, 0x00,             /*2a: mov    $0x3,%esi */
0xf6, 0xc1, 0x01,                         /*2f: test   $0x1,%cl */
0x75, 0x10,                               /*32: jne    44 <op_gt+0x44> */
0x0f, 0xb6, 0xd1,                         /*34: movzbl %cl,%edx */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*37: mov    $0x4,%esi */
0x83, 0xfa, 0x0e,                         /*3c: cmp    $0xe,%edx */
0x74, 0x03,                               /*3f: je     44 <op_gt+0x44> */
0x0f, 0xb6, 0x31,                         /*41: movzbl (%rcx),%esi */
0xc1, 0xe6, 0x08,                         /*44: shl    $0x8,%esi */
0x81, 0xe6, 0x00, 0xff, 0xff, 0x00,       /*47: and    $0xffff00,%esi */
0x48, 0x8b, 0x90, 0x08, 0x08, 0xab, 0x00, /*4d: mov    0xab0808(%rax),%rdx */
0x48, 0x83, 0xfa, 0x07,                   /*54: cmp    $0x7,%rdx */
0x73, 0x13,                               /*58: jae    6d <op_gt+0x6d> */
0xbf, 0x55, 0x00, 0x00, 0x00,             /*5a: mov    $0x55,%edi */
0x0f, 0xa3, 0xd7,                         /*5f: bt     %edx,%edi */
0x73, 0x09,                               /*62: jae    6d <op_gt+0x6d> */
0x8b, 0x3c, 0x95, 0x00, 0x00, 0x00, 0x00, /*64: mov    0x0(,%rdx,4),%edi */
0xeb, 0x1a,                               /*6b: jmp    87 <op_gt+0x87> */
0xbf, 0x03, 0x00, 0x00, 0x00,             /*6d: mov    $0x3,%edi */
0xf6, 0xc2, 0x01,                         /*72: test   $0x1,%dl */
0x75, 0x10,                               /*75: jne    87 <op_gt+0x87> */
0x0f, 0xb6, 0xda,                         /*77: movzbl %dl,%ebx */
0xbf, 0x04, 0x00, 0x00, 0x00,             /*7a: mov    $0x4,%edi */
0x83, 0xfb, 0x0e,                         /*7f: cmp    $0xe,%ebx */
0x74, 0x03,                               /*82: je     87 <op_gt+0x87> */
0x0f, 0xb6, 0x3a,                         /*84: movzbl (%rdx),%edi */
0x40, 0x0f, 0xb6, 0xff,                   /*87: movzbl %dil,%edi */
0x09, 0xf7,                               /*8b: or     %esi,%edi */
0x81, 0xff, 0x02, 0x06, 0x00, 0x00,       /*8d: cmp    $0x602,%edi */
0x7f, 0x13,                               /*93: jg     a8 <op_gt+0xa8> */
0x81, 0xff, 0x03, 0x03, 0x00, 0x00,       /*95: cmp    $0x303,%edi */
0x75, 0x27,                               /*9b: jne    c4 <op_gt+0xc4> */
0xd1, 0xf9,                               /*9d: sar    %ecx */
0xd1, 0xfa,                               /*9f: sar    %edx */
0x39, 0xd1,                               /*a1: cmp    %edx,%ecx */
0x0f, 0x9f, 0xc1,                         /*a3: setg   %cl */
0xeb, 0x41,                               /*a6: jmp    e9 <op_gt+0xe9> */
0x81, 0xff, 0x03, 0x06, 0x00, 0x00,       /*a8: cmp    $0x603,%edi */
0x75, 0x24,                               /*ae: jne    d4 <op_gt+0xd4> */
0xf2, 0x0f, 0x10, 0x41, 0x18,             /*b0: movsd  0x18(%rcx),%xmm0 */
0xd1, 0xfa,                               /*b5: sar    %edx */
0xf2, 0x0f, 0x2a, 0xca,                   /*b7: cvtsi2sd %edx,%xmm1 */
0x66, 0x0f, 0x2e, 0xc1,                   /*bb: ucomisd %xmm1,%xmm0 */
0x0f, 0x97, 0xc1,                         /*bf: seta   %cl */
0xeb, 0x25,                               /*c2: jmp    e9 <op_gt+0xe9> */
0x81, 0xff, 0x06, 0x03, 0x00, 0x00,       /*c4: cmp    $0x306,%edi */
0x75, 0x53,                               /*ca: jne    11f <op_gt+0x11f> */
0xd1, 0xf9,                               /*cc: sar    %ecx */
0xf2, 0x0f, 0x2a, 0xc1,                   /*ce: cvtsi2sd %ecx,%xmm0 */
0xeb, 0x0d,                               /*d2: jmp    e1 <op_gt+0xe1> */
0x81, 0xff, 0x06, 0x06, 0x00, 0x00,       /*d4: cmp    $0x606,%edi */
0x75, 0x43,                               /*da: jne    11f <op_gt+0x11f> */
0xf2, 0x0f, 0x10, 0x41, 0x18,             /*dc: movsd  0x18(%rcx),%xmm0 */
0x66, 0x0f, 0x2e, 0x42, 0x18,             /*e1: ucomisd 0x18(%rdx),%xmm0 */
0x0f, 0x97, 0xc1,                         /*e6: seta   %cl */
0x0f, 0xb6, 0xc9,                         /*e9: movzbl %cl,%ecx */
0x85, 0xc9,                               /*ec: test   %ecx,%ecx */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*ee: movq   $0x0,0xab0800(%rax) */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*f9: movl   $0x2,0xab0800(%rax) */
0x74, 0x0d,                               /*103: je     112 <op_gt+0x112> */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*105: movq   $0x4,0xab0800(%rax) */
0xeb, 0x2c,                               /*110: jmp    13e <op_gt+0x13e> */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*112: movq   $0x2,0xab0800(%rax) */
0xeb, 0x1f,                               /*11d: jmp    13e <op_gt+0x13e> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*11f: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*124: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*129: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*12e: mov    $0xcd0000,%r8d */
0x4c, 0x89, 0xf7,                         /*134: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xd8, 0x01, 0x00, 0x00, /*137: callq  *0x1d8(%r14) */
0x4c, 0x89, 0xf7,                         /*13e: mov    %r14,%rdi */
0x5b,                                     /*141: pop    %rbx */
0x41, 0x5e,                               /*142: pop    %r14 */

};

static void op_gt_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = a * 8 + 0;
  *((int32_t *)(op + 80)) = a * 8 + 8;
  *((int32_t *)(op + 241)) = a * 8 + 0;
  *((int32_t *)(op + 251)) = a * 8 + 0;
  *((int32_t *)(op + 264)) = a * 8 + 0;
  *((int32_t *)(op + 277)) = a * 8 + 0;
  *((int32_t *)(op + 293)) = a * 1 + 0;
  *((int32_t *)(op + 298)) = b * 1 + 0;
  *((int32_t *)(op + 304)) = c * 1 + 0;
}

static void op_gt_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_gt_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 13..16], [8, 8, 80..83], [8, 0, 241..244], [8, 0, 251..254], [8, 0, 264..267], [8, 0, 277..280], [1, 0, 293..296]], "b"=>[[1, 0, 298..301]], "c"=>[[1, 0, 304..307]]} */
static uint8_t op_ge[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x49, 0x89, 0xfe,                         /*3: mov    %rdi,%r14 */
0x49, 0x8b, 0x46, 0x18,                   /*6: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*a: mov    0xab0800(%rax),%rcx */
0x48, 0x83, 0xf9, 0x07,                   /*11: cmp    $0x7,%rcx */
0x73, 0x13,                               /*15: jae    2a <op_ge+0x2a> */
0xba, 0x55, 0x00, 0x00, 0x00,             /*17: mov    $0x55,%edx */
0x0f, 0xa3, 0xca,                         /*1c: bt     %ecx,%edx */
0x73, 0x09,                               /*1f: jae    2a <op_ge+0x2a> */
0x8b, 0x34, 0x8d, 0x00, 0x00, 0x00, 0x00, /*21: mov    0x0(,%rcx,4),%esi */
0xeb, 0x1a,                               /*28: jmp    44 <op_ge+0x44> */
0xbe, 0x03, 0x00, 0x00, 0x00,             /*2a: mov    $0x3,%esi */
0xf6, 0xc1, 0x01,                         /*2f: test   $0x1,%cl */
0x75, 0x10,                               /*32: jne    44 <op_ge+0x44> */
0x0f, 0xb6, 0xd1,                         /*34: movzbl %cl,%edx */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*37: mov    $0x4,%esi */
0x83, 0xfa, 0x0e,                         /*3c: cmp    $0xe,%edx */
0x74, 0x03,                               /*3f: je     44 <op_ge+0x44> */
0x0f, 0xb6, 0x31,                         /*41: movzbl (%rcx),%esi */
0xc1, 0xe6, 0x08,                         /*44: shl    $0x8,%esi */
0x81, 0xe6, 0x00, 0xff, 0xff, 0x00,       /*47: and    $0xffff00,%esi */
0x48, 0x8b, 0x90, 0x08, 0x08, 0xab, 0x00, /*4d: mov    0xab0808(%rax),%rdx */
0x48, 0x83, 0xfa, 0x07,                   /*54: cmp    $0x7,%rdx */
0x73, 0x13,                               /*58: jae    6d <op_ge+0x6d> */
0xbf, 0x55, 0x00, 0x00, 0x00,             /*5a: mov    $0x55,%edi */
0x0f, 0xa3, 0xd7,                         /*5f: bt     %edx,%edi */
0x73, 0x09,                               /*62: jae    6d <op_ge+0x6d> */
0x8b, 0x3c, 0x95, 0x00, 0x00, 0x00, 0x00, /*64: mov    0x0(,%rdx,4),%edi */
0xeb, 0x1a,                               /*6b: jmp    87 <op_ge+0x87> */
0xbf, 0x03, 0x00, 0x00, 0x00,             /*6d: mov    $0x3,%edi */
0xf6, 0xc2, 0x01,                         /*72: test   $0x1,%dl */
0x75, 0x10,                               /*75: jne    87 <op_ge+0x87> */
0x0f, 0xb6, 0xda,                         /*77: movzbl %dl,%ebx */
0xbf, 0x04, 0x00, 0x00, 0x00,             /*7a: mov    $0x4,%edi */
0x83, 0xfb, 0x0e,                         /*7f: cmp    $0xe,%ebx */
0x74, 0x03,                               /*82: je     87 <op_ge+0x87> */
0x0f, 0xb6, 0x3a,                         /*84: movzbl (%rdx),%edi */
0x40, 0x0f, 0xb6, 0xff,                   /*87: movzbl %dil,%edi */
0x09, 0xf7,                               /*8b: or     %esi,%edi */
0x81, 0xff, 0x02, 0x06, 0x00, 0x00,       /*8d: cmp    $0x602,%edi */
0x7f, 0x13,                               /*93: jg     a8 <op_ge+0xa8> */
0x81, 0xff, 0x03, 0x03, 0x00, 0x00,       /*95: cmp    $0x303,%edi */
0x75, 0x27,                               /*9b: jne    c4 <op_ge+0xc4> */
0xd1, 0xf9,                               /*9d: sar    %ecx */
0xd1, 0xfa,                               /*9f: sar    %edx */
0x39, 0xd1,                               /*a1: cmp    %edx,%ecx */
0x0f, 0x9d, 0xc1,                         /*a3: setge  %cl */
0xeb, 0x41,                               /*a6: jmp    e9 <op_ge+0xe9> */
0x81, 0xff, 0x03, 0x06, 0x00, 0x00,       /*a8: cmp    $0x603,%edi */
0x75, 0x24,                               /*ae: jne    d4 <op_ge+0xd4> */
0xf2, 0x0f, 0x10, 0x41, 0x18,             /*b0: movsd  0x18(%rcx),%xmm0 */
0xd1, 0xfa,                               /*b5: sar    %edx */
0xf2, 0x0f, 0x2a, 0xca,                   /*b7: cvtsi2sd %edx,%xmm1 */
0x66, 0x0f, 0x2e, 0xc1,                   /*bb: ucomisd %xmm1,%xmm0 */
0x0f, 0x93, 0xc1,                         /*bf: setae  %cl */
0xeb, 0x25,                               /*c2: jmp    e9 <op_ge+0xe9> */
0x81, 0xff, 0x06, 0x03, 0x00, 0x00,       /*c4: cmp    $0x306,%edi */
0x75, 0x53,                               /*ca: jne    11f <op_ge+0x11f> */
0xd1, 0xf9,                               /*cc: sar    %ecx */
0xf2, 0x0f, 0x2a, 0xc1,                   /*ce: cvtsi2sd %ecx,%xmm0 */
0xeb, 0x0d,                               /*d2: jmp    e1 <op_ge+0xe1> */
0x81, 0xff, 0x06, 0x06, 0x00, 0x00,       /*d4: cmp    $0x606,%edi */
0x75, 0x43,                               /*da: jne    11f <op_ge+0x11f> */
0xf2, 0x0f, 0x10, 0x41, 0x18,             /*dc: movsd  0x18(%rcx),%xmm0 */
0x66, 0x0f, 0x2e, 0x42, 0x18,             /*e1: ucomisd 0x18(%rdx),%xmm0 */
0x0f, 0x93, 0xc1,                         /*e6: setae  %cl */
0x0f, 0xb6, 0xc9,                         /*e9: movzbl %cl,%ecx */
0x85, 0xc9,                               /*ec: test   %ecx,%ecx */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*ee: movq   $0x0,0xab0800(%rax) */
0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*f9: movl   $0x2,0xab0800(%rax) */
0x74, 0x0d,                               /*103: je     112 <op_ge+0x112> */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x04, 0x00, 0x00, 0x00,/*105: movq   $0x4,0xab0800(%rax) */
0xeb, 0x2c,                               /*110: jmp    13e <op_ge+0x13e> */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x02, 0x00, 0x00, 0x00,/*112: movq   $0x2,0xab0800(%rax) */
0xeb, 0x1f,                               /*11d: jmp    13e <op_ge+0x13e> */
0xbe, 0x20, 0x00, 0x00, 0x00,             /*11f: mov    $0x20,%esi */
0xba, 0x00, 0x00, 0xab, 0x00,             /*124: mov    $0xab0000,%edx */
0xb9, 0x00, 0x00, 0xbc, 0x00,             /*129: mov    $0xbc0000,%ecx */
0x41, 0xb8, 0x00, 0x00, 0xcd, 0x00,       /*12e: mov    $0xcd0000,%r8d */
0x4c, 0x89, 0xf7,                         /*134: mov    %r14,%rdi */
0x41, 0xff, 0x96, 0xd8, 0x01, 0x00, 0x00, /*137: callq  *0x1d8(%r14) */
0x4c, 0x89, 0xf7,                         /*13e: mov    %r14,%rdi */
0x5b,                                     /*141: pop    %rbx */
0x41, 0x5e,                               /*142: pop    %r14 */

};

static void op_ge_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = a * 8 + 0;
  *((int32_t *)(op + 80)) = a * 8 + 8;
  *((int32_t *)(op + 241)) = a * 8 + 0;
  *((int32_t *)(op + 251)) = a * 8 + 0;
  *((int32_t *)(op + 264)) = a * 8 + 0;
  *((int32_t *)(op + 277)) = a * 8 + 0;
  *((int32_t *)(op + 293)) = a * 1 + 0;
  *((int32_t *)(op + 298)) = b * 1 + 0;
  *((int32_t *)(op + 304)) = c * 1 + 0;
}

static void op_ge_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_ge_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[8, 0, 17..20]], "c"=>[[1, 0, 22..25]], "a"=>[[8, 0, 35..38]]} */
static uint8_t op_array[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8d, 0x96, 0x00, 0x08, 0xbc, 0x00, /*e: lea    0xbc0800(%r14),%rdx */
0xbe, 0x00, 0x00, 0xcd, 0x00,             /*15: mov    $0xcd0000,%esi */
0xff, 0x93, 0x20, 0x02, 0x00, 0x00,       /*1a: callq  *0x220(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*20: mov    %rax,0xab0800(%r14) */
0x8b, 0x43, 0x48,                         /*27: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*2a: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*2e: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*34: mov    %rbx,%rdi */
0x5b,                                     /*37: pop    %rbx */
0x41, 0x5e,                               /*38: pop    %r14 */

};

static void op_array_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 8 + 0;
  *((int32_t *)(op + 22)) = c * 1 + 0;
  *((int32_t *)(op + 35)) = a * 8 + 0;
}

static void op_array_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_array_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[8, 0, 19..22]], "a"=>[[8, 0, 35..38]]} */
static uint8_t op_arycat[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
0x4c, 0x8b, 0x7b, 0x18,                   /*8: mov    0x18(%rbx),%r15 */
0x4c, 0x8b, 0x73, 0x50,                   /*c: mov    0x50(%rbx),%r14 */
0x49, 0x8b, 0xb7, 0x00, 0x08, 0xbc, 0x00, /*10: mov    0xbc0800(%r15),%rsi */
0x4c, 0x89, 0xf7,                         /*17: mov    %r14,%rdi */
0xff, 0x93, 0xf0, 0x00, 0x00, 0x00,       /*1a: callq  *0xf0(%rbx) */
0x49, 0x8b, 0xb7, 0x00, 0x08, 0xab, 0x00, /*20: mov    0xab0800(%r15),%rsi */
0x4c, 0x89, 0xf7,                         /*27: mov    %r14,%rdi */
0x48, 0x89, 0xc2,                         /*2a: mov    %rax,%rdx */
0xff, 0x93, 0x88, 0x01, 0x00, 0x00,       /*2d: callq  *0x188(%rbx) */
0x8b, 0x43, 0x48,                         /*33: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*36: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*3a: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*40: mov    %rbx,%rdi */
0x5b,                                     /*43: pop    %rbx */
0x41, 0x5e,                               /*44: pop    %r14 */
0x41, 0x5f,                               /*46: pop    %r15 */

};

static void op_arycat_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = b * 8 + 0;
  *((int32_t *)(op + 35)) = a * 8 + 0;
}

static void op_arycat_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_arycat_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18]], "b"=>[[8, 0, 22..25]]} */
static uint8_t op_arypush[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*8: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rsi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xbc, 0x00, /*13: mov    0xbc0800(%rax),%rdx */
0xff, 0x93, 0x40, 0x02, 0x00, 0x00,       /*1a: callq  *0x240(%rbx) */
0x48, 0x89, 0xdf,                         /*20: mov    %rbx,%rdi */
0x5b,                                     /*23: pop    %rbx */

};

static void op_arypush_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
  *((int32_t *)(op + 22)) = b * 8 + 0;
}

static void op_arypush_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_arypush_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[8, 0, 13..16]], "c"=>[[1, 0, 62..65]], "a"=>[[8, 0, 75..78], [8, 0, 84..87], [8, 0, 98..101], [8, 0, 110..113]]} */
static uint8_t op_aref[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x49, 0x8b, 0xb6, 0x00, 0x08, 0xbc, 0x00, /*a: mov    0xbc0800(%r14),%rsi */
0x48, 0x83, 0xfe, 0x06,                   /*11: cmp    $0x6,%rsi */
0x77, 0x0b,                               /*15: ja     22 <op_aref+0x22> */
0xb8, 0x55, 0x00, 0x00, 0x00,             /*17: mov    $0x55,%eax */
0x48, 0x0f, 0xa3, 0xf0,                   /*1c: bt     %rsi,%rax */
0x72, 0x2f,                               /*20: jb     51 <op_aref+0x51> */
0x40, 0xf6, 0xc6, 0x01,                   /*22: test   $0x1,%sil */
0x75, 0x29,                               /*26: jne    51 <op_aref+0x51> */
0x40, 0x0f, 0xb6, 0xc6,                   /*28: movzbl %sil,%eax */
0x83, 0xf8, 0x0e,                         /*2c: cmp    $0xe,%eax */
0x74, 0x20,                               /*2f: je     51 <op_aref+0x51> */
0x0f, 0xb6, 0x06,                         /*31: movzbl (%rsi),%eax */
0x83, 0xf8, 0x0e,                         /*34: cmp    $0xe,%eax */
0x75, 0x18,                               /*37: jne    51 <op_aref+0x51> */
0x48, 0x8b, 0x7b, 0x50,                   /*39: mov    0x50(%rbx),%rdi */
0xba, 0x00, 0x00, 0xcd, 0x00,             /*3d: mov    $0xcd0000,%edx */
0xff, 0x93, 0x00, 0x02, 0x00, 0x00,       /*42: callq  *0x200(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*48: mov    %rax,0xab0800(%r14) */
0xeb, 0x25,                               /*4f: jmp    76 <op_aref+0x76> */
0x49, 0xc7, 0x86, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*51: movq   $0x0,0xab0800(%r14) */
0x48, 0x8b, 0x43, 0x18,                   /*5c: mov    0x18(%rbx),%rax */
0x83, 0xa0, 0x00, 0x08, 0xab, 0x00, 0x01, /*60: andl   $0x1,0xab0800(%rax) */
0x48, 0x8b, 0x43, 0x18,                   /*67: mov    0x18(%rbx),%rax */
0x48, 0xc7, 0x80, 0x00, 0x08, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00,/*6b: movq   $0x0,0xab0800(%rax) */
0x48, 0x89, 0xdf,                         /*76: mov    %rbx,%rdi */
0x5b,                                     /*79: pop    %rbx */
0x41, 0x5e,                               /*7a: pop    %r14 */

};

static void op_aref_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = b * 8 + 0;
  *((int32_t *)(op + 62)) = c * 1 + 0;
  *((int32_t *)(op + 75)) = a * 8 + 0;
  *((int32_t *)(op + 84)) = a * 8 + 0;
  *((int32_t *)(op + 98)) = a * 8 + 0;
  *((int32_t *)(op + 110)) = a * 8 + 0;
}

static void op_aref_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_aref_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[8, 0, 15..18]], "a"=>[[8, 0, 22..25]], "c"=>[[1, 0, 27..30]]} */
static uint8_t op_aset[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*8: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*c: mov    0xbc0800(%rax),%rsi */
0x48, 0x8b, 0x88, 0x00, 0x08, 0xab, 0x00, /*13: mov    0xab0800(%rax),%rcx */
0xba, 0x00, 0x00, 0xcd, 0x00,             /*1a: mov    $0xcd0000,%edx */
0xff, 0x93, 0x30, 0x02, 0x00, 0x00,       /*1f: callq  *0x230(%rbx) */
0x48, 0x89, 0xdf,                         /*25: mov    %rbx,%rdi */
0x5b,                                     /*28: pop    %rbx */

};

static void op_aset_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = b * 8 + 0;
  *((int32_t *)(op + 22)) = a * 8 + 0;
  *((int32_t *)(op + 27)) = c * 1 + 0;
}

static void op_aset_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_aset_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 20..23], [8, 0, 122..125], [8, 0, 204..207], [8, 0, 282..285], [1, 1, 375..378]], "b"=>[[8, 0, 109..112], [1, 1, 289..292]], "c"=>[[1, 0, 176..179], [1, 0, 257..260], [1, 0, 362..365]]} */
static uint8_t op_apost[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x41, 0x55,                               /*5: push   %r13 */
0x41, 0x54,                               /*7: push   %r12 */
0x53,                                     /*9: push   %rbx */
0x48, 0x89, 0xfd,                         /*a: mov    %rdi,%rbp */
0x4c, 0x8b, 0x7d, 0x18,                   /*d: mov    0x18(%rbp),%r15 */
0x4d, 0x8b, 0xb7, 0x00, 0x08, 0xab, 0x00, /*11: mov    0xab0800(%r15),%r14 */
0x49, 0x83, 0xfe, 0x06,                   /*18: cmp    $0x6,%r14 */
0x77, 0x0f,                               /*1c: ja     2d <op_apost+0x2d> */
0xb8, 0x55, 0x00, 0x00, 0x00,             /*1e: mov    $0x55,%eax */
0x4c, 0x0f, 0xa3, 0xf0,                   /*23: bt     %r14,%rax */
0x0f, 0x82, 0x8e, 0x00, 0x00, 0x00,       /*27: jb     bb <op_apost+0xbb> */
0x41, 0xf6, 0xc6, 0x01,                   /*2d: test   $0x1,%r14b */
0x0f, 0x85, 0x84, 0x00, 0x00, 0x00,       /*31: jne    bb <op_apost+0xbb> */
0x41, 0x0f, 0xb6, 0xc6,                   /*37: movzbl %r14b,%eax */
0x83, 0xf8, 0x0e,                         /*3b: cmp    $0xe,%eax */
0x74, 0x7b,                               /*3e: je     bb <op_apost+0xbb> */
0x41, 0x0f, 0xb6, 0x06,                   /*40: movzbl (%r14),%eax */
0x83, 0xf8, 0x0e,                         /*44: cmp    $0xe,%eax */
0x75, 0x72,                               /*47: jne    bb <op_apost+0xbb> */
0x45, 0x8b, 0x66, 0x18,                   /*49: mov    0x18(%r14),%r12d */
0x48, 0x8b, 0x7d, 0x50,                   /*4d: mov    0x50(%rbp),%rdi */
0x41, 0x81, 0xfc, 0x01, 0x00, 0x89, 0x01, /*51: cmp    $0x1890001,%r12d */
0x0f, 0x8c, 0xae, 0x00, 0x00, 0x00,       /*58: jl     10c <op_apost+0x10c> */
0x41, 0x8d, 0xb4, 0x24, 0x00, 0x00, 0x77, 0xfe,/*5e: lea    -0x1890000(%r12),%esi */
0x49, 0x8b, 0x56, 0x28,                   /*66: mov    0x28(%r14),%rdx */
0x48, 0x81, 0xc2, 0x00, 0x08, 0xbc, 0x00, /*6a: add    $0xbc0800,%rdx */
0xff, 0x95, 0x20, 0x02, 0x00, 0x00,       /*71: callq  *0x220(%rbp) */
0x49, 0x89, 0x87, 0x00, 0x08, 0xab, 0x00, /*77: mov    %rax,0xab0800(%r15) */
0x41, 0x81, 0xc4, 0x00, 0x00, 0x33, 0xff, /*7e: add    $0xff330000,%r12d */
0x31, 0xc0,                               /*85: xor    %eax,%eax */
0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*87: nopw   0x0(%rax,%rax,1) */
0x48, 0x8b, 0x4d, 0x18,                   /*90: mov    0x18(%rbp),%rcx */
0x41, 0x8d, 0x14, 0x04,                   /*94: lea    (%r12,%rax,1),%edx */
0x48, 0x63, 0xd2,                         /*98: movslq %edx,%rdx */
0x49, 0x8b, 0x76, 0x28,                   /*9b: mov    0x28(%r14),%rsi */
0x48, 0x8b, 0x14, 0xd6,                   /*9f: mov    (%rsi,%rdx,8),%rdx */
0x48, 0x89, 0x94, 0xc1, 0x08, 0x00, 0x58, 0x05,/*a3: mov    %rdx,0x5580008(%rcx,%rax,8) */
0x48, 0xff, 0xc0,                         /*ab: inc    %rax */
0x48, 0x3d, 0x00, 0x00, 0xcd, 0x00,       /*ae: cmp    $0xcd0000,%rax */
0x75, 0xda,                               /*b4: jne    90 <op_apost+0x90> */
0xe9, 0xec, 0x00, 0x00, 0x00,             /*b6: jmpq   1a7 <op_apost+0x1a7> */
0x48, 0x8b, 0x7d, 0x50,                   /*bb: mov    0x50(%rbp),%rdi */
0x31, 0xdb,                               /*bf: xor    %ebx,%ebx */
0x31, 0xf6,                               /*c1: xor    %esi,%esi */
0xff, 0x95, 0xd0, 0x00, 0x00, 0x00,       /*c3: callq  *0xd0(%rbp) */
0x49, 0x89, 0x87, 0x00, 0x08, 0xab, 0x00, /*c9: mov    %rax,0xab0800(%r15) */
0x48, 0x8b, 0x45, 0x18,                   /*d0: mov    0x18(%rbp),%rax */
0x48, 0xc7, 0x84, 0xd8, 0x08, 0x00, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*d4: movq   $0x0,0x5580008(%rax,%rbx,8) */
0x48, 0x8b, 0x45, 0x18,                   /*e0: mov    0x18(%rbp),%rax */
0x83, 0xa4, 0xd8, 0x08, 0x00, 0x58, 0x05, 0x01,/*e4: andl   $0x1,0x5580008(%rax,%rbx,8) */
0x48, 0x8b, 0x45, 0x18,                   /*ec: mov    0x18(%rbp),%rax */
0x48, 0xc7, 0x84, 0xd8, 0x08, 0x00, 0x58, 0x05, 0x00, 0x00, 0x00, 0x00,/*f0: movq   $0x0,0x5580008(%rax,%rbx,8) */
0x48, 0xff, 0xc3,                         /*fc: inc    %rbx */
0x81, 0xfb, 0x00, 0x00, 0xcd, 0x00,       /*ff: cmp    $0xcd0000,%ebx */
0x75, 0xc9,                               /*105: jne    d0 <op_apost+0xd0> */
0xe9, 0x9b, 0x00, 0x00, 0x00,             /*107: jmpq   1a7 <op_apost+0x1a7> */
0x45, 0x31, 0xed,                         /*10c: xor    %r13d,%r13d */
0x31, 0xf6,                               /*10f: xor    %esi,%esi */
0xff, 0x95, 0xd0, 0x00, 0x00, 0x00,       /*111: callq  *0xd0(%rbp) */
0x49, 0x89, 0x87, 0x00, 0x08, 0xab, 0x00, /*117: mov    %rax,0xab0800(%r15) */
0x41, 0x81, 0xfc, 0x01, 0x00, 0xbc, 0x00, /*11e: cmp    $0xbc0001,%r12d */
0x7c, 0x42,                               /*125: jl     169 <op_apost+0x169> */
0x45, 0x89, 0xe5,                         /*127: mov    %r12d,%r13d */
0x41, 0x81, 0xc5, 0x00, 0x00, 0x44, 0xff, /*12a: add    $0xff440000,%r13d */
0x31, 0xc0,                               /*131: xor    %eax,%eax */
0x66, 0x66, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*133: data16 data16 data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x4d, 0x18,                   /*140: mov    0x18(%rbp),%rcx */
0x49, 0x8b, 0x56, 0x28,                   /*144: mov    0x28(%r14),%rdx */
0x48, 0x8b, 0x94, 0xc2, 0x00, 0x00, 0xe0, 0x05,/*148: mov    0x5e00000(%rdx,%rax,8),%rdx */
0x48, 0x89, 0x94, 0xc1, 0x08, 0x00, 0x58, 0x05,/*150: mov    %rdx,0x5580008(%rcx,%rax,8) */
0x48, 0xff, 0xc0,                         /*158: inc    %rax */
0x41, 0x39, 0xc5,                         /*15b: cmp    %eax,%r13d */
0x75, 0xe0,                               /*15e: jne    140 <op_apost+0x140> */
0x41, 0x81, 0xfd, 0xff, 0xff, 0xcc, 0x00, /*160: cmp    $0xccffff,%r13d */
0x7f, 0x3e,                               /*167: jg     1a7 <op_apost+0x1a7> */
0xb8, 0x00, 0x00, 0xcd, 0x00,             /*169: mov    $0xcd0000,%eax */
0x44, 0x29, 0xe8,                         /*16e: sub    %r13d,%eax */
0x49, 0x63, 0xcd,                         /*171: movslq %r13d,%rcx */
0x48, 0x81, 0xc1, 0x01, 0x00, 0xab, 0x00, /*174: add    $0xab0001,%rcx */
0x0f, 0x1f, 0x44, 0x00, 0x00,             /*17b: nopl   0x0(%rax,%rax,1) */
0x48, 0x8b, 0x55, 0x18,                   /*180: mov    0x18(%rbp),%rdx */
0x48, 0xc7, 0x04, 0xca, 0x00, 0x00, 0x00, 0x00,/*184: movq   $0x0,(%rdx,%rcx,8) */
0x48, 0x8b, 0x55, 0x18,                   /*18c: mov    0x18(%rbp),%rdx */
0x83, 0x24, 0xca, 0x01,                   /*190: andl   $0x1,(%rdx,%rcx,8) */
0x48, 0x8b, 0x55, 0x18,                   /*194: mov    0x18(%rbp),%rdx */
0x48, 0xc7, 0x04, 0xca, 0x00, 0x00, 0x00, 0x00,/*198: movq   $0x0,(%rdx,%rcx,8) */
0x48, 0xff, 0xc1,                         /*1a0: inc    %rcx */
0xff, 0xc8,                               /*1a3: dec    %eax */
0x75, 0xd9,                               /*1a5: jne    180 <op_apost+0x180> */
0x8b, 0x45, 0x48,                         /*1a7: mov    0x48(%rbp),%eax */
0x48, 0x8b, 0x4d, 0x50,                   /*1aa: mov    0x50(%rbp),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*1ae: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xef,                         /*1b4: mov    %rbp,%rdi */
0x5b,                                     /*1b7: pop    %rbx */
0x41, 0x5c,                               /*1b8: pop    %r12 */
0x41, 0x5d,                               /*1ba: pop    %r13 */
0x41, 0x5e,                               /*1bc: pop    %r14 */
0x41, 0x5f,                               /*1be: pop    %r15 */
0x5d,                                     /*1c0: pop    %rbp */

};

static void op_apost_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 20)) = a * 8 + 0;
  *((int32_t *)(op + 122)) = a * 8 + 0;
  *((int32_t *)(op + 204)) = a * 8 + 0;
  *((int32_t *)(op + 282)) = a * 8 + 0;
  *((int32_t *)(op + 375)) = a * 1 + 1;
  *((int32_t *)(op + 109)) = b * 8 + 0;
  *((int32_t *)(op + 289)) = b * 1 + 1;
  *((int32_t *)(op + 176)) = c * 1 + 0;
  *((int32_t *)(op + 257)) = c * 1 + 0;
  *((int32_t *)(op + 362)) = c * 1 + 0;
}

static void op_apost_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_apost_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"b"=>[[8, 0, 21..24]], "a"=>[[8, 0, 34..37]]} */
static uint8_t op_string[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*6: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0x73, 0x18,                   /*a: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x43, 0x20,                   /*e: mov    0x20(%rbx),%rax */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*12: mov    0xbc0800(%rax),%rsi */
0xff, 0x93, 0xd0, 0x01, 0x00, 0x00,       /*19: callq  *0x1d0(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*1f: mov    %rax,0xab0800(%r14) */
0x8b, 0x43, 0x48,                         /*26: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*29: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*2d: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*33: mov    %rbx,%rdi */
0x5b,                                     /*36: pop    %rbx */
0x41, 0x5e,                               /*37: pop    %r14 */

};

static void op_string_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = b * 8 + 0;
  *((int32_t *)(op + 34)) = a * 8 + 0;
}

static void op_string_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_string_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 15..18]], "b"=>[[8, 0, 22..25]]} */
static uint8_t op_strcat[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*8: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*c: mov    0xab0800(%rax),%rsi */
0x48, 0x8b, 0x90, 0x00, 0x08, 0xbc, 0x00, /*13: mov    0xbc0800(%rax),%rdx */
0xff, 0x93, 0xf0, 0x01, 0x00, 0x00,       /*1a: callq  *0x1f0(%rbx) */
0x48, 0x89, 0xdf,                         /*20: mov    %rbx,%rdi */
0x5b,                                     /*23: pop    %rbx */

};

static void op_strcat_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 15)) = a * 8 + 0;
  *((int32_t *)(op + 22)) = b * 8 + 0;
}

static void op_strcat_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_strcat_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[1, 0, 13..16]], "c"=>[[1, 0, 20..23]], "a"=>[[8, 0, 125..128]]} */
static uint8_t op_hash[] = {
0x55,                                     /*0: push   %rbp */
0x41, 0x57,                               /*1: push   %r15 */
0x41, 0x56,                               /*3: push   %r14 */
0x53,                                     /*5: push   %rbx */
0x48, 0x89, 0xfb,                         /*6: mov    %rdi,%rbx */
0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0xbc, 0x00,/*9: movl   $0xbc0000,0x4(%rsp) */
0xc7, 0x04, 0x24, 0x00, 0x00, 0xcd, 0x00, /*11: movl   $0xcd0000,(%rsp) */
0x8b, 0x44, 0x24, 0x04,                   /*18: mov    0x4(%rsp),%eax */
0x8b, 0x0c, 0x24,                         /*1c: mov    (%rsp),%ecx */
0x44, 0x8d, 0x3c, 0x48,                   /*1f: lea    (%rax,%rcx,2),%r15d */
0x48, 0x8b, 0x7b, 0x50,                   /*23: mov    0x50(%rbx),%rdi */
0x8b, 0x34, 0x24,                         /*27: mov    (%rsp),%esi */
0xff, 0x93, 0x60, 0x01, 0x00, 0x00,       /*2a: callq  *0x160(%rbx) */
0x49, 0x89, 0xc6,                         /*30: mov    %rax,%r14 */
0xeb, 0x38,                               /*33: jmp    6d <op_hash+0x6d> */
0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,/*35: data16 nopw %cs:0x0(%rax,%rax,1) */
0x48, 0x8b, 0x7b, 0x50,                   /*40: mov    0x50(%rbx),%rdi */
0x48, 0x63, 0x44, 0x24, 0x04,             /*44: movslq 0x4(%rsp),%rax */
0x48, 0x8b, 0x4b, 0x18,                   /*49: mov    0x18(%rbx),%rcx */
0x48, 0x63, 0x74, 0x24, 0x04,             /*4d: movslq 0x4(%rsp),%rsi */
0x48, 0x8b, 0x6b, 0x18,                   /*52: mov    0x18(%rbx),%rbp */
0x48, 0x8b, 0x14, 0xc1,                   /*56: mov    (%rcx,%rax,8),%rdx */
0x48, 0x8b, 0x4c, 0xf5, 0x08,             /*5a: mov    0x8(%rbp,%rsi,8),%rcx */
0x4c, 0x89, 0xf6,                         /*5f: mov    %r14,%rsi */
0xff, 0x93, 0x98, 0x01, 0x00, 0x00,       /*62: callq  *0x198(%rbx) */
0x83, 0x44, 0x24, 0x04, 0x02,             /*68: addl   $0x2,0x4(%rsp) */
0x8b, 0x44, 0x24, 0x04,                   /*6d: mov    0x4(%rsp),%eax */
0x44, 0x39, 0xf8,                         /*71: cmp    %r15d,%eax */
0x7c, 0xca,                               /*74: jl     40 <op_hash+0x40> */
0x48, 0x8b, 0x43, 0x18,                   /*76: mov    0x18(%rbx),%rax */
0x4c, 0x89, 0xb0, 0x00, 0x08, 0xab, 0x00, /*7a: mov    %r14,0xab0800(%rax) */
0x8b, 0x43, 0x48,                         /*81: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*84: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*88: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*8e: mov    %rbx,%rdi */
0x5b,                                     /*91: pop    %rbx */
0x41, 0x5e,                               /*92: pop    %r14 */
0x41, 0x5f,                               /*94: pop    %r15 */
0x5d,                                     /*96: pop    %rbp */

};

static void op_hash_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 13)) = b * 1 + 0;
  *((int32_t *)(op + 20)) = c * 1 + 0;
  *((int32_t *)(op + 125)) = a * 8 + 0;
}

static void op_hash_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_hash_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[1, 0, 5..8]], "b"=>[[1, 0, 10..13]], "c"=>[[1, 0, 15..18]]} */
static uint8_t op_lambda[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*4: mov    $0xab0000,%esi */
0xba, 0x00, 0x00, 0xbc, 0x00,             /*9: mov    $0xbc0000,%edx */
0xb9, 0x00, 0x00, 0xcd, 0x00,             /*e: mov    $0xcd0000,%ecx */
0xff, 0x93, 0x78, 0x01, 0x00, 0x00,       /*13: callq  *0x178(%rbx) */
0x48, 0x89, 0xdf,                         /*19: mov    %rbx,%rdi */
0x5b,                                     /*1c: pop    %rbx */

};

static void op_lambda_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 5)) = a * 1 + 0;
  *((int32_t *)(op + 10)) = b * 1 + 0;
  *((int32_t *)(op + 15)) = c * 1 + 0;
}

static void op_lambda_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_lambda_set_args(op, GETARG_A(c),GETARG_b(c),GETARG_c(c),op_idx);
}


/* args: {"b"=>[[8, 0, 17..20], [8, 8, 24..27]], "c"=>[[1, 0, 29..32]], "a"=>[[8, 0, 42..45]]} */
static uint8_t op_range[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8b, 0xb6, 0x00, 0x08, 0xbc, 0x00, /*e: mov    0xbc0800(%r14),%rsi */
0x49, 0x8b, 0x96, 0x08, 0x08, 0xbc, 0x00, /*15: mov    0xbc0808(%r14),%rdx */
0xb9, 0x00, 0x00, 0xcd, 0x00,             /*1c: mov    $0xcd0000,%ecx */
0xff, 0x93, 0x70, 0x01, 0x00, 0x00,       /*21: callq  *0x170(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*27: mov    %rax,0xab0800(%r14) */
0x8b, 0x43, 0x48,                         /*2e: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*31: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*35: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*3b: mov    %rbx,%rdi */
0x5b,                                     /*3e: pop    %rbx */
0x41, 0x5e,                               /*3f: pop    %r14 */

};

static void op_range_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 8 + 0;
  *((int32_t *)(op + 24)) = b * 8 + 8;
  *((int32_t *)(op + 29)) = c * 1 + 0;
  *((int32_t *)(op + 42)) = a * 8 + 0;
}

static void op_range_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_range_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {"a"=>[[8, 0, 84..87]]} */
static uint8_t op_oclass[] = {
0x4c, 0x8b, 0x47, 0x18,                   /*0: mov    0x18(%rdi),%r8 */
0x48, 0x8b, 0x47, 0x50,                   /*4: mov    0x50(%rdi),%rax */
0x48, 0x8b, 0x48, 0x40,                   /*8: mov    0x40(%rax),%rcx */
0x8b, 0x31,                               /*c: mov    (%rcx),%esi */
0x40, 0x0f, 0xb6, 0xc6,                   /*e: movzbl %sil,%eax */
0xba, 0x04, 0x00, 0x00, 0x00,             /*12: mov    $0x4,%edx */
0x83, 0xf8, 0x05,                         /*17: cmp    $0x5,%eax */
0x77, 0x15,                               /*1a: ja     31 <op_oclass+0x31> */
0xff, 0x24, 0xc5, 0x00, 0x00, 0x00, 0x00, /*1c: jmpq   *0x0(,%rax,8) */
0x48, 0x85, 0xc9,                         /*23: test   %rcx,%rcx */
0x0f, 0x95, 0xc0,                         /*26: setne  %al */
0x0f, 0xb6, 0xd0,                         /*29: movzbl %al,%edx */
0x48, 0x01, 0xd2,                         /*2c: add    %rdx,%rdx */
0xeb, 0x20,                               /*2f: jmp    51 <op_oclass+0x51> */
0x48, 0x85, 0xc9,                         /*31: test   %rcx,%rcx */
0x48, 0x89, 0xca,                         /*34: mov    %rcx,%rdx */
0x74, 0x18,                               /*37: je     51 <op_oclass+0x51> */
0x89, 0x31,                               /*39: mov    %esi,(%rcx) */
0xeb, 0x11,                               /*3b: jmp    4e <op_oclass+0x4e> */
0x48, 0x83, 0xc9, 0x01,                   /*3d: or     $0x1,%rcx */
0xeb, 0x0b,                               /*41: jmp    4e <op_oclass+0x4e> */
0x48, 0x81, 0xe1, 0x00, 0xff, 0xff, 0xff, /*43: and    $0xffffffffffffff00,%rcx */
0x48, 0x83, 0xc9, 0x0e,                   /*4a: or     $0xe,%rcx */
0x48, 0x89, 0xca,                         /*4e: mov    %rcx,%rdx */
0x49, 0x89, 0x90, 0x00, 0x08, 0xab, 0x00, /*51: mov    %rdx,0xab0800(%r8) */
0xeb, 0x07,                               /*58: jmp    61 <next> */
0xba, 0x06, 0x00, 0x00, 0x00,             /*5a: mov    $0x6,%edx */
0xeb, 0xf0,                               /*5f: jmp    51 <op_oclass+0x51> */

};

static void op_oclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 84)) = a * 8 + 0;
}

static void op_oclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_oclass_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"b"=>[[4, 0, 32..35]], "a"=>[[8, 0, 39..42], [8, 8, 46..49], [8, 0, 226..229]]} */
static uint8_t op_class[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0xbb, 0x90, 0x02, 0x00, 0x00, /*4: mov    0x290(%rbx),%rdi */
0x31, 0xc0,                               /*b: xor    %eax,%eax */
0x48, 0x89, 0xde,                         /*d: mov    %rbx,%rsi */
0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*10: callq  *0x168(%rbx) */
0x48, 0x8b, 0x43, 0x18,                   /*16: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*1a: mov    0x28(%rbx),%rcx */
0x8b, 0x89, 0x00, 0x04, 0xbc, 0x00,       /*1e: mov    0xbc0400(%rcx),%ecx */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*24: mov    0xab0800(%rax),%rsi */
0x48, 0x8b, 0x90, 0x08, 0x08, 0xab, 0x00, /*2b: mov    0xab0808(%rax),%rdx */
0x48, 0x85, 0xf6,                         /*32: test   %rsi,%rsi */
0x75, 0x56,                               /*35: jne    8d <op_class+0x8d> */
0x48, 0x8b, 0x43, 0x50,                   /*37: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*3b: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*3f: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x40, 0x48,                   /*43: mov    0x48(%rax),%rax */
0x44, 0x8b, 0x00,                         /*47: mov    (%rax),%r8d */
0x41, 0x0f, 0xb6, 0xf8,                   /*4a: movzbl %r8b,%edi */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*4e: mov    $0x4,%esi */
0x83, 0xff, 0x05,                         /*53: cmp    $0x5,%edi */
0x77, 0x15,                               /*56: ja     6d <op_class+0x6d> */
0xff, 0x24, 0xfd, 0x00, 0x00, 0x00, 0x00, /*58: jmpq   *0x0(,%rdi,8) */
0x48, 0x85, 0xc0,                         /*5f: test   %rax,%rax */
0x0f, 0x95, 0xc0,                         /*62: setne  %al */
0x0f, 0xb6, 0xf0,                         /*65: movzbl %al,%esi */
0x48, 0x01, 0xf6,                         /*68: add    %rsi,%rsi */
0xeb, 0x20,                               /*6b: jmp    8d <op_class+0x8d> */
0x48, 0x85, 0xc0,                         /*6d: test   %rax,%rax */
0x48, 0x89, 0xc6,                         /*70: mov    %rax,%rsi */
0x74, 0x18,                               /*73: je     8d <op_class+0x8d> */
0x44, 0x89, 0x00,                         /*75: mov    %r8d,(%rax) */
0xeb, 0x10,                               /*78: jmp    8a <op_class+0x8a> */
0x48, 0x83, 0xc8, 0x01,                   /*7a: or     $0x1,%rax */
0xeb, 0x0a,                               /*7e: jmp    8a <op_class+0x8a> */
0x48, 0x25, 0x00, 0xff, 0xff, 0xff,       /*80: and    $0xffffffffffffff00,%rax */
0x48, 0x83, 0xc8, 0x0e,                   /*86: or     $0xe,%rax */
0x48, 0x89, 0xc6,                         /*8a: mov    %rax,%rsi */
0x48, 0x8b, 0x7b, 0x50,                   /*8d: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0x80, 0x01, 0x00, 0x00,       /*91: callq  *0x180(%rbx) */
0x48, 0x8b, 0x4b, 0x18,                   /*97: mov    0x18(%rbx),%rcx */
0x8b, 0x30,                               /*9b: mov    (%rax),%esi */
0x40, 0x0f, 0xb6, 0xfe,                   /*9d: movzbl %sil,%edi */
0xba, 0x04, 0x00, 0x00, 0x00,             /*a1: mov    $0x4,%edx */
0x83, 0xff, 0x05,                         /*a6: cmp    $0x5,%edi */
0x77, 0x15,                               /*a9: ja     c0 <op_class+0xc0> */
0xff, 0x24, 0xfd, 0x00, 0x00, 0x00, 0x00, /*ab: jmpq   *0x0(,%rdi,8) */
0x48, 0x85, 0xc0,                         /*b2: test   %rax,%rax */
0x0f, 0x95, 0xc0,                         /*b5: setne  %al */
0x0f, 0xb6, 0xd0,                         /*b8: movzbl %al,%edx */
0x48, 0x01, 0xd2,                         /*bb: add    %rdx,%rdx */
0xeb, 0x1f,                               /*be: jmp    df <op_class+0xdf> */
0x48, 0x85, 0xc0,                         /*c0: test   %rax,%rax */
0x48, 0x89, 0xc2,                         /*c3: mov    %rax,%rdx */
0x74, 0x17,                               /*c6: je     df <op_class+0xdf> */
0x89, 0x30,                               /*c8: mov    %esi,(%rax) */
0xeb, 0x10,                               /*ca: jmp    dc <op_class+0xdc> */
0x48, 0x83, 0xc8, 0x01,                   /*cc: or     $0x1,%rax */
0xeb, 0x0a,                               /*d0: jmp    dc <op_class+0xdc> */
0x48, 0x25, 0x00, 0xff, 0xff, 0xff,       /*d2: and    $0xffffffffffffff00,%rax */
0x48, 0x83, 0xc8, 0x0e,                   /*d8: or     $0xe,%rax */
0x48, 0x89, 0xc2,                         /*dc: mov    %rax,%rdx */
0x48, 0x89, 0x91, 0x00, 0x08, 0xab, 0x00, /*df: mov    %rdx,0xab0800(%rcx) */
0x8b, 0x43, 0x48,                         /*e6: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*e9: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*ed: mov    %eax,0xdc(%rcx) */
0x48, 0x8b, 0xbb, 0x90, 0x02, 0x00, 0x00, /*f3: mov    0x290(%rbx),%rdi */
0x31, 0xc0,                               /*fa: xor    %eax,%eax */
0x48, 0x89, 0xde,                         /*fc: mov    %rbx,%rsi */
0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*ff: callq  *0x168(%rbx) */
0x48, 0x89, 0xdf,                         /*105: mov    %rbx,%rdi */
0x5b,                                     /*108: pop    %rbx */
0xeb, 0x11,                               /*109: jmp    11c <next> */
0xba, 0x06, 0x00, 0x00, 0x00,             /*10b: mov    $0x6,%edx */
0xeb, 0xcd,                               /*110: jmp    df <op_class+0xdf> */
0xbe, 0x06, 0x00, 0x00, 0x00,             /*112: mov    $0x6,%esi */
0xe9, 0x71, 0xff, 0xff, 0xff,             /*117: jmpq   8d <op_class+0x8d> */

};

static void op_class_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 32)) = b * 4 + 0;
  *((int32_t *)(op + 39)) = a * 8 + 0;
  *((int32_t *)(op + 46)) = a * 8 + 8;
  *((int32_t *)(op + 226)) = a * 8 + 0;
}

static void op_class_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_class_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 14..17]], "a"=>[[8, 0, 21..24], [8, 0, 198..201]]} */
static uint8_t op_module[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*4: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*8: mov    0x28(%rbx),%rcx */
0x8b, 0x91, 0x00, 0x04, 0xbc, 0x00,       /*c: mov    0xbc0400(%rcx),%edx */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*12: mov    0xab0800(%rax),%rsi */
0x48, 0x85, 0xf6,                         /*19: test   %rsi,%rsi */
0x75, 0x53,                               /*1c: jne    71 <op_module+0x71> */
0x48, 0x8b, 0x43, 0x50,                   /*1e: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*22: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*26: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x40, 0x48,                   /*2a: mov    0x48(%rax),%rax */
0x8b, 0x08,                               /*2e: mov    (%rax),%ecx */
0x0f, 0xb6, 0xf9,                         /*30: movzbl %cl,%edi */
0xbe, 0x04, 0x00, 0x00, 0x00,             /*33: mov    $0x4,%esi */
0x83, 0xff, 0x05,                         /*38: cmp    $0x5,%edi */
0x77, 0x15,                               /*3b: ja     52 <op_module+0x52> */
0xff, 0x24, 0xfd, 0x00, 0x00, 0x00, 0x00, /*3d: jmpq   *0x0(,%rdi,8) */
0x48, 0x85, 0xc0,                         /*44: test   %rax,%rax */
0x0f, 0x95, 0xc0,                         /*47: setne  %al */
0x0f, 0xb6, 0xf0,                         /*4a: movzbl %al,%esi */
0x48, 0x01, 0xf6,                         /*4d: add    %rsi,%rsi */
0xeb, 0x1f,                               /*50: jmp    71 <op_module+0x71> */
0x48, 0x85, 0xc0,                         /*52: test   %rax,%rax */
0x48, 0x89, 0xc6,                         /*55: mov    %rax,%rsi */
0x74, 0x17,                               /*58: je     71 <op_module+0x71> */
0x89, 0x08,                               /*5a: mov    %ecx,(%rax) */
0xeb, 0x10,                               /*5c: jmp    6e <op_module+0x6e> */
0x48, 0x83, 0xc8, 0x01,                   /*5e: or     $0x1,%rax */
0xeb, 0x0a,                               /*62: jmp    6e <op_module+0x6e> */
0x48, 0x25, 0x00, 0xff, 0xff, 0xff,       /*64: and    $0xffffffffffffff00,%rax */
0x48, 0x83, 0xc8, 0x0e,                   /*6a: or     $0xe,%rax */
0x48, 0x89, 0xc6,                         /*6e: mov    %rax,%rsi */
0x48, 0x8b, 0x7b, 0x50,                   /*71: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0xb0, 0x00, 0x00, 0x00,       /*75: callq  *0xb0(%rbx) */
0x48, 0x8b, 0x4b, 0x18,                   /*7b: mov    0x18(%rbx),%rcx */
0x8b, 0x30,                               /*7f: mov    (%rax),%esi */
0x40, 0x0f, 0xb6, 0xfe,                   /*81: movzbl %sil,%edi */
0xba, 0x04, 0x00, 0x00, 0x00,             /*85: mov    $0x4,%edx */
0x83, 0xff, 0x05,                         /*8a: cmp    $0x5,%edi */
0x77, 0x15,                               /*8d: ja     a4 <op_module+0xa4> */
0xff, 0x24, 0xfd, 0x00, 0x00, 0x00, 0x00, /*8f: jmpq   *0x0(,%rdi,8) */
0x48, 0x85, 0xc0,                         /*96: test   %rax,%rax */
0x0f, 0x95, 0xc0,                         /*99: setne  %al */
0x0f, 0xb6, 0xd0,                         /*9c: movzbl %al,%edx */
0x48, 0x01, 0xd2,                         /*9f: add    %rdx,%rdx */
0xeb, 0x1f,                               /*a2: jmp    c3 <op_module+0xc3> */
0x48, 0x85, 0xc0,                         /*a4: test   %rax,%rax */
0x48, 0x89, 0xc2,                         /*a7: mov    %rax,%rdx */
0x74, 0x17,                               /*aa: je     c3 <op_module+0xc3> */
0x89, 0x30,                               /*ac: mov    %esi,(%rax) */
0xeb, 0x10,                               /*ae: jmp    c0 <op_module+0xc0> */
0x48, 0x83, 0xc8, 0x01,                   /*b0: or     $0x1,%rax */
0xeb, 0x0a,                               /*b4: jmp    c0 <op_module+0xc0> */
0x48, 0x25, 0x00, 0xff, 0xff, 0xff,       /*b6: and    $0xffffffffffffff00,%rax */
0x48, 0x83, 0xc8, 0x0e,                   /*bc: or     $0xe,%rax */
0x48, 0x89, 0xc2,                         /*c0: mov    %rax,%rdx */
0x48, 0x89, 0x91, 0x00, 0x08, 0xab, 0x00, /*c3: mov    %rdx,0xab0800(%rcx) */
0x8b, 0x43, 0x48,                         /*ca: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*cd: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*d1: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*d7: mov    %rbx,%rdi */
0x5b,                                     /*da: pop    %rbx */
0xeb, 0x0e,                               /*db: jmp    eb <next> */
0xba, 0x06, 0x00, 0x00, 0x00,             /*dd: mov    $0x6,%edx */
0xeb, 0xdf,                               /*e2: jmp    c3 <op_module+0xc3> */
0xbe, 0x06, 0x00, 0x00, 0x00,             /*e4: mov    $0x6,%esi */
0xeb, 0x86,                               /*e9: jmp    71 <op_module+0x71> */

};

static void op_module_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 14)) = b * 4 + 0;
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 198)) = a * 8 + 0;
}

static void op_module_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_module_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 21..24], [1, 0, 50..53], [8, 0, 101..104]], "b"=>[[8, 0, 120..123]]} */
static uint8_t op_exec[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x41, 0x54,                               /*4: push   %r12 */
0x53,                                     /*6: push   %rbx */
0x48, 0x89, 0xfb,                         /*7: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x18,                   /*a: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*e: mov    0x50(%rbx),%rdi */
0x4c, 0x8b, 0xb8, 0x00, 0x08, 0xab, 0x00, /*12: mov    0xab0800(%rax),%r15 */
0xff, 0x93, 0xe0, 0x00, 0x00, 0x00,       /*19: callq  *0xe0(%rbx) */
0x49, 0x89, 0xc6,                         /*1f: mov    %rax,%r14 */
0x48, 0x8b, 0x43, 0x10,                   /*22: mov    0x10(%rbx),%rax */
0x48, 0x83, 0xc0, 0x04,                   /*26: add    $0x4,%rax */
0x49, 0x89, 0x46, 0x30,                   /*2a: mov    %rax,0x30(%r14) */
0x41, 0xc7, 0x46, 0x44, 0x00, 0x00, 0xab, 0x00,/*2e: movl   $0xab0000,0x44(%r14) */
0x41, 0xc7, 0x06, 0x00, 0x00, 0x00, 0x00, /*36: movl   $0x0,(%r14) */
0x48, 0x8b, 0x43, 0x50,                   /*3d: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*41: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*45: mov    0x8(%rax),%rax */
0x49, 0x89, 0x46, 0x10,                   /*49: mov    %rax,0x10(%r14) */
0x41, 0xc7, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00,/*4d: movl   $0x0,0x40(%r14) */
0x4d, 0x89, 0x7e, 0x48,                   /*55: mov    %r15,0x48(%r14) */
0x48, 0x8b, 0x43, 0x50,                   /*59: mov    0x50(%rbx),%rax */
0x48, 0x8b, 0x40, 0x18,                   /*5d: mov    0x18(%rax),%rax */
0x48, 0x81, 0x40, 0x08, 0x00, 0x08, 0xab, 0x00,/*61: addq   $0xab0800,0x8(%rax) */
0x48, 0x8b, 0x43, 0x08,                   /*69: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x7b, 0x50,                   /*6d: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x40, 0x20,                   /*71: mov    0x20(%rax),%rax */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*75: mov    0xbc0800(%rax),%rsi */
0xff, 0x93, 0x40, 0x01, 0x00, 0x00,       /*7c: callq  *0x140(%rbx) */
0x49, 0x89, 0xc4,                         /*82: mov    %rax,%r12 */
0x49, 0x8b, 0x46, 0x48,                   /*85: mov    0x48(%r14),%rax */
0x49, 0x89, 0x44, 0x24, 0x20,             /*89: mov    %rax,0x20(%r12) */
0x4d, 0x89, 0x66, 0x08,                   /*8e: mov    %r12,0x8(%r14) */
0x41, 0xf6, 0x44, 0x24, 0x02, 0x04,       /*92: testb  $0x4,0x2(%r12) */
0x74, 0x45,                               /*98: je     df <op_exec+0xdf> */
0x41, 0xc7, 0x46, 0x18, 0x00, 0x00, 0x00, 0x00,/*9a: movl   $0x0,0x18(%r14) */
0x48, 0x8b, 0x7b, 0x50,                   /*a2: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*a6: mov    0x18(%rdi),%rax */
0x4c, 0x8b, 0x70, 0x08,                   /*aa: mov    0x8(%rax),%r14 */
0x4c, 0x89, 0xfe,                         /*ae: mov    %r15,%rsi */
0x41, 0xff, 0x54, 0x24, 0x18,             /*b1: callq  *0x18(%r12) */
0x49, 0x89, 0x06,                         /*b6: mov    %rax,(%r14) */
0x48, 0x8b, 0x7b, 0x50,                   /*b9: mov    0x50(%rbx),%rdi */
0x8b, 0x73, 0x48,                         /*bd: mov    0x48(%rbx),%esi */
0xff, 0x93, 0x08, 0x01, 0x00, 0x00,       /*c0: callq  *0x108(%rbx) */
0x48, 0x8b, 0x43, 0x50,                   /*c6: mov    0x50(%rbx),%rax */
0x48, 0x83, 0x78, 0x28, 0x00,             /*ca: cmpq   $0x0,0x28(%rax) */
0x74, 0x70,                               /*cf: je     141 <op_exec+0x141> */
0x48, 0x89, 0xdf,                         /*d1: mov    %rbx,%rdi */
0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*d4: callq  *0x1a8(%rbx) */
0xe9, 0x80, 0x00, 0x00, 0x00,             /*da: jmpq   15f <op_exec+0x15f> */
0x49, 0x8b, 0x44, 0x24, 0x18,             /*df: mov    0x18(%r12),%rax */
0x48, 0x89, 0x43, 0x08,                   /*e4: mov    %rax,0x8(%rbx) */
0x48, 0x8b, 0x48, 0x10,                   /*e8: mov    0x10(%rax),%rcx */
0x48, 0x89, 0x4b, 0x20,                   /*ec: mov    %rcx,0x20(%rbx) */
0x48, 0x8b, 0x48, 0x18,                   /*f0: mov    0x18(%rax),%rcx */
0x48, 0x89, 0x4b, 0x28,                   /*f4: mov    %rcx,0x28(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*f8: mov    0x50(%rbx),%rdi */
0x0f, 0xb7, 0x70, 0x02,                   /*fc: movzwl 0x2(%rax),%esi */
0xba, 0x01, 0x00, 0x00, 0x00,             /*100: mov    $0x1,%edx */
0xff, 0x93, 0x38, 0x01, 0x00, 0x00,       /*105: callq  *0x138(%rbx) */
0x48, 0x8b, 0x43, 0x08,                   /*10b: mov    0x8(%rbx),%rax */
0x0f, 0xb7, 0x40, 0x02,                   /*10f: movzwl 0x2(%rax),%eax */
0x41, 0x89, 0x46, 0x18,                   /*113: mov    %eax,0x18(%r14) */
0x48, 0x8b, 0x7b, 0x50,                   /*117: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x47, 0x18,                   /*11b: mov    0x18(%rdi),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*11f: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x18,                   /*123: mov    %rax,0x18(%rbx) */
0x48, 0x8b, 0x43, 0x08,                   /*127: mov    0x8(%rbx),%rax */
0x48, 0x8b, 0x40, 0x08,                   /*12b: mov    0x8(%rax),%rax */
0x48, 0x89, 0x43, 0x10,                   /*12f: mov    %rax,0x10(%rbx) */
0x4c, 0x89, 0xe6,                         /*133: mov    %r12,%rsi */
0x48, 0x89, 0xda,                         /*136: mov    %rbx,%rdx */
0xff, 0x93, 0x18, 0x01, 0x00, 0x00,       /*139: callq  *0x118(%rbx) */
0xeb, 0x1e,                               /*13f: jmp    15f <op_exec+0x15f> */
0x48, 0x8b, 0x40, 0x18,                   /*141: mov    0x18(%rax),%rax */
0x48, 0x8b, 0x48, 0x20,                   /*145: mov    0x20(%rax),%rcx */
0x48, 0x8b, 0x49, 0x10,                   /*149: mov    0x10(%rcx),%rcx */
0x48, 0x89, 0x48, 0x08,                   /*14d: mov    %rcx,0x8(%rax) */
0x48, 0x89, 0x4b, 0x18,                   /*151: mov    %rcx,0x18(%rbx) */
0x48, 0x8b, 0x7b, 0x50,                   /*155: mov    0x50(%rbx),%rdi */
0xff, 0x93, 0x58, 0x01, 0x00, 0x00,       /*159: callq  *0x158(%rbx) */
0x48, 0x89, 0xdf,                         /*15f: mov    %rbx,%rdi */
0x5b,                                     /*162: pop    %rbx */
0x41, 0x5c,                               /*163: pop    %r12 */
0x41, 0x5e,                               /*165: pop    %r14 */
0x41, 0x5f,                               /*167: pop    %r15 */

};

static void op_exec_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 21)) = a * 8 + 0;
  *((int32_t *)(op + 50)) = a * 1 + 0;
  *((int32_t *)(op + 101)) = a * 8 + 0;
  *((int32_t *)(op + 120)) = b * 8 + 0;
}

static void op_exec_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_exec_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}


/* args: {"b"=>[[4, 0, 18..21]], "a"=>[[8, 0, 25..28], [8, 8, 32..35]]} */
static uint8_t op_method[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0x7b, 0x50,                   /*4: mov    0x50(%rbx),%rdi */
0x48, 0x8b, 0x43, 0x18,                   /*8: mov    0x18(%rbx),%rax */
0x48, 0x8b, 0x4b, 0x28,                   /*c: mov    0x28(%rbx),%rcx */
0x8b, 0x91, 0x00, 0x04, 0xbc, 0x00,       /*10: mov    0xbc0400(%rcx),%edx */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xab, 0x00, /*16: mov    0xab0800(%rax),%rsi */
0x48, 0x8b, 0x88, 0x08, 0x08, 0xab, 0x00, /*1d: mov    0xab0808(%rax),%rcx */
0xff, 0x93, 0xe8, 0x00, 0x00, 0x00,       /*24: callq  *0xe8(%rbx) */
0x8b, 0x43, 0x48,                         /*2a: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*2d: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*31: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*37: mov    %rbx,%rdi */
0x5b,                                     /*3a: pop    %rbx */

};

static void op_method_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 18)) = b * 4 + 0;
  *((int32_t *)(op + 25)) = a * 8 + 0;
  *((int32_t *)(op + 32)) = a * 8 + 8;
}

static void op_method_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_method_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"b"=>[[8, 0, 17..20]], "a"=>[[8, 0, 30..33]]} */
static uint8_t op_sclass[] = {
0x41, 0x56,                               /*0: push   %r14 */
0x53,                                     /*2: push   %rbx */
0x48, 0x89, 0xfb,                         /*3: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x18,                   /*6: mov    0x18(%rbx),%r14 */
0x48, 0x8b, 0x7b, 0x50,                   /*a: mov    0x50(%rbx),%rdi */
0x49, 0x8b, 0xb6, 0x00, 0x08, 0xbc, 0x00, /*e: mov    0xbc0800(%r14),%rsi */
0xff, 0x93, 0xc0, 0x00, 0x00, 0x00,       /*15: callq  *0xc0(%rbx) */
0x49, 0x89, 0x86, 0x00, 0x08, 0xab, 0x00, /*1b: mov    %rax,0xab0800(%r14) */
0x8b, 0x43, 0x48,                         /*22: mov    0x48(%rbx),%eax */
0x48, 0x8b, 0x4b, 0x50,                   /*25: mov    0x50(%rbx),%rcx */
0x89, 0x81, 0xdc, 0x00, 0x00, 0x00,       /*29: mov    %eax,0xdc(%rcx) */
0x48, 0x89, 0xdf,                         /*2f: mov    %rbx,%rdi */
0x5b,                                     /*32: pop    %rbx */
0x41, 0x5e,                               /*33: pop    %r14 */

};

static void op_sclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 17)) = b * 8 + 0;
  *((int32_t *)(op + 30)) = a * 8 + 0;
}

static void op_sclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_sclass_set_args(op, GETARG_A(c),GETARG_B(c),0,op_idx);
}


/* args: {"a"=>[[8, 0, 148..151]]} */
static uint8_t op_tclass[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
0x4c, 0x8b, 0x73, 0x50,                   /*8: mov    0x50(%rbx),%r14 */
0x49, 0x8b, 0x46, 0x18,                   /*c: mov    0x18(%r14),%rax */
0x48, 0x8b, 0x40, 0x20,                   /*10: mov    0x20(%rax),%rax */
0x48, 0x8b, 0x48, 0x48,                   /*14: mov    0x48(%rax),%rcx */
0x48, 0x85, 0xc9,                         /*18: test   %rcx,%rcx */
0x74, 0x22,                               /*1b: je     3f <op_tclass+0x3f> */
0x48, 0x8b, 0x43, 0x18,                   /*1d: mov    0x18(%rbx),%rax */
0x8b, 0x31,                               /*21: mov    (%rcx),%esi */
0x40, 0x0f, 0xb6, 0xfe,                   /*23: movzbl %sil,%edi */
0xba, 0x04, 0x00, 0x00, 0x00,             /*27: mov    $0x4,%edx */
0x83, 0xff, 0x05,                         /*2c: cmp    $0x5,%edi */
0x77, 0x5b,                               /*2f: ja     8c <op_tclass+0x8c> */
0xff, 0x24, 0xfd, 0x00, 0x00, 0x00, 0x00, /*31: jmpq   *0x0(,%rdi,8) */
0xba, 0x02, 0x00, 0x00, 0x00,             /*38: mov    $0x2,%edx */
0xeb, 0x52,                               /*3d: jmp    91 <op_tclass+0x91> */
0x48, 0x8b, 0x83, 0x90, 0x01, 0x00, 0x00, /*3f: mov    0x190(%rbx),%rax */
0x48, 0x8b, 0x30,                         /*46: mov    (%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*49: mov    %r14,%rdi */
0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*4c: callq  *0x110(%rbx) */
0x49, 0x89, 0xc7,                         /*52: mov    %rax,%r15 */
0x48, 0x8b, 0xb3, 0x98, 0x02, 0x00, 0x00, /*55: mov    0x298(%rbx),%rsi */
0xba, 0x19, 0x00, 0x00, 0x00,             /*5c: mov    $0x19,%edx */
0x4c, 0x89, 0xf7,                         /*61: mov    %r14,%rdi */
0xff, 0x93, 0x80, 0x00, 0x00, 0x00,       /*64: callq  *0x80(%rbx) */
0x4c, 0x89, 0xf7,                         /*6a: mov    %r14,%rdi */
0x4c, 0x89, 0xfe,                         /*6d: mov    %r15,%rsi */
0x48, 0x89, 0xc2,                         /*70: mov    %rax,%rdx */
0xff, 0x93, 0xc0, 0x01, 0x00, 0x00,       /*73: callq  *0x1c0(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*79: mov    0x50(%rbx),%rcx */
0x48, 0x89, 0x41, 0x28,                   /*7d: mov    %rax,0x28(%rcx) */
0x48, 0x89, 0xdf,                         /*81: mov    %rbx,%rdi */
0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*84: callq  *0x1a8(%rbx) */
0xeb, 0x0c,                               /*8a: jmp    98 <op_tclass+0x98> */
0x89, 0x31,                               /*8c: mov    %esi,(%rcx) */
0x48, 0x89, 0xca,                         /*8e: mov    %rcx,%rdx */
0x48, 0x89, 0x90, 0x00, 0x08, 0xab, 0x00, /*91: mov    %rdx,0xab0800(%rax) */
0x48, 0x89, 0xdf,                         /*98: mov    %rbx,%rdi */
0x5b,                                     /*9b: pop    %rbx */
0x41, 0x5e,                               /*9c: pop    %r14 */
0x41, 0x5f,                               /*9e: pop    %r15 */
0xeb, 0x1a,                               /*a0: jmp    bc <next> */
0x48, 0x83, 0xc9, 0x01,                   /*a2: or     $0x1,%rcx */
0xeb, 0xe6,                               /*a6: jmp    8e <op_tclass+0x8e> */
0x48, 0x81, 0xe1, 0x00, 0xff, 0xff, 0xff, /*a8: and    $0xffffffffffffff00,%rcx */
0x48, 0x83, 0xc9, 0x0e,                   /*af: or     $0xe,%rcx */
0xeb, 0xd9,                               /*b3: jmp    8e <op_tclass+0x8e> */
0xba, 0x06, 0x00, 0x00, 0x00,             /*b5: mov    $0x6,%edx */
0xeb, 0xd5,                               /*ba: jmp    91 <op_tclass+0x91> */

};

static void op_tclass_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 148)) = a * 8 + 0;
}

static void op_tclass_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_tclass_set_args(op, GETARG_A(c),0,0,op_idx);
}


/* args: {"a"=>[[1, 0, 12..15]], "b"=>[[1, 0, 17..20]], "c"=>[[1, 0, 22..25]]} */
static uint8_t op_debug[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0x48, 0x8b, 0xbb, 0xa0, 0x02, 0x00, 0x00, /*4: mov    0x2a0(%rbx),%rdi */
0xbe, 0x00, 0x00, 0xab, 0x00,             /*b: mov    $0xab0000,%esi */
0xba, 0x00, 0x00, 0xbc, 0x00,             /*10: mov    $0xbc0000,%edx */
0xb9, 0x00, 0x00, 0xcd, 0x00,             /*15: mov    $0xcd0000,%ecx */
0x31, 0xc0,                               /*1a: xor    %eax,%eax */
0xff, 0x93, 0x68, 0x01, 0x00, 0x00,       /*1c: callq  *0x168(%rbx) */
0x48, 0x89, 0xdf,                         /*22: mov    %rbx,%rdi */
0x5b,                                     /*25: pop    %rbx */

};

static void op_debug_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 12)) = a * 1 + 0;
  *((int32_t *)(op + 17)) = b * 1 + 0;
  *((int32_t *)(op + 22)) = c * 1 + 0;
}

static void op_debug_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_debug_set_args(op, GETARG_A(c),GETARG_B(c),GETARG_C(c),op_idx);
}


/* args: {} */
static uint8_t op_stop[] = {
0x53,                                     /*0: push   %rbx */
0x48, 0x89, 0xfb,                         /*1: mov    %rdi,%rbx */
0xff, 0x93, 0xc8, 0x01, 0x00, 0x00,       /*4: callq  *0x1c8(%rbx) */
0x48, 0x89, 0xdf,                         /*a: mov    %rbx,%rdi */
0x5b,                                     /*d: pop    %rbx */

};

static void op_stop_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
}

static void op_stop_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_stop_set_args(op, 0,0,0,op_idx);
}


/* args: {"b"=>[[8, 0, 19..22]]} */
static uint8_t op_err[] = {
0x41, 0x57,                               /*0: push   %r15 */
0x41, 0x56,                               /*2: push   %r14 */
0x53,                                     /*4: push   %rbx */
0x48, 0x89, 0xfb,                         /*5: mov    %rdi,%rbx */
0x48, 0x8b, 0x43, 0x20,                   /*8: mov    0x20(%rbx),%rax */
0x4c, 0x8b, 0x73, 0x50,                   /*c: mov    0x50(%rbx),%r14 */
0x48, 0x8b, 0xb0, 0x00, 0x08, 0xbc, 0x00, /*10: mov    0xbc0800(%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*17: mov    %r14,%rdi */
0xff, 0x93, 0xd0, 0x01, 0x00, 0x00,       /*1a: callq  *0x1d0(%rbx) */
0x49, 0x89, 0xc7,                         /*20: mov    %rax,%r15 */
0x48, 0x8b, 0x83, 0x50, 0x02, 0x00, 0x00, /*23: mov    0x250(%rbx),%rax */
0x48, 0x8b, 0x30,                         /*2a: mov    (%rax),%rsi */
0x4c, 0x89, 0xf7,                         /*2d: mov    %r14,%rdi */
0xff, 0x93, 0x10, 0x01, 0x00, 0x00,       /*30: callq  *0x110(%rbx) */
0x4c, 0x89, 0xf7,                         /*36: mov    %r14,%rdi */
0x48, 0x89, 0xc6,                         /*39: mov    %rax,%rsi */
0x4c, 0x89, 0xfa,                         /*3c: mov    %r15,%rdx */
0xff, 0x93, 0xc0, 0x01, 0x00, 0x00,       /*3f: callq  *0x1c0(%rbx) */
0x48, 0x8b, 0x4b, 0x50,                   /*45: mov    0x50(%rbx),%rcx */
0x48, 0x89, 0x41, 0x28,                   /*49: mov    %rax,0x28(%rcx) */
0x48, 0x89, 0xdf,                         /*4d: mov    %rbx,%rdi */
0xff, 0x93, 0xa8, 0x01, 0x00, 0x00,       /*50: callq  *0x1a8(%rbx) */
0x48, 0x89, 0xdf,                         /*56: mov    %rbx,%rdi */
0x5b,                                     /*59: pop    %rbx */
0x41, 0x5e,                               /*5a: pop    %r14 */
0x41, 0x5f,                               /*5c: pop    %r15 */

};

static void op_err_set_args(uint8_t *op, uint32_t a, int32_t b, uint8_t c, uint32_t op_idx) {
  *((int32_t *)(op + 19)) = b * 8 + 0;
}

static void op_err_set_args_from_code(uint8_t *op, mrb_code c, uint32_t op_idx) {
  op_err_set_args(op, GETARG_A(c),GETARG_Bx(c),0,op_idx);
}

typedef void (*jit_args_func_t)(uint8_t *op, mrb_code c, uint32_t op_idx);
static jit_args_func_t arg_funcs[78];
uint8_t* ops[78];
static char *op_names[78];

static size_t op_sizes[] = {
  sizeof(op_nop), /* 0 */
  sizeof(op_move), /* 18 */
  sizeof(op_loadl), /* 22 */
  sizeof(op_loadi), /* 51 */
  sizeof(op_loadsym), /* 46 */
  sizeof(op_loadnil), /* 41 */
  sizeof(op_loadself), /* 14 */
  sizeof(op_loadt), /* 52 */
  sizeof(op_loadf), /* 52 */
  sizeof(op_getglobal), /* 43 */
  sizeof(op_setglobal), /* 39 */
  sizeof(op_getspecial), /* 38 */
  sizeof(op_setspecial), /* 34 */
  sizeof(op_getiv), /* 43 */
  sizeof(op_setiv), /* 39 */
  sizeof(op_getcv), /* 83 */
  sizeof(op_setcv), /* 39 */
  sizeof(op_getconst), /* 91 */
  sizeof(op_setconst), /* 39 */
  sizeof(op_getmcnst), /* 102 */
  sizeof(op_setmcnst), /* 46 */
  sizeof(op_getupvar), /* 112 */
  sizeof(op_setupvar), /* 95 */
  sizeof(op_jmp), /* 0 */
  sizeof(op_jmpif), /* 19 */
  sizeof(op_jmpnot), /* 19 */
  sizeof(op_onerr), /* 146 */
  sizeof(op_rescue), /* 177 */
  sizeof(op_poperr), /* 35 */
  sizeof(op_raise), /* 33 */
  sizeof(op_epush), /* 166 */
  sizeof(op_epop), /* 86 */
  sizeof(op_send), /* 112 */
  sizeof(op_sendb), /* 57 */
  sizeof(op_fsend), /* 0 */
  sizeof(op_call), /* 431 */
  sizeof(op_super), /* 666 */
  sizeof(op_argary), /* 716 */
  sizeof(op_enter), /* 1568 */
  sizeof(op_enter_method_m), /* 437 */
  sizeof(op_karg), /* 0 */
  sizeof(op_kdict), /* 0 */
  sizeof(op_return), /* 39 */
  sizeof(op_break), /* 25 */
  sizeof(op_tailcall), /* 696 */
  sizeof(op_blkpush), /* 199 */
  sizeof(op_add), /* 347 */
  sizeof(op_addi), /* 199 */
  sizeof(op_sub), /* 304 */
  sizeof(op_subi), /* 196 */
  sizeof(op_mul), /* 347 */
  sizeof(op_div), /* 266 */
  sizeof(op_eq), /* 368 */
  sizeof(op_lt), /* 324 */
  sizeof(op_le), /* 324 */
  sizeof(op_gt), /* 324 */
  sizeof(op_ge), /* 324 */
  sizeof(op_array), /* 58 */
  sizeof(op_arycat), /* 72 */
  sizeof(op_arypush), /* 36 */
  sizeof(op_aref), /* 124 */
  sizeof(op_aset), /* 41 */
  sizeof(op_apost), /* 449 */
  sizeof(op_string), /* 57 */
  sizeof(op_strcat), /* 36 */
  sizeof(op_hash), /* 151 */
  sizeof(op_lambda), /* 29 */
  sizeof(op_range), /* 65 */
  sizeof(op_oclass), /* 97 */
  sizeof(op_class), /* 284 */
  sizeof(op_module), /* 235 */
  sizeof(op_exec), /* 361 */
  sizeof(op_method), /* 59 */
  sizeof(op_sclass), /* 53 */
  sizeof(op_tclass), /* 188 */
  sizeof(op_debug), /* 38 */
  sizeof(op_stop), /* 14 */
  sizeof(op_err), /* 94 */

};

extern void init_symtbl();
void init_ops() {
  static int init = 0;
  if(init == 0) {
    init = 1;
    init_symtbl();
    ops[0] = op_nop;
    op_names[0] = "op_nop";
    arg_funcs[0] = op_nop_set_args_from_code;
    ops[1] = op_move;
    op_names[1] = "op_move";
    arg_funcs[1] = op_move_set_args_from_code;
    ops[2] = op_loadl;
    op_names[2] = "op_loadl";
    arg_funcs[2] = op_loadl_set_args_from_code;
    ops[3] = op_loadi;
    op_names[3] = "op_loadi";
    arg_funcs[3] = op_loadi_set_args_from_code;
    ops[4] = op_loadsym;
    op_names[4] = "op_loadsym";
    arg_funcs[4] = op_loadsym_set_args_from_code;
    ops[5] = op_loadnil;
    op_names[5] = "op_loadnil";
    arg_funcs[5] = op_loadnil_set_args_from_code;
    ops[6] = op_loadself;
    op_names[6] = "op_loadself";
    arg_funcs[6] = op_loadself_set_args_from_code;
    ops[7] = op_loadt;
    op_names[7] = "op_loadt";
    arg_funcs[7] = op_loadt_set_args_from_code;
    ops[8] = op_loadf;
    op_names[8] = "op_loadf";
    arg_funcs[8] = op_loadf_set_args_from_code;
    ops[9] = op_getglobal;
    op_names[9] = "op_getglobal";
    arg_funcs[9] = op_getglobal_set_args_from_code;
    ops[10] = op_setglobal;
    op_names[10] = "op_setglobal";
    arg_funcs[10] = op_setglobal_set_args_from_code;
    ops[11] = op_getspecial;
    op_names[11] = "op_getspecial";
    arg_funcs[11] = op_getspecial_set_args_from_code;
    ops[12] = op_setspecial;
    op_names[12] = "op_setspecial";
    arg_funcs[12] = op_setspecial_set_args_from_code;
    ops[13] = op_getiv;
    op_names[13] = "op_getiv";
    arg_funcs[13] = op_getiv_set_args_from_code;
    ops[14] = op_setiv;
    op_names[14] = "op_setiv";
    arg_funcs[14] = op_setiv_set_args_from_code;
    ops[15] = op_getcv;
    op_names[15] = "op_getcv";
    arg_funcs[15] = op_getcv_set_args_from_code;
    ops[16] = op_setcv;
    op_names[16] = "op_setcv";
    arg_funcs[16] = op_setcv_set_args_from_code;
    ops[17] = op_getconst;
    op_names[17] = "op_getconst";
    arg_funcs[17] = op_getconst_set_args_from_code;
    ops[18] = op_setconst;
    op_names[18] = "op_setconst";
    arg_funcs[18] = op_setconst_set_args_from_code;
    ops[19] = op_getmcnst;
    op_names[19] = "op_getmcnst";
    arg_funcs[19] = op_getmcnst_set_args_from_code;
    ops[20] = op_setmcnst;
    op_names[20] = "op_setmcnst";
    arg_funcs[20] = op_setmcnst_set_args_from_code;
    ops[21] = op_getupvar;
    op_names[21] = "op_getupvar";
    arg_funcs[21] = op_getupvar_set_args_from_code;
    ops[22] = op_setupvar;
    op_names[22] = "op_setupvar";
    arg_funcs[22] = op_setupvar_set_args_from_code;
    ops[23] = op_jmp;
    op_names[23] = "op_jmp";
    arg_funcs[23] = op_jmp_set_args_from_code;
    ops[24] = op_jmpif;
    op_names[24] = "op_jmpif";
    arg_funcs[24] = op_jmpif_set_args_from_code;
    ops[25] = op_jmpnot;
    op_names[25] = "op_jmpnot";
    arg_funcs[25] = op_jmpnot_set_args_from_code;
    ops[26] = op_onerr;
    op_names[26] = "op_onerr";
    arg_funcs[26] = op_onerr_set_args_from_code;
    ops[27] = op_rescue;
    op_names[27] = "op_rescue";
    arg_funcs[27] = op_rescue_set_args_from_code;
    ops[28] = op_poperr;
    op_names[28] = "op_poperr";
    arg_funcs[28] = op_poperr_set_args_from_code;
    ops[29] = op_raise;
    op_names[29] = "op_raise";
    arg_funcs[29] = op_raise_set_args_from_code;
    ops[30] = op_epush;
    op_names[30] = "op_epush";
    arg_funcs[30] = op_epush_set_args_from_code;
    ops[31] = op_epop;
    op_names[31] = "op_epop";
    arg_funcs[31] = op_epop_set_args_from_code;
    ops[32] = op_send;
    op_names[32] = "op_send";
    arg_funcs[32] = op_send_set_args_from_code;
    ops[33] = op_sendb;
    op_names[33] = "op_sendb";
    arg_funcs[33] = op_sendb_set_args_from_code;
    ops[34] = op_fsend;
    op_names[34] = "op_fsend";
    arg_funcs[34] = op_fsend_set_args_from_code;
    ops[35] = op_call;
    op_names[35] = "op_call";
    arg_funcs[35] = op_call_set_args_from_code;
    ops[36] = op_super;
    op_names[36] = "op_super";
    arg_funcs[36] = op_super_set_args_from_code;
    ops[37] = op_argary;
    op_names[37] = "op_argary";
    arg_funcs[37] = op_argary_set_args_from_code;
    ops[38] = op_enter;
    op_names[38] = "op_enter";
    arg_funcs[38] = op_enter_set_args_from_code;
    ops[39] = op_enter_method_m;
    op_names[39] = "op_enter_method_m";
    arg_funcs[39] = op_enter_method_m_set_args_from_code;
    ops[40] = op_karg;
    op_names[40] = "op_karg";
    arg_funcs[40] = op_karg_set_args_from_code;
    ops[41] = op_kdict;
    op_names[41] = "op_kdict";
    arg_funcs[41] = op_kdict_set_args_from_code;
    ops[42] = op_return;
    op_names[42] = "op_return";
    arg_funcs[42] = op_return_set_args_from_code;
    ops[43] = op_break;
    op_names[43] = "op_break";
    arg_funcs[43] = op_break_set_args_from_code;
    ops[44] = op_tailcall;
    op_names[44] = "op_tailcall";
    arg_funcs[44] = op_tailcall_set_args_from_code;
    ops[45] = op_blkpush;
    op_names[45] = "op_blkpush";
    arg_funcs[45] = op_blkpush_set_args_from_code;
    ops[46] = op_add;
    op_names[46] = "op_add";
    arg_funcs[46] = op_add_set_args_from_code;
    ops[47] = op_addi;
    op_names[47] = "op_addi";
    arg_funcs[47] = op_addi_set_args_from_code;
    ops[48] = op_sub;
    op_names[48] = "op_sub";
    arg_funcs[48] = op_sub_set_args_from_code;
    ops[49] = op_subi;
    op_names[49] = "op_subi";
    arg_funcs[49] = op_subi_set_args_from_code;
    ops[50] = op_mul;
    op_names[50] = "op_mul";
    arg_funcs[50] = op_mul_set_args_from_code;
    ops[51] = op_div;
    op_names[51] = "op_div";
    arg_funcs[51] = op_div_set_args_from_code;
    ops[52] = op_eq;
    op_names[52] = "op_eq";
    arg_funcs[52] = op_eq_set_args_from_code;
    ops[53] = op_lt;
    op_names[53] = "op_lt";
    arg_funcs[53] = op_lt_set_args_from_code;
    ops[54] = op_le;
    op_names[54] = "op_le";
    arg_funcs[54] = op_le_set_args_from_code;
    ops[55] = op_gt;
    op_names[55] = "op_gt";
    arg_funcs[55] = op_gt_set_args_from_code;
    ops[56] = op_ge;
    op_names[56] = "op_ge";
    arg_funcs[56] = op_ge_set_args_from_code;
    ops[57] = op_array;
    op_names[57] = "op_array";
    arg_funcs[57] = op_array_set_args_from_code;
    ops[58] = op_arycat;
    op_names[58] = "op_arycat";
    arg_funcs[58] = op_arycat_set_args_from_code;
    ops[59] = op_arypush;
    op_names[59] = "op_arypush";
    arg_funcs[59] = op_arypush_set_args_from_code;
    ops[60] = op_aref;
    op_names[60] = "op_aref";
    arg_funcs[60] = op_aref_set_args_from_code;
    ops[61] = op_aset;
    op_names[61] = "op_aset";
    arg_funcs[61] = op_aset_set_args_from_code;
    ops[62] = op_apost;
    op_names[62] = "op_apost";
    arg_funcs[62] = op_apost_set_args_from_code;
    ops[63] = op_string;
    op_names[63] = "op_string";
    arg_funcs[63] = op_string_set_args_from_code;
    ops[64] = op_strcat;
    op_names[64] = "op_strcat";
    arg_funcs[64] = op_strcat_set_args_from_code;
    ops[65] = op_hash;
    op_names[65] = "op_hash";
    arg_funcs[65] = op_hash_set_args_from_code;
    ops[66] = op_lambda;
    op_names[66] = "op_lambda";
    arg_funcs[66] = op_lambda_set_args_from_code;
    ops[67] = op_range;
    op_names[67] = "op_range";
    arg_funcs[67] = op_range_set_args_from_code;
    ops[68] = op_oclass;
    op_names[68] = "op_oclass";
    arg_funcs[68] = op_oclass_set_args_from_code;
    ops[69] = op_class;
    op_names[69] = "op_class";
    arg_funcs[69] = op_class_set_args_from_code;
    ops[70] = op_module;
    op_names[70] = "op_module";
    arg_funcs[70] = op_module_set_args_from_code;
    ops[71] = op_exec;
    op_names[71] = "op_exec";
    arg_funcs[71] = op_exec_set_args_from_code;
    ops[72] = op_method;
    op_names[72] = "op_method";
    arg_funcs[72] = op_method_set_args_from_code;
    ops[73] = op_sclass;
    op_names[73] = "op_sclass";
    arg_funcs[73] = op_sclass_set_args_from_code;
    ops[74] = op_tclass;
    op_names[74] = "op_tclass";
    arg_funcs[74] = op_tclass_set_args_from_code;
    ops[75] = op_debug;
    op_names[75] = "op_debug";
    arg_funcs[75] = op_debug_set_args_from_code;
    ops[76] = op_stop;
    op_names[76] = "op_stop";
    arg_funcs[76] = op_stop_set_args_from_code;
    ops[77] = op_err;
    op_names[77] = "op_err";
    arg_funcs[77] = op_err_set_args_from_code;
  }
}

uint8_t *jit_return(uint8_t *b) {
  *b++ = 0xc3;
  return b;
}
uint8_t *jit_jump(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 235;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *b++ = 233;
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
uint8_t *jit_jump_if(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 116;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *((uint16_t *)(b)) = (uint16_t) -31729;
    b += sizeof(uint16_t);
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
uint8_t *jit_jump_not(uint8_t *b, int32_t n, int force_rel16) {
  if(n >= -128 && n < 127 && !force_rel16) {
    *b++ = 117;
    *b++ = (int8_t) n;
    return b;
  }
  else {
    *((uint16_t *)(b)) = (uint16_t) -31473;
    b += sizeof(uint16_t);
    *((int32_t *)(b)) = (int32_t) n;
    b += sizeof(int32_t);
    return b;
  }
  return NULL;
}
